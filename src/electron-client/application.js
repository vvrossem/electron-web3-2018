!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,n){if(!x[e]||!y[e])return;for(var t in y[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(m[t]=n[t]);0==--b&&0===g&&_()}(e,t),n&&n(e,t)};var t,r=!0,o="c73364192563e5cdb254",a=1e4,i={},l=[],s=[];function c(e){var n=P[e];if(!n)return O;var r=function(r){return n.hot.active?(P[r]?-1===P[r].parents.indexOf(e)&&P[r].parents.push(e):(l=[e],t=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),l=[]),O(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(n){O[e]=n}}};for(var a in O)Object.prototype.hasOwnProperty.call(O,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===d&&f("prepare"),g++,O.e(e).then(n,function(e){throw n(),e});function n(){g--,"prepare"===d&&(v[e]||E(e),0===g&&0===b&&_())}},r.t=function(e,n){return 1&n&&(e=r(e)),O.t(e,-2&n)},r}var u=[],d="idle";function f(e){d=e;for(var n=0;n<u.length;n++)u[n].call(null,e)}var p,m,h,b=0,g=0,v={},y={},x={};function w(e){return+e+""===e?+e:e}function k(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,f("check"),(n=a,n=n||1e4,new Promise(function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,a=O.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=n,r.send(null)}catch(e){return t(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+a+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(e){return void t(e)}e(n)}}})).then(function(e){if(!e)return f("idle"),null;y={},v={},x=e.c,h=e.h,f("prepare");var n=new Promise(function(e,n){p={resolve:e,reject:n}});m={};return E(0),"prepare"===d&&0===g&&0===b&&_(),n});var n}function E(e){x[e]?(y[e]=!0,b++,function(e){var n=document.getElementsByTagName("head")[0],t=document.createElement("script");t.charset="utf-8",t.src=O.p+""+e+"."+o+".hot-update.js",n.appendChild(t)}(e)):v[e]=!0}function _(){f("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return C(r)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var t in m)Object.prototype.hasOwnProperty.call(m,t)&&n.push(w(t));e.resolve(n)}}function C(n){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var t,r,a,s,c;function u(e){for(var n=[e],t={},r=n.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((s=P[a])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(s.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var l=0;l<s.parents.length;l++){var c=s.parents[l],u=P[c];if(u){if(u.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([c]),moduleId:a,parentId:c};-1===n.indexOf(c)&&(u.hot._acceptedDependencies[a]?(t[c]||(t[c]=[]),p(t[c],[a])):(delete t[c],n.push(c),r.push({chain:i.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function p(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}n=n||{};var b={},g=[],v={},y=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var k in m)if(Object.prototype.hasOwnProperty.call(m,k)){var E;c=w(k);var _=!1,C=!1,T=!1,N="";switch((E=m[k]?u(c):{type:"disposed",moduleId:k}).chain&&(N="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":n.onDeclined&&n.onDeclined(E),n.ignoreDeclined||(_=new Error("Aborted because of self decline: "+E.moduleId+N));break;case"declined":n.onDeclined&&n.onDeclined(E),n.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+N));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(E),n.ignoreUnaccepted||(_=new Error("Aborted because "+c+" is not accepted"+N));break;case"accepted":n.onAccepted&&n.onAccepted(E),C=!0;break;case"disposed":n.onDisposed&&n.onDisposed(E),T=!0;break;default:throw new Error("Unexception type "+E.type)}if(_)return f("abort"),Promise.reject(_);if(C)for(c in v[c]=m[c],p(g,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,c)&&(b[c]||(b[c]=[]),p(b[c],E.outdatedDependencies[c]));T&&(p(g,[E.moduleId]),v[c]=y)}var S,j=[];for(r=0;r<g.length;r++)c=g[r],P[c]&&P[c].hot._selfAccepted&&j.push({module:c,errorHandler:P[c].hot._selfAccepted});f("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var M,R,z=g.slice();z.length>0;)if(c=z.pop(),s=P[c]){var A={},I=s.hot._disposeHandlers;for(a=0;a<I.length;a++)(t=I[a])(A);for(i[c]=A,s.hot.active=!1,delete P[c],delete b[c],a=0;a<s.children.length;a++){var D=P[s.children[a]];D&&((S=D.parents.indexOf(c))>=0&&D.parents.splice(S,1))}}for(c in b)if(Object.prototype.hasOwnProperty.call(b,c)&&(s=P[c]))for(R=b[c],a=0;a<R.length;a++)M=R[a],(S=s.children.indexOf(M))>=0&&s.children.splice(S,1);for(c in f("apply"),o=h,v)Object.prototype.hasOwnProperty.call(v,c)&&(e[c]=v[c]);var U=null;for(c in b)if(Object.prototype.hasOwnProperty.call(b,c)&&(s=P[c])){R=b[c];var L=[];for(r=0;r<R.length;r++)if(M=R[r],t=s.hot._acceptedDependencies[M]){if(-1!==L.indexOf(t))continue;L.push(t)}for(r=0;r<L.length;r++){t=L[r];try{t(R)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:c,dependencyId:R[r],error:e}),n.ignoreErrored||U||(U=e)}}}for(r=0;r<j.length;r++){var F=j[r];c=F.module,l=[c];try{O(c)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:t,originalError:e}),n.ignoreErrored||U||(U=t),U||(U=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:c,error:e}),n.ignoreErrored||U||(U=e)}}return U?(f("fail"),Promise.reject(U)):(f("idle"),new Promise(function(e){e(g)}))}var P={};function O(n){if(P[n])return P[n].exports;var r=P[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:k,apply:C,status:function(e){if(!e)return d;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var n=u.indexOf(e);n>=0&&u.splice(n,1)},data:i[e]};return t=void 0,n}(n),parents:(s=l,l=[],s),children:[]};return e[n].call(r.exports,r,r.exports,c(n)),r.l=!0,r.exports}O.m=e,O.c=P,O.d=function(e,n,t){O.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},O.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},O.t=function(e,n){if(1&n&&(e=O(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(O.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)O.d(t,r,function(n){return e[n]}.bind(null,r));return t},O.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(n,"a",n),n},O.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},O.p="/",O.h=function(){return o},c(129)(O.s=129)}([function(e,n,t){"use strict";e.exports=t(130)},function(e,n,t){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var t={}.hasOwnProperty;function o(){for(var e=[],n=0;n<arguments.length;n++){var r=arguments[n];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)t.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(n,[]))||(e.exports=r)}()},function(e,n,t){e.exports=t(135)()},function(e,n){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,n,t){"use strict";var r=function(){};e.exports=r},function(e,n,t){"use strict";e.exports=function(e,n,t,r,o,a,i,l){if(!e){var s;if(void 0===n)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[t,r,o,a,i,l],u=0;(s=new Error(n.replace(/%s/g,function(){return c[u++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,n,t){"use strict";t.r(n),function(e){t.d(n,"flush",function(){return i}),t.d(n,"hydrate",function(){return l}),t.d(n,"cx",function(){return s}),t.d(n,"merge",function(){return c}),t.d(n,"getRegisteredStyles",function(){return u}),t.d(n,"injectGlobal",function(){return d}),t.d(n,"keyframes",function(){return f}),t.d(n,"css",function(){return p}),t.d(n,"sheet",function(){return m}),t.d(n,"caches",function(){return h});var r=t(128),o=void 0!==e?e:{},a=Object(r.a)(o),i=a.flush,l=a.hydrate,s=a.cx,c=a.merge,u=a.getRegisteredStyles,d=a.injectGlobal,f=a.keyframes,p=a.css,m=a.sheet,h=a.caches}.call(this,t(69))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(233)),o=i(t(236)),a=(i(t(116)),i(t(117)),i(t(238)));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){return(0,r.default)(function(n,t){return!(0,o.default)((0,a.default)(t,e),(0,a.default)(n,e))})}},function(e,n,t){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(131)},function(e,n){function t(){return e.exports=t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},t.apply(this,arguments)}e.exports=t},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n,t){return 2===arguments.length?c(e,n):c({consumers:e,mapToProps:n},t)};var r=a(t(0)),o=a(t(36));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var l=function(e){var n="string"==typeof e?e:e.name||e.displayName;return n?"ContextTransform("+n+")":"ContextTransform"},s=function(e){return e.Consumer||e};function c(e,n){var t=e.consumers,a=e.mapToProps,c=e.displayName,u=e.forwardRefAs,d=void 0===u?"ref":u,f=t;Array.isArray(t)||(f=[t]);var p=s(f[0]);var m=1===f.length?function(e,t){var o,l=i(((o={})[d]=t,o),e);return r.default.createElement(p,null,function(t){return r.default.createElement(n,i({},l,a(t,e)))})}:function(e,t){var o,l=i(((o={})[d]=t,o),e);return f.reduceRight(function(e,n){return function(){for(var t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];var i=s(n);return r.default.createElement(i,null,function(n){return e.apply(void 0,o.concat([n]))})}},function(){for(var t=arguments.length,o=new Array(t),s=0;s<t;s++)o[s]=arguments[s];return r.default.createElement(n,i({},l,a.apply(void 0,o.concat([e]))))})()};return(0,o.default)(m,{displayName:c||l(n)})}},function(e,n,t){"use strict";n.__esModule=!0,n.default=function e(n,t,i){void 0===i&&(i=[]);var s=n.displayName||n.name||"Component";var c=o.canAcceptRef(n);var u=Object.keys(t);var d=u.map(o.defaultKey);!c&&i.length&&invariant(!1);var f=function(e){var a,s;function c(){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(n=e.call.apply(e,[this].concat(o))||this).handlers=Object.create(null),u.forEach(function(e){var r=t[e];n.handlers[r]=function(t){if(n.props[r]){var o;n._notifying=!0;for(var a=arguments.length,i=new Array(a>1?a-1:0),l=1;l<a;l++)i[l-1]=arguments[l];(o=n.props)[r].apply(o,[t].concat(i)),n._notifying=!1}n._values[e]=t,n.unmounted||n.forceUpdate()}}),i.length&&(n.attachRef=function(e){n.inner=e}),n}s=e,(a=c).prototype.__proto__=s&&s.prototype,a.__proto__=s;var f=c.prototype;return f.shouldComponentUpdate=function(){return!this._notifying},f.componentWillMount=function(){var e=this,n=this.props;this._values=Object.create(null),u.forEach(function(t){e._values[t]=n[o.defaultKey(t)]})},f.componentWillReceiveProps=function(e){var n=this,t=this.props;u.forEach(function(r){!o.isProp(e,r)&&o.isProp(t,r)&&(n._values[r]=e[o.defaultKey(r)])})},f.componentWillUnmount=function(){this.unmounted=!0},f.render=function(){var e=this,t=this.props,o=t.innerRef,a=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(t,["innerRef"]);d.forEach(function(e){delete a[e]});var i={};return u.forEach(function(n){var t=e.props[n];i[n]=void 0!==t?t:e._values[n]}),r.default.createElement(n,l({},a,i,this.handlers,{ref:o||this.attachRef}))},c}(r.default.Component);f.displayName="Uncontrolled("+s+")";f.propTypes=l({innerRef:function(){}},o.uncontrolledPropTypes(t,s));i.forEach(function(e){f.prototype[e]=function(){var n;return(n=this.inner)[e].apply(n,arguments)}});var p=f;r.default.forwardRef&&((p=r.default.forwardRef(function(e,n){return r.default.createElement(f,l({},e,{innerRef:n,__source:{fileName:a,lineNumber:127},__self:this}))})).propTypes=f.propTypes);p.ControlledComponent=n;p.deferControlTo=function(n,r,o){return void 0===r&&(r={}),e(n,l({},t,r),o)};return p};var r=i(t(0)),o=(i(t(5)),function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};r.get||r.set?Object.defineProperty(n,t,r):n[t]=e[t]}return n.default=e,n}(t(140))),a="src/index.js";function i(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}e.exports=n.default},function(e,n,t){"use strict";e.exports=function(){}},function(e,n){e.exports=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.createBootstrapComponent=function(e,n){"string"==typeof n&&(n={prefix:n});var t=e.prototype&&e.prototype.isReactComponent,r=n,a=r.prefix,s=r.forwardRefAs,c=void 0===s?t?"ref":"innerRef":s;return(0,i.default)(function(n,t){var r=(0,o.default)({},n);return r[c]=t,l.default.createElement(u,null,function(n){return l.default.createElement(e,(0,o.default)({},r,{bsPrefix:r.bsPrefix||n.get(a)||a}))})},{displayName:"Bootstrap("+(e.displayName||e.name)+")"})},n.default=n.ThemeConsumer=void 0;var o=r(t(9)),a=r(t(16)),i=r(t(36)),l=r(t(0)),s=l.default.createContext(new Map),c=s.Provider,u=s.Consumer;n.ThemeConsumer=u;var d=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).prefixes=new Map,Object.keys(n.props.prefixes).forEach(function(e){n.prefixes.set(e,n.props.prefixes[e])}),n}return(0,a.default)(n,e),n.prototype.render=function(){return l.default.createElement(c,{value:this.prefixes},this.props.children)},n}(l.default.Component);n.default=d},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n){var t,a="#"===n[0],i="."===n[0],l=a||i?n.slice(1):n;if(r.test(l))return a?(e=e.getElementById?e:document,(t=e.getElementById(l))?[t]:[]):e.getElementsByClassName&&i?o(e.getElementsByClassName(l)):o(e.getElementsByTagName(n));return o(e.querySelectorAll(n))};var r=/^[\w-]*$/,o=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=n.default},function(e,n){e.exports=function(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);n.default=r,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e,n,t){var r="",u="",d=n;if("string"==typeof n){if(void 0===t)return e.style[(0,o.default)(n)]||(0,i.default)(e).getPropertyValue((0,a.default)(n));(d={})[n]=t}Object.keys(d).forEach(function(n){var t=d[n];t||0===t?(0,c.default)(n)?u+=n+"("+t+") ":r+=(0,a.default)(n)+": "+t+";":(0,l.default)(e,(0,a.default)(n))}),u&&(r+=s.transform+": "+u+";");e.style.cssText+=";"+r};var o=r(t(87)),a=r(t(143)),i=r(t(145)),l=r(t(146)),s=t(56),c=r(t(147));e.exports=n.default},function(e,n,t){"use strict";function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}function a(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}t.r(n);var i=t(1),l=t.n(i),s=t(0),c=t.n(s),u=t(11),d=t.n(u),f=function(e){return c.a.forwardRef(function(n,t){return c.a.createElement("div",r({},n,{ref:t,className:l()(n.className,e)}))})},p=t(51),m=t.n(p),h=t(36),b=t.n(h),g=c.a.createContext(new Map),v=g.Provider,y=g.Consumer;function x(e,n){"string"==typeof n&&(n={prefix:n});var t=e.prototype&&e.prototype.isReactComponent,o=n,a=o.prefix,i=o.forwardRefAs,l=void 0===i?t?"ref":"innerRef":i;return b()(function(n,t){var o=r({},n);return o[l]=t,c.a.createElement(y,null,function(n){return c.a.createElement(e,r({},o,{bsPrefix:o.bsPrefix||n.get(a)||a}))})},{displayName:"Bootstrap("+(e.displayName||e.name)+")"})}var w=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).prefixes=new Map,Object.keys(n.props.prefixes).forEach(function(e){n.prefixes.set(e,n.props.prefixes[e])}),n}return a(n,e),n.prototype.render=function(){return c.a.createElement(v,{value:this.prefixes},this.props.children)},n}(c.a.Component),k=function(e){return e[0].toUpperCase()+m()(e).slice(1)};function E(e,n){var t,i,s=void 0===n?{}:n,u=s.displayName,d=void 0===u?k(e):u,f=s.Component,p=void 0===f?"div":f,m=s.defaultProps;return x((i=t=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.className,t=e.bsPrefix,a=e.as,i=void 0===a?p:a,s=o(e,["className","bsPrefix","as"]);return c.a.createElement(i,r({},m,s,{className:l()(n,t)}))},n}(c.a.Component),t.displayName=d,i),e)}var _,C=t(20),P=t.n(C),O=t(44),T=t.n(O);function N(e){e.offsetHeight}var S=((_={})[C.ENTERING]="show",_[C.ENTERED]="show",_),j=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleEnter=function(e){N(e),n.props.onEnter&&n.props.onEnter(e)},n}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.className,t=e.children,a=o(e,["className","children"]);return c.a.createElement(P.a,r({addEndListener:T.a},a,{onEnter:this.handleEnter}),function(e,o){return c.a.cloneElement(t,r({},o,{className:l()("fade",n,t.props.className,S[e])}))})},n}(c.a.Component);j.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1};var M=j,R=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.label,t=e.onClick;return c.a.createElement("button",{type:"button",className:"close",onClick:t},c.a.createElement("span",{"aria-hidden":"true"},"×"),c.a.createElement("span",{className:"sr-only"},n))},n}(c.a.Component);R.defaultProps={label:"Close"};var z=R;function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var I=function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return n.filter(function(e){return null!=e}).reduce(function(e,n){if("function"!=typeof n)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?n:function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];e.apply(this,r),n.apply(this,r)}},null)};function D(e){return!e||"#"===e.trim()}var U=function(e){function n(n,t){var r;return(r=e.call(this,n,t)||this).handleClick=r.handleClick.bind(A(A(r))),r.handleKeyDown=r.handleKeyDown.bind(A(A(r))),r}a(n,e);var t=n.prototype;return t.handleClick=function(e){var n=this.props,t=n.disabled,r=n.href,o=n.onClick;(t||D(r))&&e.preventDefault(),t?e.stopPropagation():o&&o(e)},t.handleKeyDown=function(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},t.render=function(){var e=this.props,n=e.as,t=e.disabled,a=e.onKeyDown,i=e.innerRef,l=o(e,["as","disabled","onKeyDown","innerRef"]);return D(l.href)&&(l.role=l.role||"button",l.href=l.href||"#"),t&&(l.tabIndex=-1,l["aria-disabled"]=!0),i&&(l.ref=i),c.a.createElement(n,r({},l,{onClick:this.handleClick,onKeyDown:I(this.handleKeyDown,a)}))},n}(c.a.Component);U.defaultProps={as:"a"};var L=U,F=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleClose=function(e){n.props.onClose(!1,e)},n}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.show,a=e.closeLabel,i=e.className,s=e.children,u=e.variant,d=e.dismissible,f=e.transition,p=(e.onClose,o(e,["bsPrefix","show","closeLabel","className","children","variant","dismissible","transition","onClose"])),m=c.a.createElement("div",r({role:"alert"},f?p:void 0,{className:l()(i,n,u&&n+"-"+u,d&&n+"-dismissible")}),d&&c.a.createElement(z,{onClick:this.handleClose,label:a}),s);return f?c.a.createElement(f,r({unmountOnExit:!0},p,{in:t}),m):t?m:null},n}(c.a.Component);F.defaultProps={show:!0,transition:M,closeLabel:"Close alert"};var B=d()(x(F,"alert"),{show:"onClose"}),H=f("h4");B.Link=E("alert-link",{Component:L}),B.Heading=E("alert-heading",{Component:H});var W=B,K=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.variant,a=e.pill,i=e.className,s=o(e,["bsPrefix","variant","pill","className"]);return c.a.createElement("span",r({},s,{className:l()(i,n,a&&n+"-pill",t&&n+"-"+t)}))},n}(c.a.Component);K.defaultProps={pill:!1};var V=x(K,"badge"),$=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.active,a=e.className,i=e.as,s=o(e,["bsPrefix","active","className","as"]),u=s.href,d=s.title,f=s.target,p=o(s,["href","title","target"]),m={href:u,title:d,target:f};return c.a.createElement(i,{className:l()(n,a,{active:t}),"aria-current":t?"page":void 0},t?c.a.createElement("span",r({},p,{className:l()({active:t})})):c.a.createElement(L,r({},p,m)))},n}(c.a.Component);$.defaultProps={active:!1,as:"li"};var q=x($,"breadcrumb-item"),Y=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.listProps,i=e.children,s=e.label,u=e.as,d=o(e,["bsPrefix","className","listProps","children","label","as"]);return c.a.createElement(u,r({"aria-label":s,className:t},d),c.a.createElement("ol",r({role:"navigation"},a,{className:l()(n,a.className)}),i))},n}(c.a.Component);Y.defaultProps={label:"breadcrumb",listProps:{},as:"nav"};var G=x(Y,"breadcrumb");G.Item=q;var X=G,Q=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.variant,a=e.size,i=e.active,s=e.className,u=e.block,d=e.type,f=e.as,p=e.innerRef,m=o(e,["bsPrefix","variant","size","active","className","block","type","as","innerRef"]),h=l()(s,n,i&&"active",n+"-"+t,u&&n+"-block",a&&n+"-"+a);if(m.href)return c.a.createElement(L,r({},m,{as:f,innerRef:p,className:l()(h,m.disabled&&"disabled")}));var b=f||"button";return p&&(m.ref=p),c.a.createElement(b,r({},m,{type:d,className:h}))},n}(c.a.Component);Q.defaultProps={variant:"primary",active:!1,disabled:!1,type:"button"};var J=x(Q,{prefix:"btn",forwardRefAs:"innerRef"}),Z=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.size,a=e.toggle,i=e.vertical,s=e.className,u=e.as,d=o(e,["bsPrefix","size","toggle","vertical","className","as"]),f=n;return i&&(f=n+"-vertical"),c.a.createElement(u,r({},d,{className:l()(s,f,t&&n+"-"+t,a&&n+"-toggle")}))},n}(c.a.Component);Z.defaultProps={vertical:!1,toggle:!1,role:"group",as:"div"};var ee=x(Z,"btn-group"),ne=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=o(e,["bsPrefix","className"]);return c.a.createElement("div",r({},a,{className:l()(t,n)}))},n}(c.a.Component);ne.defaultProps={role:"toolbar"};var te=x(ne,"btn-toolbar"),re=c.a.createContext(null),oe=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.variant,i=e.as,s=o(e,["bsPrefix","className","variant","as"]),u=a?n+"-"+a:n;return c.a.createElement(i,r({className:l()(u,t)},s))},n}(c.a.Component);oe.defaultProps={as:"img",variant:null};var ae=x(oe,"card-img"),ie=E("card-body"),le=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).state={},n}return a(n,e),n.getDerivedStateFromProps=function(e){return{cardContext:{cardHeaderBsPrefix:e.bsPrefix+"-header"}}},n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.as,i=e.bg,s=e.text,u=e.border,d=e.body,f=e.children,p=o(e,["bsPrefix","className","as","bg","text","border","body","children"]),m=l()(t,n,i&&"bg-"+i,s&&"text-"+s,u&&"border-"+u);return c.a.createElement(re.Provider,{value:this.state.cardContext},c.a.createElement(a,r({className:m},p),d?c.a.createElement(ie,null,f):f))},n}(c.a.Component);le.defaultProps={as:"div",body:!1};var se=f("h5"),ce=f("h6"),ue=x(le,"card");ue.Img=ae,ue.Title=E("card-title",{Component:se}),ue.Subtitle=E("card-subtitle",{Component:ce}),ue.Body=ie,ue.Link=E("card-link",{Component:"a"}),ue.Text=E("card-text",{Component:"p"}),ue.Header=E("card-header"),ue.Footer=E("card-footer"),ue.ImgOverlay=E("card-img-overlay");var de=ue,fe=E("card-columns"),pe=E("card-deck"),me=E("card-group"),he=t(18),be=t.n(he),ge=t(122),ve=t.n(ge),ye=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.className,a=e.bsPrefix,i=o(e,["as","className","bsPrefix"]);return c.a.createElement(n,r({},i,{className:l()(t,a)}))},n}(c.a.Component);ye.defaultProps={as:"div"};var xe=x(ye,"carousel-caption"),we=x(function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.children,a=e.className,i=o(e,["bsPrefix","children","className"]);return c.a.createElement("div",r({},i,{className:l()(a,n)}),t)},n}(c.a.Component),"carousel-item");function ke(e,n){var t=0;return c.a.Children.map(e,function(e){return c.a.isValidElement(e)?n(e,t++):e})}function Ee(e,n){var t=0;c.a.Children.forEach(e,function(e){c.a.isValidElement(e)&&n(e,t++)})}var _e=function(e){return c.a.Children.toArray(e).filter(c.a.isValidElement).length},Ce={slide:!0,fade:!1,interval:5e3,keyboard:!0,pauseOnHover:!0,wrap:!0,indicators:!0,controls:!0,activeIndex:0,prevIcon:c.a.createElement("span",{"aria-hidden":"true",className:"carousel-control-prev-icon"}),prevLabel:"Previous",nextIcon:c.a.createElement("span",{"aria-hidden":"true",className:"carousel-control-next-icon"}),nextLabel:"Next"},Pe=function(e){function n(n,t){var r;return(r=e.call(this,n,t)||this).handleSlideEnd=function(){var e=r._pendingIndex;r._isSliding=!1,r._pendingIndex=null,null!=e?r.to(e):r.cycle()},r.handleMouseOut=function(){r.cycle()},r.handleMouseOver=function(){r.props.pauseOnHover&&r.pause()},r.handleKeyDown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.key){case"ArrowLeft":e.preventDefault(),r.handlePrev(e);break;case"ArrowRight":e.preventDefault(),r.handleNext(e)}},r.handleNextWhenVisible=function(){r.isUnmounted||document.hidden||"hidden"===be()(r.carousel.current,"visibility")||r.handleNext()},r.handleNext=function(e){if(!r._isSliding){var n=r.props,t=n.wrap,o=n.activeIndex+1;if(o>_e(r.props.children)-1){if(!t)return;o=0}r.select(o,e,"next")}},r.handlePrev=function(e){if(!r._isSliding){var n=r.props,t=n.wrap,o=n.activeIndex-1;if(o<0){if(!t)return;o=_e(r.props.children)-1}r.select(o,e,"prev")}},r.state={prevClasses:"",currentClasses:"active"},r.isUnmounted=!1,r.carousel=c.a.createRef(),r}a(n,e);var t=n.prototype;return t.componentDidMount=function(){this.cycle()},n.getDerivedStateFromProps=function(e,n){var t=n.activeIndex;if(e.activeIndex!==t){var r=_e(e.children)-1,o=Math.max(0,Math.min(e.activeIndex,r));return{direction:0===o&&t>=r||t<=o?"next":"prev",previousActiveIndex:t,activeIndex:o}}return null},t.componentDidUpdate=function(e,n){var t=this,r=this.props,o=r.bsPrefix;if(r.slide&&this.state.activeIndex!==n.activeIndex&&!this._isSliding){var a,i,s=this.state,c=s.activeIndex,u=s.direction;"next"===u?(a=o+"-item-next",i=o+"-item-left"):"prev"===u&&(a=o+"-item-prev",i=o+"-item-right"),this._isSliding=!0,this.pause(),this.safeSetState({prevClasses:"active",currentClasses:a},function(){var e=t.carousel.current.children[c];N(e),t.safeSetState({prevClasses:l()("active",i),currentClasses:l()(a,i)},function(){return ve.a.end(e,function(){return t.safeSetState({prevClasses:"",currentClasses:"active"},t.handleSlideEnd)})})})}},t.componentWillUnmount=function(){clearTimeout(this.timeout),this.isUnmounted=!0},t.safeSetState=function(e,n){var t=this;this.isUnmounted||this.setState(e,function(){return!t.isUnmounted&&n()})},t.pause=function(){this._isPaused=!0,clearInterval(this._interval),this._interval=null},t.cycle=function(){this._isPaused=!1,clearInterval(this._interval),this._interval=null,this.props.interval&&!this._isPaused&&(this._interval=setInterval(document.visibilityState?this.handleNextWhenVisible:this.handleNext,this.props.interval))},t.to=function(e,n){var t=this.props.children;e<0||e>_e(t)-1||(this._isSliding?this._pendingIndex=e:this.select(e,n))},t.select=function(e,n,t){var r=this;clearTimeout(this.selectThrottle),n&&n.persist&&n.persist(),this.selectThrottle=setTimeout(function(){clearTimeout(r.timeout);var o=r.props,a=o.activeIndex,i=o.onSelect;e===a||r._isSliding||r.isUnmounted||i(e,t||(e<a?"prev":"next"),n)},50)},t.renderControls=function(e){var n=this.props.bsPrefix,t=e.wrap,r=e.children,o=e.activeIndex,a=e.prevIcon,i=e.nextIcon,l=e.prevLabel,s=e.nextLabel,u=_e(r);return[(t||0!==o)&&c.a.createElement(L,{key:"prev",className:n+"-control-prev",onClick:this.handlePrev},a,l&&c.a.createElement("span",{className:"sr-only"},l)),(t||o!==u-1)&&c.a.createElement(L,{key:"next",className:n+"-control-next",onClick:this.handleNext},i,s&&c.a.createElement("span",{className:"sr-only"},s))]},t.renderIndicators=function(e,n){var t=this,r=this.props.bsPrefix,o=[];return Ee(e,function(e,r){o.push(c.a.createElement("li",{key:r,className:r===n?"active":null,onClick:function(e){return t.to(r,e)}})," ")}),c.a.createElement("ol",{className:r+"-indicators"},o)},t.render=function(){var e=this.props,n=e.bsPrefix,t=e.slide,a=e.fade,i=e.indicators,u=e.controls,d=e.wrap,f=e.prevIcon,p=e.prevLabel,m=e.nextIcon,h=e.nextLabel,b=e.className,g=e.children,v=e.keyboard,y=(e.activeIndex,e.pauseOnHover,e.interval,e.onSelect,e.onSlideEnd,o(e,["bsPrefix","slide","fade","indicators","controls","wrap","prevIcon","prevLabel","nextIcon","nextLabel","className","children","keyboard","activeIndex","pauseOnHover","interval","onSelect","onSlideEnd"])),x=this.state,w=x.activeIndex,k=x.previousActiveIndex,E=x.prevClasses,_=x.currentClasses;return c.a.createElement("div",r({},y,{className:l()(b,n,t&&"slide",a&&n+"-fade"),onKeyDown:v?this.handleKeyDown:void 0,onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut}),i&&this.renderIndicators(g,w),c.a.createElement("div",{className:n+"-inner",ref:this.carousel},ke(g,function(e,t){var r=t===w,o=t===k;return Object(s.cloneElement)(e,{className:l()(e.props.className,n+"-item",r&&_,o&&E)})})),u&&this.renderControls({wrap:d,children:g,activeIndex:w,prevIcon:f,prevLabel:p,nextIcon:m,nextLabel:h}))},n}(c.a.Component);Pe.defaultProps=Ce;var Oe=x(d()(Pe,{activeIndex:"onSelect"}),"carousel");Oe.Caption=xe,Oe.Item=we;var Te=Oe,Ne=["xl","lg","md","sm","xs"],Se=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.as,i=o(e,["bsPrefix","className","as"]),s=[],u=[];return Ne.forEach(function(e){var t,r,o,a=i[e];if(delete i[e],null!=a&&"object"==typeof a){var l=a.span;t=void 0===l||l,r=a.offset,o=a.order}else t=a;var c="xs"!==e?"-"+e:"";null!=t&&s.push(!0===t?""+n+c:""+n+c+"-"+t),null!=o&&u.push("order"+c+"-"+o),null!=r&&u.push("offset"+c+"-"+r)}),s.length||s.push(n),c.a.createElement(a,r({},i,{className:l.a.apply(void 0,[t].concat(s,u))}))},n}(c.a.Component);Se.defaultProps={as:"div"};var je,Me=x(Se,"col"),Re={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};var ze=((je={})[C.EXITED]="collapse",je[C.EXITING]="collapsing",je[C.ENTERING]="collapsing",je[C.ENTERED]="collapse show",je),Ae={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,dimension:"height",getDimensionValue:function(e,n){var t=n["offset"+e[0].toUpperCase()+e.slice(1)],r=Re[e];return t+parseInt(be()(n,r[0]),10)+parseInt(be()(n,r[1]),10)}},Ie=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleEnter=function(e){e.style[n.getDimension()]="0"},n.handleEntering=function(e){var t=n.getDimension();e.style[t]=n._getScrollDimensionValue(e,t)},n.handleEntered=function(e){e.style[n.getDimension()]=null},n.handleExit=function(e){var t=n.getDimension();e.style[t]=n.props.getDimensionValue(t,e)+"px",N(e)},n.handleExiting=function(e){e.style[n.getDimension()]="0"},n}a(n,e);var t=n.prototype;return t.getDimension=function(){return"function"==typeof this.props.dimension?this.props.dimension():this.props.dimension},t._getScrollDimensionValue=function(e,n){return e["scroll"+n[0].toUpperCase()+n.slice(1)]+"px"},t.render=function(){var e=this,n=this.props,t=n.onEnter,a=n.onEntering,i=n.onEntered,s=n.onExit,u=n.onExiting,d=n.className,f=n.children,p=o(n,["onEnter","onEntering","onEntered","onExit","onExiting","className","children"]);delete p.dimension,delete p.getDimensionValue;var m=I(this.handleEnter,t),h=I(this.handleEntering,a),b=I(this.handleEntered,i),g=I(this.handleExit,s),v=I(this.handleExiting,u);return c.a.createElement(P.a,r({addEndListener:T.a},p,{"aria-expanded":p.role?p.in:null,onEnter:m,onEntering:h,onEntered:b,onExit:g,onExiting:v}),function(n,t){return c.a.cloneElement(f,r({},t,{className:l()(d,f.props.className,ze[n],"width"===e.getDimension()&&"width")}))})},n}(c.a.Component);Ie.defaultProps=Ae;var De=Ie,Ue=t(10),Le=t.n(Ue),Fe=t(82),Be=t.n(Fe),He=t(8),We=t.n(He),Ke=t(78),Ve=t.n(Ke),$e=c.a.createContext(null),qe=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.alignRight,i=e.rootCloseEvent,s=e.flip,u=e.popperConfig,d=e.show,f=e.as,p=o(e,["bsPrefix","className","alignRight","rootCloseEvent","flip","popperConfig","show","as"]);return c.a.createElement($e.Consumer,null,function(e){return c.a.createElement(Ve.a,{flip:s,show:d,alignEnd:a,usePopper:!e,popperConfig:u,rootCloseEvent:i},function(e){var o=e.placement,a=e.show,i=e.alignEnd,s=e.close,u=e.props;!function(e){var n=e.ref;e.ref=n.__wrapped||(n.__wrapped=function(e){return n(Object(He.findDOMNode)(e))})}(u),"string"!=typeof f&&(u.show=a,u.close=s,u.alignRight=i);var d=p.style;return o&&(d=r({},d,u.style),p["x-placement"]=o),c.a.createElement(f,r({},p,u,{style:d,className:l()(t,n,a&&"show",i&&n+"-right")}))})})},n}(c.a.Component);qe.defaultProps={alignRight:!1,as:"div",flip:!0};var Ye=x(qe,"dropdown-menu"),Ge=(t(50),t(79)),Xe=t.n(Ge),Qe=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.split,a=e.className,i=e.children,s=e.childBsPrefix,u=e.as,d=o(e,["bsPrefix","split","className","children","childBsPrefix","as"]);return c.a.createElement(Xe.a,null,function(e){var o=e.toggle,f=e.props;return c.a.createElement(u,r({onClick:o,bsPrefix:s,className:l()(a,n,t&&n+"-split")},function(e){var n=e.ref;return e.ref=n.__wrapped||(n.__wrapped=function(e){return n(Object(He.findDOMNode)(e))}),e}(f),d),i)})},n}(c.a.Component);Qe.defaultProps={as:J};var Je=x(Qe,"dropdown-toggle"),Ze=c.a.createContext(),en=function(e,n){return null!=e?String(e):n||null},nn=Ze,tn=c.a.createContext(null),rn=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var t=n.props,r=t.disabled,o=t.onSelect,a=t.onClick,i=t.eventKey,l=t.href,s=en(i,l);r||(a&&a(e),o&&o(s,e),null!==s&&n.contextSelect&&n.contextSelect(s,e))},n}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.active,a=e.className,i=e.children,s=(e.eventKey,e.onSelect,e.as),u=o(e,["bsPrefix","active","className","children","eventKey","onSelect","as"]);return c.a.createElement(s,r({},u,{className:l()(a,n,t&&"active",u.disabled&&"disabled"),onClick:this.handleClick}),i)},n}(c.a.Component);rn.defaultProps={as:L,disabled:!1};var on=Le()([nn,tn],function(e,n,t){var r=(n||{}).activeKey,o=en(t.eventKey,t.href);return{onSelect:I(t.onSelect,e),active:null==t.active&&null!=o?en(r)===o:t.active}},x(rn,"dropdown-item")),an=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleSelect=function(e,t){n.props.onSelect&&n.props.onSelect(e,t),n.handleToggle(!1,t,"select")},n.handleToggle=function(e,t,r){void 0===r&&(r=t.type),t.currentTarget===document&&(r="rootClose"),n.props.onToggle(e,t,{source:r})},n}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.drop,a=e.show,i=e.className,s=e.as,u=e.alignRight,d=(e.onSelect,e.onToggle,e.navbar,o(e,["bsPrefix","drop","show","className","as","alignRight","onSelect","onToggle","navbar"]));return delete d.onToggle,c.a.createElement(nn.Provider,{value:this.handleSelect},c.a.createElement(Be.a.ControlledComponent,{drop:t,show:a,alignEnd:u,onToggle:this.handleToggle,itemSelector:"."+n+"-item:not(.disabled):not(:disabled)"},function(e){var o=e.props;return c.a.createElement(s,r({},d,o,{className:l()(i,a&&"show",(!t||"down"===t)&&n,"up"===t&&"dropup","right"===t&&"dropright","left"===t&&"dropleft")}))}))},n}(c.a.Component);an.defaultProps={as:"div",navbar:!1};var ln=x(Be.a.deferControlTo(an),"dropdown"),sn=Le()(nn,function(e,n){return{onSelect:I(n.onSelect,e)}},ln);sn.Toggle=Je,sn.Menu=Ye,sn.Item=on,sn.Header=E("dropdown-header",{defaultProps:{role:"heading"}}),sn.Divider=E("dropdown-divider",{defaultProps:{role:"separator"}});var cn=sn,un=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.title,t=e.children,r=e.bsPrefix,a=e.rootCloseEvent,i=e.variant,l=e.size,s=e.menuRole,u=e.disabled,d=e.href,f=e.id,p=o(e,["title","children","bsPrefix","rootCloseEvent","variant","size","menuRole","disabled","href","id"]);return c.a.createElement(cn,p,c.a.createElement(cn.Toggle,{id:f,href:d,size:l,variant:i,disabled:u,childBsPrefix:r},n),c.a.createElement(cn.Menu,{role:s,rootCloseEvent:a},t))},n}(c.a.Component),dn=t(80),fn=t.n(dn),pn=c.a.createContext({controlId:void 0});pn.Transform=fn()(pn);var mn=pn;function hn(e){var n=e.bsPrefix,t=e.innerRef,a=e.className,i=e.children,s=e.controlId,u=e.as,d=o(e,["bsPrefix","innerRef","className","children","controlId","as"]);return c.a.createElement(mn.Provider,{value:{controlId:s}},c.a.createElement(u,r({},d,{ref:t,className:l()(a,n)}),i))}hn.defaultProps={as:"div"};var bn=x(hn,"form-group"),gn=(t(4),function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.className,a=e.type,i=o(e,["as","className","type"]);return c.a.createElement(n,r({},i,{className:l()(t,a&&a+"-feedback")}))},n}(c.a.Component));gn.defaultProps={type:"valid",as:"div"};var vn=gn,yn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e,n,t=this.props,a=t.bsPrefix,i=t.type,s=t.size,u=t.id,d=t.inputRef,f=t.className,p=t.isValid,m=t.isInvalid,h=t.plaintext,b=t.readOnly,g=t.as,v=o(t,["bsPrefix","type","size","id","inputRef","className","isValid","isInvalid","plaintext","readOnly","as"]);if(h)(n={})[a+"-plaintext"]=!0,e=n;else if("file"===i){var y;(y={})[a+"-file"]=!0,e=y}else{var x;(x={})[a]=!0,x[a+"-"+s]=s,e=x}return c.a.createElement(g,r({},v,{type:i,id:u,ref:d,readOnly:b,className:l()(f,e,p&&"is-valid",m&&"is-invalid")}))},n}(c.a.Component);yn.defaultProps={as:"input"};var xn=Le()(mn,function(e,n){var t=e.controlId;return{id:n.id||t}},x(yn,{prefix:"form-control",forwardRefAs:"inputRef"}));xn.Feedback=vn;var wn=xn;function kn(e){var n=e.id,t=e.bsPrefix,a=e.className,i=e.isValid,s=e.isInvalid,u=e.innerRef,d=e.isStatic,f=o(e,["id","bsPrefix","className","isValid","isInvalid","innerRef","isStatic"]);return c.a.createElement(mn.Consumer,null,function(e){var o=e.controlId,p=e.custom;return c.a.createElement("input",r({},f,{ref:u,id:n||o,className:l()(a,!p&&t,p&&"custom-control-input",i&&"is-valid",s&&"is-invalid",d&&"position-static")}))})}kn.defaultProps={type:"checkbox"};var En=x(kn,"form-check-input");function _n(e){var n=e.bsPrefix,t=e.className,a=e.innerRef,i=e.htmlFor,s=o(e,["bsPrefix","className","innerRef","htmlFor"]);return c.a.createElement(mn.Consumer,null,function(e){var o=e.controlId,u=e.custom;return c.a.createElement("label",r({},s,{ref:a,htmlFor:i||o,className:l()(t,!u&&n,u&&"custom-control-label")}))})}_n.defaultProps={type:"checkbox"};var Cn=x(_n,"form-check-label"),Pn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.id,t=e.bsPrefix,a=e.inline,i=e.disabled,s=e.isValid,u=e.isInvalid,d=e.feedback,f=e.inputRef,p=e.className,m=e.style,h=e.title,b=e.type,g=e.label,v=e.children,y=e.custom,x=o(e,["id","bsPrefix","inline","disabled","isValid","isInvalid","feedback","inputRef","className","style","title","type","label","children","custom"]),w=null!=g&&!1!==g&&!v,k=c.a.createElement(En,r({},x,{type:b,ref:f,isValid:s,isInvalid:u,isStatic:!w,disabled:i}));return c.a.createElement(mn.Transform,{mapToValue:function(e){var t=e.controlId;return{controlId:n||t,custom:y}}},c.a.createElement("div",{style:m,className:l()(p,!y&&t,y&&"custom-control custom-"+b,a&&(y?"custom-control":t)+"-inline")},v||c.a.createElement(c.a.Fragment,null,k,w&&c.a.createElement(Cn,{title:h},g),(s||u)&&c.a.createElement(vn,{type:s?"valid":"invalid"},d))))},n}(c.a.Component);Pn.defaultProps={type:"checkbox",inline:!1,disabled:!1,isValid:!1,isInvalid:!1,title:""};var On=x(Pn,{forwardRefAs:"inputRef",prefix:"form-check"});On.Input=En,On.Label=Cn;var Tn=On;function Nn(e){var n=e.bsPrefix,t=e.column,a=e.srOnly,i=e.className,s=e.innerRef,u=o(e,["bsPrefix","column","srOnly","className","innerRef"]),d=l()(i,n,a&&"sr-only",t&&"col-form-label");return t?c.a.createElement(Me,r({},u,{className:d,as:"label"})):c.a.createElement("label",r({},u,{ref:s,className:d}))}Nn.defaultProps={column:!1,srOnly:!1};var Sn=Le()(mn,function(e,n){var t=e.controlId;return{htmlFor:n.htmlFor||t}},x(Nn,"form-label"));function jn(e){var n=e.bsPrefix,t=e.className,a=e.innerRef,i=e.as,s=o(e,["bsPrefix","className","innerRef","as"]);return c.a.createElement(i,r({},s,{ref:a,className:l()(t,n)}))}jn.defaultProps={as:"small"};var Mn=x(jn,"form-text");function Rn(e){var n=e.bsPrefix,t=e.inline,a=e.className,i=e.innerRef,s=e.validated,u=e.as,d=o(e,["bsPrefix","inline","className","innerRef","validated","as"]);return c.a.createElement(u,r({},d,{ref:i,className:l()(a,s&&"was-validated",t&&n+"-inline")}))}Rn.defaultProps={inline:!1,as:"form"};var zn=x(Rn,"form");zn.Row=E("form-row"),zn.Group=bn,zn.Control=wn,zn.Check=Tn,zn.Label=Sn,zn.Text=Mn;var An=zn,In=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.fluid,a=e.as,i=e.className,s=o(e,["bsPrefix","fluid","as","className"]);return c.a.createElement(a,r({},s,{className:l()(i,t?n+"-fluid":n)}))},n}(c.a.Component);In.defaultProps={as:"div",fluid:!1};var Dn=x(In,"container"),Un=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.fluid,i=e.rounded,s=e.roundedCircle,u=e.thumbnail,d=o(e,["bsPrefix","className","fluid","rounded","roundedCircle","thumbnail"]),f=l()(a&&n+"-fluid",i&&"rounded",s&&"rounded-circle",u&&n+"-thumbnail");return c.a.createElement("img",r({},d,{className:l()(t,f)}))},n}(c.a.Component);Un.defaultProps={fluid:!1,rounded:!1,roundedCircle:!1,thumbnail:!1};var Ln=x(Un,"img"),Fn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.className,t=o(e,["className"]);return c.a.createElement(Ln,r({},t,{className:l()(n,"figure-img")}))},n}(c.a.Component);Fn.defaultProps={fluid:!0};var Bn=Fn,Hn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(n,r({},i,{className:l()(a,t)}))},n}(c.a.Component);Hn.defaultProps={as:"figcaption"};var Wn=x(Hn,"figure-caption"),Kn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(n,r({},i,{className:l()(a,t)}))},n}(c.a.Component);Kn.defaultProps={as:"figure"};var Vn=x(Kn,"figure");Vn.Image=Bn,Vn.Caption=Wn;var $n=Vn,qn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.size,a=e.className,i=e.as,s=o(e,["bsPrefix","size","className","as"]);return c.a.createElement(i,r({},s,{className:l()(a,n,t&&n+"-"+t)}))},n}(c.a.Component);qn.defaultProps={as:"div"};var Yn=E("input-group-append"),Gn=E("input-group-prepend"),Xn=E("input-group-text",{Component:"span"}),Qn=x(qn,"input-group");Qn.Text=Xn,Qn.Radio=function(e){return c.a.createElement(Xn,null,c.a.createElement("input",r({type:"radio"},e)))},Qn.Checkbox=function(e){return c.a.createElement(Xn,null,c.a.createElement("input",r({type:"checkbox"},e)))},Qn.Append=Yn,Qn.Prepend=Gn;var Jn=Qn,Zn=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e,n=this.props,t=n.as,a=n.className,i=n.fluid,s=n.bsPrefix,u=o(n,["as","className","fluid","bsPrefix"]),d=((e={})[s]=!0,e[s+"-fluid"]=i,e);return c.a.createElement(t,r({},u,{className:l()(a,d)}))},n}(c.a.Component);Zn.defaultProps={as:"div",fluid:!1};var et=x(Zn,"jumbotron"),nt=t(15),tt=t.n(nt),rt=c.a.createContext(null),ot=function(){},at=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleSelect=function(e,t){var r=n.props,o=r.onSelect,a=r.parentOnSelect;null!=e&&(o&&o(e,t),a&&a(e,t))},n.handleKeyDown=function(e){var t,r=n.props.onKeyDown;switch(r&&r(e),e.key){case"ArrowLeft":case"ArrowUp":t=n.getNextActiveChild(-1);break;case"ArrowRight":case"ArrowDown":t=n.getNextActiveChild(1);break;default:return}t&&(e.preventDefault(),n.handleSelect(t.dataset.rbEventKey,e),n._needsRefocus=!0)},n.attachRef=function(e){n.listNode=e},n.state={navContext:null},n}a(n,e),n.getDerivedStateFromProps=function(e){var n=e.activeKey,t=e.getControlledId,r=e.getControllerId;return{navContext:{role:e.role,activeKey:en(n),getControlledId:t||ot,getControllerId:r||ot}}};var t=n.prototype;return t.componentDidUpdate=function(){if(this._needsRefocus&&this.listNode){var e=this.listNode.querySelector("[data-rb-event-key].active");e&&e.focus()}},t.getNextActiveChild=function(e){if(!this.listNode)return null;var n=tt()(this.listNode,"[data-rb-event-key]:not(.disabled)"),t=this.listNode.querySelector(".active"),r=n.indexOf(t);if(-1===r)return null;var o=r+e;return o>=n.length&&(o=0),o<0&&(o=n.length-1),n[o]},t.render=function(){var e=this.props,n=e.as,t=(e.onSelect,e.parentOnSelect,e.getControlledId,e.getControllerId,e.activeKey,o(e,["as","onSelect","parentOnSelect","getControlledId","getControllerId","activeKey"]));return"tablist"===t.role&&(t.onKeyDown=this.handleKeyDown),c.a.createElement(nn.Provider,{value:this.handleSelect},c.a.createElement(tn.Provider,{value:this.state.navContext},c.a.createElement(n,r({},t,{onKeyDown:this.handleKeyDown,ref:this.attachRef}))))},n}(c.a.Component);at.defaultProps={as:"ul"};var it=Le()([nn,rt],function(e,n,t){var r=t.role;return n?{activeKey:n.activeKey,parentOnSelect:e,role:r||"tablist",getControllerId:n.getControllerId,getControlledId:n.getControlledId}:{parentOnSelect:e}},at),lt=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this,n=this.props,t=n.active,a=n.className,i=n.tabIndex,s=n.eventKey,u=n.onSelect,d=n.as,f=o(n,["active","className","tabIndex","eventKey","onSelect","as"]),p=en(s,f.href);return c.a.createElement(nn.Consumer,null,function(n){return c.a.createElement(tn.Consumer,null,function(o){var s=t;return o&&(f.role||"tablist"!==o.role||(f.role="tab"),f["data-rb-event-key"]=p,f.id=o.getControllerId(p),f["aria-controls"]=o.getControlledId(p),s=null==t&&null!=p?o.activeKey===p:t),"tab"===f.role&&(f.tabIndex=s?i:-1,f["aria-selected"]=s),c.a.createElement(d,r({},f,{className:l()(a,s&&"active"),onClick:function(t){var r=e.props.onClick;r&&r(t),null!=p&&(u&&u(p,t),n&&n(p,t))}}))})})},n}(c.a.Component);lt.defaultProps={disabled:!1};var st=lt,ct=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var t=n.props,r=t.onClick;if(t.disabled)return e.preventDefault(),void e.stopPropagation();r&&r(e)},n}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.active,a=e.disabled,i=e.className,s=e.variant,u=e.action,d=e.as,f=e.eventKey,p=o(e,["bsPrefix","active","disabled","className","variant","action","as","eventKey"]);return c.a.createElement(st,r({},p,{eventKey:en(f,p.href),as:d||(u?p.href?"a":"button":"div"),onClick:this.handleClick,className:l()(i,n,t&&"active",a&&"disabled",s&&n+"-"+s,u&&n+"-action")}))},n}(c.a.Component);ct.defaultProps={variant:null,active:!1,disabled:!1};var ut=x(ct,"list-group-item"),dt=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.className,t=e.bsPrefix,a=e.variant,i=o(e,["className","bsPrefix","variant"]);return c.a.createElement(it,r({},i,{className:l()(n,t,a&&t+"-"+a)}))},n}(c.a.Component);dt.defaultProps={as:"div",variant:null};var ft=d()(x(dt,"list-group"),{activeKey:"onSelect"});ft.Item=ut;var pt=ft,mt=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.as,i=o(e,["bsPrefix","className","as"]);return c.a.createElement(a,r({},i,{className:l()(t,n)}))},n}(c.a.Component);mt.defaultProps={as:"div"};var ht=x(mt,"media");ht.Body=E("media-body");var bt=ht,gt=t(53),vt=t.n(gt),yt=t(37),xt=t.n(yt),wt=t(17),kt=t.n(wt),Et=t(38),_t=t.n(Et),Ct=t(125),Pt=t.n(Ct),Ot=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(n,r({},i,{className:l()(a,t)}))},n}(c.a.Component);Ot.defaultProps={as:"div"};var Tt=x(Ot,"modal-body"),Nt=x(function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.centered,i=e.size,s=e.children,u=o(e,["bsPrefix","className","centered","size","children"]),d=n+"-dialog";return c.a.createElement("div",r({},u,{className:l()(d,t,i&&n+"-"+i,a&&d+"-centered")}),c.a.createElement("div",{className:l()(n+"-content")},s))},n}(c.a.Component),"modal"),St=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(n,r({},i,{className:l()(a,t)}))},n}(c.a.Component);St.defaultProps={as:"div"};var jt=x(St,"modal-footer"),Mt=c.a.createContext({onHide:function(){}}),Rt=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.closeLabel,a=e.closeButton,i=e.onHide,s=e.className,u=e.children,d=o(e,["bsPrefix","closeLabel","closeButton","onHide","className","children"]);return c.a.createElement(Mt.Consumer,null,function(e){return c.a.createElement("div",r({},d,{className:l()(s,n)}),u,a&&c.a.createElement(z,{label:t,onClick:I(e&&e.onHide,i)}))})},n}(c.a.Component);Rt.defaultProps={closeLabel:"Close",closeButton:!1};var zt=x(Rt,"modal-header"),At=f("h4"),It=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(n,r({},i,{className:l()(a,t)}))},n}(c.a.Component);It.defaultProps={as:At};var Dt=x(It,"modal-title"),Ut=t(81),Lt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Ft=".sticky-top",Bt=".navbar-toggler",Ht=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).adjustAndStore=function(e,n,t){var r=n.style[e];n.dataset[e]=r,be()(n,e,parseFloat(be()(n,e))+t+"px")},n.restore=function(e,n){var t=n.dataset[e];void 0!==t&&(delete n.dataset[e],be()(n,e,t))},n}a(n,e);var t=n.prototype;return t.setContainerStyle=function(n,t){var r=this;if(e.prototype.setContainerStyle.call(this,n,t),n.overflowing){var o=_t()();tt()(t,Lt).forEach(function(e){return r.adjustAndStore("paddingRight",e,o)}),tt()(t,Ft).forEach(function(e){return r.adjustAndStore("margingRight",e,-o)}),tt()(t,Bt).forEach(function(e){return r.adjustAndStore("margingRight",e,o)})}},t.removeContainerStyle=function(n,t){var r=this;e.prototype.removeContainerStyle.call(this,n,t),tt()(t,Lt).forEach(function(e){return r.restore("paddingRight",e)}),tt()(t,Ft).forEach(function(e){return r.restore("margingRight",e)}),tt()(t,Bt).forEach(function(e){return r.restore("margingRight",e)})},n}(t.n(Ut).a),Wt={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,animation:!0,dialogAs:Nt,manager:new Ht};function Kt(e){return c.a.createElement(M,e)}function Vt(e){return c.a.createElement(M,e)}var $t=function(e){function n(n,t){var o;return(o=e.call(this,n,t)||this).setModalRef=function(e){o._modal=e},o.handleDialogMouseDown=function(){o._waitingForMouseUp=!0},o.handleMouseUp=function(e){o._waitingForMouseUp&&e.target===o._modal.dialog&&(o._ignoreBackdropClick=!0),o._waitingForMouseUp=!1},o.handleClick=function(e){o._ignoreBackdropClick||e.target!==e.currentTarget?o._ignoreBackdropClick=!1:o.props.onHide()},o.handleEnter=function(e){var n;e&&(e.style.display="block",o.updateDialogStyle(e));for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];o.props.onEnter&&(n=o.props).onEnter.apply(n,[e].concat(r))},o.handleEntering=function(e){for(var n,t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];o.props.onEntering&&(n=o.props).onEntering.apply(n,[e].concat(r)),vt.a.on(window,"resize",o.handleWindowResize)},o.handleExited=function(e){var n;e&&(e.style.display="");for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];o.props.onExited&&(n=o.props).onExited.apply(n,r),vt.a.off(window,"resize",o.handleWindowResize)},o.handleWindowResize=function(){o.updateDialogStyle(o._modal.dialog)},o.renderBackdrop=function(e){var n=o.props,t=n.bsPrefix,a=n.backdropClassName;return c.a.createElement("div",r({},e,{className:l()(t+"-backdrop",a)}))},o.state={style:{}},o.modalContext={onHide:function(){return o.props.onHide()}},o}a(n,e);var t=n.prototype;return t.componentWillUnmount=function(){vt.a.off(window,"resize",this.handleWindowResize)},t.updateDialogStyle=function(e){if(kt.a){var n=this.props.manager.isContainerOverflowing(this._modal),t=e.scrollHeight>xt()(e).documentElement.clientHeight;this.setState({style:{paddingRight:n&&!t?_t()():void 0,paddingLeft:!n&&t?_t()():void 0}})}},t.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.style,i=e.dialogClassName,s=e.children,u=e.dialogAs,d=e.show,f=e.animation,p=e.backdrop,m=e.keyboard,h=e.onEscapeKeyDown,b=e.onShow,g=e.onHide,v=e.container,y=e.autoFocus,x=e.enforceFocus,w=e.restoreFocus,k=e.onEntered,E=e.onExit,_=e.onExiting,C=(e.onExited,e.onEntering,e.onEnter,e.onEntering,e.backdropClassName,e.backdropStyle,o(e,["bsPrefix","className","style","dialogClassName","children","dialogAs","show","animation","backdrop","keyboard","onEscapeKeyDown","onShow","onHide","container","autoFocus","enforceFocus","restoreFocus","onEntered","onExit","onExiting","onExited","onEntering","onEnter","onEntering","backdropClassName","backdropStyle"])),P=!0===p?this.handleClick:null;return c.a.createElement(Mt.Provider,{value:this.modalContext},c.a.createElement(Pt.a,{show:d,backdrop:p,container:v,keyboard:m,autoFocus:y,enforceFocus:x,restoreFocus:w,onEscapeKeyDown:h,onShow:b,onHide:g,onEntered:k,onExit:E,onExiting:_,ref:this.setModalRef,style:r({},a,this.state.style),className:l()(t,n),containerClassName:n+"-open",transition:f?Kt:void 0,backdropTransition:f?Vt:void 0,renderBackdrop:this.renderBackdrop,onClick:P,onMouseUp:this.handleMouseUp,onEnter:this.handleEnter,onEntering:this.handleEntering,onExited:this.handleExited},c.a.createElement(u,r({},C,{onMouseDown:this.handleDialogMouseDown,className:i}),s)))},n}(c.a.Component);$t.defaultProps=Wt;var qt=x($t,"modal");qt.Body=Tt,qt.Header=zt,qt.Title=Dt,qt.Footer=jt,qt.Dialog=Nt,qt.TRANSITION_DURATION=300,qt.BACKDROP_TRANSITION_DURATION=150;var Yt=qt,Gt=(t(200),function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.children,i=e.as,s=o(e,["bsPrefix","className","children","as"]);return c.a.createElement(i,r({},s,{className:l()(t,n)}),a)},n}(c.a.Component));Gt.defaultProps={as:"div"};var Xt=x(Gt,"nav-item"),Qt={disabled:!1,as:L};function Jt(e){var n=e.bsPrefix,t=e.disabled,a=e.className,i=e.href,s=e.eventKey,u=e.onSelect,d=e.innerRef,f=e.as,p=o(e,["bsPrefix","disabled","className","href","eventKey","onSelect","innerRef","as"]);return c.a.createElement(st,r({},p,{href:i,ref:d,eventKey:s,as:f,disabled:t,onSelect:u,className:l()(a,n,t&&"disabled")}))}Jt.defaultProps=Qt;var Zt=x(Jt,"nav-link"),er=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e,n=this.props,t=n.as,a=n.bsPrefix,i=n.navbarBsPrefix,s=n.cardHeaderBsPrefix,u=n.variant,d=n.fill,f=n.justify,p=n.navbar,m=n.className,h=n.children,b=n.activeKey,g=o(n,["as","bsPrefix","navbarBsPrefix","cardHeaderBsPrefix","variant","fill","justify","navbar","className","children","activeKey"]);return c.a.createElement(it,r({as:t,activeKey:b,className:l()(m,(e={},e[a]=!p,e[i+"-nav"]=p,e[s+"-"+u]=!!s,e[a+"-"+u]=!!u,e[a+"-fill"]=d,e[a+"-justified"]=f,e))},g),h)},n}(c.a.Component);er.defaultProps={justify:!1,fill:!1,as:"div"};var nr=d()(x(er,"nav"),{activeKey:"onSelect"}),tr=Le()([$e,re],function(e,n,t){var r=t.navbar;return e||n?e?{navbarBsPrefix:e.bsPrefix,navbar:null==r||r}:{cardHeaderBsPrefix:n.cardHeaderBsPrefix}:{}},nr);tr.Item=Xt,tr.Link=Zt,tr._Nav=er;var rr=tr,or=x(function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.as,i=o(e,["bsPrefix","className","as"]),s=a||(i.href?"a":"span");return c.a.createElement(s,r({},i,{className:l()(t,n)}))},n}(c.a.Component),"navbar-brand"),ar=x(function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.children,t=e.bsPrefix,a=o(e,["children","bsPrefix"]);return c.a.createElement($e.Consumer,null,function(e){return c.a.createElement(De,r({in:!(!e||!e.expanded)},a),c.a.createElement("div",{className:t},n))})},n}(c.a.Component),"navbar-collapse"),ir=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var t=n.props.onClick,r=n.navbarContext.onToggle;t&&t(e),r&&r()},n}return a(n,e),n.prototype.render=function(){var e=this,n=this.props,t=n.bsPrefix,a=n.className,i=n.children,s=n.label,u=n.as,d=o(n,["bsPrefix","className","children","label","as"]);return"button"===u&&(d.type="button"),c.a.createElement($e.Consumer,null,function(n){return e.navbarContext=n||{},c.a.createElement(u,r({},d,{onClick:e.handleClick,"aria-label":s,className:l()(a,t,!(!n||!n.expanded)&&"collapsed")}),i||c.a.createElement("span",{className:t+"-icon"}))})},n}(c.a.Component);ir.defaultProps={label:"Toggle navigation",as:"button"};var lr=x(ir,"navbar-toggler"),sr=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleCollapse=function(){var e=n.props,t=e.onToggle,r=e.expanded,o=e.collapseOnSelect,a=e.onSelect;a&&a.apply(void 0,arguments),o&&r&&t(!1)},n.handleToggle=function(){var e=n.props;(0,e.onToggle)(!e.expanded)},n.state={navbarContext:{onToggle:n.handleToggle}},n}return a(n,e),n.getDerivedStateFromProps=function(e,n){var t=e.bsPrefix,o=e.expanded;return{navbarContext:r({},n.navbarContext,{bsPrefix:t,expanded:o})}},n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.expand,a=e.variant,i=e.bg,s=e.fixed,u=e.sticky,d=e.className,f=e.children,p=e.as,m=(e.expanded,e.onToggle,e.onSelect,e.collapseOnSelect,o(e,["bsPrefix","expand","variant","bg","fixed","sticky","className","children","as","expanded","onToggle","onSelect","collapseOnSelect"]));void 0===m.role&&"nav"!==p&&(m.role="navigation");var h=n+"-expand";return"string"==typeof t&&(h=h+"-"+t),c.a.createElement($e.Provider,{value:this.state.navbarContext},c.a.createElement(nn.Provider,{value:this.handleCollapse},c.a.createElement(p,r({},m,{className:l()(d,n,t&&h,a&&n+"-"+a,i&&"bg-"+i,u&&"sticky-"+u,s&&"fixed-"+s)}),f)))},n}(c.a.Component);sr.defaultProps={as:"nav",expand:!0,variant:"light",collapseOnSelect:!1};var cr=x(d()(sr,{expanded:"onToggle"}),"navbar");cr.Brand=or,cr.Toggle=lr,cr.Collapse=ar,cr.Text=E("navbar-text",{Component:"span"});var ur=cr,dr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.id,t=e.title,a=e.children,i=e.bsPrefix,l=e.rootCloseEvent,s=e.menuRole,u=e.disabled,d=e.active,f=o(e,["id","title","children","bsPrefix","rootCloseEvent","menuRole","disabled","active"]);return c.a.createElement(cn,r({},f,{as:Xt}),c.a.createElement(cn.Toggle,{id:n,eventKey:null,active:d,disabled:u,childBsPrefix:i,as:Zt},t),c.a.createElement(cn.Menu,{role:s,rootCloseEvent:l},a))},n}(c.a.Component);dr.Item=cn.Item,dr.Divider=cn.Divider,dr.Header=cn.Header;var fr=dr,pr=t(126),mr=t.n(pr),hr={transition:M,rootClose:!1,show:!1,placement:"top"};function br(e){var n=e.children,t=e.transition,a=o(e,["children","transition"]);return t=!0===t?M:t||null,c.a.createElement(mr.a,r({},a,{transition:t}),function(e){var a=e.props,i=e.arrowProps,s=e.show,u=o(e,["props","arrowProps","show"]);return function(e,n){var t=e.ref,r=n.ref;e.ref=t.__wrapped||(t.__wrapped=function(e){return t(Object(He.findDOMNode)(e))}),n.ref=r.__wrapped||(r.__wrapped=function(e){return r(Object(He.findDOMNode)(e))})}(a,i),"function"==typeof n?n(r({},u,a,{show:s,arrowProps:i})):c.a.cloneElement(n,r({},u,a,{arrowProps:i,className:l()(n.props.className,!t&&s&&"show"),style:r({},n.props.style,a.style)}))})}br.defaultProps=hr;var gr=br,vr=t(43),yr=t.n(vr),xr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){return this.props.children},n}(c.a.Component),wr=function(e){return e&&"object"==typeof e?e:{show:e,hide:e}},kr=function(e){function n(n,t){var r;return(r=e.call(this,n,t)||this).getTarget=function(){return We.a.findDOMNode(r.trigger.current)},r.handleShow=function(){clearTimeout(r._timeout),r._hoverState="show";var e=wr(r.props.delay);e.show?r._timeout=setTimeout(function(){"show"===r._hoverState&&r.show()},e.show):r.show()},r.handleHide=function(){clearTimeout(r._timeout),r._hoverState="hide";var e=wr(r.props.delay);e.hide?r._timeout=setTimeout(function(){"hide"===r._hoverState&&r.hide()},e.hide):r.hide()},r.handleFocus=function(e){var n=r.getChildProps().onFocus;r.handleShow(e),n&&n(e)},r.handleBlur=function(e){var n=r.getChildProps().onBlur;r.handleHide(e),n&&n(e)},r.handleClick=function(e){var n=r.getChildProps().onClick;r.state.show?r.hide():r.show(),n&&n(e)},r.handleMouseOver=function(e){r.handleMouseOverOut(r.handleShow,e,"fromElement")},r.handleMouseOut=function(e){return r.handleMouseOverOut(r.handleHide,e,"toElement")},r.trigger=c.a.createRef(),r.state={show:!!n.defaultShow},r.ariaModifier={enabled:!0,order:900,fn:function(e){var n=e.instance.popper,t=r.getTarget();if(!r.state.show||!t)return e;var o=n.getAttribute("role")||"";return n.id&&"tooltip"===o.toLowerCase()&&t.setAttribute("aria-describedby",n.id),e}},r}a(n,e);var t=n.prototype;return t.componentWillUnmount=function(){clearTimeout(this._timeout)},t.getChildProps=function(){return c.a.Children.only(this.props.children).props},t.handleMouseOverOut=function(e,n,t){var r=n.currentTarget,o=n.relatedTarget||n.nativeEvent[t];o&&o===r||yr()(r,o)||e(n)},t.hide=function(){this.setState({show:!1})},t.show=function(){this.setState({show:!0})},t.render=function(){var e=this.props,n=e.trigger,t=e.overlay,a=e.children,i=e.popperConfig,l=void 0===i?{}:i,u=o(e,["trigger","overlay","children","popperConfig"]);delete u.delay,delete u.defaultShow;var d=c.a.Children.only(a),f={},p=null==n?[]:[].concat(n);return-1!==p.indexOf("click")&&(f.onClick=this.handleClick),-1!==p.indexOf("focus")&&(f.onFocus=this.handleShow,f.onBlur=this.handleHide),-1!==p.indexOf("hover")&&(f.onMouseOver=this.handleMouseOver,f.onMouseOut=this.handleMouseOut),c.a.createElement(c.a.Fragment,null,c.a.createElement(xr,{ref:this.trigger},Object(s.cloneElement)(d,f)),c.a.createElement(gr,r({},u,{popperConfig:r({},l,{modifiers:r({},l.modifiers,{ariaModifier:this.ariaModifier})}),show:this.state.show,onHide:this.handleHide,target:this.getTarget}),t))},n}(c.a.Component);kr.defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]};var Er=kr;function _r(e){var n=e.active,t=e.disabled,a=e.className,i=e.style,s=e.activeLabel,u=e.children,d=o(e,["active","disabled","className","style","activeLabel","children"]),f=n||t?"span":L;return c.a.createElement("li",{style:i,className:l()(a,"page-item",{active:n,disabled:t})},c.a.createElement(f,r({className:"page-link",disabled:t},d),u,n&&s&&c.a.createElement("span",{className:"sr-only"},s)))}function Cr(e,n,t){var r,i;return void 0===t&&(t=e),i=r=function(e){function r(){return e.apply(this,arguments)||this}return a(r,e),r.prototype.render=function(){var e=this.props,r=e.children,a=o(e,["children"]);return delete a.active,c.a.createElement(_r,a,c.a.createElement("span",{"aria-hidden":"true"},r||n),c.a.createElement("span",{className:"sr-only"},t))},r}(c.a.Component),r.displayName=e,i}_r.defaultProps={active:!1,disabled:!1,activeLabel:"(current)"};var Pr=Cr("First","«"),Or=Cr("Prev","‹","Previous"),Tr=Cr("Ellipsis","…","More"),Nr=Cr("Next","›"),Sr=Cr("Last","»"),jr=x(function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.children,i=e.size,s=o(e,["bsPrefix","className","children","size"]);return c.a.createElement("ul",r({},s,{className:l()(t,n,i&&n+"-"+i)}),a)},n}(c.a.Component),"pagination");jr.First=Pr,jr.Prev=Or,jr.Ellipsis=Tr,jr.Item=_r,jr.Next=Nr,jr.Last=Sr;var Mr=jr;function Rr(e){var n=e.bsPrefix,t=e.innerRef,a=e.placement,i=e.className,s=e.style,u=e.title,d=e.children,f=e.arrowProps,p=(e.scheduleUpdate,e.outOfBoundaries,o(e,["bsPrefix","innerRef","placement","className","style","title","children","arrowProps","scheduleUpdate","outOfBoundaries"]));return c.a.createElement("div",r({role:"tooltip",ref:t,style:s,"x-placement":a,className:l()(i,n,"bs-popover-"+a)},p),c.a.createElement("div",r({className:"arrow"},f)),u&&c.a.createElement("div",{className:n+"-header h3"},u),c.a.createElement("div",{className:n+"-body"},d))}Rr.defaultProps={placement:"right"};var zr=x(Rr,"popover"),Ar=1e3;var Ir=function(e){function n(){return e.apply(this,arguments)||this}a(n,e);var t=n.prototype;return t.renderProgressBar=function(e){var n,t=e.min,a=e.now,i=e.max,s=e.label,u=e.srOnly,d=e.striped,f=e.animated,p=e.className,m=e.style,h=e.variant,b=e.bsPrefix,g=o(e,["min","now","max","label","srOnly","striped","animated","className","style","variant","bsPrefix"]);return c.a.createElement("div",r({},g,{role:"progressbar",className:l()(p,b+"-bar",(n={},n["bg-"+h]=h,n[b+"-bar-animated"]=f,n[b+"-bar-striped"]=f||d,n)),style:r({width:function(e,n,t){var r=(e-n)/(t-n)*100;return Math.round(r*Ar)/Ar}(a,t,i)+"%"},m),"aria-valuenow":a,"aria-valuemin":t,"aria-valuemax":i}),u?c.a.createElement("span",{className:"sr-only"},s):s)},t.render=function(){var e=this.props,n=e.isChild,t=o(e,["isChild"]);if(n)return this.renderProgressBar(t);var a=t.min,i=t.now,u=t.max,d=t.label,f=t.srOnly,p=t.striped,m=t.animated,h=t.bsPrefix,b=t.variant,g=t.className,v=t.children,y=o(t,["min","now","max","label","srOnly","striped","animated","bsPrefix","variant","className","children"]);return c.a.createElement("div",r({},y,{className:l()(g,h)}),v?ke(v,function(e){return Object(s.cloneElement)(e,{isChild:!0})}):this.renderProgressBar({min:a,now:i,max:u,label:d,srOnly:f,striped:p,animated:m,bsPrefix:h,variant:b}))},n}(c.a.Component);Ir.defaultProps={min:0,max:100,animated:!1,isChild:!1,srOnly:!1,striped:!1};var Dr=x(Ir,"progress"),Ur=Dr,Lr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.children,i=e.aspectRatio,s=o(e,["bsPrefix","className","children","aspectRatio"]),u=c.a.Children.only(a);return c.a.createElement("div",r({},s,{className:l()(n,t,i&&n+"-"+i)}),c.a.cloneElement(u,{className:l()(u.props.className,n+"-item")}))},n}(c.a.Component);Lr.defaultProps={aspectRatio:"1by1"};var Fr=x(Lr,"embed-responsive"),Br=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.noGutters,a=e.as,i=e.className,s=o(e,["bsPrefix","noGutters","as","className"]);return c.a.createElement(a,r({},s,{className:l()(i,n,t&&"no-gutters")}))},n}(c.a.Component);Br.defaultProps={as:"div",noGutters:!1};var Hr=x(Br,"row"),Wr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.id,t=e.bsPrefix,a=e.size,i=e.variant,l=e.title,s=e.toggleLabel,u=e.children,d=e.onClick,f=e.href,p=e.target,m=e.menuRole,h=e.rootCloseEvent,b=o(e,["id","bsPrefix","size","variant","title","toggleLabel","children","onClick","href","target","menuRole","rootCloseEvent"]);return c.a.createElement(cn,r({},b,{as:ee}),c.a.createElement(J,{size:a,variant:i,disabled:b.disabled,bsPrefix:t,href:f,target:p,onClick:d},l),c.a.createElement(cn.Toggle,{split:!0,id:n,size:a,variant:i,disabled:b.disabled,childBsPrefix:t},c.a.createElement("span",{className:"sr-only"},s)),c.a.createElement(cn.Menu,{role:m,rootCloseEvent:h},u))},n}(c.a.Component);Wr.defaultProps={toggleLabel:"Toggle dropdown"};var Kr=Wr,Vr=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).getControlledId=function(e){return n.getKey(e,"tabpane")},n.getControllerId=function(e){return n.getKey(e,"tab")},n.state={tabContext:{onSelect:n.props.onSelect,activeKey:n.props.activeKey,transition:n.props.transition,mountOnEnter:n.props.mountOnEnter,unmountOnExit:n.props.unmountOnExit,getControlledId:n.getControlledId,getControllerId:n.getControllerId}},n}a(n,e),n.getDerivedStateFromProps=function(e,n){var t=e.activeKey,o=e.mountOnEnter,a=e.unmountOnExit,i=e.transition;return{tabContext:r({},n.tabContext,{activeKey:t,mountOnEnter:o,unmountOnExit:a,transition:i})}};var t=n.prototype;return t.getKey=function(e,n){var t=this.props,r=t.generateChildId,o=t.id;return r?r(e,n):o?o+"-"+n+"-"+e:null},t.render=function(){var e=this.props,n=e.children,t=e.onSelect;return c.a.createElement(rt.Provider,{value:this.state.tabContext},c.a.createElement(nn.Provider,{value:t},n))},n}(c.a.Component),$r=d()(Vr,{activeKey:"onSelect"}),qr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.as,a=e.className,i=o(e,["bsPrefix","as","className"]);return c.a.createElement(t,r({},i,{className:l()(a,n)}))},n}(c.a.Component);qr.defaultProps={as:"div"};var Yr=x(qr,"tab-content"),Gr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.active,a=e.className,i=e.onEnter,s=e.onEntering,u=e.onEntered,d=e.onExit,f=e.onExiting,p=e.onExited,m=e.mountOnEnter,h=e.unmountOnExit,b=e.transition,g=e.as,v=void 0===g?"div":g,y=(e.eventKey,o(e,["bsPrefix","active","className","onEnter","onEntering","onEntered","onExit","onExiting","onExited","mountOnEnter","unmountOnExit","transition","as","eventKey"]));if(!t&&h)return null;var x=c.a.createElement(v,r({},y,{role:"tabpanel","aria-hidden":!t,className:l()(a,n,{active:t})}));return b&&(x=c.a.createElement(b,{in:t,onEnter:i,onEntering:s,onEntered:u,onExit:d,onExiting:f,onExited:p,mountOnEnter:m,unmountOnExit:m},x)),c.a.createElement(rt.Provider,{value:null},c.a.createElement(nn.Provider,{value:null},x))},n}(c.a.Component),Xr=Le()(rt,function(e,n){if(!e)return null;var t=e.activeKey,r=e.getControlledId,a=e.getControllerId,i=o(e,["activeKey","getControlledId","getControllerId"]),l=!1!==n.transition&&!1!==i.transition,s=en(n.eventKey);return{active:null==n.active&&null!=s?en(t)===s:n.active,id:r(n.eventKey),"aria-labelledby":a(n.eventKey),transition:l&&(n.transition||i.transition||M),mountOnEnter:null!=n.mountOnEnter?n.mountOnEnter:i.mountOnEnter,unmountOnExit:null!=n.unmountOnExit?n.unmountOnExit:i.unmountOnExit}},x(Gr,"tab-pane")),Qr=function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly")},n}(c.a.Component);Qr.Container=$r,Qr.Content=Yr,Qr.Pane=Xr;var Jr=Qr,Zr=x(function(e){function n(){return e.apply(this,arguments)||this}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,a=e.striped,i=e.bordered,s=e.hover,u=e.size,d=e.variant,f=e.responsive,p=o(e,["bsPrefix","className","striped","bordered","hover","size","variant","responsive"]),m=l()(n,t,d&&n+"-"+d,u&&n+"-"+u,a&&n+"-striped",i&&n+"-bordered",s&&n+"-hover"),h=c.a.createElement("table",r({},p,{className:m}));if(f){var b=n+"-responsive";return"string"==typeof f&&(b=b+"-"+f),c.a.createElement("div",{className:b},h)}return h},n}(c.a.Component),"table"),eo=$r.ControlledComponent;var no=function(e){function n(){return e.apply(this,arguments)||this}a(n,e);var t=n.prototype;return t.renderTab=function(e){var n=e.props,t=n.title,r=n.eventKey,o=n.disabled,a=n.tabClassName;return null==t?null:c.a.createElement(Xt,{as:Zt,eventKey:r,disabled:o,className:a},t)},t.render=function(){var e=this.props,n=e.id,t=e.onSelect,a=e.transition,i=e.mountOnEnter,l=e.unmountOnExit,s=e.children,u=e.activeKey,d=void 0===u?function(e){var n;return Ee(e,function(e){null==n&&(n=e.props.eventKey)}),n}(s):u,f=o(e,["id","onSelect","transition","mountOnEnter","unmountOnExit","children","activeKey"]);return c.a.createElement(eo,{id:n,activeKey:d,onSelect:t,transition:a,mountOnEnter:i,unmountOnExit:l},c.a.createElement(rr,r({},f,{role:"tablist",as:"nav"}),ke(s,this.renderTab)),c.a.createElement(Yr,null,ke(s,function(e){var n=r({},e.props);return delete n.title,delete n.disabled,delete n.tabClassName,c.a.createElement(Xr,n)})))},n}(c.a.Component);no.defaultProps={variant:"tabs",mountOnEnter:!1,unmountOnExit:!1};var to=d()(no,{activeKey:"onSelect"}),ro=function(){},oo=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).state={focused:!1},n.handleFocus=function(e){"INPUT"===e.target.tagName&&n.setState({focused:!0})},n.handleBlur=function(e){"INPUT"===e.target.tagName&&n.setState({focused:!1})},n}return a(n,e),n.prototype.render=function(){var e=this.props,n=e.children,t=e.name,a=e.className,i=e.checked,s=e.type,u=e.onChange,d=e.value,f=e.disabled,p=e.inputRef,m=e.innerRef,h=o(e,["children","name","className","checked","type","onChange","value","disabled","inputRef","innerRef"]),b=this.state.focused;return c.a.createElement(J,r({},h,{ref:m,className:l()(a,b&&"focus",f&&"disabled"),type:null,active:!!i,as:"label"}),c.a.createElement("input",{name:t,type:s,value:d,ref:p,autoComplete:"off",checked:!!i,disabled:!!f,onFocus:this.handleFocus,onBlur:this.handleBlur,onChange:u||ro}),n)},n}(c.a.Component),ao=c.a.forwardRef(function(e,n){return c.a.createElement(oo,r({innerRef:n},e))}),io=t(5),lo=t.n(io),so=function(e){function n(){return e.apply(this,arguments)||this}a(n,e);var t=n.prototype;return t.getValues=function(){var e=this.props.value;return null==e?[]:[].concat(e)},t.handleToggle=function(e,n){var t=this.props,r=t.type,o=t.onChange,a=this.getValues(),i=-1!==a.indexOf(e);"radio"!==r?o(i?a.filter(function(n){return n!==e}):a.concat([e]),n):i||o(e,n)},t.render=function(){var e=this,n=this.props,t=n.children,a=n.type,i=n.name,l=o(n,["children","type","name"]);delete l.onChange,delete l.value;var s=this.getValues();return"radio"!==a||i||lo()(!1),c.a.createElement(ee,r({},l,{toggle:!0}),ke(t,function(n){var t=n.props,r=t.value,o=t.onChange;return c.a.cloneElement(n,{type:a,name:n.name||i,checked:-1!==s.indexOf(r),onChange:I(o,function(n){return e.handleToggle(r,n)})})}))},n}(c.a.Component);so.defaultProps={type:"radio"};var co=d()(so,{value:"onChange"});co.Button=ao;var uo=co;function fo(e){var n=e.bsPrefix,t=e.innerRef,a=e.placement,i=e.className,s=e.style,u=e.children,d=e.arrowProps,f=(e.scheduleUpdate,e.outOfBoundaries,o(e,["bsPrefix","innerRef","placement","className","style","children","arrowProps","scheduleUpdate","outOfBoundaries"]));return c.a.createElement("div",r({ref:t,style:s,role:"tooltip","x-placement":a,className:l()(i,n,"bs-tooltip-"+a)},f),c.a.createElement("div",r({className:"arrow"},d)),c.a.createElement("div",{className:n+"-inner"},u))}fo.defaultProps={placement:"right"};var po=x(fo,"tooltip");t.d(n,"Alert",function(){return W}),t.d(n,"Badge",function(){return V}),t.d(n,"Breadcrumb",function(){return X}),t.d(n,"BreadcrumbItem",function(){return q}),t.d(n,"Button",function(){return J}),t.d(n,"ButtonGroup",function(){return ee}),t.d(n,"ButtonToolbar",function(){return te}),t.d(n,"Card",function(){return de}),t.d(n,"CardColumns",function(){return fe}),t.d(n,"CardDeck",function(){return pe}),t.d(n,"CardImg",function(){return ae}),t.d(n,"CardGroup",function(){return me}),t.d(n,"Carousel",function(){return Te}),t.d(n,"CarouselItem",function(){return we}),t.d(n,"CloseButton",function(){return z}),t.d(n,"Col",function(){return Me}),t.d(n,"Collapse",function(){return De}),t.d(n,"Dropdown",function(){return cn}),t.d(n,"DropdownButton",function(){return un}),t.d(n,"Fade",function(){return M}),t.d(n,"Form",function(){return An}),t.d(n,"FormControl",function(){return wn}),t.d(n,"FormCheck",function(){return Tn}),t.d(n,"FormGroup",function(){return bn}),t.d(n,"FormLabel",function(){return Sn}),t.d(n,"FormText",function(){return Mn}),t.d(n,"Container",function(){return Dn}),t.d(n,"Image",function(){return Ln}),t.d(n,"Figure",function(){return $n}),t.d(n,"InputGroup",function(){return Jn}),t.d(n,"Jumbotron",function(){return et}),t.d(n,"ListGroup",function(){return pt}),t.d(n,"ListGroupItem",function(){return ut}),t.d(n,"Media",function(){return bt}),t.d(n,"Modal",function(){return Yt}),t.d(n,"ModalBody",function(){return Tt}),t.d(n,"ModalDialog",function(){return Nt}),t.d(n,"ModalFooter",function(){return jt}),t.d(n,"ModalTitle",function(){return Dt}),t.d(n,"Nav",function(){return rr}),t.d(n,"Navbar",function(){return ur}),t.d(n,"NavbarBrand",function(){return or}),t.d(n,"NavDropdown",function(){return fr}),t.d(n,"NavItem",function(){return Xt}),t.d(n,"Overlay",function(){return gr}),t.d(n,"OverlayTrigger",function(){return Er}),t.d(n,"PageItem",function(){return _r}),t.d(n,"Pagination",function(){return Mr}),t.d(n,"Popover",function(){return zr}),t.d(n,"ProgressBar",function(){return Ur}),t.d(n,"ResponsiveEmbed",function(){return Fr}),t.d(n,"Row",function(){return Hr}),t.d(n,"SafeAnchor",function(){return L}),t.d(n,"SplitButton",function(){return Kr}),t.d(n,"Tab",function(){return Jr}),t.d(n,"TabContainer",function(){return $r}),t.d(n,"TabContent",function(){return Yr}),t.d(n,"Table",function(){return Zr}),t.d(n,"TabPane",function(){return Xr}),t.d(n,"Tabs",function(){return to}),t.d(n,"ThemeProvider",function(){return w}),t.d(n,"ToggleButton",function(){return ao}),t.d(n,"ToggleButtonGroup",function(){return uo}),t.d(n,"Tooltip",function(){return po})},function(e,n,t){"use strict";n.__esModule=!0,n.default=n.EXITING=n.ENTERED=n.ENTERING=n.EXITED=n.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};r.get||r.set?Object.defineProperty(n,t,r):n[t]=e[t]}return n.default=e,n}(t(2)),o=l(t(0)),a=l(t(8)),i=t(141);t(142);function l(e){return e&&e.__esModule?e:{default:e}}var s="unmounted";n.UNMOUNTED=s;var c="exited";n.EXITED=c;var u="entering";n.ENTERING=u;var d="entered";n.ENTERED=d;n.EXITING="exiting";var f=function(e){var n,t;function r(n,t){var r;r=e.call(this,n,t)||this;var o,a=t.transitionGroup,i=a&&!a.isMounting?n.enter:n.appear;return r.appearStatus=null,n.in?i?(o=c,r.appearStatus=u):o=d:o=n.unmountOnExit||n.mountOnEnter?s:c,r.state={status:o},r.nextCallback=null,r}t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t;var i=r.prototype;return i.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,n){return e.in&&n.status===s?{status:c}:null},i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var n=null;if(e!==this.props){var t=this.state.status;this.props.in?t!==u&&t!==d&&(n=u):t!==u&&t!==d||(n="exiting")}this.updateStatus(!1,n)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,n,t,r=this.props.timeout;return e=n=t=r,null!=r&&"number"!=typeof r&&(e=r.exit,n=r.enter,t=r.appear),{exit:e,enter:n,appear:t}},i.updateStatus=function(e,n){if(void 0===e&&(e=!1),null!==n){this.cancelNextCallback();var t=a.default.findDOMNode(this);n===u?this.performEnter(t,e):this.performExit(t)}else this.props.unmountOnExit&&this.state.status===c&&this.setState({status:s})},i.performEnter=function(e,n){var t=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:n,a=this.getTimeouts();n||r?(this.props.onEnter(e,o),this.safeSetState({status:u},function(){t.props.onEntering(e,o),t.onTransitionEnd(e,a.enter,function(){t.safeSetState({status:d},function(){t.props.onEntered(e,o)})})})):this.safeSetState({status:d},function(){t.props.onEntered(e)})},i.performExit=function(e){var n=this,t=this.props.exit,r=this.getTimeouts();t?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){n.props.onExiting(e),n.onTransitionEnd(e,r.exit,function(){n.safeSetState({status:c},function(){n.props.onExited(e)})})})):this.safeSetState({status:c},function(){n.props.onExited(e)})},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,n){n=this.setNextCallback(n),this.setState(e,n)},i.setNextCallback=function(e){var n=this,t=!0;return this.nextCallback=function(r){t&&(t=!1,n.nextCallback=null,e(r))},this.nextCallback.cancel=function(){t=!1},this.nextCallback},i.onTransitionEnd=function(e,n,t){this.setNextCallback(t),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=n&&setTimeout(this.nextCallback,n)):setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if(e===s)return null;var n=this.props,t=n.children,r=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(n,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof t)return t(e,r);var a=o.default.Children.only(t);return o.default.cloneElement(a,r)},r}(o.default.Component);function p(){}f.contextTypes={transitionGroup:r.object},f.childContextTypes={transitionGroup:function(){}},f.propTypes={},f.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:p,onEntering:p,onEntered:p,onExit:p,onExiting:p,onExited:p},f.UNMOUNTED=0,f.EXITED=1,f.ENTERING=2,f.ENTERED=3,f.EXITING=4;var m=(0,i.polyfill)(f);n.default=m},function(e,n,t){"use strict";n.__esModule=!0;var r,o=t(95),a=(r=o)&&r.__esModule?r:{default:r};n.default=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==(void 0===n?"undefined":(0,a.default)(n))&&"function"!=typeof n?e:n}},function(e,n,t){"use strict";n.__esModule=!0;var r,o=t(149),a=(r=o)&&r.__esModule?r:{default:r};n.default=a.default||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}},function(e,n){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},function(e,n){var t=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=t)},function(e,n){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}},function(e,n,t){"use strict";n.__esModule=!0;var r=i(t(179)),o=i(t(183)),a=i(t(95));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+(void 0===n?"undefined":(0,a.default)(n)));e.prototype=(0,o.default)(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(r.default?(0,r.default)(e,n):e.__proto__=n)}},function(e,n,t){var r=t(29),o=t(45);e.exports=t(31)?function(e,n,t){return r.f(e,n,o(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var r=t(41),o=t(89),a=t(57),i=Object.defineProperty;n.f=t(31)?Object.defineProperty:function(e,n,t){if(r(e),n=a(n,!0),r(t),o)try{return i(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(e[n]=t.value),e}},function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,n,t){e.exports=!t(42)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,n,t){var r=t(92),o=t(58);e.exports=function(e){return r(o(e))}},function(e,n,t){var r=t(61)("wks"),o=t(48),a=t(23).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(0)),a=r(t(80)),i=o.default.createContext({controlId:void 0});i.Transform=(0,a.default)(i);var l=i;n.default=l,e.exports=n.default},function(e,n,t){"use strict";t.r(n);var r=t(4),o=t.n(r),a=t(0),i=t.n(a),l=t(2),s=t.n(l),c=t(12),u=t.n(c),d=t(5),f=t.n(d);function p(e){return"/"===e.charAt(0)}function m(e,n){for(var t=n,r=t+1,o=e.length;r<o;t+=1,r+=1)e[t]=e[r];e.pop()}var h=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=e&&e.split("/")||[],r=n&&n.split("/")||[],o=e&&p(e),a=n&&p(n),i=o||a;if(e&&p(e)?r=t:t.length&&(r.pop(),r=r.concat(t)),!r.length)return"/";var l=void 0;if(r.length){var s=r[r.length-1];l="."===s||".."===s||""===s}else l=!1;for(var c=0,u=r.length;u>=0;u--){var d=r[u];"."===d?m(r,u):".."===d?(m(r,u),c++):c&&(m(r,u),c--)}if(!i)for(;c--;c)r.unshift("..");!i||""===r[0]||r[0]&&p(r[0])||r.unshift("");var f=r.join("/");return l&&"/"!==f.substr(-1)&&(f+="/"),f},b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var g=function e(n,t){if(n===t)return!0;if(null==n||null==t)return!1;if(Array.isArray(n))return Array.isArray(t)&&n.length===t.length&&n.every(function(n,r){return e(n,t[r])});var r=void 0===n?"undefined":b(n);if(r!==(void 0===t?"undefined":b(t)))return!1;if("object"===r){var o=n.valueOf(),a=t.valueOf();if(o!==n||a!==t)return e(o,a);var i=Object.keys(n),l=Object.keys(t);return i.length===l.length&&i.every(function(r){return e(n[r],t[r])})}return!1},v=function(e){return"/"===e.charAt(0)?e:"/"+e},y=function(e){return"/"===e.charAt(0)?e.substr(1):e},x=function(e,n){return new RegExp("^"+n+"(\\/|\\?|#|$)","i").test(e)},w=function(e,n){return x(e,n)?e.substr(n.length):e},k=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},E=function(e){var n=e.pathname,t=e.search,r=e.hash,o=n||"/";return t&&"?"!==t&&(o+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},_=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},C=function(e,n,t,r){var o=void 0;"string"==typeof e?(o=function(e){var n=e||"/",t="",r="",o=n.indexOf("#");-1!==o&&(r=n.substr(o),n=n.substr(0,o));var a=n.indexOf("?");return-1!==a&&(t=n.substr(a),n=n.substr(0,a)),{pathname:n,search:"?"===t?"":t,hash:"#"===r?"":r}}(e)).state=n:(void 0===(o=_({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==n&&void 0===o.state&&(o.state=n));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return t&&(o.key=t),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=h(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},P=function(e,n){return e.pathname===n.pathname&&e.search===n.search&&e.hash===n.hash&&e.key===n.key&&g(e.state,n.state)},O=function(){var e=null,n=[];return{setPrompt:function(n){return u()(null==e,"A history supports only one prompt at a time"),e=n,function(){e===n&&(e=null)}},confirmTransitionTo:function(n,t,r,o){if(null!=e){var a="function"==typeof e?e(n,t):e;"string"==typeof a?"function"==typeof r?r(a,o):(u()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var t=!0,r=function(){t&&e.apply(void 0,arguments)};return n.push(r),function(){t=!1,n=n.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];n.forEach(function(e){return e.apply(void 0,t)})}}},T=!("undefined"==typeof window||!window.document||!window.document.createElement),N=function(e,n,t){return e.addEventListener?e.addEventListener(n,t,!1):e.attachEvent("on"+n,t)},S=function(e,n,t){return e.removeEventListener?e.removeEventListener(n,t,!1):e.detachEvent("on"+n,t)},j=function(e,n){return n(window.confirm(e))},M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},z=function(){try{return window.history.state||{}}catch(e){return{}}},A=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(T,"Browser history needs a DOM");var n,t=window.history,r=(-1===(n=window.navigator.userAgent).indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e.forceRefresh,i=void 0!==a&&a,l=e.getUserConfirmation,s=void 0===l?j:l,c=e.keyLength,d=void 0===c?6:c,p=e.basename?k(v(e.basename)):"",m=function(e){var n=e||{},t=n.key,r=n.state,o=window.location,a=o.pathname+o.search+o.hash;return u()(!p||x(a,p),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+p+'".'),p&&(a=w(a,p)),C(a,r,t)},h=function(){return Math.random().toString(36).substr(2,d)},b=O(),g=function(e){R(K,e),K.length=t.length,b.notifyListeners(K.location,K.action)},y=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||A(m(e.state))},_=function(){A(m(z()))},P=!1,A=function(e){P?(P=!1,g()):b.confirmTransitionTo(e,"POP",s,function(n){n?g({action:"POP",location:e}):I(e)})},I=function(e){var n=K.location,t=U.indexOf(n.key);-1===t&&(t=0);var r=U.indexOf(e.key);-1===r&&(r=0);var o=t-r;o&&(P=!0,F(o))},D=m(z()),U=[D.key],L=function(e){return p+E(e)},F=function(e){t.go(e)},B=0,H=function(e){1===(B+=e)?(N(window,"popstate",y),o&&N(window,"hashchange",_)):0===B&&(S(window,"popstate",y),o&&S(window,"hashchange",_))},W=!1,K={length:t.length,action:"POP",location:D,createHref:L,push:function(e,n){u()(!("object"===(void 0===e?"undefined":M(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=C(e,n,h(),K.location);b.confirmTransitionTo(o,"PUSH",s,function(e){if(e){var n=L(o),a=o.key,l=o.state;if(r)if(t.pushState({key:a,state:l},null,n),i)window.location.href=n;else{var s=U.indexOf(K.location.key),c=U.slice(0,-1===s?0:s+1);c.push(o.key),U=c,g({action:"PUSH",location:o})}else u()(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=n}})},replace:function(e,n){u()(!("object"===(void 0===e?"undefined":M(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=C(e,n,h(),K.location);b.confirmTransitionTo(o,"REPLACE",s,function(e){if(e){var n=L(o),a=o.key,l=o.state;if(r)if(t.replaceState({key:a,state:l},null,n),i)window.location.replace(n);else{var s=U.indexOf(K.location.key);-1!==s&&(U[s]=o.key),g({action:"REPLACE",location:o})}else u()(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(n)}})},go:F,goBack:function(){return F(-1)},goForward:function(){return F(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=b.setPrompt(e);return W||(H(1),W=!0),function(){return W&&(W=!1,H(-1)),n()}},listen:function(e){var n=b.appendListener(e);return H(1),function(){H(-1),n()}}};return K},I=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},D={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+y(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:y,decodePath:v},slash:{encodePath:v,decodePath:v}},U=function(){var e=window.location.href,n=e.indexOf("#");return-1===n?"":e.substring(n+1)},L=function(e){var n=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,n>=0?n:0)+"#"+e)},F=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(T,"Hash history needs a DOM");var n=window.history,t=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?j:r,a=e.hashType,i=void 0===a?"slash":a,l=e.basename?k(v(e.basename)):"",s=D[i],c=s.encodePath,d=s.decodePath,p=function(){var e=d(U());return u()(!l||x(e,l),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+l+'".'),l&&(e=w(e,l)),C(e)},m=O(),h=function(e){I(V,e),V.length=n.length,m.notifyListeners(V.location,V.action)},b=!1,g=null,y=function(){var e=U(),n=c(e);if(e!==n)L(n);else{var t=p(),r=V.location;if(!b&&P(r,t))return;if(g===E(t))return;g=null,_(t)}},_=function(e){b?(b=!1,h()):m.confirmTransitionTo(e,"POP",o,function(n){n?h({action:"POP",location:e}):M(e)})},M=function(e){var n=V.location,t=F.lastIndexOf(E(n));-1===t&&(t=0);var r=F.lastIndexOf(E(e));-1===r&&(r=0);var o=t-r;o&&(b=!0,B(o))},R=U(),z=c(R);R!==z&&L(z);var A=p(),F=[E(A)],B=function(e){u()(t,"Hash history go(n) causes a full page reload in this browser"),n.go(e)},H=0,W=function(e){1===(H+=e)?N(window,"hashchange",y):0===H&&S(window,"hashchange",y)},K=!1,V={length:n.length,action:"POP",location:A,createHref:function(e){return"#"+c(l+E(e))},push:function(e,n){u()(void 0===n,"Hash history cannot push state; it is ignored");var t=C(e,void 0,void 0,V.location);m.confirmTransitionTo(t,"PUSH",o,function(e){if(e){var n=E(t),r=c(l+n);if(U()!==r){g=n,function(e){window.location.hash=e}(r);var o=F.lastIndexOf(E(V.location)),a=F.slice(0,-1===o?0:o+1);a.push(n),F=a,h({action:"PUSH",location:t})}else u()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),h()}})},replace:function(e,n){u()(void 0===n,"Hash history cannot replace state; it is ignored");var t=C(e,void 0,void 0,V.location);m.confirmTransitionTo(t,"REPLACE",o,function(e){if(e){var n=E(t),r=c(l+n);U()!==r&&(g=n,L(r));var o=F.indexOf(E(V.location));-1!==o&&(F[o]=n),h({action:"REPLACE",location:t})}})},go:B,goBack:function(){return B(-1)},goForward:function(){return B(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=m.setPrompt(e);return K||(W(1),K=!0),function(){return K&&(K=!1,W(-1)),n()}},listen:function(e){var n=m.appendListener(e);return W(1),function(){W(-1),n()}}};return V},B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},H=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},W=function(e,n,t){return Math.min(Math.max(e,n),t)},K=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getUserConfirmation,t=e.initialEntries,r=void 0===t?["/"]:t,o=e.initialIndex,a=void 0===o?0:o,i=e.keyLength,l=void 0===i?6:i,s=O(),c=function(e){H(b,e),b.length=b.entries.length,s.notifyListeners(b.location,b.action)},d=function(){return Math.random().toString(36).substr(2,l)},f=W(a,0,r.length-1),p=r.map(function(e){return C(e,void 0,"string"==typeof e?d():e.key||d())}),m=E,h=function(e){var t=W(b.index+e,0,b.entries.length-1),r=b.entries[t];s.confirmTransitionTo(r,"POP",n,function(e){e?c({action:"POP",location:r,index:t}):c()})},b={length:p.length,action:"POP",location:p[f],index:f,entries:p,createHref:m,push:function(e,t){u()(!("object"===(void 0===e?"undefined":B(e))&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=C(e,t,d(),b.location);s.confirmTransitionTo(r,"PUSH",n,function(e){if(e){var n=b.index+1,t=b.entries.slice(0);t.length>n?t.splice(n,t.length-n,r):t.push(r),c({action:"PUSH",location:r,index:n,entries:t})}})},replace:function(e,t){u()(!("object"===(void 0===e?"undefined":B(e))&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=C(e,t,d(),b.location);s.confirmTransitionTo(r,"REPLACE",n,function(e){e&&(b.entries[b.index]=r,c({action:"REPLACE",location:r}))})},go:h,goBack:function(){return h(-1)},goForward:function(){return h(1)},canGo:function(e){var n=b.index+e;return n>=0&&n<b.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return b},V=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function $(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var q=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=$(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},$(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.getChildContext=function(){return{router:V({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},n.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},n.prototype.componentWillMount=function(){var e=this,n=this.props,t=n.children,r=n.history;f()(null==t||1===i.a.Children.count(t),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},n.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},n.prototype.componentWillUnmount=function(){this.unlisten()},n.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},n}(i.a.Component);q.propTypes={history:s.a.object.isRequired,children:s.a.node},q.contextTypes={router:s.a.object},q.childContextTypes={router:s.a.object.isRequired};var Y=q,G=Y;function X(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var Q=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=X(this,e.call.apply(e,[this].concat(a))),r.history=A(r.props),X(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},n.prototype.render=function(){return i.a.createElement(G,{history:this.history,children:this.props.children})},n}(i.a.Component);Q.propTypes={basename:s.a.string,forceRefresh:s.a.bool,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var J=Q;function Z(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var ee=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=Z(this,e.call.apply(e,[this].concat(a))),r.history=F(r.props),Z(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},n.prototype.render=function(){return i.a.createElement(G,{history:this.history,children:this.props.children})},n}(i.a.Component);ee.propTypes={basename:s.a.string,getUserConfirmation:s.a.func,hashType:s.a.oneOf(["hashbang","noslash","slash"]),children:s.a.node};var ne=ee,te=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function re(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var oe=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ae=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=re(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!oe(e)){e.preventDefault();var n=r.context.router.history,t=r.props,o=t.replace,a=t.to;o?n.replace(a):n.push(a)}},re(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.render=function(){var e=this.props,n=(e.replace,e.to),t=e.innerRef,r=function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}(e,["replace","to","innerRef"]);f()(this.context.router,"You should not use <Link> outside a <Router>"),f()(void 0!==n,'You must specify the "to" property');var o=this.context.router.history,a="string"==typeof n?C(n,null,null,o.location):n,l=o.createHref(a);return i.a.createElement("a",te({},r,{onClick:this.handleClick,href:l,ref:t}))},n}(i.a.Component);ae.propTypes={onClick:s.a.func,target:s.a.string,replace:s.a.bool,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired,innerRef:s.a.oneOfType([s.a.string,s.a.func])},ae.defaultProps={replace:!1},ae.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired,createHref:s.a.func.isRequired}).isRequired}).isRequired};var ie=ae;function le(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var se=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=le(this,e.call.apply(e,[this].concat(a))),r.history=K(r.props),le(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},n.prototype.render=function(){return i.a.createElement(Y,{history:this.history,children:this.props.children})},n}(i.a.Component);se.propTypes={initialEntries:s.a.array,initialIndex:s.a.number,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var ce=se,ue=t(52),de=t.n(ue),fe={},pe=0,me=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments[2];"string"==typeof n&&(n={path:n});var r=n,o=r.path,a=r.exact,i=void 0!==a&&a,l=r.strict,s=void 0!==l&&l,c=r.sensitive;if(null==o)return t;var u=function(e,n){var t=""+n.end+n.strict+n.sensitive,r=fe[t]||(fe[t]={});if(r[e])return r[e];var o=[],a={re:de()(e,o,n),keys:o};return pe<1e4&&(r[e]=a,pe++),a}(o,{end:i,strict:s,sensitive:void 0!==c&&c}),d=u.re,f=u.keys,p=d.exec(e);if(!p)return null;var m=p[0],h=p.slice(1),b=e===m;return i&&!b?null:{path:o,url:"/"===o&&""===m?"/":m,isExact:b,params:f.reduce(function(e,n,t){return e[n.name]=h[t],e},{})}},he=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function be(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var ge=function(e){return 0===i.a.Children.count(e)},ve=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=be(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},be(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.getChildContext=function(){return{router:he({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},n.prototype.computeMatch=function(e,n){var t=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,l=e.sensitive;if(t)return t;f()(n,"You should not use <Route> or withRouter() outside a <Router>");var s=n.route,c=(r||s.location).pathname;return me(c,{path:o,strict:a,exact:i,sensitive:l},s.match)},n.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!ge(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!ge(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},n.prototype.componentWillReceiveProps=function(e,n){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,n.router)})},n.prototype.render=function(){var e=this.state.match,n=this.props,t=n.children,r=n.component,o=n.render,a=this.context.router,l=a.history,s=a.route,c=a.staticContext,u={match:e,location:this.props.location||s.location,history:l,staticContext:c};return r?e?i.a.createElement(r,u):null:o?e?o(u):null:"function"==typeof t?t(u):t&&!ge(t)?i.a.Children.only(t):null},n}(i.a.Component);ve.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},ve.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},ve.childContextTypes={router:s.a.object.isRequired};var ye=ve,xe=ye,we=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Ee=function(e){var n=e.to,t=e.exact,r=e.strict,o=e.location,a=e.activeClassName,l=e.className,s=e.activeStyle,c=e.style,u=e.isActive,d=e["aria-current"],f=function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),p="object"===(void 0===n?"undefined":ke(n))?n.pathname:n,m=p&&p.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1");return i.a.createElement(xe,{path:m,exact:t,strict:r,location:o,children:function(e){var t=e.location,r=e.match,o=!!(u?u(r,t):r);return i.a.createElement(ie,we({to:n,className:o?[l,a].filter(function(e){return e}).join(" "):l,style:o?we({},c,s):c,"aria-current":o&&d||null},f))}})};Ee.propTypes={to:ie.propTypes.to,exact:s.a.bool,strict:s.a.bool,location:s.a.object,activeClassName:s.a.string,className:s.a.string,activeStyle:s.a.object,style:s.a.object,isActive:s.a.func,"aria-current":s.a.oneOf(["page","step","location","date","time","true"])},Ee.defaultProps={activeClassName:"active","aria-current":"page"};var _e=Ee;var Ce=function(e){function n(){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,e.apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},n.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},n.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},n.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},n.prototype.componentWillUnmount=function(){this.disable()},n.prototype.render=function(){return null},n}(i.a.Component);Ce.propTypes={when:s.a.bool,message:s.a.oneOfType([s.a.func,s.a.string]).isRequired},Ce.defaultProps={when:!0},Ce.contextTypes={router:s.a.shape({history:s.a.shape({block:s.a.func.isRequired}).isRequired}).isRequired};var Pe=Ce,Oe={},Te=0,Ne=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var n=e,t=Oe[n]||(Oe[n]={});if(t[e])return t[e];var r=de.a.compile(e);return Te<1e4&&(t[e]=r,Te++),r}(e)(n,{pretty:!0})},Se=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};var je=function(e){function n(){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,e.apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},n.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},n.prototype.componentDidMount=function(){this.isStatic()||this.perform()},n.prototype.componentDidUpdate=function(e){var n=C(e.to),t=C(this.props.to);P(n,t)?o()(!1,"You tried to redirect to the same route you're currently on: \""+t.pathname+t.search+'"'):this.perform()},n.prototype.computeTo=function(e){var n=e.computedMatch,t=e.to;return n?"string"==typeof t?Ne(t,n.params):Se({},t,{pathname:Ne(t.pathname,n.params)}):t},n.prototype.perform=function(){var e=this.context.router.history,n=this.props.push,t=this.computeTo(this.props);n?e.push(t):e.replace(t)},n.prototype.render=function(){return null},n}(i.a.Component);je.propTypes={computedMatch:s.a.object,push:s.a.bool,from:s.a.string,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired},je.defaultProps={push:!1},je.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired}).isRequired,staticContext:s.a.object}).isRequired};var Me=je,Re=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function ze(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var Ae=function(e){return"/"===e.charAt(0)?e:"/"+e},Ie=function(e,n){return e?Re({},n,{pathname:Ae(e)+n.pathname}):n},De=function(e){return"string"==typeof e?e:E(e)},Ue=function(e){return function(){f()(!1,"You cannot %s with <StaticRouter>",e)}},Le=function(){},Fe=function(e){function n(){var t,r;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=ze(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Ae(r.props.basename+De(e))},r.handlePush=function(e){var n=r.props,t=n.basename,o=n.context;o.action="PUSH",o.location=Ie(t,C(e)),o.url=De(o.location)},r.handleReplace=function(e){var n=r.props,t=n.basename,o=n.context;o.action="REPLACE",o.location=Ie(t,C(e)),o.url=De(o.location)},r.handleListen=function(){return Le},r.handleBlock=function(){return Le},ze(r,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},n.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},n.prototype.render=function(){var e=this.props,n=e.basename,t=(e.context,e.location),r=function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,n){if(!e)return n;var t=Ae(e);return 0!==n.pathname.indexOf(t)?n:Re({},n,{pathname:n.pathname.substr(t.length)})}(n,C(t)),push:this.handlePush,replace:this.handleReplace,go:Ue("go"),goBack:Ue("goBack"),goForward:Ue("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(Y,Re({},r,{history:o}))},n}(i.a.Component);Fe.propTypes={basename:s.a.string,context:s.a.object.isRequired,location:s.a.oneOfType([s.a.string,s.a.object])},Fe.defaultProps={basename:"",location:"/"},Fe.childContextTypes={router:s.a.object.isRequired};var Be=Fe;var He=function(e){function n(){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,e.apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),n.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Switch> outside a <Router>")},n.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},n.prototype.render=function(){var e=this.context.router.route,n=this.props.children,t=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(n,function(n){if(null==r&&i.a.isValidElement(n)){var a=n.props,l=a.path,s=a.exact,c=a.strict,u=a.sensitive,d=a.from,f=l||d;o=n,r=me(t.pathname,{path:f,exact:s,strict:c,sensitive:u},e.match)}}),r?i.a.cloneElement(o,{location:t,computedMatch:r}):null},n}(i.a.Component);He.contextTypes={router:s.a.shape({route:s.a.object.isRequired}).isRequired},He.propTypes={children:s.a.node,location:s.a.object};var We=He,Ke=Ne,Ve=me,$e=t(121),qe=t.n($e),Ye=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};var Ge=function(e){var n=function(n){var t=n.wrappedComponentRef,r=function(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}(n,["wrappedComponentRef"]);return i.a.createElement(ye,{children:function(n){return i.a.createElement(e,Ye({},r,n,{ref:t}))}})};return n.displayName="withRouter("+(e.displayName||e.name)+")",n.WrappedComponent=e,n.propTypes={wrappedComponentRef:s.a.func},qe()(n,e)};t.d(n,"BrowserRouter",function(){return J}),t.d(n,"HashRouter",function(){return ne}),t.d(n,"Link",function(){return ie}),t.d(n,"MemoryRouter",function(){return ce}),t.d(n,"NavLink",function(){return _e}),t.d(n,"Prompt",function(){return Pe}),t.d(n,"Redirect",function(){return Me}),t.d(n,"Route",function(){return xe}),t.d(n,"Router",function(){return G}),t.d(n,"StaticRouter",function(){return Be}),t.d(n,"Switch",function(){return We}),t.d(n,"generatePath",function(){return Ke}),t.d(n,"matchPath",function(){return Ve}),t.d(n,"withRouter",function(){return Ge})},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n){var t=n.displayName,r=n.propTypes,a=n.defaultProps,i=n.allowFallback,l=void 0!==i&&i,s=function(n,t){return e(n,t)};return Object.assign(s,{displayName:t}),o.default.forwardRef||!l?Object.assign(o.default.forwardRef(s),{propTypes:r,defaultProps:a}):Object.assign(function(e){return s(e,null)},{displayName:t,propTypes:r,defaultProps:a})};var r,o=(r=t(0))&&r.__esModule?r:{default:r}},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return e&&e.ownerDocument||document},e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e){if((!o&&0!==o||e)&&a.default){var n=document.createElement("div");n.style.position="absolute",n.style.top="-9999px",n.style.width="50px",n.style.height="50px",n.style.overflow="scroll",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n)}return o};var o,a=r(t(17));e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.withAuthentication=n.AuthenticationProvider=n.AuthenticationConsumer=void 0;var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=l(t(0)),a=l(t(85)),i=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(86));function l(e){return e&&e.__esModule?e:{default:e}}var s=o.default.createContext({jwt:null,isAuthenticated:!1,login:function(){},logout:function(){}}),c=s.Consumer,u=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e)),r=localStorage.getItem("JWT"),o=!!r;return t.state={jwt:r,isAuthenticated:o},t.login=t.login.bind(t),t.logout=t.logout.bind(t),t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:"login",value:function(e){var n=this,t=e.email,r=e.password;return i.createSession(t,r).then(function(e){n.setState({jwt:e,isAuthenticated:!!e})})}},{key:"logout",value:function(){i.deleteSession(),this.setState({jwt:null,isAuthenticated:!1})}},{key:"render",value:function(){var e=this.login,n=this.logout,t=this.state,r=t.jwt,a=t.isAuthenticated,i=this.props.children,l={jwt:r,isAuthenticated:a,login:e,logout:n};return o.default.createElement(s.Provider,{value:l},i)}}]),n}(),d=(0,a.default)(c);n.AuthenticationConsumer=c,n.AuthenticationProvider=u,n.withAuthentication=d},function(e,n,t){var r=t(23),o=t(24),a=t(88),i=t(28),l=t(25),s=function(e,n,t){var c,u,d,f=e&s.F,p=e&s.G,m=e&s.S,h=e&s.P,b=e&s.B,g=e&s.W,v=p?o:o[n]||(o[n]={}),y=v.prototype,x=p?r:m?r[n]:(r[n]||{}).prototype;for(c in p&&(t=n),t)(u=!f&&x&&void 0!==x[c])&&l(v,c)||(d=u?x[c]:t[c],v[c]=p&&"function"!=typeof x[c]?t[c]:b&&u?a(d,r):g&&x[c]==d?function(e){var n=function(n,t,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(n);case 2:return new e(n,t)}return new e(n,t,r)}return e.apply(this,arguments)};return n.prototype=e.prototype,n}(d):h&&"function"==typeof d?a(Function.call,d):d,h&&((v.virtual||(v.virtual={}))[c]=d,e&s.R&&y&&!y[c]&&i(y,c,d)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,n,t){var r=t(30);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(17)).default?function(e,n){return e.contains?e.contains(n):e.compareDocumentPosition?e===n||!!(16&e.compareDocumentPosition(n)):a(e,n)}:a;function a(e,n){if(n)do{if(n===e)return!0}while(n=n.parentNode);return!1}n.default=o,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(56)),a=r(t(18));function i(e,n,t){var r,a={target:e,currentTarget:e};function i(e){e.target===e.currentTarget&&(clearTimeout(r),e.target.removeEventListener(o.default.end,i),n.call(this))}o.default.end?null==t&&(t=s(e)||0):t=0,o.default.end?(e.addEventListener(o.default.end,i,!1),r=setTimeout(function(){return i(a)},1.5*(t||100))):setTimeout(i.bind(null,a),0)}i._parseDuration=s;var l=i;function s(e){var n=(0,a.default)(e,o.default.duration),t=-1===n.indexOf("ms")?1e3:1;return parseFloat(n)*t}n.default=l,e.exports=n.default},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var r=t(91),o=t(62);e.exports=Object.keys||function(e){return r(e,o)}},function(e,n){e.exports=!0},function(e,n){var t=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+r).toString(36))}},function(e,n){n.f={}.propertyIsEnumerable},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return function(n,t,r,o,a){var i=r||"<<anonymous>>",l=a||t;if(null==n[t])return new Error("The "+o+" `"+l+"` is required to make `"+i+"` accessible for users of assistive technologies such as screen readers.");for(var s=arguments.length,c=Array(s>5?s-5:0),u=5;u<s;u++)c[u-5]=arguments[u];return e.apply(void 0,[n,t,r,o,a].concat(c))}},e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return e.replace(r,function(e,n){return n.toUpperCase()})};var r=/-(.)/g;e.exports=n.default},function(e,n,t){var r=t(137);e.exports=p,e.exports.parse=a,e.exports.compile=function(e,n){return l(a(e,n))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=f;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,n){for(var t,r=[],a=0,i=0,l="",u=n&&n.delimiter||"/";null!=(t=o.exec(e));){var d=t[0],f=t[1],p=t.index;if(l+=e.slice(i,p),i=p+d.length,f)l+=f[1];else{var m=e[i],h=t[2],b=t[3],g=t[4],v=t[5],y=t[6],x=t[7];l&&(r.push(l),l="");var w=null!=h&&null!=m&&m!==h,k="+"===y||"*"===y,E="?"===y||"*"===y,_=t[2]||u,C=g||v;r.push({name:b||a++,prefix:h||"",delimiter:_,optional:E,repeat:k,partial:w,asterisk:!!x,pattern:C?c(C):x?".*":"[^"+s(_)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var n=new Array(e.length),t=0;t<e.length;t++)"object"==typeof e[t]&&(n[t]=new RegExp("^(?:"+e[t].pattern+")$"));return function(t,o){for(var a="",l=t||{},s=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var u=e[c];if("string"!=typeof u){var d,f=l[u.name];if(null==f){if(u.optional){u.partial&&(a+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(r(f)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var p=0;p<f.length;p++){if(d=s(f[p]),!n[c].test(d))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(d)+"`");a+=(0===p?u.prefix:u.delimiter)+d}}else{if(d=u.asterisk?encodeURI(f).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):s(f),!n[c].test(d))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+d+'"');a+=u.prefix+d}}else a+=u}return a}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,n){return e.keys=n,e}function d(e){return e.sensitive?"":"i"}function f(e,n,t){r(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,a=!1!==t.end,i="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)i+=s(c);else{var f=s(c.prefix),p="(?:"+c.pattern+")";n.push(c),c.repeat&&(p+="(?:"+f+p+")*"),i+=p=c.optional?c.partial?f+"("+p+")?":"(?:"+f+"("+p+"))?":f+"("+p+")"}}var m=s(t.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",u(new RegExp("^"+i,d(t)),n)}function p(e,n,t){return r(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)n.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return u(e,n)}(e,n):r(e)?function(e,n,t){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],n,t).source);return u(new RegExp("(?:"+r.join("|")+")",d(t)),n)}(e,n,t):function(e,n,t){return f(a(e,t),n,t)}(e,n,t)}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(101));n.on=o.default;var a=r(t(102));n.off=a.default;var i=r(t(190));n.filter=i.default;var l=r(t(71));n.listen=l.default;var s={on:o.default,off:a.default,filter:i.default,listen:l.default};n.default=s},function(e,n,t){"use strict";(function(e){Object.defineProperty(n,"__esModule",{value:!0});var r=t(86);n.default=function(n){var t=n.url,o=n.method,a=void 0===o?"GET":o,i=n.params,l=void 0===i?null:i,s=(0,r.retrieveJWT)(),c=new Headers;return c.append("Accept","application/json"),c.append("Content-Type","application/json"),c.append("Authorization",s),console.log(e.env),fetch(t,{method:a,headers:c,body:l&&JSON.stringify(l)}).then(function(e){if(!e.ok)throw Error(e.statusText);return e.json()})}}).call(this,t(138))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.withTheme=n.ThemeProvider=n.ThemeConsumer=void 0;var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=i(t(0)),a=i(t(85));function i(e){return e&&e.__esModule?e:{default:e}}var l=o.default.createContext({theme:"dark",setThemeLight:function(){},setThemeDark:function(){},toggleTheme:function(){}}),s=l.Consumer,c=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={theme:"dark"},t.setTheme=t.setTheme.bind(t),t.toggleTheme=t.toggleTheme.bind(t),t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:"setTheme",value:function(e){this.setState({theme:e})}},{key:"toggleTheme",value:function(){switch(this.state.theme){case"dark":this.setTheme("light");break;default:case"light":this.setTheme("dark")}}},{key:"render",value:function(){var e=this.setTheme,n=this.toggleTheme,t=this.state.theme,r=this.props.children,a={theme:t,setThemeDark:function(){return e("dark")},setThemeLight:function(){return e("light")},toggleTheme:n};return o.default.createElement(l.Provider,{value:a},r)}}]),n}(),u=(0,a.default)(s);n.ThemeConsumer=s,n.ThemeProvider=c,n.withTheme=u},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=n.animationEnd=n.animationDelay=n.animationTiming=n.animationDuration=n.animationName=n.transitionEnd=n.transitionDuration=n.transitionDelay=n.transitionTiming=n.transitionProperty=n.transform=void 0;var o,a,i,l,s,c,u,d,f,p,m,h=r(t(17)),b="transform";if(n.transform=b,n.animationEnd=i,n.transitionEnd=a,n.transitionDelay=u,n.transitionTiming=c,n.transitionDuration=s,n.transitionProperty=l,n.animationDelay=m,n.animationTiming=p,n.animationDuration=f,n.animationName=d,h.default){var g=function(){for(var e,n,t=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),a="",i=0;i<o.length;i++){var l=o[i];if(l+"TransitionProperty"in t){a="-"+l.toLowerCase(),e=r[l]("TransitionEnd"),n=r[l]("AnimationEnd");break}}!e&&"transitionProperty"in t&&(e="transitionend");!n&&"animationName"in t&&(n="animationend");return t=null,{animationEnd:n,transitionEnd:e,prefix:a}}();o=g.prefix,n.transitionEnd=a=g.transitionEnd,n.animationEnd=i=g.animationEnd,n.transform=b=o+"-"+b,n.transitionProperty=l=o+"-transition-property",n.transitionDuration=s=o+"-transition-duration",n.transitionDelay=u=o+"-transition-delay",n.transitionTiming=c=o+"-transition-timing-function",n.animationName=d=o+"-animation-name",n.animationDuration=f=o+"-animation-duration",n.animationTiming=p=o+"-animation-delay",n.animationDelay=m=o+"-animation-timing-function"}var v={transform:b,end:a,property:l,timing:c,delay:u,duration:s};n.default=v},function(e,n,t){var r=t(30);e.exports=function(e,n){if(!r(e))return e;var t,o;if(n&&"function"==typeof(t=e.toString)&&!r(o=t.call(e)))return o;if("function"==typeof(t=e.valueOf)&&!r(o=t.call(e)))return o;if(!n&&"function"==typeof(t=e.toString)&&!r(o=t.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,n){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,n){var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:t)(e)}},function(e,n,t){var r=t(61)("keys"),o=t(48);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,n,t){var r=t(24),o=t(23),a=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,n){return a[e]||(a[e]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:t(47)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,n){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n){e.exports={}},function(e,n,t){var r=t(41),o=t(162),a=t(62),i=t(60)("IE_PROTO"),l=function(){},s=function(){var e,n=t(90)("iframe"),r=a.length;for(n.style.display="none",t(163).appendChild(n),n.src="javascript:",(e=n.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;r--;)delete s.prototype[a[r]];return s()};e.exports=Object.create||function(e,n){var t;return null!==e?(l.prototype=r(e),t=new l,l.prototype=null,t[i]=e):t=s(),void 0===n?t:o(t,n)}},function(e,n,t){var r=t(29).f,o=t(25),a=t(33)("toStringTag");e.exports=function(e,n,t){e&&!o(e=t?e:e.prototype,a)&&r(e,a,{configurable:!0,value:n})}},function(e,n,t){n.f=t(33)},function(e,n,t){var r=t(23),o=t(24),a=t(47),i=t(67),l=t(29).f;e.exports=function(e){var n=o.Symbol||(o.Symbol=a?{}:r.Symbol||{});"_"==e.charAt(0)||e in n||l(n,e,{value:i.f(e)})}},function(e,n){var t;t=function(){return this}();try{t=t||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(e,n,t){"use strict";var r;n.__esModule=!0,n.default=void 0;var o=((r=t(0))&&r.__esModule?r:{default:r}).default.createContext({menuRef:function(){},toggleRef:function(){},onToggle:function(){},toggleNode:void 0,alignEnd:null,show:null,drop:null});n.default=o,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(17)),a=r(t(101)),i=r(t(102)),l=function(){};o.default&&(l=function(e,n,t,r){return(0,a.default)(e,n,t,r),function(){(0,i.default)(e,n,t,r)}});var s=l;n.default=s,e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=i(t(0)),a=i(t(73));function i(e){return e&&e.__esModule?e:{default:e}}n.default=(0,a.default)(function(e,n,t,a,i){var l=e[n],s=void 0===l?"undefined":r(l);return o.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+t+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===s&&"function"==typeof l.render||1===l.nodeType?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+t+"`, expected a ReactComponent or a DOMElement.")}),e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){function n(n,t,r,o,a,i){var l=o||"<<anonymous>>",s=i||r;if(null==t[r])return n?new Error("Required "+a+" `"+s+"` was not specified in `"+l+"`."):null;for(var c=arguments.length,u=Array(c>6?c-6:0),d=6;d<c;d++)u[d-6]=arguments[d];return e.apply(void 0,[t,r,l,a,s].concat(u))}var t=n.bind(null,!1);return t.isRequired=n.bind(null,!0),t},e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=n.makeEventKey=void 0;var o=r(t(0)).default.createContext();n.makeEventKey=function(e,n){return null!=e?String(e):n||null};var a=o;n.default=a},function(e,n,t){(e.exports=t(119)(!1)).push([e.i,'/*!\n * Bootstrap v4.1.3 (https://getbootstrap.com/)\n * Copyright 2011-2018 The Bootstrap Authors\n * Copyright 2011-2018 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n:root {\n  --blue: #007bff;\n  --indigo: #6610f2;\n  --purple: #6f42c1;\n  --pink: #e83e8c;\n  --red: #dc3545;\n  --orange: #fd7e14;\n  --yellow: #ffc107;\n  --green: #28a745;\n  --teal: #20c997;\n  --cyan: #17a2b8;\n  --white: #fff;\n  --gray: #6c757d;\n  --gray-dark: #343a40;\n  --primary: #007bff;\n  --secondary: #6c757d;\n  --success: #28a745;\n  --info: #17a2b8;\n  --warning: #ffc107;\n  --danger: #dc3545;\n  --light: #f8f9fa;\n  --dark: #343a40;\n  --breakpoint-xs: 0;\n  --breakpoint-sm: 576px;\n  --breakpoint-md: 768px;\n  --breakpoint-lg: 992px;\n  --breakpoint-xl: 1200px;\n  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: sans-serif;\n  line-height: 1.15;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n  -ms-overflow-style: scrollbar;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n@-ms-viewport {\n  width: device-width;\n}\n\narticle, aside, figcaption, figure, footer, header, hgroup, main, nav, section {\n  display: block;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  text-align: left;\n  background-color: #fff;\n}\n\n[tabindex="-1"]:focus {\n  outline: 0 !important;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n}\n\np {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nabbr[title],\nabbr[data-original-title] {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n  cursor: help;\n  border-bottom: 0;\n}\n\naddress {\n  margin-bottom: 1rem;\n  font-style: normal;\n  line-height: inherit;\n}\n\nol,\nul,\ndl {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nol ol,\nul ul,\nol ul,\nul ol {\n  margin-bottom: 0;\n}\n\ndt {\n  font-weight: 700;\n}\n\ndd {\n  margin-bottom: .5rem;\n  margin-left: 0;\n}\n\nblockquote {\n  margin: 0 0 1rem;\n}\n\ndfn {\n  font-style: italic;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\nsmall {\n  font-size: 80%;\n}\n\nsub,\nsup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -.25em;\n}\n\nsup {\n  top: -.5em;\n}\n\na {\n  color: #007bff;\n  text-decoration: none;\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\na:hover {\n  color: #0056b3;\n  text-decoration: underline;\n}\n\na:not([href]):not([tabindex]) {\n  color: inherit;\n  text-decoration: none;\n}\n\na:not([href]):not([tabindex]):hover, a:not([href]):not([tabindex]):focus {\n  color: inherit;\n  text-decoration: none;\n}\n\na:not([href]):not([tabindex]):focus {\n  outline: 0;\n}\n\npre,\ncode,\nkbd,\nsamp {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n  font-size: 1em;\n}\n\npre {\n  margin-top: 0;\n  margin-bottom: 1rem;\n  overflow: auto;\n  -ms-overflow-style: scrollbar;\n}\n\nfigure {\n  margin: 0 0 1rem;\n}\n\nimg {\n  vertical-align: middle;\n  border-style: none;\n}\n\nsvg {\n  overflow: hidden;\n  vertical-align: middle;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ncaption {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  color: #6c757d;\n  text-align: left;\n  caption-side: bottom;\n}\n\nth {\n  text-align: inherit;\n}\n\nlabel {\n  display: inline-block;\n  margin-bottom: 0.5rem;\n}\n\nbutton {\n  border-radius: 0;\n}\n\nbutton:focus {\n  outline: 1px dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n}\n\ninput,\nbutton,\nselect,\noptgroup,\ntextarea {\n  margin: 0;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\nbutton,\ninput {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\nhtml [type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  padding: 0;\n  border-style: none;\n}\n\ninput[type="radio"],\ninput[type="checkbox"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\ninput[type="date"],\ninput[type="time"],\ninput[type="datetime-local"],\ninput[type="month"] {\n  -webkit-appearance: listbox;\n}\n\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\n\nlegend {\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin-bottom: .5rem;\n  font-size: 1.5rem;\n  line-height: inherit;\n  color: inherit;\n  white-space: normal;\n}\n\nprogress {\n  vertical-align: baseline;\n}\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[type="search"] {\n  outline-offset: -2px;\n  -webkit-appearance: none;\n}\n\n[type="search"]::-webkit-search-cancel-button,\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n::-webkit-file-upload-button {\n  font: inherit;\n  -webkit-appearance: button;\n}\n\noutput {\n  display: inline-block;\n}\n\nsummary {\n  display: list-item;\n  cursor: pointer;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none !important;\n}\n\nh1, h2, h3, h4, h5, h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  margin-bottom: 0.5rem;\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.2;\n  color: inherit;\n}\n\nh1, .h1 {\n  font-size: 2.5rem;\n}\n\nh2, .h2 {\n  font-size: 2rem;\n}\n\nh3, .h3 {\n  font-size: 1.75rem;\n}\n\nh4, .h4 {\n  font-size: 1.5rem;\n}\n\nh5, .h5 {\n  font-size: 1.25rem;\n}\n\nh6, .h6 {\n  font-size: 1rem;\n}\n\n.lead {\n  font-size: 1.25rem;\n  font-weight: 300;\n}\n\n.display-1 {\n  font-size: 6rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-2 {\n  font-size: 5.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-3 {\n  font-size: 4.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-4 {\n  font-size: 3.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\nhr {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  border: 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n}\n\nsmall,\n.small {\n  font-size: 80%;\n  font-weight: 400;\n}\n\nmark,\n.mark {\n  padding: 0.2em;\n  background-color: #fcf8e3;\n}\n\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline-item {\n  display: inline-block;\n}\n\n.list-inline-item:not(:last-child) {\n  margin-right: 0.5rem;\n}\n\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\n\n.blockquote {\n  margin-bottom: 1rem;\n  font-size: 1.25rem;\n}\n\n.blockquote-footer {\n  display: block;\n  font-size: 80%;\n  color: #6c757d;\n}\n\n.blockquote-footer::before {\n  content: "\\2014   \\A0";\n}\n\n.img-fluid {\n  max-width: 100%;\n  height: auto;\n}\n\n.img-thumbnail {\n  padding: 0.25rem;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n  border-radius: 0.25rem;\n  max-width: 100%;\n  height: auto;\n}\n\n.figure {\n  display: inline-block;\n}\n\n.figure-img {\n  margin-bottom: 0.5rem;\n  line-height: 1;\n}\n\n.figure-caption {\n  font-size: 90%;\n  color: #6c757d;\n}\n\ncode {\n  font-size: 87.5%;\n  color: #e83e8c;\n  word-break: break-word;\n}\n\na > code {\n  color: inherit;\n}\n\nkbd {\n  padding: 0.2rem 0.4rem;\n  font-size: 87.5%;\n  color: #fff;\n  background-color: #212529;\n  border-radius: 0.2rem;\n}\n\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: 700;\n}\n\npre {\n  display: block;\n  font-size: 87.5%;\n  color: #212529;\n}\n\npre code {\n  font-size: inherit;\n  color: inherit;\n  word-break: normal;\n}\n\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n\n.container {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@media (min-width: 576px) {\n  .container {\n    max-width: 540px;\n  }\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 720px;\n  }\n}\n\n@media (min-width: 992px) {\n  .container {\n    max-width: 960px;\n  }\n}\n\n@media (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n\n.container-fluid {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.row {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -15px;\n  margin-left: -15px;\n}\n\n.no-gutters {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.no-gutters > .col,\n.no-gutters > [class*="col-"] {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,\n.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,\n.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,\n.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,\n.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,\n.col-xl-auto {\n  position: relative;\n  width: 100%;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n\n.col {\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  max-width: 100%;\n}\n\n.col-auto {\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  width: auto;\n  max-width: none;\n}\n\n.col-1 {\n  -ms-flex: 0 0 8.333333%;\n  flex: 0 0 8.333333%;\n  max-width: 8.333333%;\n}\n\n.col-2 {\n  -ms-flex: 0 0 16.666667%;\n  flex: 0 0 16.666667%;\n  max-width: 16.666667%;\n}\n\n.col-3 {\n  -ms-flex: 0 0 25%;\n  flex: 0 0 25%;\n  max-width: 25%;\n}\n\n.col-4 {\n  -ms-flex: 0 0 33.333333%;\n  flex: 0 0 33.333333%;\n  max-width: 33.333333%;\n}\n\n.col-5 {\n  -ms-flex: 0 0 41.666667%;\n  flex: 0 0 41.666667%;\n  max-width: 41.666667%;\n}\n\n.col-6 {\n  -ms-flex: 0 0 50%;\n  flex: 0 0 50%;\n  max-width: 50%;\n}\n\n.col-7 {\n  -ms-flex: 0 0 58.333333%;\n  flex: 0 0 58.333333%;\n  max-width: 58.333333%;\n}\n\n.col-8 {\n  -ms-flex: 0 0 66.666667%;\n  flex: 0 0 66.666667%;\n  max-width: 66.666667%;\n}\n\n.col-9 {\n  -ms-flex: 0 0 75%;\n  flex: 0 0 75%;\n  max-width: 75%;\n}\n\n.col-10 {\n  -ms-flex: 0 0 83.333333%;\n  flex: 0 0 83.333333%;\n  max-width: 83.333333%;\n}\n\n.col-11 {\n  -ms-flex: 0 0 91.666667%;\n  flex: 0 0 91.666667%;\n  max-width: 91.666667%;\n}\n\n.col-12 {\n  -ms-flex: 0 0 100%;\n  flex: 0 0 100%;\n  max-width: 100%;\n}\n\n.order-first {\n  -ms-flex-order: -1;\n  order: -1;\n}\n\n.order-last {\n  -ms-flex-order: 13;\n  order: 13;\n}\n\n.order-0 {\n  -ms-flex-order: 0;\n  order: 0;\n}\n\n.order-1 {\n  -ms-flex-order: 1;\n  order: 1;\n}\n\n.order-2 {\n  -ms-flex-order: 2;\n  order: 2;\n}\n\n.order-3 {\n  -ms-flex-order: 3;\n  order: 3;\n}\n\n.order-4 {\n  -ms-flex-order: 4;\n  order: 4;\n}\n\n.order-5 {\n  -ms-flex-order: 5;\n  order: 5;\n}\n\n.order-6 {\n  -ms-flex-order: 6;\n  order: 6;\n}\n\n.order-7 {\n  -ms-flex-order: 7;\n  order: 7;\n}\n\n.order-8 {\n  -ms-flex-order: 8;\n  order: 8;\n}\n\n.order-9 {\n  -ms-flex-order: 9;\n  order: 9;\n}\n\n.order-10 {\n  -ms-flex-order: 10;\n  order: 10;\n}\n\n.order-11 {\n  -ms-flex-order: 11;\n  order: 11;\n}\n\n.order-12 {\n  -ms-flex-order: 12;\n  order: 12;\n}\n\n.offset-1 {\n  margin-left: 8.333333%;\n}\n\n.offset-2 {\n  margin-left: 16.666667%;\n}\n\n.offset-3 {\n  margin-left: 25%;\n}\n\n.offset-4 {\n  margin-left: 33.333333%;\n}\n\n.offset-5 {\n  margin-left: 41.666667%;\n}\n\n.offset-6 {\n  margin-left: 50%;\n}\n\n.offset-7 {\n  margin-left: 58.333333%;\n}\n\n.offset-8 {\n  margin-left: 66.666667%;\n}\n\n.offset-9 {\n  margin-left: 75%;\n}\n\n.offset-10 {\n  margin-left: 83.333333%;\n}\n\n.offset-11 {\n  margin-left: 91.666667%;\n}\n\n@media (min-width: 576px) {\n  .col-sm {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-sm-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-sm-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-sm-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-sm-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-sm-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-sm-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-sm-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-sm-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-sm-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-sm-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-sm-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-sm-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-sm-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-sm-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-sm-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-sm-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-sm-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-sm-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-sm-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-sm-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-sm-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-sm-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-sm-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-sm-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-sm-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-sm-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-sm-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-sm-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-sm-0 {\n    margin-left: 0;\n  }\n  .offset-sm-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-sm-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-sm-3 {\n    margin-left: 25%;\n  }\n  .offset-sm-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-sm-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-sm-6 {\n    margin-left: 50%;\n  }\n  .offset-sm-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-sm-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-sm-9 {\n    margin-left: 75%;\n  }\n  .offset-sm-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-sm-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 768px) {\n  .col-md {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-md-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-md-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-md-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-md-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-md-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-md-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-md-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-md-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-md-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-md-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-md-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-md-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-md-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-md-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-md-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-md-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-md-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-md-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-md-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-md-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-md-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-md-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-md-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-md-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-md-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-md-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-md-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-md-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-md-0 {\n    margin-left: 0;\n  }\n  .offset-md-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-md-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-md-3 {\n    margin-left: 25%;\n  }\n  .offset-md-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-md-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-md-6 {\n    margin-left: 50%;\n  }\n  .offset-md-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-md-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-md-9 {\n    margin-left: 75%;\n  }\n  .offset-md-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-md-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 992px) {\n  .col-lg {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-lg-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-lg-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-lg-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-lg-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-lg-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-lg-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-lg-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-lg-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-lg-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-lg-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-lg-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-lg-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-lg-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-lg-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-lg-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-lg-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-lg-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-lg-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-lg-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-lg-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-lg-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-lg-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-lg-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-lg-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-lg-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-lg-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-lg-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-lg-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-lg-0 {\n    margin-left: 0;\n  }\n  .offset-lg-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-lg-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-lg-3 {\n    margin-left: 25%;\n  }\n  .offset-lg-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-lg-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-lg-6 {\n    margin-left: 50%;\n  }\n  .offset-lg-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-lg-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-lg-9 {\n    margin-left: 75%;\n  }\n  .offset-lg-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-lg-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 1200px) {\n  .col-xl {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-xl-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-xl-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-xl-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-xl-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-xl-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-xl-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-xl-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-xl-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-xl-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-xl-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-xl-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-xl-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-xl-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-xl-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-xl-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-xl-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-xl-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-xl-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-xl-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-xl-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-xl-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-xl-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-xl-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-xl-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-xl-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-xl-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-xl-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-xl-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-xl-0 {\n    margin-left: 0;\n  }\n  .offset-xl-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-xl-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-xl-3 {\n    margin-left: 25%;\n  }\n  .offset-xl-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-xl-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-xl-6 {\n    margin-left: 50%;\n  }\n  .offset-xl-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-xl-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-xl-9 {\n    margin-left: 75%;\n  }\n  .offset-xl-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-xl-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n.table {\n  width: 100%;\n  margin-bottom: 1rem;\n  background-color: transparent;\n}\n\n.table th,\n.table td {\n  padding: 0.75rem;\n  vertical-align: top;\n  border-top: 1px solid #dee2e6;\n}\n\n.table thead th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #dee2e6;\n}\n\n.table tbody + tbody {\n  border-top: 2px solid #dee2e6;\n}\n\n.table .table {\n  background-color: #fff;\n}\n\n.table-sm th,\n.table-sm td {\n  padding: 0.3rem;\n}\n\n.table-bordered {\n  border: 1px solid #dee2e6;\n}\n\n.table-bordered th,\n.table-bordered td {\n  border: 1px solid #dee2e6;\n}\n\n.table-bordered thead th,\n.table-bordered thead td {\n  border-bottom-width: 2px;\n}\n\n.table-borderless th,\n.table-borderless td,\n.table-borderless thead th,\n.table-borderless tbody + tbody {\n  border: 0;\n}\n\n.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.table-hover tbody tr:hover {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-primary,\n.table-primary > th,\n.table-primary > td {\n  background-color: #b8daff;\n}\n\n.table-hover .table-primary:hover {\n  background-color: #9fcdff;\n}\n\n.table-hover .table-primary:hover > td,\n.table-hover .table-primary:hover > th {\n  background-color: #9fcdff;\n}\n\n.table-secondary,\n.table-secondary > th,\n.table-secondary > td {\n  background-color: #d6d8db;\n}\n\n.table-hover .table-secondary:hover {\n  background-color: #c8cbcf;\n}\n\n.table-hover .table-secondary:hover > td,\n.table-hover .table-secondary:hover > th {\n  background-color: #c8cbcf;\n}\n\n.table-success,\n.table-success > th,\n.table-success > td {\n  background-color: #c3e6cb;\n}\n\n.table-hover .table-success:hover {\n  background-color: #b1dfbb;\n}\n\n.table-hover .table-success:hover > td,\n.table-hover .table-success:hover > th {\n  background-color: #b1dfbb;\n}\n\n.table-info,\n.table-info > th,\n.table-info > td {\n  background-color: #bee5eb;\n}\n\n.table-hover .table-info:hover {\n  background-color: #abdde5;\n}\n\n.table-hover .table-info:hover > td,\n.table-hover .table-info:hover > th {\n  background-color: #abdde5;\n}\n\n.table-warning,\n.table-warning > th,\n.table-warning > td {\n  background-color: #ffeeba;\n}\n\n.table-hover .table-warning:hover {\n  background-color: #ffe8a1;\n}\n\n.table-hover .table-warning:hover > td,\n.table-hover .table-warning:hover > th {\n  background-color: #ffe8a1;\n}\n\n.table-danger,\n.table-danger > th,\n.table-danger > td {\n  background-color: #f5c6cb;\n}\n\n.table-hover .table-danger:hover {\n  background-color: #f1b0b7;\n}\n\n.table-hover .table-danger:hover > td,\n.table-hover .table-danger:hover > th {\n  background-color: #f1b0b7;\n}\n\n.table-light,\n.table-light > th,\n.table-light > td {\n  background-color: #fdfdfe;\n}\n\n.table-hover .table-light:hover {\n  background-color: #ececf6;\n}\n\n.table-hover .table-light:hover > td,\n.table-hover .table-light:hover > th {\n  background-color: #ececf6;\n}\n\n.table-dark,\n.table-dark > th,\n.table-dark > td {\n  background-color: #c6c8ca;\n}\n\n.table-hover .table-dark:hover {\n  background-color: #b9bbbe;\n}\n\n.table-hover .table-dark:hover > td,\n.table-hover .table-dark:hover > th {\n  background-color: #b9bbbe;\n}\n\n.table-active,\n.table-active > th,\n.table-active > td {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-hover .table-active:hover {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-hover .table-active:hover > td,\n.table-hover .table-active:hover > th {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table .thead-dark th {\n  color: #fff;\n  background-color: #212529;\n  border-color: #32383e;\n}\n\n.table .thead-light th {\n  color: #495057;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n\n.table-dark {\n  color: #fff;\n  background-color: #212529;\n}\n\n.table-dark th,\n.table-dark td,\n.table-dark thead th {\n  border-color: #32383e;\n}\n\n.table-dark.table-bordered {\n  border: 0;\n}\n\n.table-dark.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(255, 255, 255, 0.05);\n}\n\n.table-dark.table-hover tbody tr:hover {\n  background-color: rgba(255, 255, 255, 0.075);\n}\n\n@media (max-width: 575.98px) {\n  .table-responsive-sm {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-sm > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .table-responsive-md {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-md > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .table-responsive-lg {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-lg > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .table-responsive-xl {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-xl > .table-bordered {\n    border: 0;\n  }\n}\n\n.table-responsive {\n  display: block;\n  width: 100%;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n.table-responsive > .table-bordered {\n  border: 0;\n}\n\n.form-control {\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .form-control {\n    transition: none;\n  }\n}\n\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n\n.form-control:focus {\n  color: #495057;\n  background-color: #fff;\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.form-control::-webkit-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::-moz-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control:-ms-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::-ms-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control:disabled, .form-control[readonly] {\n  background-color: #e9ecef;\n  opacity: 1;\n}\n\nselect.form-control:focus::-ms-value {\n  color: #495057;\n  background-color: #fff;\n}\n\n.form-control-file,\n.form-control-range {\n  display: block;\n  width: 100%;\n}\n\n.col-form-label {\n  padding-top: calc(0.375rem + 1px);\n  padding-bottom: calc(0.375rem + 1px);\n  margin-bottom: 0;\n  font-size: inherit;\n  line-height: 1.5;\n}\n\n.col-form-label-lg {\n  padding-top: calc(0.5rem + 1px);\n  padding-bottom: calc(0.5rem + 1px);\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.col-form-label-sm {\n  padding-top: calc(0.25rem + 1px);\n  padding-bottom: calc(0.25rem + 1px);\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n.form-control-plaintext {\n  display: block;\n  width: 100%;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  margin-bottom: 0;\n  line-height: 1.5;\n  color: #212529;\n  background-color: transparent;\n  border: solid transparent;\n  border-width: 1px 0;\n}\n\n.form-control-plaintext.form-control-sm, .form-control-plaintext.form-control-lg {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.form-control-sm {\n  height: calc(1.8125rem + 2px);\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.form-control-lg {\n  height: calc(2.875rem + 2px);\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\nselect.form-control[size], select.form-control[multiple] {\n  height: auto;\n}\n\ntextarea.form-control {\n  height: auto;\n}\n\n.form-group {\n  margin-bottom: 1rem;\n}\n\n.form-text {\n  display: block;\n  margin-top: 0.25rem;\n}\n\n.form-row {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -5px;\n  margin-left: -5px;\n}\n\n.form-row > .col,\n.form-row > [class*="col-"] {\n  padding-right: 5px;\n  padding-left: 5px;\n}\n\n.form-check {\n  position: relative;\n  display: block;\n  padding-left: 1.25rem;\n}\n\n.form-check-input {\n  position: absolute;\n  margin-top: 0.3rem;\n  margin-left: -1.25rem;\n}\n\n.form-check-input:disabled ~ .form-check-label {\n  color: #6c757d;\n}\n\n.form-check-label {\n  margin-bottom: 0;\n}\n\n.form-check-inline {\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  -ms-flex-align: center;\n  align-items: center;\n  padding-left: 0;\n  margin-right: 0.75rem;\n}\n\n.form-check-inline .form-check-input {\n  position: static;\n  margin-top: 0;\n  margin-right: 0.3125rem;\n  margin-left: 0;\n}\n\n.valid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #28a745;\n}\n\n.valid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: 0.25rem 0.5rem;\n  margin-top: .1rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  color: #fff;\n  background-color: rgba(40, 167, 69, 0.9);\n  border-radius: 0.25rem;\n}\n\n.was-validated .form-control:valid, .form-control.is-valid, .was-validated\n.custom-select:valid,\n.custom-select.is-valid {\n  border-color: #28a745;\n}\n\n.was-validated .form-control:valid:focus, .form-control.is-valid:focus, .was-validated\n.custom-select:valid:focus,\n.custom-select.is-valid:focus {\n  border-color: #28a745;\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.was-validated .form-control:valid ~ .valid-feedback,\n.was-validated .form-control:valid ~ .valid-tooltip, .form-control.is-valid ~ .valid-feedback,\n.form-control.is-valid ~ .valid-tooltip, .was-validated\n.custom-select:valid ~ .valid-feedback,\n.was-validated\n.custom-select:valid ~ .valid-tooltip,\n.custom-select.is-valid ~ .valid-feedback,\n.custom-select.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .form-control-file:valid ~ .valid-feedback,\n.was-validated .form-control-file:valid ~ .valid-tooltip, .form-control-file.is-valid ~ .valid-feedback,\n.form-control-file.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .form-check-input:valid ~ .form-check-label, .form-check-input.is-valid ~ .form-check-label {\n  color: #28a745;\n}\n\n.was-validated .form-check-input:valid ~ .valid-feedback,\n.was-validated .form-check-input:valid ~ .valid-tooltip, .form-check-input.is-valid ~ .valid-feedback,\n.form-check-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:valid ~ .custom-control-label, .custom-control-input.is-valid ~ .custom-control-label {\n  color: #28a745;\n}\n\n.was-validated .custom-control-input:valid ~ .custom-control-label::before, .custom-control-input.is-valid ~ .custom-control-label::before {\n  background-color: #71dd8a;\n}\n\n.was-validated .custom-control-input:valid ~ .valid-feedback,\n.was-validated .custom-control-input:valid ~ .valid-tooltip, .custom-control-input.is-valid ~ .valid-feedback,\n.custom-control-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:valid:checked ~ .custom-control-label::before, .custom-control-input.is-valid:checked ~ .custom-control-label::before {\n  background-color: #34ce57;\n}\n\n.was-validated .custom-control-input:valid:focus ~ .custom-control-label::before, .custom-control-input.is-valid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.was-validated .custom-file-input:valid ~ .custom-file-label, .custom-file-input.is-valid ~ .custom-file-label {\n  border-color: #28a745;\n}\n\n.was-validated .custom-file-input:valid ~ .custom-file-label::after, .custom-file-input.is-valid ~ .custom-file-label::after {\n  border-color: inherit;\n}\n\n.was-validated .custom-file-input:valid ~ .valid-feedback,\n.was-validated .custom-file-input:valid ~ .valid-tooltip, .custom-file-input.is-valid ~ .valid-feedback,\n.custom-file-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-file-input:valid:focus ~ .custom-file-label, .custom-file-input.is-valid:focus ~ .custom-file-label {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.invalid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #dc3545;\n}\n\n.invalid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: 0.25rem 0.5rem;\n  margin-top: .1rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  color: #fff;\n  background-color: rgba(220, 53, 69, 0.9);\n  border-radius: 0.25rem;\n}\n\n.was-validated .form-control:invalid, .form-control.is-invalid, .was-validated\n.custom-select:invalid,\n.custom-select.is-invalid {\n  border-color: #dc3545;\n}\n\n.was-validated .form-control:invalid:focus, .form-control.is-invalid:focus, .was-validated\n.custom-select:invalid:focus,\n.custom-select.is-invalid:focus {\n  border-color: #dc3545;\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.was-validated .form-control:invalid ~ .invalid-feedback,\n.was-validated .form-control:invalid ~ .invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback,\n.form-control.is-invalid ~ .invalid-tooltip, .was-validated\n.custom-select:invalid ~ .invalid-feedback,\n.was-validated\n.custom-select:invalid ~ .invalid-tooltip,\n.custom-select.is-invalid ~ .invalid-feedback,\n.custom-select.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .form-control-file:invalid ~ .invalid-feedback,\n.was-validated .form-control-file:invalid ~ .invalid-tooltip, .form-control-file.is-invalid ~ .invalid-feedback,\n.form-control-file.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .form-check-input:invalid ~ .form-check-label, .form-check-input.is-invalid ~ .form-check-label {\n  color: #dc3545;\n}\n\n.was-validated .form-check-input:invalid ~ .invalid-feedback,\n.was-validated .form-check-input:invalid ~ .invalid-tooltip, .form-check-input.is-invalid ~ .invalid-feedback,\n.form-check-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label, .custom-control-input.is-invalid ~ .custom-control-label {\n  color: #dc3545;\n}\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label::before, .custom-control-input.is-invalid ~ .custom-control-label::before {\n  background-color: #efa2a9;\n}\n\n.was-validated .custom-control-input:invalid ~ .invalid-feedback,\n.was-validated .custom-control-input:invalid ~ .invalid-tooltip, .custom-control-input.is-invalid ~ .invalid-feedback,\n.custom-control-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before, .custom-control-input.is-invalid:checked ~ .custom-control-label::before {\n  background-color: #e4606d;\n}\n\n.was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before, .custom-control-input.is-invalid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label, .custom-file-input.is-invalid ~ .custom-file-label {\n  border-color: #dc3545;\n}\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label::after, .custom-file-input.is-invalid ~ .custom-file-label::after {\n  border-color: inherit;\n}\n\n.was-validated .custom-file-input:invalid ~ .invalid-feedback,\n.was-validated .custom-file-input:invalid ~ .invalid-tooltip, .custom-file-input.is-invalid ~ .invalid-feedback,\n.custom-file-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-file-input:invalid:focus ~ .custom-file-label, .custom-file-input.is-invalid:focus ~ .custom-file-label {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.form-inline {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-flow: row wrap;\n  flex-flow: row wrap;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.form-inline .form-check {\n  width: 100%;\n}\n\n@media (min-width: 576px) {\n  .form-inline label {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    margin-bottom: 0;\n  }\n  .form-inline .form-group {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    -ms-flex-align: center;\n    align-items: center;\n    margin-bottom: 0;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-plaintext {\n    display: inline-block;\n  }\n  .form-inline .input-group,\n  .form-inline .custom-select {\n    width: auto;\n  }\n  .form-inline .form-check {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    width: auto;\n    padding-left: 0;\n  }\n  .form-inline .form-check-input {\n    position: relative;\n    margin-top: 0;\n    margin-right: 0.25rem;\n    margin-left: 0;\n  }\n  .form-inline .custom-control {\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n  }\n  .form-inline .custom-control-label {\n    margin-bottom: 0;\n  }\n}\n\n.btn {\n  display: inline-block;\n  font-weight: 400;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .btn {\n    transition: none;\n  }\n}\n\n.btn:hover, .btn:focus {\n  text-decoration: none;\n}\n\n.btn:focus, .btn.focus {\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.btn.disabled, .btn:disabled {\n  opacity: 0.65;\n}\n\n.btn:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\na.btn.disabled,\nfieldset:disabled a.btn {\n  pointer-events: none;\n}\n\n.btn-primary {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-primary:hover {\n  color: #fff;\n  background-color: #0069d9;\n  border-color: #0062cc;\n}\n\n.btn-primary:focus, .btn-primary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-primary.disabled, .btn-primary:disabled {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-primary:not(:disabled):not(.disabled):active, .btn-primary:not(:disabled):not(.disabled).active,\n.show > .btn-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #0062cc;\n  border-color: #005cbf;\n}\n\n.btn-primary:not(:disabled):not(.disabled):active:focus, .btn-primary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-primary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-secondary {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-secondary:hover {\n  color: #fff;\n  background-color: #5a6268;\n  border-color: #545b62;\n}\n\n.btn-secondary:focus, .btn-secondary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-secondary.disabled, .btn-secondary:disabled {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-secondary:not(:disabled):not(.disabled):active, .btn-secondary:not(:disabled):not(.disabled).active,\n.show > .btn-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #545b62;\n  border-color: #4e555b;\n}\n\n.btn-secondary:not(:disabled):not(.disabled):active:focus, .btn-secondary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-secondary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-success {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-success:hover {\n  color: #fff;\n  background-color: #218838;\n  border-color: #1e7e34;\n}\n\n.btn-success:focus, .btn-success.focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-success.disabled, .btn-success:disabled {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-success:not(:disabled):not(.disabled):active, .btn-success:not(:disabled):not(.disabled).active,\n.show > .btn-success.dropdown-toggle {\n  color: #fff;\n  background-color: #1e7e34;\n  border-color: #1c7430;\n}\n\n.btn-success:not(:disabled):not(.disabled):active:focus, .btn-success:not(:disabled):not(.disabled).active:focus,\n.show > .btn-success.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-info {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-info:hover {\n  color: #fff;\n  background-color: #138496;\n  border-color: #117a8b;\n}\n\n.btn-info:focus, .btn-info.focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-info.disabled, .btn-info:disabled {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-info:not(:disabled):not(.disabled):active, .btn-info:not(:disabled):not(.disabled).active,\n.show > .btn-info.dropdown-toggle {\n  color: #fff;\n  background-color: #117a8b;\n  border-color: #10707f;\n}\n\n.btn-info:not(:disabled):not(.disabled):active:focus, .btn-info:not(:disabled):not(.disabled).active:focus,\n.show > .btn-info.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-warning {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-warning:hover {\n  color: #212529;\n  background-color: #e0a800;\n  border-color: #d39e00;\n}\n\n.btn-warning:focus, .btn-warning.focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-warning.disabled, .btn-warning:disabled {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-warning:not(:disabled):not(.disabled):active, .btn-warning:not(:disabled):not(.disabled).active,\n.show > .btn-warning.dropdown-toggle {\n  color: #212529;\n  background-color: #d39e00;\n  border-color: #c69500;\n}\n\n.btn-warning:not(:disabled):not(.disabled):active:focus, .btn-warning:not(:disabled):not(.disabled).active:focus,\n.show > .btn-warning.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-danger {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c82333;\n  border-color: #bd2130;\n}\n\n.btn-danger:focus, .btn-danger.focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-danger.disabled, .btn-danger:disabled {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-danger:not(:disabled):not(.disabled):active, .btn-danger:not(:disabled):not(.disabled).active,\n.show > .btn-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #bd2130;\n  border-color: #b21f2d;\n}\n\n.btn-danger:not(:disabled):not(.disabled):active:focus, .btn-danger:not(:disabled):not(.disabled).active:focus,\n.show > .btn-danger.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-light {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-light:hover {\n  color: #212529;\n  background-color: #e2e6ea;\n  border-color: #dae0e5;\n}\n\n.btn-light:focus, .btn-light.focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-light.disabled, .btn-light:disabled {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-light:not(:disabled):not(.disabled):active, .btn-light:not(:disabled):not(.disabled).active,\n.show > .btn-light.dropdown-toggle {\n  color: #212529;\n  background-color: #dae0e5;\n  border-color: #d3d9df;\n}\n\n.btn-light:not(:disabled):not(.disabled):active:focus, .btn-light:not(:disabled):not(.disabled).active:focus,\n.show > .btn-light.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-dark {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-dark:hover {\n  color: #fff;\n  background-color: #23272b;\n  border-color: #1d2124;\n}\n\n.btn-dark:focus, .btn-dark.focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-dark.disabled, .btn-dark:disabled {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-dark:not(:disabled):not(.disabled):active, .btn-dark:not(:disabled):not(.disabled).active,\n.show > .btn-dark.dropdown-toggle {\n  color: #fff;\n  background-color: #1d2124;\n  border-color: #171a1d;\n}\n\n.btn-dark:not(:disabled):not(.disabled):active:focus, .btn-dark:not(:disabled):not(.disabled).active:focus,\n.show > .btn-dark.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-outline-primary {\n  color: #007bff;\n  background-color: transparent;\n  background-image: none;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:hover {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:focus, .btn-outline-primary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-outline-primary.disabled, .btn-outline-primary:disabled {\n  color: #007bff;\n  background-color: transparent;\n}\n\n.btn-outline-primary:not(:disabled):not(.disabled):active, .btn-outline-primary:not(:disabled):not(.disabled).active,\n.show > .btn-outline-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:not(:disabled):not(.disabled):active:focus, .btn-outline-primary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-primary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-outline-secondary {\n  color: #6c757d;\n  background-color: transparent;\n  background-image: none;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:hover {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:focus, .btn-outline-secondary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-outline-secondary.disabled, .btn-outline-secondary:disabled {\n  color: #6c757d;\n  background-color: transparent;\n}\n\n.btn-outline-secondary:not(:disabled):not(.disabled):active, .btn-outline-secondary:not(:disabled):not(.disabled).active,\n.show > .btn-outline-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:not(:disabled):not(.disabled):active:focus, .btn-outline-secondary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-secondary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-outline-success {\n  color: #28a745;\n  background-color: transparent;\n  background-image: none;\n  border-color: #28a745;\n}\n\n.btn-outline-success:hover {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-success:focus, .btn-outline-success.focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-outline-success.disabled, .btn-outline-success:disabled {\n  color: #28a745;\n  background-color: transparent;\n}\n\n.btn-outline-success:not(:disabled):not(.disabled):active, .btn-outline-success:not(:disabled):not(.disabled).active,\n.show > .btn-outline-success.dropdown-toggle {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-success:not(:disabled):not(.disabled):active:focus, .btn-outline-success:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-success.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-outline-info {\n  color: #17a2b8;\n  background-color: transparent;\n  background-image: none;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:hover {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:focus, .btn-outline-info.focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-outline-info.disabled, .btn-outline-info:disabled {\n  color: #17a2b8;\n  background-color: transparent;\n}\n\n.btn-outline-info:not(:disabled):not(.disabled):active, .btn-outline-info:not(:disabled):not(.disabled).active,\n.show > .btn-outline-info.dropdown-toggle {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:not(:disabled):not(.disabled):active:focus, .btn-outline-info:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-info.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-outline-warning {\n  color: #ffc107;\n  background-color: transparent;\n  background-image: none;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:hover {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:focus, .btn-outline-warning.focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-outline-warning.disabled, .btn-outline-warning:disabled {\n  color: #ffc107;\n  background-color: transparent;\n}\n\n.btn-outline-warning:not(:disabled):not(.disabled):active, .btn-outline-warning:not(:disabled):not(.disabled).active,\n.show > .btn-outline-warning.dropdown-toggle {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:not(:disabled):not(.disabled):active:focus, .btn-outline-warning:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-warning.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-outline-danger {\n  color: #dc3545;\n  background-color: transparent;\n  background-image: none;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:hover {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:focus, .btn-outline-danger.focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-outline-danger.disabled, .btn-outline-danger:disabled {\n  color: #dc3545;\n  background-color: transparent;\n}\n\n.btn-outline-danger:not(:disabled):not(.disabled):active, .btn-outline-danger:not(:disabled):not(.disabled).active,\n.show > .btn-outline-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:not(:disabled):not(.disabled):active:focus, .btn-outline-danger:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-danger.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-outline-light {\n  color: #f8f9fa;\n  background-color: transparent;\n  background-image: none;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:hover {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:focus, .btn-outline-light.focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-outline-light.disabled, .btn-outline-light:disabled {\n  color: #f8f9fa;\n  background-color: transparent;\n}\n\n.btn-outline-light:not(:disabled):not(.disabled):active, .btn-outline-light:not(:disabled):not(.disabled).active,\n.show > .btn-outline-light.dropdown-toggle {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:not(:disabled):not(.disabled):active:focus, .btn-outline-light:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-light.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-outline-dark {\n  color: #343a40;\n  background-color: transparent;\n  background-image: none;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:hover {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:focus, .btn-outline-dark.focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-outline-dark.disabled, .btn-outline-dark:disabled {\n  color: #343a40;\n  background-color: transparent;\n}\n\n.btn-outline-dark:not(:disabled):not(.disabled):active, .btn-outline-dark:not(:disabled):not(.disabled).active,\n.show > .btn-outline-dark.dropdown-toggle {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:not(:disabled):not(.disabled):active:focus, .btn-outline-dark:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-dark.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-link {\n  font-weight: 400;\n  color: #007bff;\n  background-color: transparent;\n}\n\n.btn-link:hover {\n  color: #0056b3;\n  text-decoration: underline;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.btn-link:focus, .btn-link.focus {\n  text-decoration: underline;\n  border-color: transparent;\n  box-shadow: none;\n}\n\n.btn-link:disabled, .btn-link.disabled {\n  color: #6c757d;\n  pointer-events: none;\n}\n\n.btn-lg, .btn-group-lg > .btn {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\n.btn-sm, .btn-group-sm > .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.btn-block {\n  display: block;\n  width: 100%;\n}\n\n.btn-block + .btn-block {\n  margin-top: 0.5rem;\n}\n\ninput[type="submit"].btn-block,\ninput[type="reset"].btn-block,\ninput[type="button"].btn-block {\n  width: 100%;\n}\n\n.fade {\n  transition: opacity 0.15s linear;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .fade {\n    transition: none;\n  }\n}\n\n.fade:not(.show) {\n  opacity: 0;\n}\n\n.collapse:not(.show) {\n  display: none;\n}\n\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  transition: height 0.35s ease;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .collapsing {\n    transition: none;\n  }\n}\n\n.dropup,\n.dropright,\n.dropdown,\n.dropleft {\n  position: relative;\n}\n\n.dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0;\n  border-left: 0.3em solid transparent;\n}\n\n.dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 10rem;\n  padding: 0.5rem 0;\n  margin: 0.125rem 0 0;\n  font-size: 1rem;\n  color: #212529;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 0.25rem;\n}\n\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n\n.dropup .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-top: 0;\n  margin-bottom: 0.125rem;\n}\n\n.dropup .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0.3em solid;\n  border-left: 0.3em solid transparent;\n}\n\n.dropup .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropright .dropdown-menu {\n  top: 0;\n  right: auto;\n  left: 100%;\n  margin-top: 0;\n  margin-left: 0.125rem;\n}\n\n.dropright .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0;\n  border-bottom: 0.3em solid transparent;\n  border-left: 0.3em solid;\n}\n\n.dropright .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropright .dropdown-toggle::after {\n  vertical-align: 0;\n}\n\n.dropleft .dropdown-menu {\n  top: 0;\n  right: 100%;\n  left: auto;\n  margin-top: 0;\n  margin-right: 0.125rem;\n}\n\n.dropleft .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n}\n\n.dropleft .dropdown-toggle::after {\n  display: none;\n}\n\n.dropleft .dropdown-toggle::before {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0.3em solid;\n  border-bottom: 0.3em solid transparent;\n}\n\n.dropleft .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropleft .dropdown-toggle::before {\n  vertical-align: 0;\n}\n\n.dropdown-menu[x-placement^="top"], .dropdown-menu[x-placement^="right"], .dropdown-menu[x-placement^="bottom"], .dropdown-menu[x-placement^="left"] {\n  right: auto;\n  bottom: auto;\n}\n\n.dropdown-divider {\n  height: 0;\n  margin: 0.5rem 0;\n  overflow: hidden;\n  border-top: 1px solid #e9ecef;\n}\n\n.dropdown-item {\n  display: block;\n  width: 100%;\n  padding: 0.25rem 1.5rem;\n  clear: both;\n  font-weight: 400;\n  color: #212529;\n  text-align: inherit;\n  white-space: nowrap;\n  background-color: transparent;\n  border: 0;\n}\n\n.dropdown-item:hover, .dropdown-item:focus {\n  color: #16181b;\n  text-decoration: none;\n  background-color: #f8f9fa;\n}\n\n.dropdown-item.active, .dropdown-item:active {\n  color: #fff;\n  text-decoration: none;\n  background-color: #007bff;\n}\n\n.dropdown-item.disabled, .dropdown-item:disabled {\n  color: #6c757d;\n  background-color: transparent;\n}\n\n.dropdown-menu.show {\n  display: block;\n}\n\n.dropdown-header {\n  display: block;\n  padding: 0.5rem 1.5rem;\n  margin-bottom: 0;\n  font-size: 0.875rem;\n  color: #6c757d;\n  white-space: nowrap;\n}\n\n.dropdown-item-text {\n  display: block;\n  padding: 0.25rem 1.5rem;\n  color: #212529;\n}\n\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  vertical-align: middle;\n}\n\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n}\n\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover {\n  z-index: 1;\n}\n\n.btn-group > .btn:focus, .btn-group > .btn:active, .btn-group > .btn.active,\n.btn-group-vertical > .btn:focus,\n.btn-group-vertical > .btn:active,\n.btn-group-vertical > .btn.active {\n  z-index: 1;\n}\n\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group,\n.btn-group-vertical .btn + .btn,\n.btn-group-vertical .btn + .btn-group,\n.btn-group-vertical .btn-group + .btn,\n.btn-group-vertical .btn-group + .btn-group {\n  margin-left: -1px;\n}\n\n.btn-toolbar {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n}\n\n.btn-toolbar .input-group {\n  width: auto;\n}\n\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n\n.btn-group > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.btn-group > .btn:not(:first-child),\n.btn-group > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.dropdown-toggle-split {\n  padding-right: 0.5625rem;\n  padding-left: 0.5625rem;\n}\n\n.dropdown-toggle-split::after,\n.dropup .dropdown-toggle-split::after,\n.dropright .dropdown-toggle-split::after {\n  margin-left: 0;\n}\n\n.dropleft .dropdown-toggle-split::before {\n  margin-right: 0;\n}\n\n.btn-sm + .dropdown-toggle-split, .btn-group-sm > .btn + .dropdown-toggle-split {\n  padding-right: 0.375rem;\n  padding-left: 0.375rem;\n}\n\n.btn-lg + .dropdown-toggle-split, .btn-group-lg > .btn + .dropdown-toggle-split {\n  padding-right: 0.75rem;\n  padding-left: 0.75rem;\n}\n\n.btn-group-vertical {\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -ms-flex-pack: center;\n  justify-content: center;\n}\n\n.btn-group-vertical .btn,\n.btn-group-vertical .btn-group {\n  width: 100%;\n}\n\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n\n.btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group-vertical > .btn-group:not(:last-child) > .btn {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.btn-group-vertical > .btn:not(:first-child),\n.btn-group-vertical > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.btn-group-toggle > .btn,\n.btn-group-toggle > .btn-group > .btn {\n  margin-bottom: 0;\n}\n\n.btn-group-toggle > .btn input[type="radio"],\n.btn-group-toggle > .btn input[type="checkbox"],\n.btn-group-toggle > .btn-group > .btn input[type="radio"],\n.btn-group-toggle > .btn-group > .btn input[type="checkbox"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n.input-group {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-align: stretch;\n  align-items: stretch;\n  width: 100%;\n}\n\n.input-group > .form-control,\n.input-group > .custom-select,\n.input-group > .custom-file {\n  position: relative;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  width: 1%;\n  margin-bottom: 0;\n}\n\n.input-group > .form-control + .form-control,\n.input-group > .form-control + .custom-select,\n.input-group > .form-control + .custom-file,\n.input-group > .custom-select + .form-control,\n.input-group > .custom-select + .custom-select,\n.input-group > .custom-select + .custom-file,\n.input-group > .custom-file + .form-control,\n.input-group > .custom-file + .custom-select,\n.input-group > .custom-file + .custom-file {\n  margin-left: -1px;\n}\n\n.input-group > .form-control:focus,\n.input-group > .custom-select:focus,\n.input-group > .custom-file .custom-file-input:focus ~ .custom-file-label {\n  z-index: 3;\n}\n\n.input-group > .custom-file .custom-file-input:focus {\n  z-index: 4;\n}\n\n.input-group > .form-control:not(:last-child),\n.input-group > .custom-select:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .form-control:not(:first-child),\n.input-group > .custom-select:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group > .custom-file {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.input-group > .custom-file:not(:last-child) .custom-file-label,\n.input-group > .custom-file:not(:last-child) .custom-file-label::after {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .custom-file:not(:first-child) .custom-file-label {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group-prepend,\n.input-group-append {\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.input-group-prepend .btn,\n.input-group-append .btn {\n  position: relative;\n  z-index: 2;\n}\n\n.input-group-prepend .btn + .btn,\n.input-group-prepend .btn + .input-group-text,\n.input-group-prepend .input-group-text + .input-group-text,\n.input-group-prepend .input-group-text + .btn,\n.input-group-append .btn + .btn,\n.input-group-append .btn + .input-group-text,\n.input-group-append .input-group-text + .input-group-text,\n.input-group-append .input-group-text + .btn {\n  margin-left: -1px;\n}\n\n.input-group-prepend {\n  margin-right: -1px;\n}\n\n.input-group-append {\n  margin-left: -1px;\n}\n\n.input-group-text {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  padding: 0.375rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #e9ecef;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n\n.input-group-text input[type="radio"],\n.input-group-text input[type="checkbox"] {\n  margin-top: 0;\n}\n\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-prepend > .input-group-text,\n.input-group-lg > .input-group-append > .input-group-text,\n.input-group-lg > .input-group-prepend > .btn,\n.input-group-lg > .input-group-append > .btn {\n  height: calc(2.875rem + 2px);\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\n.input-group-sm > .form-control,\n.input-group-sm > .input-group-prepend > .input-group-text,\n.input-group-sm > .input-group-append > .input-group-text,\n.input-group-sm > .input-group-prepend > .btn,\n.input-group-sm > .input-group-append > .btn {\n  height: calc(1.8125rem + 2px);\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.input-group > .input-group-prepend > .btn,\n.input-group > .input-group-prepend > .input-group-text,\n.input-group > .input-group-append:not(:last-child) > .btn,\n.input-group > .input-group-append:not(:last-child) > .input-group-text,\n.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .input-group-append > .btn,\n.input-group > .input-group-append > .input-group-text,\n.input-group > .input-group-prepend:not(:first-child) > .btn,\n.input-group > .input-group-prepend:not(:first-child) > .input-group-text,\n.input-group > .input-group-prepend:first-child > .btn:not(:first-child),\n.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.custom-control {\n  position: relative;\n  display: block;\n  min-height: 1.5rem;\n  padding-left: 1.5rem;\n}\n\n.custom-control-inline {\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  margin-right: 1rem;\n}\n\n.custom-control-input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n}\n\n.custom-control-input:checked ~ .custom-control-label::before {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.custom-control-input:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-control-input:active ~ .custom-control-label::before {\n  color: #fff;\n  background-color: #b3d7ff;\n}\n\n.custom-control-input:disabled ~ .custom-control-label {\n  color: #6c757d;\n}\n\n.custom-control-input:disabled ~ .custom-control-label::before {\n  background-color: #e9ecef;\n}\n\n.custom-control-label {\n  position: relative;\n  margin-bottom: 0;\n}\n\n.custom-control-label::before {\n  position: absolute;\n  top: 0.25rem;\n  left: -1.5rem;\n  display: block;\n  width: 1rem;\n  height: 1rem;\n  pointer-events: none;\n  content: "";\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-color: #dee2e6;\n}\n\n.custom-control-label::after {\n  position: absolute;\n  top: 0.25rem;\n  left: -1.5rem;\n  display: block;\n  width: 1rem;\n  height: 1rem;\n  content: "";\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: 50% 50%;\n}\n\n.custom-checkbox .custom-control-label::before {\n  border-radius: 0.25rem;\n}\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3E%3Cpath fill=\'%23fff\' d=\'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\'/%3E%3C/svg%3E");\n}\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 4\'%3E%3Cpath stroke=\'%23fff\' d=\'M0 2h4\'/%3E%3C/svg%3E");\n}\n\n.custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-radio .custom-control-label::before {\n  border-radius: 50%;\n}\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'%3E%3Ccircle r=\'3\' fill=\'%23fff\'/%3E%3C/svg%3E");\n}\n\n.custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-select {\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 1.75rem 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  vertical-align: middle;\n  background: #fff url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3E%3Cpath fill=\'%23343a40\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3E%3C/svg%3E") no-repeat right 0.75rem center;\n  background-size: 8px 10px;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.custom-select:focus {\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(128, 189, 255, 0.5);\n}\n\n.custom-select:focus::-ms-value {\n  color: #495057;\n  background-color: #fff;\n}\n\n.custom-select[multiple], .custom-select[size]:not([size="1"]) {\n  height: auto;\n  padding-right: 0.75rem;\n  background-image: none;\n}\n\n.custom-select:disabled {\n  color: #6c757d;\n  background-color: #e9ecef;\n}\n\n.custom-select::-ms-expand {\n  opacity: 0;\n}\n\n.custom-select-sm {\n  height: calc(1.8125rem + 2px);\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 75%;\n}\n\n.custom-select-lg {\n  height: calc(2.875rem + 2px);\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 125%;\n}\n\n.custom-file {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin-bottom: 0;\n}\n\n.custom-file-input {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin: 0;\n  opacity: 0;\n}\n\n.custom-file-input:focus ~ .custom-file-label {\n  border-color: #80bdff;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-file-input:focus ~ .custom-file-label::after {\n  border-color: #80bdff;\n}\n\n.custom-file-input:disabled ~ .custom-file-label {\n  background-color: #e9ecef;\n}\n\n.custom-file-input:lang(en) ~ .custom-file-label::after {\n  content: "Browse";\n}\n\n.custom-file-label {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n\n.custom-file-label::after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 3;\n  display: block;\n  height: 2.25rem;\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  content: "Browse";\n  background-color: #e9ecef;\n  border-left: 1px solid #ced4da;\n  border-radius: 0 0.25rem 0.25rem 0;\n}\n\n.custom-range {\n  width: 100%;\n  padding-left: 0;\n  background-color: transparent;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.custom-range:focus {\n  outline: none;\n}\n\n.custom-range:focus::-webkit-slider-thumb {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-range:focus::-moz-range-thumb {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-range:focus::-ms-thumb {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-range::-moz-focus-outer {\n  border: 0;\n}\n\n.custom-range::-webkit-slider-thumb {\n  width: 1rem;\n  height: 1rem;\n  margin-top: -0.25rem;\n  background-color: #007bff;\n  border: 0;\n  border-radius: 1rem;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-range::-webkit-slider-thumb {\n    transition: none;\n  }\n}\n\n.custom-range::-webkit-slider-thumb:active {\n  background-color: #b3d7ff;\n}\n\n.custom-range::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 0.5rem;\n  color: transparent;\n  cursor: pointer;\n  background-color: #dee2e6;\n  border-color: transparent;\n  border-radius: 1rem;\n}\n\n.custom-range::-moz-range-thumb {\n  width: 1rem;\n  height: 1rem;\n  background-color: #007bff;\n  border: 0;\n  border-radius: 1rem;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-range::-moz-range-thumb {\n    transition: none;\n  }\n}\n\n.custom-range::-moz-range-thumb:active {\n  background-color: #b3d7ff;\n}\n\n.custom-range::-moz-range-track {\n  width: 100%;\n  height: 0.5rem;\n  color: transparent;\n  cursor: pointer;\n  background-color: #dee2e6;\n  border-color: transparent;\n  border-radius: 1rem;\n}\n\n.custom-range::-ms-thumb {\n  width: 1rem;\n  height: 1rem;\n  margin-top: 0;\n  margin-right: 0.2rem;\n  margin-left: 0.2rem;\n  background-color: #007bff;\n  border: 0;\n  border-radius: 1rem;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  appearance: none;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-range::-ms-thumb {\n    transition: none;\n  }\n}\n\n.custom-range::-ms-thumb:active {\n  background-color: #b3d7ff;\n}\n\n.custom-range::-ms-track {\n  width: 100%;\n  height: 0.5rem;\n  color: transparent;\n  cursor: pointer;\n  background-color: transparent;\n  border-color: transparent;\n  border-width: 0.5rem;\n}\n\n.custom-range::-ms-fill-lower {\n  background-color: #dee2e6;\n  border-radius: 1rem;\n}\n\n.custom-range::-ms-fill-upper {\n  margin-right: 15px;\n  background-color: #dee2e6;\n  border-radius: 1rem;\n}\n\n.custom-control-label::before,\n.custom-file-label,\n.custom-select {\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-control-label::before,\n  .custom-file-label,\n  .custom-select {\n    transition: none;\n  }\n}\n\n.nav {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.nav-link {\n  display: block;\n  padding: 0.5rem 1rem;\n}\n\n.nav-link:hover, .nav-link:focus {\n  text-decoration: none;\n}\n\n.nav-link.disabled {\n  color: #6c757d;\n}\n\n.nav-tabs {\n  border-bottom: 1px solid #dee2e6;\n}\n\n.nav-tabs .nav-item {\n  margin-bottom: -1px;\n}\n\n.nav-tabs .nav-link {\n  border: 1px solid transparent;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.nav-tabs .nav-link:hover, .nav-tabs .nav-link:focus {\n  border-color: #e9ecef #e9ecef #dee2e6;\n}\n\n.nav-tabs .nav-link.disabled {\n  color: #6c757d;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.nav-tabs .nav-link.active,\n.nav-tabs .nav-item.show .nav-link {\n  color: #495057;\n  background-color: #fff;\n  border-color: #dee2e6 #dee2e6 #fff;\n}\n\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.nav-pills .nav-link {\n  border-radius: 0.25rem;\n}\n\n.nav-pills .nav-link.active,\n.nav-pills .show > .nav-link {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.nav-fill .nav-item {\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  text-align: center;\n}\n\n.nav-justified .nav-item {\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  text-align: center;\n}\n\n.tab-content > .tab-pane {\n  display: none;\n}\n\n.tab-content > .active {\n  display: block;\n}\n\n.navbar {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n\n.navbar > .container,\n.navbar > .container-fluid {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n}\n\n.navbar-brand {\n  display: inline-block;\n  padding-top: 0.3125rem;\n  padding-bottom: 0.3125rem;\n  margin-right: 1rem;\n  font-size: 1.25rem;\n  line-height: inherit;\n  white-space: nowrap;\n}\n\n.navbar-brand:hover, .navbar-brand:focus {\n  text-decoration: none;\n}\n\n.navbar-nav {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.navbar-nav .nav-link {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.navbar-nav .dropdown-menu {\n  position: static;\n  float: none;\n}\n\n.navbar-text {\n  display: inline-block;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.navbar-collapse {\n  -ms-flex-preferred-size: 100%;\n  flex-basis: 100%;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.navbar-toggler {\n  padding: 0.25rem 0.75rem;\n  font-size: 1.25rem;\n  line-height: 1;\n  background-color: transparent;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n}\n\n.navbar-toggler:hover, .navbar-toggler:focus {\n  text-decoration: none;\n}\n\n.navbar-toggler:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.navbar-toggler-icon {\n  display: inline-block;\n  width: 1.5em;\n  height: 1.5em;\n  vertical-align: middle;\n  content: "";\n  background: no-repeat center center;\n  background-size: 100% 100%;\n}\n\n@media (max-width: 575.98px) {\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 576px) {\n  .navbar-expand-sm {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-sm .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-sm .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-sm .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-sm .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-sm .navbar-toggler {\n    display: none;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 768px) {\n  .navbar-expand-md {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-md .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-md .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-md .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-md .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-md .navbar-toggler {\n    display: none;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 992px) {\n  .navbar-expand-lg {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-lg .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-lg .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-lg .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-lg .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-lg .navbar-toggler {\n    display: none;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 1200px) {\n  .navbar-expand-xl {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-xl .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-xl .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-xl .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-xl .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-xl .navbar-toggler {\n    display: none;\n  }\n}\n\n.navbar-expand {\n  -ms-flex-flow: row nowrap;\n  flex-flow: row nowrap;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n}\n\n.navbar-expand > .container,\n.navbar-expand > .container-fluid {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.navbar-expand .navbar-nav {\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n\n.navbar-expand .navbar-nav .dropdown-menu {\n  position: absolute;\n}\n\n.navbar-expand .navbar-nav .nav-link {\n  padding-right: 0.5rem;\n  padding-left: 0.5rem;\n}\n\n.navbar-expand > .container,\n.navbar-expand > .container-fluid {\n  -ms-flex-wrap: nowrap;\n  flex-wrap: nowrap;\n}\n\n.navbar-expand .navbar-collapse {\n  display: -ms-flexbox !important;\n  display: flex !important;\n  -ms-flex-preferred-size: auto;\n  flex-basis: auto;\n}\n\n.navbar-expand .navbar-toggler {\n  display: none;\n}\n\n.navbar-light .navbar-brand {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-brand:hover, .navbar-light .navbar-brand:focus {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-nav .nav-link {\n  color: rgba(0, 0, 0, 0.5);\n}\n\n.navbar-light .navbar-nav .nav-link:hover, .navbar-light .navbar-nav .nav-link:focus {\n  color: rgba(0, 0, 0, 0.7);\n}\n\n.navbar-light .navbar-nav .nav-link.disabled {\n  color: rgba(0, 0, 0, 0.3);\n}\n\n.navbar-light .navbar-nav .show > .nav-link,\n.navbar-light .navbar-nav .active > .nav-link,\n.navbar-light .navbar-nav .nav-link.show,\n.navbar-light .navbar-nav .nav-link.active {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-toggler {\n  color: rgba(0, 0, 0, 0.5);\n  border-color: rgba(0, 0, 0, 0.1);\n}\n\n.navbar-light .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(0, 0, 0, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E");\n}\n\n.navbar-light .navbar-text {\n  color: rgba(0, 0, 0, 0.5);\n}\n\n.navbar-light .navbar-text a {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-text a:hover, .navbar-light .navbar-text a:focus {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-dark .navbar-brand {\n  color: #fff;\n}\n\n.navbar-dark .navbar-brand:hover, .navbar-dark .navbar-brand:focus {\n  color: #fff;\n}\n\n.navbar-dark .navbar-nav .nav-link {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {\n  color: rgba(255, 255, 255, 0.75);\n}\n\n.navbar-dark .navbar-nav .nav-link.disabled {\n  color: rgba(255, 255, 255, 0.25);\n}\n\n.navbar-dark .navbar-nav .show > .nav-link,\n.navbar-dark .navbar-nav .active > .nav-link,\n.navbar-dark .navbar-nav .nav-link.show,\n.navbar-dark .navbar-nav .nav-link.active {\n  color: #fff;\n}\n\n.navbar-dark .navbar-toggler {\n  color: rgba(255, 255, 255, 0.5);\n  border-color: rgba(255, 255, 255, 0.1);\n}\n\n.navbar-dark .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(255, 255, 255, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E");\n}\n\n.navbar-dark .navbar-text {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.navbar-dark .navbar-text a {\n  color: #fff;\n}\n\n.navbar-dark .navbar-text a:hover, .navbar-dark .navbar-text a:focus {\n  color: #fff;\n}\n\n.card {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  min-width: 0;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: border-box;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem;\n}\n\n.card > hr {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.card > .list-group:first-child .list-group-item:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.card > .list-group:last-child .list-group-item:last-child {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.card-body {\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  padding: 1.25rem;\n}\n\n.card-title {\n  margin-bottom: 0.75rem;\n}\n\n.card-subtitle {\n  margin-top: -0.375rem;\n  margin-bottom: 0;\n}\n\n.card-text:last-child {\n  margin-bottom: 0;\n}\n\n.card-link:hover {\n  text-decoration: none;\n}\n\n.card-link + .card-link {\n  margin-left: 1.25rem;\n}\n\n.card-header {\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 0;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-header:first-child {\n  border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0;\n}\n\n.card-header + .list-group .list-group-item:first-child {\n  border-top: 0;\n}\n\n.card-footer {\n  padding: 0.75rem 1.25rem;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-top: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-footer:last-child {\n  border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px);\n}\n\n.card-header-tabs {\n  margin-right: -0.625rem;\n  margin-bottom: -0.75rem;\n  margin-left: -0.625rem;\n  border-bottom: 0;\n}\n\n.card-header-pills {\n  margin-right: -0.625rem;\n  margin-left: -0.625rem;\n}\n\n.card-img-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1.25rem;\n}\n\n.card-img {\n  width: 100%;\n  border-radius: calc(0.25rem - 1px);\n}\n\n.card-img-top {\n  width: 100%;\n  border-top-left-radius: calc(0.25rem - 1px);\n  border-top-right-radius: calc(0.25rem - 1px);\n}\n\n.card-img-bottom {\n  width: 100%;\n  border-bottom-right-radius: calc(0.25rem - 1px);\n  border-bottom-left-radius: calc(0.25rem - 1px);\n}\n\n.card-deck {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.card-deck .card {\n  margin-bottom: 15px;\n}\n\n@media (min-width: 576px) {\n  .card-deck {\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    margin-right: -15px;\n    margin-left: -15px;\n  }\n  .card-deck .card {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex: 1 0 0%;\n    flex: 1 0 0%;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    margin-right: 15px;\n    margin-bottom: 0;\n    margin-left: 15px;\n  }\n}\n\n.card-group {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.card-group > .card {\n  margin-bottom: 15px;\n}\n\n@media (min-width: 576px) {\n  .card-group {\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n  }\n  .card-group > .card {\n    -ms-flex: 1 0 0%;\n    flex: 1 0 0%;\n    margin-bottom: 0;\n  }\n  .card-group > .card + .card {\n    margin-left: 0;\n    border-left: 0;\n  }\n  .card-group > .card:first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .card-group > .card:first-child .card-img-top,\n  .card-group > .card:first-child .card-header {\n    border-top-right-radius: 0;\n  }\n  .card-group > .card:first-child .card-img-bottom,\n  .card-group > .card:first-child .card-footer {\n    border-bottom-right-radius: 0;\n  }\n  .card-group > .card:last-child {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .card-group > .card:last-child .card-img-top,\n  .card-group > .card:last-child .card-header {\n    border-top-left-radius: 0;\n  }\n  .card-group > .card:last-child .card-img-bottom,\n  .card-group > .card:last-child .card-footer {\n    border-bottom-left-radius: 0;\n  }\n  .card-group > .card:only-child {\n    border-radius: 0.25rem;\n  }\n  .card-group > .card:only-child .card-img-top,\n  .card-group > .card:only-child .card-header {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n  .card-group > .card:only-child .card-img-bottom,\n  .card-group > .card:only-child .card-footer {\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) {\n    border-radius: 0;\n  }\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-top,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-header,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-footer {\n    border-radius: 0;\n  }\n}\n\n.card-columns .card {\n  margin-bottom: 0.75rem;\n}\n\n@media (min-width: 576px) {\n  .card-columns {\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-count: 3;\n    -webkit-column-gap: 1.25rem;\n    -moz-column-gap: 1.25rem;\n    column-gap: 1.25rem;\n    orphans: 1;\n    widows: 1;\n  }\n  .card-columns .card {\n    display: inline-block;\n    width: 100%;\n  }\n}\n\n.accordion .card:not(:first-of-type):not(:last-of-type) {\n  border-bottom: 0;\n  border-radius: 0;\n}\n\n.accordion .card:not(:first-of-type) .card-header:first-child {\n  border-radius: 0;\n}\n\n.accordion .card:first-of-type {\n  border-bottom: 0;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.accordion .card:last-of-type {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.breadcrumb {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 0.75rem 1rem;\n  margin-bottom: 1rem;\n  list-style: none;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n}\n\n.breadcrumb-item + .breadcrumb-item {\n  padding-left: 0.5rem;\n}\n\n.breadcrumb-item + .breadcrumb-item::before {\n  display: inline-block;\n  padding-right: 0.5rem;\n  color: #6c757d;\n  content: "/";\n}\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: underline;\n}\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: none;\n}\n\n.breadcrumb-item.active {\n  color: #6c757d;\n}\n\n.pagination {\n  display: -ms-flexbox;\n  display: flex;\n  padding-left: 0;\n  list-style: none;\n  border-radius: 0.25rem;\n}\n\n.page-link {\n  position: relative;\n  display: block;\n  padding: 0.5rem 0.75rem;\n  margin-left: -1px;\n  line-height: 1.25;\n  color: #007bff;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n}\n\n.page-link:hover {\n  z-index: 2;\n  color: #0056b3;\n  text-decoration: none;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n\n.page-link:focus {\n  z-index: 2;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.page-link:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.page-item:first-child .page-link {\n  margin-left: 0;\n  border-top-left-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.page-item:last-child .page-link {\n  border-top-right-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.page-item.active .page-link {\n  z-index: 1;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.page-item.disabled .page-link {\n  color: #6c757d;\n  pointer-events: none;\n  cursor: auto;\n  background-color: #fff;\n  border-color: #dee2e6;\n}\n\n.pagination-lg .page-link {\n  padding: 0.75rem 1.5rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.pagination-lg .page-item:first-child .page-link {\n  border-top-left-radius: 0.3rem;\n  border-bottom-left-radius: 0.3rem;\n}\n\n.pagination-lg .page-item:last-child .page-link {\n  border-top-right-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.pagination-sm .page-link {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n.pagination-sm .page-item:first-child .page-link {\n  border-top-left-radius: 0.2rem;\n  border-bottom-left-radius: 0.2rem;\n}\n\n.pagination-sm .page-item:last-child .page-link {\n  border-top-right-radius: 0.2rem;\n  border-bottom-right-radius: 0.2rem;\n}\n\n.badge {\n  display: inline-block;\n  padding: 0.25em 0.4em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: 0.25rem;\n}\n\n.badge:empty {\n  display: none;\n}\n\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n\n.badge-pill {\n  padding-right: 0.6em;\n  padding-left: 0.6em;\n  border-radius: 10rem;\n}\n\n.badge-primary {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.badge-primary[href]:hover, .badge-primary[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #0062cc;\n}\n\n.badge-secondary {\n  color: #fff;\n  background-color: #6c757d;\n}\n\n.badge-secondary[href]:hover, .badge-secondary[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #545b62;\n}\n\n.badge-success {\n  color: #fff;\n  background-color: #28a745;\n}\n\n.badge-success[href]:hover, .badge-success[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #1e7e34;\n}\n\n.badge-info {\n  color: #fff;\n  background-color: #17a2b8;\n}\n\n.badge-info[href]:hover, .badge-info[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #117a8b;\n}\n\n.badge-warning {\n  color: #212529;\n  background-color: #ffc107;\n}\n\n.badge-warning[href]:hover, .badge-warning[href]:focus {\n  color: #212529;\n  text-decoration: none;\n  background-color: #d39e00;\n}\n\n.badge-danger {\n  color: #fff;\n  background-color: #dc3545;\n}\n\n.badge-danger[href]:hover, .badge-danger[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #bd2130;\n}\n\n.badge-light {\n  color: #212529;\n  background-color: #f8f9fa;\n}\n\n.badge-light[href]:hover, .badge-light[href]:focus {\n  color: #212529;\n  text-decoration: none;\n  background-color: #dae0e5;\n}\n\n.badge-dark {\n  color: #fff;\n  background-color: #343a40;\n}\n\n.badge-dark[href]:hover, .badge-dark[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #1d2124;\n}\n\n.jumbotron {\n  padding: 2rem 1rem;\n  margin-bottom: 2rem;\n  background-color: #e9ecef;\n  border-radius: 0.3rem;\n}\n\n@media (min-width: 576px) {\n  .jumbotron {\n    padding: 4rem 2rem;\n  }\n}\n\n.jumbotron-fluid {\n  padding-right: 0;\n  padding-left: 0;\n  border-radius: 0;\n}\n\n.alert {\n  position: relative;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n}\n\n.alert-heading {\n  color: inherit;\n}\n\n.alert-link {\n  font-weight: 700;\n}\n\n.alert-dismissible {\n  padding-right: 4rem;\n}\n\n.alert-dismissible .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 0.75rem 1.25rem;\n  color: inherit;\n}\n\n.alert-primary {\n  color: #004085;\n  background-color: #cce5ff;\n  border-color: #b8daff;\n}\n\n.alert-primary hr {\n  border-top-color: #9fcdff;\n}\n\n.alert-primary .alert-link {\n  color: #002752;\n}\n\n.alert-secondary {\n  color: #383d41;\n  background-color: #e2e3e5;\n  border-color: #d6d8db;\n}\n\n.alert-secondary hr {\n  border-top-color: #c8cbcf;\n}\n\n.alert-secondary .alert-link {\n  color: #202326;\n}\n\n.alert-success {\n  color: #155724;\n  background-color: #d4edda;\n  border-color: #c3e6cb;\n}\n\n.alert-success hr {\n  border-top-color: #b1dfbb;\n}\n\n.alert-success .alert-link {\n  color: #0b2e13;\n}\n\n.alert-info {\n  color: #0c5460;\n  background-color: #d1ecf1;\n  border-color: #bee5eb;\n}\n\n.alert-info hr {\n  border-top-color: #abdde5;\n}\n\n.alert-info .alert-link {\n  color: #062c33;\n}\n\n.alert-warning {\n  color: #856404;\n  background-color: #fff3cd;\n  border-color: #ffeeba;\n}\n\n.alert-warning hr {\n  border-top-color: #ffe8a1;\n}\n\n.alert-warning .alert-link {\n  color: #533f03;\n}\n\n.alert-danger {\n  color: #721c24;\n  background-color: #f8d7da;\n  border-color: #f5c6cb;\n}\n\n.alert-danger hr {\n  border-top-color: #f1b0b7;\n}\n\n.alert-danger .alert-link {\n  color: #491217;\n}\n\n.alert-light {\n  color: #818182;\n  background-color: #fefefe;\n  border-color: #fdfdfe;\n}\n\n.alert-light hr {\n  border-top-color: #ececf6;\n}\n\n.alert-light .alert-link {\n  color: #686868;\n}\n\n.alert-dark {\n  color: #1b1e21;\n  background-color: #d6d8d9;\n  border-color: #c6c8ca;\n}\n\n.alert-dark hr {\n  border-top-color: #b9bbbe;\n}\n\n.alert-dark .alert-link {\n  color: #040505;\n}\n\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n.progress {\n  display: -ms-flexbox;\n  display: flex;\n  height: 1rem;\n  overflow: hidden;\n  font-size: 0.75rem;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n}\n\n.progress-bar {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -ms-flex-pack: center;\n  justify-content: center;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #007bff;\n  transition: width 0.6s ease;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .progress-bar {\n    transition: none;\n  }\n}\n\n.progress-bar-striped {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 1rem 1rem;\n}\n\n.progress-bar-animated {\n  -webkit-animation: progress-bar-stripes 1s linear infinite;\n  animation: progress-bar-stripes 1s linear infinite;\n}\n\n.media {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: start;\n  align-items: flex-start;\n}\n\n.media-body {\n  -ms-flex: 1;\n  flex: 1;\n}\n\n.list-group {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n}\n\n.list-group-item-action {\n  width: 100%;\n  color: #495057;\n  text-align: inherit;\n}\n\n.list-group-item-action:hover, .list-group-item-action:focus {\n  color: #495057;\n  text-decoration: none;\n  background-color: #f8f9fa;\n}\n\n.list-group-item-action:active {\n  color: #212529;\n  background-color: #e9ecef;\n}\n\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.list-group-item:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.list-group-item:hover, .list-group-item:focus {\n  z-index: 1;\n  text-decoration: none;\n}\n\n.list-group-item.disabled, .list-group-item:disabled {\n  color: #6c757d;\n  background-color: #fff;\n}\n\n.list-group-item.active {\n  z-index: 2;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.list-group-flush .list-group-item {\n  border-right: 0;\n  border-left: 0;\n  border-radius: 0;\n}\n\n.list-group-flush:first-child .list-group-item:first-child {\n  border-top: 0;\n}\n\n.list-group-flush:last-child .list-group-item:last-child {\n  border-bottom: 0;\n}\n\n.list-group-item-primary {\n  color: #004085;\n  background-color: #b8daff;\n}\n\n.list-group-item-primary.list-group-item-action:hover, .list-group-item-primary.list-group-item-action:focus {\n  color: #004085;\n  background-color: #9fcdff;\n}\n\n.list-group-item-primary.list-group-item-action.active {\n  color: #fff;\n  background-color: #004085;\n  border-color: #004085;\n}\n\n.list-group-item-secondary {\n  color: #383d41;\n  background-color: #d6d8db;\n}\n\n.list-group-item-secondary.list-group-item-action:hover, .list-group-item-secondary.list-group-item-action:focus {\n  color: #383d41;\n  background-color: #c8cbcf;\n}\n\n.list-group-item-secondary.list-group-item-action.active {\n  color: #fff;\n  background-color: #383d41;\n  border-color: #383d41;\n}\n\n.list-group-item-success {\n  color: #155724;\n  background-color: #c3e6cb;\n}\n\n.list-group-item-success.list-group-item-action:hover, .list-group-item-success.list-group-item-action:focus {\n  color: #155724;\n  background-color: #b1dfbb;\n}\n\n.list-group-item-success.list-group-item-action.active {\n  color: #fff;\n  background-color: #155724;\n  border-color: #155724;\n}\n\n.list-group-item-info {\n  color: #0c5460;\n  background-color: #bee5eb;\n}\n\n.list-group-item-info.list-group-item-action:hover, .list-group-item-info.list-group-item-action:focus {\n  color: #0c5460;\n  background-color: #abdde5;\n}\n\n.list-group-item-info.list-group-item-action.active {\n  color: #fff;\n  background-color: #0c5460;\n  border-color: #0c5460;\n}\n\n.list-group-item-warning {\n  color: #856404;\n  background-color: #ffeeba;\n}\n\n.list-group-item-warning.list-group-item-action:hover, .list-group-item-warning.list-group-item-action:focus {\n  color: #856404;\n  background-color: #ffe8a1;\n}\n\n.list-group-item-warning.list-group-item-action.active {\n  color: #fff;\n  background-color: #856404;\n  border-color: #856404;\n}\n\n.list-group-item-danger {\n  color: #721c24;\n  background-color: #f5c6cb;\n}\n\n.list-group-item-danger.list-group-item-action:hover, .list-group-item-danger.list-group-item-action:focus {\n  color: #721c24;\n  background-color: #f1b0b7;\n}\n\n.list-group-item-danger.list-group-item-action.active {\n  color: #fff;\n  background-color: #721c24;\n  border-color: #721c24;\n}\n\n.list-group-item-light {\n  color: #818182;\n  background-color: #fdfdfe;\n}\n\n.list-group-item-light.list-group-item-action:hover, .list-group-item-light.list-group-item-action:focus {\n  color: #818182;\n  background-color: #ececf6;\n}\n\n.list-group-item-light.list-group-item-action.active {\n  color: #fff;\n  background-color: #818182;\n  border-color: #818182;\n}\n\n.list-group-item-dark {\n  color: #1b1e21;\n  background-color: #c6c8ca;\n}\n\n.list-group-item-dark.list-group-item-action:hover, .list-group-item-dark.list-group-item-action:focus {\n  color: #1b1e21;\n  background-color: #b9bbbe;\n}\n\n.list-group-item-dark.list-group-item-action.active {\n  color: #fff;\n  background-color: #1b1e21;\n  border-color: #1b1e21;\n}\n\n.close {\n  float: right;\n  font-size: 1.5rem;\n  font-weight: 700;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  opacity: .5;\n}\n\n.close:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.close:not(:disabled):not(.disabled):hover, .close:not(:disabled):not(.disabled):focus {\n  color: #000;\n  text-decoration: none;\n  opacity: .75;\n}\n\nbutton.close {\n  padding: 0;\n  background-color: transparent;\n  border: 0;\n  -webkit-appearance: none;\n}\n\n.modal-open {\n  overflow: hidden;\n}\n\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  outline: 0;\n}\n\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 0.5rem;\n  pointer-events: none;\n}\n\n.modal.fade .modal-dialog {\n  transition: -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n  -webkit-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .modal.fade .modal-dialog {\n    transition: none;\n  }\n}\n\n.modal.show .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n\n.modal-dialog-centered {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  min-height: calc(100% - (0.5rem * 2));\n}\n\n.modal-dialog-centered::before {\n  display: block;\n  height: calc(100vh - (0.5rem * 2));\n  content: "";\n}\n\n.modal-content {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n\n.modal-backdrop.fade {\n  opacity: 0;\n}\n\n.modal-backdrop.show {\n  opacity: 0.5;\n}\n\n.modal-header {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 1rem;\n  border-bottom: 1px solid #e9ecef;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.modal-header .close {\n  padding: 1rem;\n  margin: -1rem -1rem -1rem auto;\n}\n\n.modal-title {\n  margin-bottom: 0;\n  line-height: 1.5;\n}\n\n.modal-body {\n  position: relative;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n\n.modal-footer {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  padding: 1rem;\n  border-top: 1px solid #e9ecef;\n}\n\n.modal-footer > :not(:first-child) {\n  margin-left: .25rem;\n}\n\n.modal-footer > :not(:last-child) {\n  margin-right: .25rem;\n}\n\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n\n@media (min-width: 576px) {\n  .modal-dialog {\n    max-width: 500px;\n    margin: 1.75rem auto;\n  }\n  .modal-dialog-centered {\n    min-height: calc(100% - (1.75rem * 2));\n  }\n  .modal-dialog-centered::before {\n    height: calc(100vh - (1.75rem * 2));\n  }\n  .modal-sm {\n    max-width: 300px;\n  }\n}\n\n@media (min-width: 992px) {\n  .modal-lg {\n    max-width: 800px;\n  }\n}\n\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  opacity: 0;\n}\n\n.tooltip.show {\n  opacity: 0.9;\n}\n\n.tooltip .arrow {\n  position: absolute;\n  display: block;\n  width: 0.8rem;\n  height: 0.4rem;\n}\n\n.tooltip .arrow::before {\n  position: absolute;\n  content: "";\n  border-color: transparent;\n  border-style: solid;\n}\n\n.bs-tooltip-top, .bs-tooltip-auto[x-placement^="top"] {\n  padding: 0.4rem 0;\n}\n\n.bs-tooltip-top .arrow, .bs-tooltip-auto[x-placement^="top"] .arrow {\n  bottom: 0;\n}\n\n.bs-tooltip-top .arrow::before, .bs-tooltip-auto[x-placement^="top"] .arrow::before {\n  top: 0;\n  border-width: 0.4rem 0.4rem 0;\n  border-top-color: #000;\n}\n\n.bs-tooltip-right, .bs-tooltip-auto[x-placement^="right"] {\n  padding: 0 0.4rem;\n}\n\n.bs-tooltip-right .arrow, .bs-tooltip-auto[x-placement^="right"] .arrow {\n  left: 0;\n  width: 0.4rem;\n  height: 0.8rem;\n}\n\n.bs-tooltip-right .arrow::before, .bs-tooltip-auto[x-placement^="right"] .arrow::before {\n  right: 0;\n  border-width: 0.4rem 0.4rem 0.4rem 0;\n  border-right-color: #000;\n}\n\n.bs-tooltip-bottom, .bs-tooltip-auto[x-placement^="bottom"] {\n  padding: 0.4rem 0;\n}\n\n.bs-tooltip-bottom .arrow, .bs-tooltip-auto[x-placement^="bottom"] .arrow {\n  top: 0;\n}\n\n.bs-tooltip-bottom .arrow::before, .bs-tooltip-auto[x-placement^="bottom"] .arrow::before {\n  bottom: 0;\n  border-width: 0 0.4rem 0.4rem;\n  border-bottom-color: #000;\n}\n\n.bs-tooltip-left, .bs-tooltip-auto[x-placement^="left"] {\n  padding: 0 0.4rem;\n}\n\n.bs-tooltip-left .arrow, .bs-tooltip-auto[x-placement^="left"] .arrow {\n  right: 0;\n  width: 0.4rem;\n  height: 0.8rem;\n}\n\n.bs-tooltip-left .arrow::before, .bs-tooltip-auto[x-placement^="left"] .arrow::before {\n  left: 0;\n  border-width: 0.4rem 0 0.4rem 0.4rem;\n  border-left-color: #000;\n}\n\n.tooltip-inner {\n  max-width: 200px;\n  padding: 0.25rem 0.5rem;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 0.25rem;\n}\n\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: block;\n  max-width: 276px;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n}\n\n.popover .arrow {\n  position: absolute;\n  display: block;\n  width: 1rem;\n  height: 0.5rem;\n  margin: 0 0.3rem;\n}\n\n.popover .arrow::before, .popover .arrow::after {\n  position: absolute;\n  display: block;\n  content: "";\n  border-color: transparent;\n  border-style: solid;\n}\n\n.bs-popover-top, .bs-popover-auto[x-placement^="top"] {\n  margin-bottom: 0.5rem;\n}\n\n.bs-popover-top .arrow, .bs-popover-auto[x-placement^="top"] .arrow {\n  bottom: calc((0.5rem + 1px) * -1);\n}\n\n.bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before,\n.bs-popover-top .arrow::after,\n.bs-popover-auto[x-placement^="top"] .arrow::after {\n  border-width: 0.5rem 0.5rem 0;\n}\n\n.bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before {\n  bottom: 0;\n  border-top-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-top .arrow::after,\n.bs-popover-auto[x-placement^="top"] .arrow::after {\n  bottom: 1px;\n  border-top-color: #fff;\n}\n\n.bs-popover-right, .bs-popover-auto[x-placement^="right"] {\n  margin-left: 0.5rem;\n}\n\n.bs-popover-right .arrow, .bs-popover-auto[x-placement^="right"] .arrow {\n  left: calc((0.5rem + 1px) * -1);\n  width: 0.5rem;\n  height: 1rem;\n  margin: 0.3rem 0;\n}\n\n.bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before,\n.bs-popover-right .arrow::after,\n.bs-popover-auto[x-placement^="right"] .arrow::after {\n  border-width: 0.5rem 0.5rem 0.5rem 0;\n}\n\n.bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before {\n  left: 0;\n  border-right-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-right .arrow::after,\n.bs-popover-auto[x-placement^="right"] .arrow::after {\n  left: 1px;\n  border-right-color: #fff;\n}\n\n.bs-popover-bottom, .bs-popover-auto[x-placement^="bottom"] {\n  margin-top: 0.5rem;\n}\n\n.bs-popover-bottom .arrow, .bs-popover-auto[x-placement^="bottom"] .arrow {\n  top: calc((0.5rem + 1px) * -1);\n}\n\n.bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before,\n.bs-popover-bottom .arrow::after,\n.bs-popover-auto[x-placement^="bottom"] .arrow::after {\n  border-width: 0 0.5rem 0.5rem 0.5rem;\n}\n\n.bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before {\n  top: 0;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-bottom .arrow::after,\n.bs-popover-auto[x-placement^="bottom"] .arrow::after {\n  top: 1px;\n  border-bottom-color: #fff;\n}\n\n.bs-popover-bottom .popover-header::before, .bs-popover-auto[x-placement^="bottom"] .popover-header::before {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  display: block;\n  width: 1rem;\n  margin-left: -0.5rem;\n  content: "";\n  border-bottom: 1px solid #f7f7f7;\n}\n\n.bs-popover-left, .bs-popover-auto[x-placement^="left"] {\n  margin-right: 0.5rem;\n}\n\n.bs-popover-left .arrow, .bs-popover-auto[x-placement^="left"] .arrow {\n  right: calc((0.5rem + 1px) * -1);\n  width: 0.5rem;\n  height: 1rem;\n  margin: 0.3rem 0;\n}\n\n.bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before,\n.bs-popover-left .arrow::after,\n.bs-popover-auto[x-placement^="left"] .arrow::after {\n  border-width: 0.5rem 0 0.5rem 0.5rem;\n}\n\n.bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before {\n  right: 0;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-left .arrow::after,\n.bs-popover-auto[x-placement^="left"] .arrow::after {\n  right: 1px;\n  border-left-color: #fff;\n}\n\n.popover-header {\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  color: inherit;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px);\n}\n\n.popover-header:empty {\n  display: none;\n}\n\n.popover-body {\n  padding: 0.5rem 0.75rem;\n  color: #212529;\n}\n\n.carousel {\n  position: relative;\n}\n\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n\n.carousel-item {\n  position: relative;\n  display: none;\n  -ms-flex-align: center;\n  align-items: center;\n  width: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-perspective: 1000px;\n  perspective: 1000px;\n}\n\n.carousel-item.active,\n.carousel-item-next,\n.carousel-item-prev {\n  display: block;\n  transition: -webkit-transform 0.6s ease;\n  transition: transform 0.6s ease;\n  transition: transform 0.6s ease, -webkit-transform 0.6s ease;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .carousel-item.active,\n  .carousel-item-next,\n  .carousel-item-prev {\n    transition: none;\n  }\n}\n\n.carousel-item-next,\n.carousel-item-prev {\n  position: absolute;\n  top: 0;\n}\n\n.carousel-item-next.carousel-item-left,\n.carousel-item-prev.carousel-item-right {\n  -webkit-transform: translateX(0);\n  transform: translateX(0);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-next.carousel-item-left,\n  .carousel-item-prev.carousel-item-right {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.carousel-item-next,\n.active.carousel-item-right {\n  -webkit-transform: translateX(100%);\n  transform: translateX(100%);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-next,\n  .active.carousel-item-right {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n}\n\n.carousel-item-prev,\n.active.carousel-item-left {\n  -webkit-transform: translateX(-100%);\n  transform: translateX(-100%);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-prev,\n  .active.carousel-item-left {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n}\n\n.carousel-fade .carousel-item {\n  opacity: 0;\n  transition-duration: .6s;\n  transition-property: opacity;\n}\n\n.carousel-fade .carousel-item.active,\n.carousel-fade .carousel-item-next.carousel-item-left,\n.carousel-fade .carousel-item-prev.carousel-item-right {\n  opacity: 1;\n}\n\n.carousel-fade .active.carousel-item-left,\n.carousel-fade .active.carousel-item-right {\n  opacity: 0;\n}\n\n.carousel-fade .carousel-item-next,\n.carousel-fade .carousel-item-prev,\n.carousel-fade .carousel-item.active,\n.carousel-fade .active.carousel-item-left,\n.carousel-fade .active.carousel-item-prev {\n  -webkit-transform: translateX(0);\n  transform: translateX(0);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-fade .carousel-item-next,\n  .carousel-fade .carousel-item-prev,\n  .carousel-fade .carousel-item.active,\n  .carousel-fade .active.carousel-item-left,\n  .carousel-fade .active.carousel-item-prev {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.carousel-control-prev,\n.carousel-control-next {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 15%;\n  color: #fff;\n  text-align: center;\n  opacity: 0.5;\n}\n\n.carousel-control-prev:hover, .carousel-control-prev:focus,\n.carousel-control-next:hover,\n.carousel-control-next:focus {\n  color: #fff;\n  text-decoration: none;\n  outline: 0;\n  opacity: .9;\n}\n\n.carousel-control-prev {\n  left: 0;\n}\n\n.carousel-control-next {\n  right: 0;\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  background: transparent no-repeat center center;\n  background-size: 100% 100%;\n}\n\n.carousel-control-prev-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3E%3Cpath d=\'M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z\'/%3E%3C/svg%3E");\n}\n\n.carousel-control-next-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3E%3Cpath d=\'M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z\'/%3E%3C/svg%3E");\n}\n\n.carousel-indicators {\n  position: absolute;\n  right: 0;\n  bottom: 10px;\n  left: 0;\n  z-index: 15;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n  justify-content: center;\n  padding-left: 0;\n  margin-right: 15%;\n  margin-left: 15%;\n  list-style: none;\n}\n\n.carousel-indicators li {\n  position: relative;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n  width: 30px;\n  height: 3px;\n  margin-right: 3px;\n  margin-left: 3px;\n  text-indent: -999px;\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n.carousel-indicators li::before {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  display: inline-block;\n  width: 100%;\n  height: 10px;\n  content: "";\n}\n\n.carousel-indicators li::after {\n  position: absolute;\n  bottom: -10px;\n  left: 0;\n  display: inline-block;\n  width: 100%;\n  height: 10px;\n  content: "";\n}\n\n.carousel-indicators .active {\n  background-color: #fff;\n}\n\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n}\n\n.align-baseline {\n  vertical-align: baseline !important;\n}\n\n.align-top {\n  vertical-align: top !important;\n}\n\n.align-middle {\n  vertical-align: middle !important;\n}\n\n.align-bottom {\n  vertical-align: bottom !important;\n}\n\n.align-text-bottom {\n  vertical-align: text-bottom !important;\n}\n\n.align-text-top {\n  vertical-align: text-top !important;\n}\n\n.bg-primary {\n  background-color: #007bff !important;\n}\n\na.bg-primary:hover, a.bg-primary:focus,\nbutton.bg-primary:hover,\nbutton.bg-primary:focus {\n  background-color: #0062cc !important;\n}\n\n.bg-secondary {\n  background-color: #6c757d !important;\n}\n\na.bg-secondary:hover, a.bg-secondary:focus,\nbutton.bg-secondary:hover,\nbutton.bg-secondary:focus {\n  background-color: #545b62 !important;\n}\n\n.bg-success {\n  background-color: #28a745 !important;\n}\n\na.bg-success:hover, a.bg-success:focus,\nbutton.bg-success:hover,\nbutton.bg-success:focus {\n  background-color: #1e7e34 !important;\n}\n\n.bg-info {\n  background-color: #17a2b8 !important;\n}\n\na.bg-info:hover, a.bg-info:focus,\nbutton.bg-info:hover,\nbutton.bg-info:focus {\n  background-color: #117a8b !important;\n}\n\n.bg-warning {\n  background-color: #ffc107 !important;\n}\n\na.bg-warning:hover, a.bg-warning:focus,\nbutton.bg-warning:hover,\nbutton.bg-warning:focus {\n  background-color: #d39e00 !important;\n}\n\n.bg-danger {\n  background-color: #dc3545 !important;\n}\n\na.bg-danger:hover, a.bg-danger:focus,\nbutton.bg-danger:hover,\nbutton.bg-danger:focus {\n  background-color: #bd2130 !important;\n}\n\n.bg-light {\n  background-color: #f8f9fa !important;\n}\n\na.bg-light:hover, a.bg-light:focus,\nbutton.bg-light:hover,\nbutton.bg-light:focus {\n  background-color: #dae0e5 !important;\n}\n\n.bg-dark {\n  background-color: #343a40 !important;\n}\n\na.bg-dark:hover, a.bg-dark:focus,\nbutton.bg-dark:hover,\nbutton.bg-dark:focus {\n  background-color: #1d2124 !important;\n}\n\n.bg-white {\n  background-color: #fff !important;\n}\n\n.bg-transparent {\n  background-color: transparent !important;\n}\n\n.border {\n  border: 1px solid #dee2e6 !important;\n}\n\n.border-top {\n  border-top: 1px solid #dee2e6 !important;\n}\n\n.border-right {\n  border-right: 1px solid #dee2e6 !important;\n}\n\n.border-bottom {\n  border-bottom: 1px solid #dee2e6 !important;\n}\n\n.border-left {\n  border-left: 1px solid #dee2e6 !important;\n}\n\n.border-0 {\n  border: 0 !important;\n}\n\n.border-top-0 {\n  border-top: 0 !important;\n}\n\n.border-right-0 {\n  border-right: 0 !important;\n}\n\n.border-bottom-0 {\n  border-bottom: 0 !important;\n}\n\n.border-left-0 {\n  border-left: 0 !important;\n}\n\n.border-primary {\n  border-color: #007bff !important;\n}\n\n.border-secondary {\n  border-color: #6c757d !important;\n}\n\n.border-success {\n  border-color: #28a745 !important;\n}\n\n.border-info {\n  border-color: #17a2b8 !important;\n}\n\n.border-warning {\n  border-color: #ffc107 !important;\n}\n\n.border-danger {\n  border-color: #dc3545 !important;\n}\n\n.border-light {\n  border-color: #f8f9fa !important;\n}\n\n.border-dark {\n  border-color: #343a40 !important;\n}\n\n.border-white {\n  border-color: #fff !important;\n}\n\n.rounded {\n  border-radius: 0.25rem !important;\n}\n\n.rounded-top {\n  border-top-left-radius: 0.25rem !important;\n  border-top-right-radius: 0.25rem !important;\n}\n\n.rounded-right {\n  border-top-right-radius: 0.25rem !important;\n  border-bottom-right-radius: 0.25rem !important;\n}\n\n.rounded-bottom {\n  border-bottom-right-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important;\n}\n\n.rounded-left {\n  border-top-left-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important;\n}\n\n.rounded-circle {\n  border-radius: 50% !important;\n}\n\n.rounded-0 {\n  border-radius: 0 !important;\n}\n\n.clearfix::after {\n  display: block;\n  clear: both;\n  content: "";\n}\n\n.d-none {\n  display: none !important;\n}\n\n.d-inline {\n  display: inline !important;\n}\n\n.d-inline-block {\n  display: inline-block !important;\n}\n\n.d-block {\n  display: block !important;\n}\n\n.d-table {\n  display: table !important;\n}\n\n.d-table-row {\n  display: table-row !important;\n}\n\n.d-table-cell {\n  display: table-cell !important;\n}\n\n.d-flex {\n  display: -ms-flexbox !important;\n  display: flex !important;\n}\n\n.d-inline-flex {\n  display: -ms-inline-flexbox !important;\n  display: inline-flex !important;\n}\n\n@media (min-width: 576px) {\n  .d-sm-none {\n    display: none !important;\n  }\n  .d-sm-inline {\n    display: inline !important;\n  }\n  .d-sm-inline-block {\n    display: inline-block !important;\n  }\n  .d-sm-block {\n    display: block !important;\n  }\n  .d-sm-table {\n    display: table !important;\n  }\n  .d-sm-table-row {\n    display: table-row !important;\n  }\n  .d-sm-table-cell {\n    display: table-cell !important;\n  }\n  .d-sm-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-sm-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .d-md-none {\n    display: none !important;\n  }\n  .d-md-inline {\n    display: inline !important;\n  }\n  .d-md-inline-block {\n    display: inline-block !important;\n  }\n  .d-md-block {\n    display: block !important;\n  }\n  .d-md-table {\n    display: table !important;\n  }\n  .d-md-table-row {\n    display: table-row !important;\n  }\n  .d-md-table-cell {\n    display: table-cell !important;\n  }\n  .d-md-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-md-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .d-lg-none {\n    display: none !important;\n  }\n  .d-lg-inline {\n    display: inline !important;\n  }\n  .d-lg-inline-block {\n    display: inline-block !important;\n  }\n  .d-lg-block {\n    display: block !important;\n  }\n  .d-lg-table {\n    display: table !important;\n  }\n  .d-lg-table-row {\n    display: table-row !important;\n  }\n  .d-lg-table-cell {\n    display: table-cell !important;\n  }\n  .d-lg-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-lg-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .d-xl-none {\n    display: none !important;\n  }\n  .d-xl-inline {\n    display: inline !important;\n  }\n  .d-xl-inline-block {\n    display: inline-block !important;\n  }\n  .d-xl-block {\n    display: block !important;\n  }\n  .d-xl-table {\n    display: table !important;\n  }\n  .d-xl-table-row {\n    display: table-row !important;\n  }\n  .d-xl-table-cell {\n    display: table-cell !important;\n  }\n  .d-xl-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-xl-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media print {\n  .d-print-none {\n    display: none !important;\n  }\n  .d-print-inline {\n    display: inline !important;\n  }\n  .d-print-inline-block {\n    display: inline-block !important;\n  }\n  .d-print-block {\n    display: block !important;\n  }\n  .d-print-table {\n    display: table !important;\n  }\n  .d-print-table-row {\n    display: table-row !important;\n  }\n  .d-print-table-cell {\n    display: table-cell !important;\n  }\n  .d-print-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-print-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n.embed-responsive {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: 0;\n  overflow: hidden;\n}\n\n.embed-responsive::before {\n  display: block;\n  content: "";\n}\n\n.embed-responsive .embed-responsive-item,\n.embed-responsive iframe,\n.embed-responsive embed,\n.embed-responsive object,\n.embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n\n.embed-responsive-21by9::before {\n  padding-top: 42.857143%;\n}\n\n.embed-responsive-16by9::before {\n  padding-top: 56.25%;\n}\n\n.embed-responsive-4by3::before {\n  padding-top: 75%;\n}\n\n.embed-responsive-1by1::before {\n  padding-top: 100%;\n}\n\n.flex-row {\n  -ms-flex-direction: row !important;\n  flex-direction: row !important;\n}\n\n.flex-column {\n  -ms-flex-direction: column !important;\n  flex-direction: column !important;\n}\n\n.flex-row-reverse {\n  -ms-flex-direction: row-reverse !important;\n  flex-direction: row-reverse !important;\n}\n\n.flex-column-reverse {\n  -ms-flex-direction: column-reverse !important;\n  flex-direction: column-reverse !important;\n}\n\n.flex-wrap {\n  -ms-flex-wrap: wrap !important;\n  flex-wrap: wrap !important;\n}\n\n.flex-nowrap {\n  -ms-flex-wrap: nowrap !important;\n  flex-wrap: nowrap !important;\n}\n\n.flex-wrap-reverse {\n  -ms-flex-wrap: wrap-reverse !important;\n  flex-wrap: wrap-reverse !important;\n}\n\n.flex-fill {\n  -ms-flex: 1 1 auto !important;\n  flex: 1 1 auto !important;\n}\n\n.flex-grow-0 {\n  -ms-flex-positive: 0 !important;\n  flex-grow: 0 !important;\n}\n\n.flex-grow-1 {\n  -ms-flex-positive: 1 !important;\n  flex-grow: 1 !important;\n}\n\n.flex-shrink-0 {\n  -ms-flex-negative: 0 !important;\n  flex-shrink: 0 !important;\n}\n\n.flex-shrink-1 {\n  -ms-flex-negative: 1 !important;\n  flex-shrink: 1 !important;\n}\n\n.justify-content-start {\n  -ms-flex-pack: start !important;\n  justify-content: flex-start !important;\n}\n\n.justify-content-end {\n  -ms-flex-pack: end !important;\n  justify-content: flex-end !important;\n}\n\n.justify-content-center {\n  -ms-flex-pack: center !important;\n  justify-content: center !important;\n}\n\n.justify-content-between {\n  -ms-flex-pack: justify !important;\n  justify-content: space-between !important;\n}\n\n.justify-content-around {\n  -ms-flex-pack: distribute !important;\n  justify-content: space-around !important;\n}\n\n.align-items-start {\n  -ms-flex-align: start !important;\n  align-items: flex-start !important;\n}\n\n.align-items-end {\n  -ms-flex-align: end !important;\n  align-items: flex-end !important;\n}\n\n.align-items-center {\n  -ms-flex-align: center !important;\n  align-items: center !important;\n}\n\n.align-items-baseline {\n  -ms-flex-align: baseline !important;\n  align-items: baseline !important;\n}\n\n.align-items-stretch {\n  -ms-flex-align: stretch !important;\n  align-items: stretch !important;\n}\n\n.align-content-start {\n  -ms-flex-line-pack: start !important;\n  align-content: flex-start !important;\n}\n\n.align-content-end {\n  -ms-flex-line-pack: end !important;\n  align-content: flex-end !important;\n}\n\n.align-content-center {\n  -ms-flex-line-pack: center !important;\n  align-content: center !important;\n}\n\n.align-content-between {\n  -ms-flex-line-pack: justify !important;\n  align-content: space-between !important;\n}\n\n.align-content-around {\n  -ms-flex-line-pack: distribute !important;\n  align-content: space-around !important;\n}\n\n.align-content-stretch {\n  -ms-flex-line-pack: stretch !important;\n  align-content: stretch !important;\n}\n\n.align-self-auto {\n  -ms-flex-item-align: auto !important;\n  align-self: auto !important;\n}\n\n.align-self-start {\n  -ms-flex-item-align: start !important;\n  align-self: flex-start !important;\n}\n\n.align-self-end {\n  -ms-flex-item-align: end !important;\n  align-self: flex-end !important;\n}\n\n.align-self-center {\n  -ms-flex-item-align: center !important;\n  align-self: center !important;\n}\n\n.align-self-baseline {\n  -ms-flex-item-align: baseline !important;\n  align-self: baseline !important;\n}\n\n.align-self-stretch {\n  -ms-flex-item-align: stretch !important;\n  align-self: stretch !important;\n}\n\n@media (min-width: 576px) {\n  .flex-sm-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-sm-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-sm-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-sm-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-sm-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-sm-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-sm-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-sm-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-sm-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-sm-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-sm-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-sm-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-sm-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-sm-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-sm-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-sm-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-sm-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-sm-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-sm-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-sm-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-sm-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-sm-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-sm-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-sm-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-sm-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-sm-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-sm-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-sm-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-sm-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-sm-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-sm-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-sm-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-sm-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-sm-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .flex-md-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-md-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-md-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-md-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-md-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-md-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-md-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-md-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-md-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-md-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-md-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-md-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-md-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-md-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-md-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-md-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-md-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-md-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-md-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-md-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-md-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-md-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-md-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-md-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-md-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-md-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-md-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-md-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-md-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-md-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-md-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-md-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-md-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-md-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .flex-lg-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-lg-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-lg-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-lg-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-lg-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-lg-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-lg-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-lg-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-lg-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-lg-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-lg-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-lg-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-lg-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-lg-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-lg-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-lg-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-lg-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-lg-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-lg-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-lg-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-lg-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-lg-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-lg-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-lg-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-lg-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-lg-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-lg-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-lg-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-lg-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-lg-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-lg-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-lg-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-lg-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-lg-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .flex-xl-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-xl-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-xl-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-xl-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-xl-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-xl-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-xl-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-xl-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-xl-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-xl-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-xl-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-xl-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-xl-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-xl-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-xl-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-xl-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-xl-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-xl-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-xl-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-xl-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-xl-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-xl-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-xl-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-xl-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-xl-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-xl-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-xl-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-xl-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-xl-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-xl-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-xl-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-xl-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-xl-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-xl-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n.float-left {\n  float: left !important;\n}\n\n.float-right {\n  float: right !important;\n}\n\n.float-none {\n  float: none !important;\n}\n\n@media (min-width: 576px) {\n  .float-sm-left {\n    float: left !important;\n  }\n  .float-sm-right {\n    float: right !important;\n  }\n  .float-sm-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .float-md-left {\n    float: left !important;\n  }\n  .float-md-right {\n    float: right !important;\n  }\n  .float-md-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .float-lg-left {\n    float: left !important;\n  }\n  .float-lg-right {\n    float: right !important;\n  }\n  .float-lg-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .float-xl-left {\n    float: left !important;\n  }\n  .float-xl-right {\n    float: right !important;\n  }\n  .float-xl-none {\n    float: none !important;\n  }\n}\n\n.position-static {\n  position: static !important;\n}\n\n.position-relative {\n  position: relative !important;\n}\n\n.position-absolute {\n  position: absolute !important;\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n.position-sticky {\n  position: -webkit-sticky !important;\n  position: sticky !important;\n}\n\n.fixed-top {\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n.fixed-bottom {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n@supports ((position: -webkit-sticky) or (position: sticky)) {\n  .sticky-top {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n    z-index: 1020;\n  }\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  clip: auto;\n  white-space: normal;\n}\n\n.shadow-sm {\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n}\n\n.shadow {\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n}\n\n.shadow-lg {\n  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important;\n}\n\n.shadow-none {\n  box-shadow: none !important;\n}\n\n.w-25 {\n  width: 25% !important;\n}\n\n.w-50 {\n  width: 50% !important;\n}\n\n.w-75 {\n  width: 75% !important;\n}\n\n.w-100 {\n  width: 100% !important;\n}\n\n.w-auto {\n  width: auto !important;\n}\n\n.h-25 {\n  height: 25% !important;\n}\n\n.h-50 {\n  height: 50% !important;\n}\n\n.h-75 {\n  height: 75% !important;\n}\n\n.h-100 {\n  height: 100% !important;\n}\n\n.h-auto {\n  height: auto !important;\n}\n\n.mw-100 {\n  max-width: 100% !important;\n}\n\n.mh-100 {\n  max-height: 100% !important;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n\n.mt-0,\n.my-0 {\n  margin-top: 0 !important;\n}\n\n.mr-0,\n.mx-0 {\n  margin-right: 0 !important;\n}\n\n.mb-0,\n.my-0 {\n  margin-bottom: 0 !important;\n}\n\n.ml-0,\n.mx-0 {\n  margin-left: 0 !important;\n}\n\n.m-1 {\n  margin: 0.25rem !important;\n}\n\n.mt-1,\n.my-1 {\n  margin-top: 0.25rem !important;\n}\n\n.mr-1,\n.mx-1 {\n  margin-right: 0.25rem !important;\n}\n\n.mb-1,\n.my-1 {\n  margin-bottom: 0.25rem !important;\n}\n\n.ml-1,\n.mx-1 {\n  margin-left: 0.25rem !important;\n}\n\n.m-2 {\n  margin: 0.5rem !important;\n}\n\n.mt-2,\n.my-2 {\n  margin-top: 0.5rem !important;\n}\n\n.mr-2,\n.mx-2 {\n  margin-right: 0.5rem !important;\n}\n\n.mb-2,\n.my-2 {\n  margin-bottom: 0.5rem !important;\n}\n\n.ml-2,\n.mx-2 {\n  margin-left: 0.5rem !important;\n}\n\n.m-3 {\n  margin: 1rem !important;\n}\n\n.mt-3,\n.my-3 {\n  margin-top: 1rem !important;\n}\n\n.mr-3,\n.mx-3 {\n  margin-right: 1rem !important;\n}\n\n.mb-3,\n.my-3 {\n  margin-bottom: 1rem !important;\n}\n\n.ml-3,\n.mx-3 {\n  margin-left: 1rem !important;\n}\n\n.m-4 {\n  margin: 1.5rem !important;\n}\n\n.mt-4,\n.my-4 {\n  margin-top: 1.5rem !important;\n}\n\n.mr-4,\n.mx-4 {\n  margin-right: 1.5rem !important;\n}\n\n.mb-4,\n.my-4 {\n  margin-bottom: 1.5rem !important;\n}\n\n.ml-4,\n.mx-4 {\n  margin-left: 1.5rem !important;\n}\n\n.m-5 {\n  margin: 3rem !important;\n}\n\n.mt-5,\n.my-5 {\n  margin-top: 3rem !important;\n}\n\n.mr-5,\n.mx-5 {\n  margin-right: 3rem !important;\n}\n\n.mb-5,\n.my-5 {\n  margin-bottom: 3rem !important;\n}\n\n.ml-5,\n.mx-5 {\n  margin-left: 3rem !important;\n}\n\n.p-0 {\n  padding: 0 !important;\n}\n\n.pt-0,\n.py-0 {\n  padding-top: 0 !important;\n}\n\n.pr-0,\n.px-0 {\n  padding-right: 0 !important;\n}\n\n.pb-0,\n.py-0 {\n  padding-bottom: 0 !important;\n}\n\n.pl-0,\n.px-0 {\n  padding-left: 0 !important;\n}\n\n.p-1 {\n  padding: 0.25rem !important;\n}\n\n.pt-1,\n.py-1 {\n  padding-top: 0.25rem !important;\n}\n\n.pr-1,\n.px-1 {\n  padding-right: 0.25rem !important;\n}\n\n.pb-1,\n.py-1 {\n  padding-bottom: 0.25rem !important;\n}\n\n.pl-1,\n.px-1 {\n  padding-left: 0.25rem !important;\n}\n\n.p-2 {\n  padding: 0.5rem !important;\n}\n\n.pt-2,\n.py-2 {\n  padding-top: 0.5rem !important;\n}\n\n.pr-2,\n.px-2 {\n  padding-right: 0.5rem !important;\n}\n\n.pb-2,\n.py-2 {\n  padding-bottom: 0.5rem !important;\n}\n\n.pl-2,\n.px-2 {\n  padding-left: 0.5rem !important;\n}\n\n.p-3 {\n  padding: 1rem !important;\n}\n\n.pt-3,\n.py-3 {\n  padding-top: 1rem !important;\n}\n\n.pr-3,\n.px-3 {\n  padding-right: 1rem !important;\n}\n\n.pb-3,\n.py-3 {\n  padding-bottom: 1rem !important;\n}\n\n.pl-3,\n.px-3 {\n  padding-left: 1rem !important;\n}\n\n.p-4 {\n  padding: 1.5rem !important;\n}\n\n.pt-4,\n.py-4 {\n  padding-top: 1.5rem !important;\n}\n\n.pr-4,\n.px-4 {\n  padding-right: 1.5rem !important;\n}\n\n.pb-4,\n.py-4 {\n  padding-bottom: 1.5rem !important;\n}\n\n.pl-4,\n.px-4 {\n  padding-left: 1.5rem !important;\n}\n\n.p-5 {\n  padding: 3rem !important;\n}\n\n.pt-5,\n.py-5 {\n  padding-top: 3rem !important;\n}\n\n.pr-5,\n.px-5 {\n  padding-right: 3rem !important;\n}\n\n.pb-5,\n.py-5 {\n  padding-bottom: 3rem !important;\n}\n\n.pl-5,\n.px-5 {\n  padding-left: 3rem !important;\n}\n\n.m-auto {\n  margin: auto !important;\n}\n\n.mt-auto,\n.my-auto {\n  margin-top: auto !important;\n}\n\n.mr-auto,\n.mx-auto {\n  margin-right: auto !important;\n}\n\n.mb-auto,\n.my-auto {\n  margin-bottom: auto !important;\n}\n\n.ml-auto,\n.mx-auto {\n  margin-left: auto !important;\n}\n\n@media (min-width: 576px) {\n  .m-sm-0 {\n    margin: 0 !important;\n  }\n  .mt-sm-0,\n  .my-sm-0 {\n    margin-top: 0 !important;\n  }\n  .mr-sm-0,\n  .mx-sm-0 {\n    margin-right: 0 !important;\n  }\n  .mb-sm-0,\n  .my-sm-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-sm-0,\n  .mx-sm-0 {\n    margin-left: 0 !important;\n  }\n  .m-sm-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-sm-1,\n  .my-sm-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-sm-1,\n  .mx-sm-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-sm-1,\n  .my-sm-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-sm-1,\n  .mx-sm-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-sm-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-sm-2,\n  .my-sm-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-sm-2,\n  .mx-sm-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-sm-2,\n  .my-sm-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-sm-2,\n  .mx-sm-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-sm-3 {\n    margin: 1rem !important;\n  }\n  .mt-sm-3,\n  .my-sm-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-sm-3,\n  .mx-sm-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-sm-3,\n  .my-sm-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-sm-3,\n  .mx-sm-3 {\n    margin-left: 1rem !important;\n  }\n  .m-sm-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-sm-4,\n  .my-sm-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-sm-4,\n  .mx-sm-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-sm-4,\n  .my-sm-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-sm-4,\n  .mx-sm-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-sm-5 {\n    margin: 3rem !important;\n  }\n  .mt-sm-5,\n  .my-sm-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-sm-5,\n  .mx-sm-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-sm-5,\n  .my-sm-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-sm-5,\n  .mx-sm-5 {\n    margin-left: 3rem !important;\n  }\n  .p-sm-0 {\n    padding: 0 !important;\n  }\n  .pt-sm-0,\n  .py-sm-0 {\n    padding-top: 0 !important;\n  }\n  .pr-sm-0,\n  .px-sm-0 {\n    padding-right: 0 !important;\n  }\n  .pb-sm-0,\n  .py-sm-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-sm-0,\n  .px-sm-0 {\n    padding-left: 0 !important;\n  }\n  .p-sm-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-sm-1,\n  .py-sm-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-sm-1,\n  .px-sm-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-sm-1,\n  .py-sm-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-sm-1,\n  .px-sm-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-sm-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-sm-2,\n  .py-sm-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-sm-2,\n  .px-sm-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-sm-2,\n  .py-sm-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-sm-2,\n  .px-sm-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-sm-3 {\n    padding: 1rem !important;\n  }\n  .pt-sm-3,\n  .py-sm-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-sm-3,\n  .px-sm-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-sm-3,\n  .py-sm-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-sm-3,\n  .px-sm-3 {\n    padding-left: 1rem !important;\n  }\n  .p-sm-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-sm-4,\n  .py-sm-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-sm-4,\n  .px-sm-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-sm-4,\n  .py-sm-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-sm-4,\n  .px-sm-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-sm-5 {\n    padding: 3rem !important;\n  }\n  .pt-sm-5,\n  .py-sm-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-sm-5,\n  .px-sm-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-sm-5,\n  .py-sm-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-sm-5,\n  .px-sm-5 {\n    padding-left: 3rem !important;\n  }\n  .m-sm-auto {\n    margin: auto !important;\n  }\n  .mt-sm-auto,\n  .my-sm-auto {\n    margin-top: auto !important;\n  }\n  .mr-sm-auto,\n  .mx-sm-auto {\n    margin-right: auto !important;\n  }\n  .mb-sm-auto,\n  .my-sm-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-sm-auto,\n  .mx-sm-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .m-md-0 {\n    margin: 0 !important;\n  }\n  .mt-md-0,\n  .my-md-0 {\n    margin-top: 0 !important;\n  }\n  .mr-md-0,\n  .mx-md-0 {\n    margin-right: 0 !important;\n  }\n  .mb-md-0,\n  .my-md-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-md-0,\n  .mx-md-0 {\n    margin-left: 0 !important;\n  }\n  .m-md-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-md-1,\n  .my-md-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-md-1,\n  .mx-md-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-md-1,\n  .my-md-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-md-1,\n  .mx-md-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-md-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-md-2,\n  .my-md-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-md-2,\n  .mx-md-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-md-2,\n  .my-md-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-md-2,\n  .mx-md-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-md-3 {\n    margin: 1rem !important;\n  }\n  .mt-md-3,\n  .my-md-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-md-3,\n  .mx-md-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-md-3,\n  .my-md-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-md-3,\n  .mx-md-3 {\n    margin-left: 1rem !important;\n  }\n  .m-md-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-md-4,\n  .my-md-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-md-4,\n  .mx-md-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-md-4,\n  .my-md-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-md-4,\n  .mx-md-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-md-5 {\n    margin: 3rem !important;\n  }\n  .mt-md-5,\n  .my-md-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-md-5,\n  .mx-md-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-md-5,\n  .my-md-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-md-5,\n  .mx-md-5 {\n    margin-left: 3rem !important;\n  }\n  .p-md-0 {\n    padding: 0 !important;\n  }\n  .pt-md-0,\n  .py-md-0 {\n    padding-top: 0 !important;\n  }\n  .pr-md-0,\n  .px-md-0 {\n    padding-right: 0 !important;\n  }\n  .pb-md-0,\n  .py-md-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-md-0,\n  .px-md-0 {\n    padding-left: 0 !important;\n  }\n  .p-md-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-md-1,\n  .py-md-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-md-1,\n  .px-md-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-md-1,\n  .py-md-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-md-1,\n  .px-md-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-md-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-md-2,\n  .py-md-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-md-2,\n  .px-md-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-md-2,\n  .py-md-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-md-2,\n  .px-md-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-md-3 {\n    padding: 1rem !important;\n  }\n  .pt-md-3,\n  .py-md-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-md-3,\n  .px-md-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-md-3,\n  .py-md-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-md-3,\n  .px-md-3 {\n    padding-left: 1rem !important;\n  }\n  .p-md-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-md-4,\n  .py-md-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-md-4,\n  .px-md-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-md-4,\n  .py-md-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-md-4,\n  .px-md-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-md-5 {\n    padding: 3rem !important;\n  }\n  .pt-md-5,\n  .py-md-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-md-5,\n  .px-md-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-md-5,\n  .py-md-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-md-5,\n  .px-md-5 {\n    padding-left: 3rem !important;\n  }\n  .m-md-auto {\n    margin: auto !important;\n  }\n  .mt-md-auto,\n  .my-md-auto {\n    margin-top: auto !important;\n  }\n  .mr-md-auto,\n  .mx-md-auto {\n    margin-right: auto !important;\n  }\n  .mb-md-auto,\n  .my-md-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-md-auto,\n  .mx-md-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .m-lg-0 {\n    margin: 0 !important;\n  }\n  .mt-lg-0,\n  .my-lg-0 {\n    margin-top: 0 !important;\n  }\n  .mr-lg-0,\n  .mx-lg-0 {\n    margin-right: 0 !important;\n  }\n  .mb-lg-0,\n  .my-lg-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-lg-0,\n  .mx-lg-0 {\n    margin-left: 0 !important;\n  }\n  .m-lg-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-lg-1,\n  .my-lg-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-lg-1,\n  .mx-lg-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-lg-1,\n  .my-lg-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-lg-1,\n  .mx-lg-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-lg-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-lg-2,\n  .my-lg-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-lg-2,\n  .mx-lg-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-lg-2,\n  .my-lg-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-lg-2,\n  .mx-lg-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-lg-3 {\n    margin: 1rem !important;\n  }\n  .mt-lg-3,\n  .my-lg-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-lg-3,\n  .mx-lg-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-lg-3,\n  .my-lg-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-lg-3,\n  .mx-lg-3 {\n    margin-left: 1rem !important;\n  }\n  .m-lg-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-lg-4,\n  .my-lg-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-lg-4,\n  .mx-lg-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-lg-4,\n  .my-lg-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-lg-4,\n  .mx-lg-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-lg-5 {\n    margin: 3rem !important;\n  }\n  .mt-lg-5,\n  .my-lg-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-lg-5,\n  .mx-lg-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-lg-5,\n  .my-lg-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-lg-5,\n  .mx-lg-5 {\n    margin-left: 3rem !important;\n  }\n  .p-lg-0 {\n    padding: 0 !important;\n  }\n  .pt-lg-0,\n  .py-lg-0 {\n    padding-top: 0 !important;\n  }\n  .pr-lg-0,\n  .px-lg-0 {\n    padding-right: 0 !important;\n  }\n  .pb-lg-0,\n  .py-lg-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-lg-0,\n  .px-lg-0 {\n    padding-left: 0 !important;\n  }\n  .p-lg-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-lg-1,\n  .py-lg-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-lg-1,\n  .px-lg-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-lg-1,\n  .py-lg-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-lg-1,\n  .px-lg-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-lg-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-lg-2,\n  .py-lg-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-lg-2,\n  .px-lg-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-lg-2,\n  .py-lg-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-lg-2,\n  .px-lg-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-lg-3 {\n    padding: 1rem !important;\n  }\n  .pt-lg-3,\n  .py-lg-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-lg-3,\n  .px-lg-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-lg-3,\n  .py-lg-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-lg-3,\n  .px-lg-3 {\n    padding-left: 1rem !important;\n  }\n  .p-lg-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-lg-4,\n  .py-lg-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-lg-4,\n  .px-lg-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-lg-4,\n  .py-lg-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-lg-4,\n  .px-lg-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-lg-5 {\n    padding: 3rem !important;\n  }\n  .pt-lg-5,\n  .py-lg-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-lg-5,\n  .px-lg-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-lg-5,\n  .py-lg-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-lg-5,\n  .px-lg-5 {\n    padding-left: 3rem !important;\n  }\n  .m-lg-auto {\n    margin: auto !important;\n  }\n  .mt-lg-auto,\n  .my-lg-auto {\n    margin-top: auto !important;\n  }\n  .mr-lg-auto,\n  .mx-lg-auto {\n    margin-right: auto !important;\n  }\n  .mb-lg-auto,\n  .my-lg-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-lg-auto,\n  .mx-lg-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .m-xl-0 {\n    margin: 0 !important;\n  }\n  .mt-xl-0,\n  .my-xl-0 {\n    margin-top: 0 !important;\n  }\n  .mr-xl-0,\n  .mx-xl-0 {\n    margin-right: 0 !important;\n  }\n  .mb-xl-0,\n  .my-xl-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-xl-0,\n  .mx-xl-0 {\n    margin-left: 0 !important;\n  }\n  .m-xl-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-xl-1,\n  .my-xl-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-xl-1,\n  .mx-xl-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-xl-1,\n  .my-xl-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-xl-1,\n  .mx-xl-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-xl-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-xl-2,\n  .my-xl-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-xl-2,\n  .mx-xl-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-xl-2,\n  .my-xl-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-xl-2,\n  .mx-xl-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-xl-3 {\n    margin: 1rem !important;\n  }\n  .mt-xl-3,\n  .my-xl-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-xl-3,\n  .mx-xl-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-xl-3,\n  .my-xl-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-xl-3,\n  .mx-xl-3 {\n    margin-left: 1rem !important;\n  }\n  .m-xl-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-xl-4,\n  .my-xl-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-xl-4,\n  .mx-xl-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-xl-4,\n  .my-xl-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-xl-4,\n  .mx-xl-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-xl-5 {\n    margin: 3rem !important;\n  }\n  .mt-xl-5,\n  .my-xl-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-xl-5,\n  .mx-xl-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-xl-5,\n  .my-xl-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-xl-5,\n  .mx-xl-5 {\n    margin-left: 3rem !important;\n  }\n  .p-xl-0 {\n    padding: 0 !important;\n  }\n  .pt-xl-0,\n  .py-xl-0 {\n    padding-top: 0 !important;\n  }\n  .pr-xl-0,\n  .px-xl-0 {\n    padding-right: 0 !important;\n  }\n  .pb-xl-0,\n  .py-xl-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-xl-0,\n  .px-xl-0 {\n    padding-left: 0 !important;\n  }\n  .p-xl-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-xl-1,\n  .py-xl-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-xl-1,\n  .px-xl-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-xl-1,\n  .py-xl-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-xl-1,\n  .px-xl-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-xl-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-xl-2,\n  .py-xl-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-xl-2,\n  .px-xl-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-xl-2,\n  .py-xl-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-xl-2,\n  .px-xl-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-xl-3 {\n    padding: 1rem !important;\n  }\n  .pt-xl-3,\n  .py-xl-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-xl-3,\n  .px-xl-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-xl-3,\n  .py-xl-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-xl-3,\n  .px-xl-3 {\n    padding-left: 1rem !important;\n  }\n  .p-xl-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-xl-4,\n  .py-xl-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-xl-4,\n  .px-xl-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-xl-4,\n  .py-xl-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-xl-4,\n  .px-xl-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-xl-5 {\n    padding: 3rem !important;\n  }\n  .pt-xl-5,\n  .py-xl-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-xl-5,\n  .px-xl-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-xl-5,\n  .py-xl-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-xl-5,\n  .px-xl-5 {\n    padding-left: 3rem !important;\n  }\n  .m-xl-auto {\n    margin: auto !important;\n  }\n  .mt-xl-auto,\n  .my-xl-auto {\n    margin-top: auto !important;\n  }\n  .mr-xl-auto,\n  .mx-xl-auto {\n    margin-right: auto !important;\n  }\n  .mb-xl-auto,\n  .my-xl-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-xl-auto,\n  .mx-xl-auto {\n    margin-left: auto !important;\n  }\n}\n\n.text-monospace {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\n.text-justify {\n  text-align: justify !important;\n}\n\n.text-nowrap {\n  white-space: nowrap !important;\n}\n\n.text-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.text-left {\n  text-align: left !important;\n}\n\n.text-right {\n  text-align: right !important;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (min-width: 576px) {\n  .text-sm-left {\n    text-align: left !important;\n  }\n  .text-sm-right {\n    text-align: right !important;\n  }\n  .text-sm-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .text-md-left {\n    text-align: left !important;\n  }\n  .text-md-right {\n    text-align: right !important;\n  }\n  .text-md-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .text-lg-left {\n    text-align: left !important;\n  }\n  .text-lg-right {\n    text-align: right !important;\n  }\n  .text-lg-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .text-xl-left {\n    text-align: left !important;\n  }\n  .text-xl-right {\n    text-align: right !important;\n  }\n  .text-xl-center {\n    text-align: center !important;\n  }\n}\n\n.text-lowercase {\n  text-transform: lowercase !important;\n}\n\n.text-uppercase {\n  text-transform: uppercase !important;\n}\n\n.text-capitalize {\n  text-transform: capitalize !important;\n}\n\n.font-weight-light {\n  font-weight: 300 !important;\n}\n\n.font-weight-normal {\n  font-weight: 400 !important;\n}\n\n.font-weight-bold {\n  font-weight: 700 !important;\n}\n\n.font-italic {\n  font-style: italic !important;\n}\n\n.text-white {\n  color: #fff !important;\n}\n\n.text-primary {\n  color: #007bff !important;\n}\n\na.text-primary:hover, a.text-primary:focus {\n  color: #0062cc !important;\n}\n\n.text-secondary {\n  color: #6c757d !important;\n}\n\na.text-secondary:hover, a.text-secondary:focus {\n  color: #545b62 !important;\n}\n\n.text-success {\n  color: #28a745 !important;\n}\n\na.text-success:hover, a.text-success:focus {\n  color: #1e7e34 !important;\n}\n\n.text-info {\n  color: #17a2b8 !important;\n}\n\na.text-info:hover, a.text-info:focus {\n  color: #117a8b !important;\n}\n\n.text-warning {\n  color: #ffc107 !important;\n}\n\na.text-warning:hover, a.text-warning:focus {\n  color: #d39e00 !important;\n}\n\n.text-danger {\n  color: #dc3545 !important;\n}\n\na.text-danger:hover, a.text-danger:focus {\n  color: #bd2130 !important;\n}\n\n.text-light {\n  color: #f8f9fa !important;\n}\n\na.text-light:hover, a.text-light:focus {\n  color: #dae0e5 !important;\n}\n\n.text-dark {\n  color: #343a40 !important;\n}\n\na.text-dark:hover, a.text-dark:focus {\n  color: #1d2124 !important;\n}\n\n.text-body {\n  color: #212529 !important;\n}\n\n.text-muted {\n  color: #6c757d !important;\n}\n\n.text-black-50 {\n  color: rgba(0, 0, 0, 0.5) !important;\n}\n\n.text-white-50 {\n  color: rgba(255, 255, 255, 0.5) !important;\n}\n\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n.visible {\n  visibility: visible !important;\n}\n\n.invisible {\n  visibility: hidden !important;\n}\n\n@media print {\n  *,\n  *::before,\n  *::after {\n    text-shadow: none !important;\n    box-shadow: none !important;\n  }\n  a:not(.btn) {\n    text-decoration: underline;\n  }\n  abbr[title]::after {\n    content: " (" attr(title) ")";\n  }\n  pre {\n    white-space: pre-wrap !important;\n  }\n  pre,\n  blockquote {\n    border: 1px solid #adb5bd;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  @page {\n    size: a3;\n  }\n  body {\n    min-width: 992px !important;\n  }\n  .container {\n    min-width: 992px !important;\n  }\n  .navbar {\n    display: none;\n  }\n  .badge {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #dee2e6 !important;\n  }\n  .table-dark {\n    color: inherit;\n  }\n  .table-dark th,\n  .table-dark td,\n  .table-dark thead th,\n  .table-dark tbody + tbody {\n    border-color: #dee2e6;\n  }\n  .table .thead-dark th {\n    color: inherit;\n    border-color: #dee2e6;\n  }\n}',""])},function(e,n,t){(e.exports=t(119)(!1)).push([e.i,"body {\n  text-align: center;\n  margin: auto; }\n  body h1 {\n    color: green; }\n",""])},function(e,n,t){"use strict";t.r(n);var r=t(22),o=t.n(r),a=t(26),i=t.n(a),l=t(21),s=t.n(l),c=t(27),u=t.n(c),d=t(0),f=t(83),p=t(123),m=t.n(p)()({getReferenceRef:void 0,referenceNode:void 0}),h=function(e){function n(){i()(this,n);var t=s()(this,e.call(this));return t.getReferenceRef=function(e){return t.setState(function(n){var t=n.context;return{context:o()({},t,{referenceNode:e})}})},t.state={context:{getReferenceRef:t.getReferenceRef,referenceNode:void 0}},t}return u()(n,e),n.prototype.render=function(){return d.createElement(m.Provider,{value:this.state.context},this.props.children)},n}(d.Component),b=function(e){return Array.isArray(e)?e[0]:e},g=function(e){for(var n=arguments.length,t=Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];if("function"==typeof e)return e.apply(void 0,t)},v={position:"absolute",top:0,left:0,opacity:0,pointerEvents:"none"},y={},x=function(e){function n(){var t,r,a;i()(this,n);for(var l=arguments.length,c=Array(l),u=0;u<l;u++)c[u]=arguments[u];return t=r=s()(this,e.call.apply(e,[this].concat(c))),r.state={data:void 0,placement:void 0},r.popperNode=null,r.arrowNode=null,r.setPopperNode=function(e){r.popperNode!==e&&(g(r.props.innerRef,e),r.popperNode=e,r.updatePopperInstance())},r.setArrowNode=function(e){r.arrowNode!==e&&(r.arrowNode=e,r.popperInstance||r.updatePopperInstance())},r.updateStateModifier={enabled:!0,order:900,fn:function(e){var n=e.placement;return r.setState({data:e,placement:n},n!==r.state.placement?r.scheduleUpdate:void 0),e}},r.getOptions=function(){return{placement:r.props.placement,eventsEnabled:r.props.eventsEnabled,positionFixed:r.props.positionFixed,modifiers:o()({},r.props.modifiers,{arrow:o()({},r.props.modifiers&&r.props.modifiers.arrow,{enabled:!!r.arrowNode,element:r.arrowNode}),applyStyle:{enabled:!1},updateStateModifier:r.updateStateModifier})}},r.getPopperStyle=function(){return r.popperNode&&r.state.data?o()({position:r.state.data.offsets.popper.position},r.state.data.styles):v},r.getPopperPlacement=function(){return r.state.data?r.state.placement:void 0},r.getArrowStyle=function(){return r.arrowNode&&r.state.data?r.state.data.arrowStyles:y},r.getOutOfBoundariesState=function(){return r.state.data?r.state.data.hide:void 0},r.destroyPopperInstance=function(){r.popperInstance&&(r.popperInstance.destroy(),r.popperInstance=null)},r.updatePopperInstance=function(){r.destroyPopperInstance();var e=r.popperNode,n=r.props.referenceElement;n&&e&&(r.popperInstance=new f.a(n,e,r.getOptions()))},r.scheduleUpdate=function(){r.popperInstance&&r.popperInstance.scheduleUpdate()},a=t,s()(r,a)}return u()(n,e),n.prototype.componentDidUpdate=function(e,n){this.props.placement!==e.placement||this.props.referenceElement!==e.referenceElement||this.props.positionFixed!==e.positionFixed?this.updatePopperInstance():this.props.eventsEnabled!==e.eventsEnabled&&this.popperInstance&&(this.props.eventsEnabled?this.popperInstance.enableEventListeners():this.popperInstance.disableEventListeners()),n.placement!==this.state.placement&&this.scheduleUpdate()},n.prototype.componentWillUnmount=function(){this.destroyPopperInstance()},n.prototype.render=function(){return b(this.props.children)({ref:this.setPopperNode,style:this.getPopperStyle(),placement:this.getPopperPlacement(),outOfBoundaries:this.getOutOfBoundariesState(),scheduleUpdate:this.scheduleUpdate,arrowProps:{ref:this.setArrowNode,style:this.getArrowStyle()}})},n}(d.Component);x.defaultProps={placement:"bottom",eventsEnabled:!0,referenceElement:void 0,positionFixed:!1};var w=f.a.placements;function k(e){return d.createElement(m.Consumer,null,function(n){var t=n.referenceNode;return d.createElement(x,o()({referenceElement:t},e))})}var E=t(124),_=t.n(E),C=function(e){function n(){var t,r,o;i()(this,n);for(var a=arguments.length,l=Array(a),c=0;c<a;c++)l[c]=arguments[c];return t=r=s()(this,e.call.apply(e,[this].concat(l))),r.refHandler=function(e){g(r.props.innerRef,e),g(r.props.getReferenceRef,e)},o=t,s()(r,o)}return u()(n,e),n.prototype.render=function(){return _()(this.props.getReferenceRef,"`Reference` should not be used outside of a `Manager` component."),b(this.props.children)({ref:this.refHandler})},n}(d.Component);function P(e){return d.createElement(m.Consumer,null,function(n){var t=n.getReferenceRef;return d.createElement(C,o()({getReferenceRef:t},e))})}t.d(n,"Popper",function(){return k}),t.d(n,"placements",function(){return w}),t.d(n,"Manager",function(){return h}),t.d(n,"Reference",function(){return P})},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=c(t(2)),o=c(t(0)),a=t(77),i=c(t(70)),l=c(t(100)),s=c(t(10));function c(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var d=function(e){var n,t;function r(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).state={toggleId:null},n.popperIsInitialized=!1,n.handleClose=function(e){n.props.onToggle&&n.props.onToggle(!1,e)},n}t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t;var i=r.prototype;return i.getSnapshotBeforeUpdate=function(e){var n=!e.show&&this.props.show&&this.popperIsInitialized&&e.toggleNode===this.props.toggleNode;return this.props.show&&this.props.usePopper&&!this.popperIsInitialized&&(this.popperIsInitialized=!0),!!n},i.componentDidUpdate=function(e,n,t){t&&this.scheduleUpdate&&this.scheduleUpdate()},i.render=function(){var e=this,n=this.props,t=n.show,r=n.flip,i=n.menuRef,s=n.alignEnd,c=n.drop,d=n.usePopper,f=n.toggleNode,p=n.rootCloseEvent,m=n.popperConfig,h=void 0===m?{}:m,b=s?"bottom-end":"bottom-start";"up"===c&&(b=s?"top-end":"top-start"),"right"===c&&(b=s?"right-end":"right-start"),"left"===c&&(b=s?"left-end":"left-start");var g=null,v={ref:i,"aria-labelledby":f&&f.id},y={show:t,alignEnd:s,close:this.handleClose};return d?(this.popperIsInitialized||t)&&(f&&(h.referenceElement=f),g=o.default.createElement(a.Popper,u({},h,{innerRef:i,placement:b,eventsEnabled:!!t,modifiers:u({flip:{enabled:!!r}},h.modifiers)}),function(n){var t=n.ref,r=n.style,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(n,["ref","style"]);return e.scheduleUpdate=o.scheduleUpdate,e.props.children(u({},o,y,{props:u({},v,{ref:t,style:r})}))})):g=this.props.children(u({},y,{props:v})),g&&o.default.createElement(l.default,{disabled:!t,event:p,onRootClose:this.handleClose},g)},r}(o.default.Component);d.displayName="ReactOverlaysDropdownMenu",d.propTypes={children:r.default.func.isRequired,show:r.default.bool,alignEnd:r.default.bool,flip:r.default.bool,usePopper:r.default.oneOf([!0,!1]),popperConfig:r.default.object,rootCloseEvent:r.default.string,onToggle:r.default.func,menuRef:r.default.func,drop:r.default.string,toggleNode:r.default.any},d.defaultProps={usePopper:!0};var f=(0,s.default)(i.default,function(e,n){var t=e.show,r=e.alignEnd,o=e.toggle;return{drop:e.drop,menuRef:e.menuRef,toggleNode:e.toggleNode,onToggle:o,show:null==t?n.show:t,alignEnd:null==r?n.alignEnd:r}},d);n.default=f,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=i(t(2)),o=i(t(0)),a=i(t(70));function i(e){return e&&e.__esModule?e:{default:e}}var l={children:r.default.func.isRequired};function s(e){var n=e.children;return o.default.createElement(a.default.Consumer,null,function(e){var t=e.show,r=e.toggle,o=e.toggleRef;return n({show:t,toggle:r,props:{ref:o,"aria-haspopup":!0,"aria-expanded":!!t}})})}s.displayName="ReactOverlaysDropdownToggle",s.propTypes=l;var c=s;n.default=c,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return(0,o.default)(function(n){return r.default.createElement(e.Consumer,null,function(t){return r.default.createElement(e.Provider,{value:n.mapToValue(t)},n.children)})},{displayName:"ContextTransformer"})};var r=a(t(0)),o=a(t(36));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=s(t(194)),o=s(t(18)),a=s(t(38)),i=s(t(197)),l=t(199);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e){var n=void 0===e?{}:e,t=n.hideSiblingNodes,r=void 0===t||t,o=n.handleContainerOverflow,i=void 0===o||o;this.hideSiblingNodes=r,this.handleContainerOverflow=i,this.modals=[],this.containers=[],this.data=[],this.scrollbarSize=(0,a.default)()}var n=e.prototype;return n.isContainerOverflowing=function(e){var n=this.data[this.containerIndexFromModal(e)];return n&&n.overflowing},n.containerIndexFromModal=function(e){return n=this.data,t=function(n){return-1!==n.modals.indexOf(e)},r=-1,n.some(function(e,n){if(t(e,n))return r=n,!0}),r;var n,t,r},n.setContainerStyle=function(e,n){var t={overflow:"hidden"};e.style={overflow:n.style.overflow,paddingRight:n.style.paddingRight},e.overflowing&&(t.paddingRight=parseInt((0,o.default)(n,"paddingRight")||0,10)+this.scrollbarSize+"px"),(0,o.default)(n,t)},n.removeContainerStyle=function(e,n){var t=e.style;Object.keys(t).forEach(function(e){n.style[e]=t[e]})},n.add=function(e,n,t){var o=this.modals.indexOf(e),a=this.containers.indexOf(n);if(-1!==o)return o;if(o=this.modals.length,this.modals.push(e),this.hideSiblingNodes&&(0,l.hideSiblings)(n,e),-1!==a)return this.data[a].modals.push(e),o;var s={modals:[e],classes:t?t.split(/\s+/):[],overflowing:(0,i.default)(n)};return this.handleContainerOverflow&&this.setContainerStyle(s,n),s.classes.forEach(r.default.addClass.bind(null,n)),this.containers.push(n),this.data.push(s),o},n.remove=function(e){var n=this.modals.indexOf(e);if(-1!==n){var t=this.containerIndexFromModal(e),o=this.data[t],a=this.containers[t];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.classes.forEach(r.default.removeClass.bind(null,a)),this.handleContainerOverflow&&this.removeContainerStyle(o,a),this.hideSiblingNodes&&(0,l.showSiblings)(a,e),this.containers.splice(t,1),this.data.splice(t,1);else if(this.hideSiblingNodes){var i=o.modals[o.modals.length-1],s=i.backdrop,c=i.dialog;(0,l.ariaHidden)(!1,c),(0,l.ariaHidden)(!1,s)}}},n.isTopModal=function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e},e}();n.default=c,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=p(t(148)),o=p(t(15)),a=p(t(0)),i=p(t(8)),l=p(t(2)),s=p(t(11)),c=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};r.get||r.set?Object.defineProperty(n,t,r):n[t]=e[t]}return n.default=e,n}(t(77)),u=p(t(70)),d=p(t(78)),f=p(t(79));function p(e){return e&&e.__esModule?e:{default:e}}function m(){return(m=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var h={children:l.default.func.isRequired,drop:l.default.oneOf(["up","left","right","down"]),itemSelector:l.default.string.isRequired,alignEnd:l.default.bool,show:l.default.bool,onToggle:l.default.func},b=function(e){var n,t;function l(n,t){var r;return(r=e.call(this,n,t)||this).handleClick=function(e){r.toggleOpen(e)},r.handleKeyDown=function(e){var n=e.key,t=e.target;if(!/input|textarea/i.test(t.tagName)||!(" "===n||"Escape"!==n&&r.menu.contains(t)))switch(n){case"ArrowUp":var o=r.getNextFocusedChild(t,-1);return o&&o.focus&&o.focus(),void e.preventDefault();case"ArrowDown":if(e.preventDefault(),r.props.show){var a=r.getNextFocusedChild(t,1);a&&a.focus&&a.focus()}else r.toggleOpen(e);return;case"Escape":case"Tab":r.props.onToggle(!1,e)}},r._focusInDropdown=!1,r.menu=null,r.state={context:{close:r.handleClose,toggle:r.handleClick,menuRef:function(e){r.menu=e},toggleRef:function(e){var n=e&&i.default.findDOMNode(e);r.setState(function(e){return{context:m({},e.context,{toggleNode:n})}})}}},r}t=e,(n=l).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,l.getDerivedStateFromProps=function(e,n){var t=e.drop,r=e.alignEnd,o=e.show;return{lastShow:n.context.show,context:m({},n.context,{drop:t,show:o,alignEnd:r})}};var s=l.prototype;return s.componentDidUpdate=function(e){var n=this.props.show,t=e.show;n&&!t&&this.maybeFocusFirst(),!n&&t&&this._focusInDropdown&&(this._focusInDropdown=!1,this.focus())},s.getNextFocusedChild=function(e,n){if(!this.menu)return null;var t=this.props.itemSelector,r=(0,o.default)(this.menu,t),a=r.indexOf(e)+n;return r[a=Math.max(0,Math.min(a,r.length))]},s.hasMenuRole=function(){return this.menu&&(0,r.default)(this.menu,"[role=menu]")},s.focus=function(){var e=this.state.context.toggleNode;e&&e.focus&&e.focus()},s.maybeFocusFirst=function(){if(this.hasMenuRole()){var e=this.props.itemSelector,n=(0,o.default)(this.menu,e)[0];n&&n.focus&&n.focus()}},s.toggleOpen=function(e){var n=!this.props.show;this.props.onToggle(n,e)},s.render=function(){var e=this.props,n=e.children;return delete function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["children"]).onToggle,this.menu&&this.state.lastShow&&!this.props.show&&(this._focusInDropdown=this.menu.contains(document.activeElement)),a.default.createElement(u.default.Provider,{value:this.state.context},a.default.createElement(c.Manager,null,n({props:{onKeyDown:this.handleKeyDown}})))},l}(a.default.Component);b.displayName="ReactOverlaysDropdown",b.propTypes=h,b.defaultProps={itemSelector:"* > *"};var g=(0,s.default)(b,{show:"onToggle"});g.Menu=d.default,g.Toggle=f.default;var v=g;n.default=v,e.exports=n.default},function(e,n,t){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.5
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var t="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,a=0;a<r.length;a+=1)if(t&&navigator.userAgent.indexOf(r[a])>=0){o=1;break}var i=t&&window.Promise?function(e){var n=!1;return function(){n||(n=!0,window.Promise.resolve().then(function(){n=!1,e()}))}}:function(e){var n=!1;return function(){n||(n=!0,setTimeout(function(){n=!1,e()},o))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,n){if(1!==e.nodeType)return[];var t=e.ownerDocument.defaultView.getComputedStyle(e,null);return n?t[n]:t}function c(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var n=s(e),t=n.overflow,r=n.overflowX,o=n.overflowY;return/(auto|scroll|overlay)/.test(t+o+r)?e:u(c(e))}var d=t&&!(!window.MSInputMethodContext||!document.documentMode),f=t&&/MSIE 10/.test(navigator.userAgent);function p(e){return 11===e?d:10===e?f:d||f}function m(e){if(!e)return document.documentElement;for(var n=p(10)?document.body:null,t=e.offsetParent||null;t===n&&e.nextElementSibling;)t=(e=e.nextElementSibling).offsetParent;var r=t&&t.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(t.nodeName)&&"static"===s(t,"position")?m(t):t:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function b(e,n){if(!(e&&e.nodeType&&n&&n.nodeType))return document.documentElement;var t=e.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_FOLLOWING,r=t?e:n,o=t?n:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i,l,s=a.commonAncestorContainer;if(e!==s&&n!==s||r.contains(o))return"BODY"===(l=(i=s).nodeName)||"HTML"!==l&&m(i.firstElementChild)!==i?m(s):s;var c=h(e);return c.host?b(c.host,n):b(e,h(n).host)}function g(e){var n="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",t=e.nodeName;if("BODY"===t||"HTML"===t){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[n]}return e[n]}function v(e,n){var t="x"===n?"Left":"Top",r="Left"===t?"Right":"Bottom";return parseFloat(e["border"+t+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,n,t,r){return Math.max(n["offset"+e],n["scroll"+e],t["client"+e],t["offset"+e],t["scroll"+e],p(10)?parseInt(t["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function x(e){var n=e.body,t=e.documentElement,r=p(10)&&getComputedStyle(t);return{height:y("Height",n,t,r),width:y("Width",n,t,r)}}var w=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")},k=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),E=function(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e},_=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function C(e){return _({},e,{right:e.left+e.width,bottom:e.top+e.height})}function P(e){var n={};try{if(p(10)){n=e.getBoundingClientRect();var t=g(e,"top"),r=g(e,"left");n.top+=t,n.left+=r,n.bottom+=t,n.right+=r}else n=e.getBoundingClientRect()}catch(e){}var o={left:n.left,top:n.top,width:n.right-n.left,height:n.bottom-n.top},a="HTML"===e.nodeName?x(e.ownerDocument):{},i=a.width||e.clientWidth||o.right-o.left,l=a.height||e.clientHeight||o.bottom-o.top,c=e.offsetWidth-i,u=e.offsetHeight-l;if(c||u){var d=s(e);c-=v(d,"x"),u-=v(d,"y"),o.width-=c,o.height-=u}return C(o)}function O(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=p(10),o="HTML"===n.nodeName,a=P(e),i=P(n),l=u(e),c=s(n),d=parseFloat(c.borderTopWidth,10),f=parseFloat(c.borderLeftWidth,10);t&&o&&(i.top=Math.max(i.top,0),i.left=Math.max(i.left,0));var m=C({top:a.top-i.top-d,left:a.left-i.left-f,width:a.width,height:a.height});if(m.marginTop=0,m.marginLeft=0,!r&&o){var h=parseFloat(c.marginTop,10),b=parseFloat(c.marginLeft,10);m.top-=d-h,m.bottom-=d-h,m.left-=f-b,m.right-=f-b,m.marginTop=h,m.marginLeft=b}return(r&&!t?n.contains(l):n===l&&"BODY"!==l.nodeName)&&(m=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=g(n,"top"),o=g(n,"left"),a=t?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}(m,n)),m}function T(e){if(!e||!e.parentElement||p())return document.documentElement;for(var n=e.parentElement;n&&"none"===s(n,"transform");)n=n.parentElement;return n||document.documentElement}function N(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?T(e):b(e,n);if("viewport"===r)a=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=e.ownerDocument.documentElement,r=O(e,t),o=Math.max(t.clientWidth,window.innerWidth||0),a=Math.max(t.clientHeight,window.innerHeight||0),i=n?0:g(t),l=n?0:g(t,"left");return C({top:i-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:a})}(i,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=u(c(n))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var d=O(l,i,o);if("HTML"!==l.nodeName||function e(n){var t=n.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===s(n,"position")||e(c(n)))}(i))a=d;else{var f=x(e.ownerDocument),p=f.height,m=f.width;a.top+=d.top-d.marginTop,a.bottom=p+d.top,a.left+=d.left-d.marginLeft,a.right=m+d.left}}var h="number"==typeof(t=t||0);return a.left+=h?t:t.left||0,a.top+=h?t:t.top||0,a.right-=h?t:t.right||0,a.bottom-=h?t:t.bottom||0,a}function S(e,n,t,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=N(t,r,a,o),l={top:{width:i.width,height:n.top-i.top},right:{width:i.right-n.right,height:i.height},bottom:{width:i.width,height:i.bottom-n.bottom},left:{width:n.left-i.left,height:i.height}},s=Object.keys(l).map(function(e){return _({key:e},l[e],{area:(n=l[e],n.width*n.height)});var n}).sort(function(e,n){return n.area-e.area}),c=s.filter(function(e){var n=e.width,r=e.height;return n>=t.clientWidth&&r>=t.clientHeight}),u=c.length>0?c[0].key:s[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function j(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return O(t,r?T(n):b(n,t),r)}function M(e){var n=e.ownerDocument.defaultView.getComputedStyle(e),t=parseFloat(n.marginTop)+parseFloat(n.marginBottom),r=parseFloat(n.marginLeft)+parseFloat(n.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+t}}function R(e){var n={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return n[e]})}function z(e,n,t){t=t.split("-")[0];var r=M(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(t),i=a?"top":"left",l=a?"left":"top",s=a?"height":"width",c=a?"width":"height";return o[i]=n[i]+n[s]/2-r[s]/2,o[l]=t===l?n[l]-r[c]:n[R(l)],o}function A(e,n){return Array.prototype.find?e.find(n):e.filter(n)[0]}function I(e,n,t){return(void 0===t?e:e.slice(0,function(e,n,t){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[n]===t});var r=A(e,function(e){return e[n]===t});return e.indexOf(r)}(e,"name",t))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&l(t)&&(n.offsets.popper=C(n.offsets.popper),n.offsets.reference=C(n.offsets.reference),n=t(n,e))}),n}function D(e,n){return e.some(function(e){var t=e.name;return e.enabled&&t===n})}function U(e){for(var n=[!1,"ms","Webkit","Moz","O"],t=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<n.length;r++){var o=n[r],a=o?""+o+t:e;if(void 0!==document.body.style[a])return a}return null}function L(e){var n=e.ownerDocument;return n?n.defaultView:window}function F(e,n,t,r){t.updateBound=r,L(e).addEventListener("resize",t.updateBound,{passive:!0});var o=u(e);return function e(n,t,r,o){var a="BODY"===n.nodeName,i=a?n.ownerDocument.defaultView:n;i.addEventListener(t,r,{passive:!0}),a||e(u(i.parentNode),t,r,o),o.push(i)}(o,"scroll",t.updateBound,t.scrollParents),t.scrollElement=o,t.eventsEnabled=!0,t}function B(){var e,n;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,n=this.state,L(e).removeEventListener("resize",n.updateBound),n.scrollParents.forEach(function(e){e.removeEventListener("scroll",n.updateBound)}),n.updateBound=null,n.scrollParents=[],n.scrollElement=null,n.eventsEnabled=!1,n))}function H(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,n){Object.keys(n).forEach(function(t){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&H(n[t])&&(r="px"),e.style[t]=n[t]+r})}function K(e,n,t){var r=A(e,function(e){return e.name===n}),o=!!r&&e.some(function(e){return e.name===t&&e.enabled&&e.order<r.order});if(!o){var a="`"+n+"`",i="`"+t+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],$=V.slice(3);function q(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=$.indexOf(e),r=$.slice(t+1).concat($.slice(0,t));return n?r.reverse():r}var Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function G(e,n,t,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=i.indexOf(A(i,function(e){return-1!==e.search(/,|\s/)}));i[l]&&-1===i[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,c=-1!==l?[i.slice(0,l).concat([i[l].split(s)[0]]),[i[l].split(s)[1]].concat(i.slice(l+1))]:[i];return(c=c.map(function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce(function(e,n){return""===e[e.length-1]&&-1!==["+","-"].indexOf(n)?(e[e.length-1]=n,i=!0,e):i?(e[e.length-1]+=n,i=!1,e):e.concat(n)},[]).map(function(e){return function(e,n,t,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var l=void 0;switch(i){case"%p":l=t;break;case"%":case"%r":default:l=r}return C(l)[n]/100*a}if("vh"===i||"vw"===i)return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,o,n,t)})})).forEach(function(e,n){e.forEach(function(t,r){H(t)&&(o[n]+=t*("-"===e[r-1]?-1:1))})}),o}var X={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var n=e.placement,t=n.split("-")[0],r=n.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,l=-1!==["bottom","top"].indexOf(t),s=l?"left":"top",c=l?"width":"height",u={start:E({},s,a[s]),end:E({},s,a[s]+a[c]-i[c])};e.offsets.popper=_({},i,u[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,n){var t=n.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,l=r.split("-")[0],s=void 0;return s=H(+t)?[+t,0]:G(t,a,i,l),"left"===l?(a.top+=s[0],a.left-=s[1]):"right"===l?(a.top+=s[0],a.left+=s[1]):"top"===l?(a.left+=s[0],a.top-=s[1]):"bottom"===l&&(a.left+=s[0],a.top+=s[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,n){var t=n.boundariesElement||m(e.instance.popper);e.instance.reference===t&&(t=m(t));var r=U("transform"),o=e.instance.popper.style,a=o.top,i=o.left,l=o[r];o.top="",o.left="",o[r]="";var s=N(e.instance.popper,e.instance.reference,n.padding,t,e.positionFixed);o.top=a,o.left=i,o[r]=l,n.boundaries=s;var c=n.priority,u=e.offsets.popper,d={primary:function(e){var t=u[e];return u[e]<s[e]&&!n.escapeWithReference&&(t=Math.max(u[e],s[e])),E({},e,t)},secondary:function(e){var t="right"===e?"left":"top",r=u[t];return u[e]>s[e]&&!n.escapeWithReference&&(r=Math.min(u[t],s[e]-("right"===e?u.width:u.height))),E({},t,r)}};return c.forEach(function(e){var n=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=_({},u,d[n](e))}),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var n=e.offsets,t=n.popper,r=n.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),l=i?"right":"bottom",s=i?"left":"top",c=i?"width":"height";return t[l]<a(r[s])&&(e.offsets.popper[s]=a(r[s])-t[c]),t[s]>a(r[l])&&(e.offsets.popper[s]=a(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,n){var t;if(!K(e.instance.modifiers,"arrow","keepTogether"))return e;var r=n.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,i=a.popper,l=a.reference,c=-1!==["left","right"].indexOf(o),u=c?"height":"width",d=c?"Top":"Left",f=d.toLowerCase(),p=c?"left":"top",m=c?"bottom":"right",h=M(r)[u];l[m]-h<i[f]&&(e.offsets.popper[f]-=i[f]-(l[m]-h)),l[f]+h>i[m]&&(e.offsets.popper[f]+=l[f]+h-i[m]),e.offsets.popper=C(e.offsets.popper);var b=l[f]+l[u]/2-h/2,g=s(e.instance.popper),v=parseFloat(g["margin"+d],10),y=parseFloat(g["border"+d+"Width"],10),x=b-e.offsets.popper[f]-v-y;return x=Math.max(Math.min(i[u]-h,x),0),e.arrowElement=r,e.offsets.arrow=(E(t={},f,Math.round(x)),E(t,p,""),t),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,n){if(D(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var t=N(e.instance.popper,e.instance.reference,n.padding,n.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=R(r),a=e.placement.split("-")[1]||"",i=[];switch(n.behavior){case Y.FLIP:i=[r,o];break;case Y.CLOCKWISE:i=q(r);break;case Y.COUNTERCLOCKWISE:i=q(r,!0);break;default:i=n.behavior}return i.forEach(function(l,s){if(r!==l||i.length===s+1)return e;r=e.placement.split("-")[0],o=R(r);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===r&&d(c.right)>d(u.left)||"right"===r&&d(c.left)<d(u.right)||"top"===r&&d(c.bottom)>d(u.top)||"bottom"===r&&d(c.top)<d(u.bottom),p=d(c.left)<d(t.left),m=d(c.right)>d(t.right),h=d(c.top)<d(t.top),b=d(c.bottom)>d(t.bottom),g="left"===r&&p||"right"===r&&m||"top"===r&&h||"bottom"===r&&b,v=-1!==["top","bottom"].indexOf(r),y=!!n.flipVariations&&(v&&"start"===a&&p||v&&"end"===a&&m||!v&&"start"===a&&h||!v&&"end"===a&&b);(f||g||y)&&(e.flipped=!0,(f||g)&&(r=i[s+1]),y&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=_({},e.offsets.popper,z(e.instance.popper,e.offsets.reference,e.placement)),e=I(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var n=e.placement,t=n.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(t),l=-1===["top","left"].indexOf(t);return o[i?"left":"top"]=a[t]-(l?o[i?"width":"height"]:0),e.placement=R(n),e.offsets.popper=C(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!K(e.instance.modifiers,"hide","preventOverflow"))return e;var n=e.offsets.reference,t=A(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(n.bottom<t.top||n.left>t.right||n.top>t.bottom||n.right<t.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,n){var t=n.x,r=n.y,o=e.offsets.popper,a=A(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:n.gpuAcceleration,l=m(e.instance.popper),s=P(l),c={position:o.position},u={left:Math.floor(o.left),top:Math.round(o.top),bottom:Math.round(o.bottom),right:Math.floor(o.right)},d="bottom"===t?"top":"bottom",f="right"===r?"left":"right",p=U("transform"),h=void 0,b=void 0;if(b="bottom"===d?"HTML"===l.nodeName?-l.clientHeight+u.bottom:-s.height+u.bottom:u.top,h="right"===f?"HTML"===l.nodeName?-l.clientWidth+u.right:-s.width+u.right:u.left,i&&p)c[p]="translate3d("+h+"px, "+b+"px, 0)",c[d]=0,c[f]=0,c.willChange="transform";else{var g="bottom"===d?-1:1,v="right"===f?-1:1;c[d]=b*g,c[f]=h*v,c.willChange=d+", "+f}var y={"x-placement":e.placement};return e.attributes=_({},y,e.attributes),e.styles=_({},c,e.styles),e.arrowStyles=_({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var n,t;return W(e.instance.popper,e.styles),n=e.instance.popper,t=e.attributes,Object.keys(t).forEach(function(e){!1!==t[e]?n.setAttribute(e,t[e]):n.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,n,t,r,o){var a=j(o,n,e,t.positionFixed),i=S(t.placement,a,n,e,t.modifiers.flip.boundariesElement,t.modifiers.flip.padding);return n.setAttribute("x-placement",i),W(n,{position:t.positionFixed?"fixed":"absolute"}),t},gpuAcceleration:void 0}}},Q=function(){function e(n,t){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=_({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=n&&n.jquery?n[0]:n,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(_({},e.Defaults.modifiers,o.modifiers)).forEach(function(n){r.options.modifiers[n]=_({},e.Defaults.modifiers[n]||{},o.modifiers?o.modifiers[n]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return _({name:e},r.options.modifiers[e])}).sort(function(e,n){return e.order-n.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return k(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=S(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=z(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=I(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,D(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[U("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return B.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=V,Q.Defaults=X,n.a=Q}).call(this,t(69))},function(e,n,t){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map(function(e){return n[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,n){for(var t,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var c in t=Object(arguments[s]))o.call(t,c)&&(l[c]=t[c]);if(r){i=r(t);for(var u=0;u<i.length;u++)a.call(t,i[u])&&(l[i[u]]=t[i[u]])}}return l}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a=t(0),i=(r=a)&&r.__esModule?r:{default:r};n.default=function(e){return function(n){return function(t){return i.default.createElement(e,null,function(e){return i.default.createElement(n,o({},t,e))})}}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.retrieveJWT=n.deleteSession=n.createSession=void 0;var r,o=t(54),a=(r=o)&&r.__esModule?r:{default:r};function i(e){var n=JSON.stringify(e);localStorage.setItem("JWT",n)}n.createSession=function(e,n){return(0,a.default)({url:"/api/sessions",method:"POST",params:{email:e,password:n}}).then(function(e){var n=e.jwt;return i(n),n}).catch(function(){return i("FAKE JWT"),"FAKE JWT"})},n.deleteSession=function(){localStorage.removeItem("JWT")},n.retrieveJWT=function(){var e=localStorage.getItem("JWT");return JSON.parse(e)}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e){return(0,o.default)(e.replace(a,"ms-"))};var o=r(t(51)),a=/^-ms-/;e.exports=n.default},function(e,n,t){var r=t(152);e.exports=function(e,n,t){if(r(e),void 0===n)return e;switch(t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,o){return e.call(n,t,r,o)}}return function(){return e.apply(n,arguments)}}},function(e,n,t){e.exports=!t(31)&&!t(42)(function(){return 7!=Object.defineProperty(t(90)("div"),"a",{get:function(){return 7}}).a})},function(e,n,t){var r=t(30),o=t(23).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,n,t){var r=t(25),o=t(32),a=t(154)(!1),i=t(60)("IE_PROTO");e.exports=function(e,n){var t,l=o(e),s=0,c=[];for(t in l)t!=i&&r(l,t)&&c.push(t);for(;n.length>s;)r(l,t=n[s++])&&(~a(c,t)||c.push(t));return c}},function(e,n,t){var r=t(93);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,n,t){var r=t(58);e.exports=function(e){return Object(r(e))}},function(e,n,t){"use strict";n.__esModule=!0;var r=i(t(157)),o=i(t(169)),a="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function i(e){return e&&e.__esModule?e:{default:e}}n.default="function"==typeof o.default&&"symbol"===a(r.default)?function(e){return void 0===e?"undefined":a(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":a(e)}},function(e,n,t){"use strict";var r=t(47),o=t(40),a=t(97),i=t(28),l=t(64),s=t(161),c=t(66),u=t(164),d=t(33)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,n,t,m,h,b,g){s(t,n,m);var v,y,x,w=function(e){if(!f&&e in C)return C[e];switch(e){case"keys":case"values":return function(){return new t(this,e)}}return function(){return new t(this,e)}},k=n+" Iterator",E="values"==h,_=!1,C=e.prototype,P=C[d]||C["@@iterator"]||h&&C[h],O=P||w(h),T=h?E?w("entries"):O:void 0,N="Array"==n&&C.entries||P;if(N&&(x=u(N.call(new e)))!==Object.prototype&&x.next&&(c(x,k,!0),r||"function"==typeof x[d]||i(x,d,p)),E&&P&&"values"!==P.name&&(_=!0,O=function(){return P.call(this)}),r&&!g||!f&&!_&&C[d]||i(C,d,O),l[n]=O,l[k]=p,h)if(v={values:E?O:w("values"),keys:b?O:w("keys"),entries:T},g)for(y in v)y in C||a(C,y,v[y]);else o(o.P+o.F*(f||_),n,v);return v}},function(e,n,t){e.exports=t(28)},function(e,n,t){var r=t(91),o=t(62).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,n,t){var r=t(49),o=t(45),a=t(32),i=t(57),l=t(25),s=t(89),c=Object.getOwnPropertyDescriptor;n.f=t(31)?c:function(e,n){if(e=a(e),n=i(n,!0),s)try{return c(e,n)}catch(e){}if(l(e,n))return o(!r.f.call(e,n),e[n])}},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=c(t(43)),o=c(t(71)),a=c(t(2)),i=c(t(0)),l=c(t(8)),s=c(t(103));function c(e){return e&&e.__esModule?e:{default:e}}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=27,f=function(){};var p=function(e){var n,t;function a(n,t){var a;return(a=e.call(this,n,t)||this).addEventListeners=function(){var e=a.props.event,n=(0,s.default)(u(u(a)));a.removeMouseCaptureListener=(0,o.default)(n,e,a.handleMouseCapture,!0),a.removeMouseListener=(0,o.default)(n,e,a.handleMouse),a.removeKeyupListener=(0,o.default)(n,"keyup",a.handleKeyUp),"ontouchstart"in n.documentElement&&(a.mobileSafariHackListeners=[].slice.call(document.body.children).map(function(e){return(0,o.default)(e,"mousemove",f)}))},a.removeEventListeners=function(){a.removeMouseCaptureListener&&a.removeMouseCaptureListener(),a.removeMouseListener&&a.removeMouseListener(),a.removeKeyupListener&&a.removeKeyupListener(),a.mobileSafariHackListeners&&a.mobileSafariHackListeners.forEach(function(e){return e()})},a.handleMouseCapture=function(e){var n;a.preventMouseRootClose=!!((n=e).metaKey||n.altKey||n.ctrlKey||n.shiftKey)||!function(e){return 0===e.button}(e)||(0,r.default)(l.default.findDOMNode(u(u(a))),e.target)},a.handleMouse=function(e){!a.preventMouseRootClose&&a.props.onRootClose&&a.props.onRootClose(e)},a.handleKeyUp=function(e){e.keyCode===d&&a.props.onRootClose&&a.props.onRootClose(e)},a.preventMouseRootClose=!1,a}t=e,(n=a).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t;var i=a.prototype;return i.componentDidMount=function(){this.props.disabled||this.addEventListeners()},i.componentDidUpdate=function(e){!this.props.disabled&&e.disabled?this.addEventListeners():this.props.disabled&&!e.disabled&&this.removeEventListeners()},i.componentWillUnmount=function(){this.props.disabled||this.removeEventListeners()},i.render=function(){return this.props.children},a}(i.default.Component);p.displayName="RootCloseWrapper",p.propTypes={onRootClose:a.default.func,children:a.default.element,disabled:a.default.bool,event:a.default.oneOf(["click","mousedown"])},p.defaultProps={event:"click"};var m=p;n.default=m,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=function(){};r(t(17)).default&&(o=document.addEventListener?function(e,n,t,r){return e.addEventListener(n,t,r||!1)}:document.attachEvent?function(e,n,t){return e.attachEvent("on"+n,function(n){(n=n||window.event).target=n.target||n.srcElement,n.currentTarget=e,t.call(e,n)})}:void 0);var a=o;n.default=a,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=function(){};r(t(17)).default&&(o=document.addEventListener?function(e,n,t,r){return e.removeEventListener(n,t,r||!1)}:document.attachEvent?function(e,n,t){return e.detachEvent("on"+n,t)}:void 0);var a=o;n.default=a,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return(0,o.default)(r.default.findDOMNode(e))};var r=a(t(8)),o=a(t(37));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(0)),o=t(192),a=i(t(73));function i(e){return e&&e.__esModule?e:{default:e}}n.default=(0,a.default)(function(e,n,t,a,i){var l=e[n];return r.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+t+"`,expected an element type (a string , component class, or function component)."):(0,o.isValidElementType)(l)?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+t+"`, expected an element type (a string , component class, or function component).")}),e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n){return e.classList?!!n&&e.classList.contains(n):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+n+" ")},e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=s(t(2)),o=s(t(72)),a=s(t(0)),i=s(t(8)),l=s(t(107));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){var n,t;function r(){return e.apply(this,arguments)||this}return t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,r.prototype.render=function(){var e=this;return this.props.children?a.default.createElement(l.default,{container:this.props.container,onContainerResolved:this.props.onRendered},function(n){return i.default.createPortal(e.props.children,n)}):null},r}(a.default.Component);c.displayName="Portal",c.propTypes={container:r.default.oneOfType([o.default,r.default.func]),onRendered:r.default.func};var u=c;n.default=u,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=u(t(2)),o=u(t(72)),a=u(t(17)),i=u(t(37)),l=u(t(0)),s=u(t(8)),c=u(t(108));function u(e){return e&&e.__esModule?e:{default:e}}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f={container:r.default.oneOfType([o.default,r.default.func]),onContainerResolved:r.default.func},p=function(e){var n,t;function r(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];if(n=e.call.apply(e,[this].concat(r))||this,!a.default)return d(n);var i=n.props.container;return"function"==typeof i&&(i=i()),i&&!s.default.findDOMNode(i)?d(n):(n.setContainer(i),n)}t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t;var o=r.prototype;return o.UNSAFE_componentWillReceiveProps=function(e){e.container!==this.props.container&&this.setContainer(e.container)},o.componentDidMount=function(){this._container?this.props.onContainerResolved&&this.props.onContainerResolved():(this.setContainer(this.props.container),this.forceUpdate(this.props.onContainerResolved))},o.componentWillUnmount=function(){this._container=null},o.setContainer=function(e){this._container=(0,c.default)(e,(0,i.default)().body)},o.render=function(){return this._container?this.props.children(this._container):null},r}(l.default.Component);p.propTypes=f;var m=p;n.default=m,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n){return null==e?n:(e="function"==typeof e?e():e,o.default.findDOMNode(e)||null)};var r,o=(r=t(8))&&r.__esModule?r:{default:r};e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(1)),l=r(t(0)),s=r(t(203)),c=t(14),u=r(t(204)),d=r(t(110)),f=r(t(205)),p=r(t(208)),m=r(t(210));function h(e){var n=e.bsPrefix,t=e.inline,r=e.className,s=e.innerRef,c=e.validated,u=e.as,d=(0,a.default)(e,["bsPrefix","inline","className","innerRef","validated","as"]);return l.default.createElement(u,(0,o.default)({},d,{ref:s,className:(0,i.default)(r,c&&"was-validated",t&&n+"-inline")}))}h.defaultProps={inline:!1,as:"form"};var b=(0,c.createBootstrapComponent)(h,"form");b.Row=(0,s.default)("form-row"),b.Group=u.default,b.Control=d.default,b.Check=f.default,b.Label=p.default,b.Text=m.default;var g=b;n.default=g,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=(r(t(4)),r(t(10))),u=r(t(111)),d=r(t(34)),f=t(14),p=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.default)(n,e),n.prototype.render=function(){var e,n,t=this.props,r=t.bsPrefix,i=t.type,c=t.size,u=t.id,d=t.inputRef,f=t.className,p=t.isValid,m=t.isInvalid,h=t.plaintext,b=t.readOnly,g=t.as,v=(0,a.default)(t,["bsPrefix","type","size","id","inputRef","className","isValid","isInvalid","plaintext","readOnly","as"]);if(h)(n={})[r+"-plaintext"]=!0,e=n;else if("file"===i){var y;(y={})[r+"-file"]=!0,e=y}else{var x;(x={})[r]=!0,x[r+"-"+c]=c,e=x}return s.default.createElement(g,(0,o.default)({},v,{type:i,id:u,ref:d,readOnly:b,className:(0,l.default)(f,e,p&&"is-valid",m&&"is-invalid")}))},n}(s.default.Component);p.defaultProps={as:"input"};var m=(0,c.default)(d.default,function(e,n){var t=e.controlId;return{id:n.id||t}},(0,f.createBootstrapComponent)(p,{prefix:"form-control",forwardRefAs:"inputRef"}));m.Feedback=u.default;var h=m;n.default=h,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.default)(n,e),n.prototype.render=function(){var e=this.props,n=e.as,t=e.className,r=e.type,i=(0,a.default)(e,["as","className","type"]);return s.default.createElement(n,(0,o.default)({},i,{className:(0,l.default)(t,r&&r+"-feedback")}))},n}(s.default.Component);c.defaultProps={type:"valid",as:"div"};var u=c;n.default=u,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=t(14),u=r(t(211)),d=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.default)(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.variant,r=e.size,i=e.active,c=e.className,d=e.block,f=e.type,p=e.as,m=e.innerRef,h=(0,a.default)(e,["bsPrefix","variant","size","active","className","block","type","as","innerRef"]),b=(0,l.default)(c,n,i&&"active",n+"-"+t,d&&n+"-block",r&&n+"-"+r);if(h.href)return s.default.createElement(u.default,(0,o.default)({},h,{as:p,innerRef:m,className:(0,l.default)(b,h.disabled&&"disabled")}));var g=p||"button";return m&&(h.ref=m),s.default.createElement(g,(0,o.default)({},h,{type:f,className:b}))},n}(s.default.Component);d.defaultProps={variant:"primary",active:!1,disabled:!1,type:"button"};var f=(0,c.createBootstrapComponent)(d,{prefix:"btn",forwardRefAs:"innerRef"});n.default=f,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=r(t(11)),u=t(14),d=r(t(221)),f=r(t(223)),p=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.default)(n,e),n.prototype.render=function(){var e=this.props,n=e.className,t=e.bsPrefix,r=e.variant,i=(0,a.default)(e,["className","bsPrefix","variant"]);return s.default.createElement(d.default,(0,o.default)({},i,{className:(0,l.default)(n,t,r&&t+"-"+r)}))},n}(s.default.Component);p.defaultProps={as:"div",variant:null};var m=(0,c.default)((0,u.createBootstrapComponent)(p,"list-group"),{activeKey:"onSelect"});m.Item=f.default;var h=m;n.default=h,e.exports=n.default},function(e,n){e.exports=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};r.get||r.set?Object.defineProperty(n,t,r):n[t]=e[t]}return n.default=e,n}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(0)).default.createContext(null);n.default=o,e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(234),a=(r=o)&&r.__esModule?r:{default:r};n.default=function(e){return(0,a.default)("displayName",e)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(235),a=(r=o)&&r.__esModule?r:{default:r};n.default=function(e,n){return n+"("+(0,a.default)(e)+")"}},function(e,n,t){var r,o,a;o=[n],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.calculateRgba=function(e,n){if("#"===e[0]&&(e=e.slice(1)),3===e.length){var t="";e.split("").forEach(function(e){t+=e,t+=e}),e=t}var r=e.match(/.{2}/g).map(function(e){return parseInt(e,16)}).join(", ");return"rgba("+r+", "+n+")"}})?r.apply(n,o):r)||(e.exports=a)},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(a).concat([o]).join("\n")}var i;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(t&&!i[2]?i[2]=t:t&&(i[2]="("+i[2]+") and ("+t+")"),n.push(i))}},n}},function(e,n,t){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var r=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}}(),s=null,c=0,u=[],d=t(261);function f(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(v(r.parts[i],n))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(v(r.parts[i],n));a[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,n){for(var t=[],r={},o=0;o<e.length;o++){var a=e[o],i=n.base?a[0]+n.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):t.push(r[i]={id:i,parts:[l]})}return t}function m(e,n){var t=l(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),u.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,t);t.insertBefore(n,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=u.indexOf(e);n>=0&&u.splice(n,1)}function b(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return t.nc}();r&&(e.attrs.nonce=r)}return g(n,e.attrs),m(e,n),n}function g(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function v(e,n){var t,r,o,a;if(n.transform&&e.css){if(!(a=n.transform(e.css)))return function(){};e.css=a}if(n.singleton){var i=c++;t=s||(s=b(n)),r=w.bind(null,t,i,!1),o=w.bind(null,t,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(n,e.attrs),m(e,n),n}(n),r=function(e,n,t){var r=t.css,o=t.sourceMap,a=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||a)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,t,n),o=function(){h(t),t.href&&URL.revokeObjectURL(t.href)}):(t=b(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){h(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=i()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=p(e,n);return f(t,n),function(e){for(var r=[],o=0;o<t.length;o++){var i=t[o];(l=a[i.id]).refs--,r.push(l)}e&&f(p(e,n),n);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete a[l.id]}}}};var y,x=(y=[],function(e,n){return y[e]=n,y.filter(Boolean).join("\n")});function w(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(n,o);else{var a=document.createTextNode(o),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}},function(e,n,t){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,i=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,s=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,u=c&&c(Object);e.exports=function e(n,t,d){if("string"!=typeof t){if(u){var f=c(t);f&&f!==u&&e(n,f,d)}var p=i(t);l&&(p=p.concat(l(t)));for(var m=0;m<p.length;++m){var h=p[m];if(!(r[h]||o[h]||d&&d[h])){var b=s(t,h);try{a(n,h,b)}catch(e){}}}return n}return n}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(44));n.end=o.default;var a=r(t(56));n.properties=a.default;var i={end:o.default,properties:a.default};n.default=i},function(e,n,t){"use strict";n.__esModule=!0;var r=a(t(0)),o=a(t(186));function a(e){return e&&e.__esModule?e:{default:e}}n.default=r.default.createContext||o.default,e.exports=n.default},function(e,n,t){"use strict";e.exports=function(){}},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=b(t(191)),o=b(t(43)),a=b(t(17)),i=b(t(71)),l=b(t(2)),s=b(t(72)),c=b(t(104)),u=b(t(0)),d=b(t(8)),f=b(t(81)),p=b(t(106)),m=b(t(108)),h=b(t(103));function b(e){return e&&e.__esModule?e:{default:e}}function g(){return(g=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var y=new f.default;var x=function(e){var n,t;function l(){for(var n,t=arguments.length,a=new Array(t),l=0;l<t;l++)a[l]=arguments[l];return(n=e.call.apply(e,[this].concat(a))||this).state={exited:!n.props.show},n.onPortalRendered=function(){n.props.onShow&&n.props.onShow(),n.autoFocus()},n.onShow=function(){var e=(0,h.default)(v(v(n))),t=(0,m.default)(n.props.container,e.body);n.props.manager.add(v(v(n)),t,n.props.containerClassName),n.removeKeydownListener=(0,i.default)(e,"keydown",n.handleDocumentKeyDown),n.removeFocusListener=(0,i.default)(e,"focus",n.enforceFocus,!0)},n.onHide=function(){n.props.manager.remove(v(v(n))),n.removeKeydownListener(),n.removeFocusListener(),n.props.restoreFocus&&n.restoreLastFocus()},n.setDialogRef=function(e){n.dialog=e},n.setBackdropRef=function(e){n.backdrop=e&&d.default.findDOMNode(e)},n.handleHidden=function(){var e;(n.setState({exited:!0}),n.onHide(),n.props.onExited)&&(e=n.props).onExited.apply(e,arguments)},n.handleBackdropClick=function(e){e.target===e.currentTarget&&(n.props.onBackdropClick&&n.props.onBackdropClick(e),!0===n.props.backdrop&&n.props.onHide())},n.handleDocumentKeyDown=function(e){n.props.keyboard&&27===e.keyCode&&n.isTopModal()&&(n.props.onEscapeKeyDown&&n.props.onEscapeKeyDown(e),n.props.onHide())},n.enforceFocus=function(){if(n.props.enforceFocus&&n._isMounted&&n.isTopModal()){var e=(0,r.default)((0,h.default)(v(v(n))));n.dialog&&!(0,o.default)(n.dialog,e)&&n.dialog.focus()}},n.renderBackdrop=function(){var e=n.props,t=e.renderBackdrop,r=e.backdropTransition,o=t({ref:n.setBackdropRef,onClick:n.handleBackdropClick});return r&&(o=u.default.createElement(r,{appear:!0,in:n.props.show},o)),o},n}t=e,(n=l).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,l.getDerivedStateFromProps=function(e){return e.show?{exited:!1}:e.transition?null:{exited:!0}};var s=l.prototype;return s.getSnapshotBeforeUpdate=function(e){return a.default&&!e.show&&this.props.show&&(this.lastFocus=(0,r.default)()),null},s.componentDidMount=function(){this._isMounted=!0,this.props.show&&this.onShow()},s.componentDidUpdate=function(e){var n=this.props.transition;!e.show||this.props.show||n?!e.show&&this.props.show&&this.onShow():this.onHide()},s.componentWillUnmount=function(){var e=this.props,n=e.show,t=e.transition;this._isMounted=!1,(n||t&&!this.state.exited)&&this.onHide()},s.autoFocus=function(){if(this.props.autoFocus){var e=(0,r.default)((0,h.default)(this));this.dialog&&!(0,o.default)(this.dialog,e)&&(this.lastFocus=e,this.dialog.focus())}},s.restoreLastFocus=function(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},s.isTopModal=function(){return this.props.manager.isTopModal(this)},s.render=function(){var e=this.props,n=e.show,t=e.container,r=e.children,o=e.renderDialog,a=e.role,i=void 0===a?"dialog":a,s=e.transition,c=e.backdrop,d=e.className,f=e.style,m=e.onExit,h=e.onExiting,b=e.onEnter,v=e.onEntering,y=e.onEntered,x=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["show","container","children","renderDialog","role","transition","backdrop","className","style","onExit","onExiting","onEnter","onEntering","onEntered"]);if(!(n||s&&!this.state.exited))return null;var w=g({role:i,ref:this.setDialogRef,"aria-modal":"dialog"===i||void 0},function(e,n){var t=Object.keys(e),r={};return t.map(function(t){Object.prototype.hasOwnProperty.call(n,t)||(r[t]=e[t])}),r}(x,l.propTypes),{style:f,className:d,tabIndex:"-1"}),k=o?o(w):u.default.createElement("div",w,u.default.cloneElement(r,{role:"document"}));return s&&(k=u.default.createElement(s,{appear:!0,unmountOnExit:!0,in:n,onExit:m,onExiting:h,onExited:this.handleHidden,onEnter:b,onEntering:v,onEntered:y},k)),u.default.createElement(p.default,{container:t,onRendered:this.onPortalRendered},u.default.createElement(u.default.Fragment,null,c&&this.renderBackdrop(),k))},l}(u.default.Component);x.propTypes={show:l.default.bool,container:l.default.oneOfType([s.default,l.default.func]),onShow:l.default.func,onHide:l.default.func,backdrop:l.default.oneOfType([l.default.bool,l.default.oneOf(["static"])]),renderDialog:l.default.func,renderBackdrop:l.default.func,onEscapeKeyDown:l.default.func,onBackdropClick:l.default.func,containerClassName:l.default.string,keyboard:l.default.bool,transition:c.default,backdropTransition:c.default,autoFocus:l.default.bool,enforceFocus:l.default.bool,restoreFocus:l.default.bool,onEnter:l.default.func,onEntering:l.default.func,onEntered:l.default.func,onExit:l.default.func,onExiting:l.default.func,onExited:l.default.func,manager:l.default.object.isRequired},x.defaultProps={show:!1,role:"dialog",backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function(){},manager:y,renderBackdrop:function(e){return u.default.createElement("div",e)}},x.Manager=f.default;var w=x;n.default=w,e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=f(t(2)),o=f(t(104)),a=f(t(0)),i=f(t(8)),l=f(t(106)),s=f(t(100)),c=t(77),u=f(t(36)),d=f(t(107));function f(e){return e&&e.__esModule?e:{default:e}}function p(){return(p=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function m(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var b=function(e){var n,t;function r(n,t){var r;return(r=e.call(this,n,t)||this).handleHidden=function(){var e;(r.setState({exited:!0}),r.props.onExited)&&(e=r.props).onExited.apply(e,arguments)},r.state={exited:!n.show},r.onHiddenListener=r.handleHidden.bind(h(h(r))),r._lastTarget=null,r}t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,r.getDerivedStateFromProps=function(e){return e.show?{exited:!1}:e.transition?null:{exited:!0}};var o=r.prototype;return o.componentDidMount=function(){this.setState({target:this.getTarget()})},o.componentDidUpdate=function(e){if(this.props!==e){var n=this.getTarget();n!==this.state.target&&this.setState({target:n})}},o.getTarget=function(){var e=this.props.target;return(e="function"==typeof e?e():e)&&i.default.findDOMNode(e)||null},o.render=function(){var e=this,n=this.props,t=(n.target,n.container),r=n.containerPadding,o=n.placement,i=n.rootClose,u=n.children,d=n.flip,f=n.popperConfig,h=void 0===f?{}:f,b=n.transition,g=m(n,["target","container","containerPadding","placement","rootClose","children","flip","popperConfig","transition"]),v=this.state.target;if(!(g.show||b&&!this.state.exited))return null;var y=u,x=h.modifiers,w=void 0===x?{}:x,k=p({},h,{placement:o,referenceElement:v,enableEvents:g.show,modifiers:p({},w,{preventOverflow:p({padding:r||5},w.preventOverflow),flip:p({enabled:!!d},w.preventOverflow)})});return y=a.default.createElement(c.Popper,k,function(n){var t=n.arrowProps,r=n.style,i=n.ref,l=m(n,["arrowProps","style","ref"]);e.popper=l;var s=e.props.children(p({},l,{placement:l.placement||o,show:g.show,arrowProps:t,props:{ref:i,style:r}}));if(b){var c=g.onExit,u=g.onExiting,d=g.onEnter,f=g.onEntering,h=g.onEntered;s=a.default.createElement(b,{in:g.show,appear:!0,onExit:c,onExiting:u,onExited:e.onHiddenListener,onEnter:d,onEntering:f,onEntered:h},s)}return s}),i&&(y=a.default.createElement(s.default,{onRootClose:g.onHide,event:g.rootCloseEvent},y)),a.default.createElement(l.default,{container:t},y)},r}(a.default.Component);b.propTypes=p({},l.default.propTypes,{show:r.default.bool,placement:r.default.oneOf(c.placements),children:r.default.func.isRequired,popperConfig:r.default.object,rootClose:r.default.bool,rootCloseEvent:s.default.propTypes.event,onHide:function(e){var n=r.default.func;e.rootClose&&(n=n.isRequired);for(var t=arguments.length,o=new Array(t>1?t-1:0),a=1;a<t;a++)o[a-1]=arguments[a];return n.apply(void 0,[e].concat(o))},transition:o.default,onEnter:r.default.func,onEntering:r.default.func,onEntered:r.default.func,onExit:r.default.func,onExiting:r.default.func,onExited:r.default.func});var g=(0,u.default)(function(e,n){return a.default.createElement(d.default,{container:e.container},function(t){return a.default.createElement(b,p({},e,{ref:n,container:t}))})},{displayName:"withContainer(Overlay)"});n.default=g,e.exports=n.default},function(e,n,t){e.exports=function(){"use strict";return function(e){function n(n){if(n)try{e(n+"}")}catch(e){}}return function(t,r,o,a,i,l,s,c,u,d){switch(t){case 1:if(0===u&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(n)}}}}()},function(e,n,t){"use strict";var r=function(e){var n={};return function(t){return void 0===n[t]&&(n[t]=e(t)),n[t]}},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var a=function(e){for(var n,t=e.length,r=t^t,o=0;t>=4;)n=1540483477*(65535&(n=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(n>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(n=1540483477*(65535&(n^=n>>>24))+((1540483477*(n>>>16)&65535)<<16)),t-=4,++o;switch(t){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16),((r^=r>>>15)>>>0).toString(36)};var i=function(e){function n(e,n,r){var o=n.trim().split(m);n=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)n[l]=t(e,n[l],r).trim();break;default:var s=l=0;for(n=[];l<a;++l)for(var c=0;c<i;++c)n[s++]=t(e[c]+" ",o[l],r).trim()}return n}function t(e,n,t){var r=n.charCodeAt(0);switch(33>r&&(r=(n=n.trim()).charCodeAt(0)),r){case 38:return n.replace(h,"$1"+e.trim());case 58:return e.trim()+n.replace(h,"$1"+e.trim());default:if(0<1*t&&0<n.indexOf("\f"))return n.replace(h,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+n}function r(e,n,t,a){var i=e+";",l=2*n+3*t+4*a;if(944===l){e=i.indexOf(":",9)+1;var s=i.substring(e,i.length-1).trim();return s=i.substring(0,e).trim()+s+";",1===N||2===N&&o(s,1)?"-webkit-"+s+s:s}if(0===N||2===N&&!o(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(C,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(s=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+s+i;case 1005:return f.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(n=(s=i.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(n)){case 226:s=i.replace(y,"tb");break;case 232:s=i.replace(y,"tb-rl");break;case 220:s=i.replace(y,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+s+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(n=(i=e).length-10,l=(s=(33===i.charCodeAt(n)?i.substring(0,n):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:i=i.replace(s,"-webkit-"+s)+";"+i;break;case 207:case 102:i=i.replace(s,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(s,"-webkit-"+s)+";"+i.replace(s,"-ms-"+s+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return s=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+s+"-ms-flex-"+s+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===_.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),n,t,a).replace(":fill-available",":stretch"):i.replace(s,"-webkit-"+s)+i.replace(s,"-moz-"+s.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===t+a&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+i}return i}function o(e,n){var t=e.indexOf(1===n?":":"{"),r=e.substring(0,3!==n?t:10);return t=e.substring(t+1,e.length-1),R(2!==n?r:r.replace(E,"$1"),t,n)}function a(e,n){var t=r(n,n.charCodeAt(0),n.charCodeAt(1),n.charCodeAt(2));return t!==n+";"?t.replace(w," or ($1)").substring(4):"("+n+")"}function i(e,n,t,r,o,a,i,l,c,u){for(var d,f=0,p=n;f<M;++f)switch(d=j[f].call(s,e,p,t,r,o,a,i,l,c,u)){case void 0:case!1:case!0:case null:break;default:p=d}if(p!==n)return p}function l(e){return void 0!==(e=e.prefix)&&(R=null,e?"function"!=typeof e?N=1:(N=2,R=e):N=0),l}function s(e,t){var l=e;if(33>l.charCodeAt(0)&&(l=l.trim()),l=[l],0<M){var s=i(-1,t,l,l,O,P,0,0,0,0);void 0!==s&&"string"==typeof s&&(t=s)}var d=function e(t,l,s,d,f){for(var p,m,h,y,w,k=0,E=0,_=0,C=0,j=0,R=0,A=h=p=0,I=0,D=0,U=0,L=0,F=s.length,B=F-1,H="",W="",K="",V="";I<F;){if(m=s.charCodeAt(I),I===B&&0!==E+C+_+k&&(0!==E&&(m=47===E?10:47),C=_=k=0,F++,B++),0===E+C+_+k){if(I===B&&(0<D&&(H=H.replace(u,"")),0<H.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:H+=s.charAt(I)}m=59}switch(m){case 123:for(p=(H=H.trim()).charCodeAt(0),h=1,L=++I;I<F;){switch(m=s.charCodeAt(I)){case 123:h++;break;case 125:h--;break;case 47:switch(m=s.charCodeAt(I+1)){case 42:case 47:e:{for(A=I+1;A<B;++A)switch(s.charCodeAt(A)){case 47:if(42===m&&42===s.charCodeAt(A-1)&&I+2!==A){I=A+1;break e}break;case 10:if(47===m){I=A+1;break e}}I=A}}break;case 91:m++;case 40:m++;case 34:case 39:for(;I++<B&&s.charCodeAt(I)!==m;);}if(0===h)break;I++}switch(h=s.substring(L,I),0===p&&(p=(H=H.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<D&&(H=H.replace(u,"")),m=H.charCodeAt(1)){case 100:case 109:case 115:case 45:D=l;break;default:D=S}if(L=(h=e(l,D,h,m,f+1)).length,0<M&&(w=i(3,h,D=n(S,H,U),l,O,P,L,m,f,d),H=D.join(""),void 0!==w&&0===(L=(h=w.trim()).length)&&(m=0,h="")),0<L)switch(m){case 115:H=H.replace(x,a);case 100:case 109:case 45:h=H+"{"+h+"}";break;case 107:h=(H=H.replace(b,"$1 $2"))+"{"+h+"}",h=1===N||2===N&&o("@"+h,3)?"@-webkit-"+h+"@"+h:"@"+h;break;default:h=H+h,112===d&&(W+=h,h="")}else h="";break;default:h=e(l,n(l,H,U),h,d,f+1)}K+=h,h=U=D=A=p=0,H="",m=s.charCodeAt(++I);break;case 125:case 59:if(1<(L=(H=(0<D?H.replace(u,""):H).trim()).length))switch(0===A&&(p=H.charCodeAt(0),45===p||96<p&&123>p)&&(L=(H=H.replace(" ",":")).length),0<M&&void 0!==(w=i(1,H,l,t,O,P,W.length,d,f,d))&&0===(L=(H=w.trim()).length)&&(H="\0\0"),p=H.charCodeAt(0),m=H.charCodeAt(1),p){case 0:break;case 64:if(105===m||99===m){V+=H+s.charAt(I);break}default:58!==H.charCodeAt(L-1)&&(W+=r(H,p,m,H.charCodeAt(2)))}U=D=A=p=0,H="",m=s.charCodeAt(++I)}}switch(m){case 13:case 10:47===E?E=0:0===1+p&&107!==d&&0<H.length&&(D=1,H+="\0"),0<M*z&&i(0,H,l,t,O,P,W.length,d,f,d),P=1,O++;break;case 59:case 125:if(0===E+C+_+k){P++;break}default:switch(P++,y=s.charAt(I),m){case 9:case 32:if(0===C+k+E)switch(j){case 44:case 58:case 9:case 32:y="";break;default:32!==m&&(y=" ")}break;case 0:y="\\0";break;case 12:y="\\f";break;case 11:y="\\v";break;case 38:0===C+E+k&&(D=U=1,y="\f"+y);break;case 108:if(0===C+E+k+T&&0<A)switch(I-A){case 2:112===j&&58===s.charCodeAt(I-3)&&(T=j);case 8:111===R&&(T=R)}break;case 58:0===C+E+k&&(A=I);break;case 44:0===E+_+C+k&&(D=1,y+="\r");break;case 34:case 39:0===E&&(C=C===m?0:0===C?m:C);break;case 91:0===C+E+_&&k++;break;case 93:0===C+E+_&&k--;break;case 41:0===C+E+k&&_--;break;case 40:if(0===C+E+k){if(0===p)switch(2*j+3*R){case 533:break;default:p=1}_++}break;case 64:0===E+_+C+k+A+h&&(h=1);break;case 42:case 47:if(!(0<C+k+_))switch(E){case 0:switch(2*m+3*s.charCodeAt(I+1)){case 235:E=47;break;case 220:L=I,E=42}break;case 42:47===m&&42===j&&L+2!==I&&(33===s.charCodeAt(L+2)&&(W+=s.substring(L,I+1)),y="",E=0)}}0===E&&(H+=y)}R=j,j=m,I++}if(0<(L=W.length)){if(D=l,0<M&&void 0!==(w=i(2,W,D,t,O,P,L,d,f,d))&&0===(W=w).length)return V+W+K;if(W=D.join(",")+"{"+W+"}",0!=N*T){switch(2!==N||o(W,2)||(T=0),T){case 111:W=W.replace(v,":-moz-$1")+W;break;case 112:W=W.replace(g,"::-webkit-input-$1")+W.replace(g,"::-moz-$1")+W.replace(g,":-ms-input-$1")+W}T=0}}return V+W+K}(S,l,t,0,0);return 0<M&&void 0!==(s=i(-2,d,l,l,O,P,d.length,0,0,0))&&(d=s),T=0,P=O=1,d}var c=/^\0+/g,u=/[\0\r\f]/g,d=/: */g,f=/zoo|gra/,p=/([,: ])(transform)/g,m=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,b=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,v=/:(read-only)/g,y=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,k=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,_=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,P=1,O=1,T=0,N=1,S=[],j=[],M=0,R=null,z=0;return s.use=function e(n){switch(n){case void 0:case null:M=j.length=0;break;default:switch(n.constructor){case Array:for(var t=0,r=n.length;t<r;++t)e(n[t]);break;case Function:j[M++]=n;break;case Boolean:z=0|!!n}}return e},s.set=l,void 0!==e&&l(e),s},l=t(127),s=t.n(l),c=/[A-Z]|^ms/g,u=r(function(e){return e.replace(c,"-$&").toLowerCase()}),d=function(e,n){return null==n||"boolean"==typeof n?"":1===o[e]||45===e.charCodeAt(1)||isNaN(n)||0===n?n:n+"px"},f=function e(n){for(var t=n.length,r=0,o="";r<t;r++){var a=n[r];if(null!=a){var i=void 0;switch(typeof a){case"boolean":break;case"function":0,i=e([a()]);break;case"object":if(Array.isArray(a))i=e(a);else for(var l in i="",a)a[l]&&l&&(i&&(i+=" "),i+=l);break;default:i=a}i&&(o&&(o+=" "),o+=i)}}return o},p="undefined"!=typeof document;function m(e){var n=document.createElement("style");return n.setAttribute("data-emotion",e.key||""),void 0!==e.nonce&&n.setAttribute("nonce",e.nonce),n.appendChild(document.createTextNode("")),(void 0!==e.container?e.container:document.head).appendChild(n),n}var h=function(){function e(e){this.isSpeedy=!0,this.tags=[],this.ctr=0,this.opts=e}var n=e.prototype;return n.inject=function(){if(this.injected)throw new Error("already injected!");this.tags[0]=m(this.opts),this.injected=!0},n.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},n.insert=function(e,n){if(this.isSpeedy){var t=function(e){if(e.sheet)return e.sheet;for(var n=0;n<document.styleSheets.length;n++)if(document.styleSheets[n].ownerNode===e)return document.styleSheets[n]}(this.tags[this.tags.length-1]);try{t.insertRule(e,t.cssRules.length)}catch(e){0}}else{var r=m(this.opts);this.tags.push(r),r.appendChild(document.createTextNode(e+(n||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(m(this.opts))},n.flush=function(){this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0,this.injected=!1},e}();n.a=function(e,n){if(void 0!==e.__SECRET_EMOTION__)return e.__SECRET_EMOTION__;void 0===n&&(n={});var t,r,o=n.key||"css",l=s()(function(e){t+=e,p&&m.insert(e,g)});void 0!==n.prefix&&(r={prefix:n.prefix});var c={registered:{},inserted:{},nonce:n.nonce,key:o},m=new h(n);p&&m.inject();var b=new i(r);b.use(n.stylisPlugins)(l);var g="";function v(e,n){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":if(void 0!==e.__emotion_styles){var t=e.toString();return t}return v.call(this,void 0===this?e():e(this.mergedProps,this.context),n);case"object":return function(e){if(w.has(e))return w.get(e);var n="";return Array.isArray(e)?e.forEach(function(e){n+=v.call(this,e,!1)},this):Object.keys(e).forEach(function(t){"object"!=typeof e[t]?void 0!==c.registered[e[t]]?n+=t+"{"+c.registered[e[t]]+"}":n+=u(t)+":"+d(t,e[t])+";":Array.isArray(e[t])&&"string"==typeof e[t][0]&&void 0===c.registered[e[t][0]]?e[t].forEach(function(e){n+=u(t)+":"+d(t,e)+";"}):n+=t+"{"+v.call(this,e[t],!1)+"}"},this),w.set(e,n),n}.call(this,e);default:var r=c.registered[e];return!1===n&&void 0!==r?r:e}}var y,x,w=new WeakMap,k=/label:\s*([^\s;\n{]+)\s*;/g,E=function(e){var n=!0,t="",r="";null==e||void 0===e.raw?(n=!1,t+=v.call(this,e,!1)):t+=e[0];for(var o=arguments.length,i=new Array(o>1?o-1:0),l=1;l<o;l++)i[l-1]=arguments[l];return i.forEach(function(r,o){t+=v.call(this,r,46===t.charCodeAt(t.length-1)),!0===n&&void 0!==e[o+1]&&(t+=e[o+1])},this),x=t,t=t.replace(k,function(e,n){return r+="-"+n,""}),y=function(e,n){return a(e+n)+n}(t,r),t};function _(e,n){void 0===c.inserted[y]&&(t="",b(e,n),c.inserted[y]=t)}var C=function(){var e=E.apply(this,arguments),n=o+"-"+y;return void 0===c.registered[n]&&(c.registered[n]=x),_("."+n,e),n};function P(e,n){var t="";return n.split(" ").forEach(function(n){void 0!==c.registered[n]?e.push(n):t+=n+" "}),t}function O(e,n){var t=[],r=P(t,e);return t.length<2?e:r+C(t,n)}function T(e){c.inserted[e]=!0}if(p){var N=document.querySelectorAll("[data-emotion-"+o+"]");Array.prototype.forEach.call(N,function(e){m.tags[0].parentNode.insertBefore(e,m.tags[0]),e.getAttribute("data-emotion-"+o).split(" ").forEach(T)})}var S={flush:function(){p&&(m.flush(),m.inject()),c.inserted={},c.registered={}},hydrate:function(e){e.forEach(T)},cx:function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return O(f(n))},merge:O,getRegisteredStyles:P,injectGlobal:function(){_("",E.apply(this,arguments))},keyframes:function(){var e=E.apply(this,arguments),n="animation-"+y;return _("","@keyframes "+n+"{"+e+"}"),n},css:C,sheet:m,caches:c};return e.__SECRET_EMOTION__=S,S}},function(e,n,t){"use strict";var r=i(t(0)),o=i(t(8)),a=i(t(134));function i(e){return e&&e.__esModule?e:{default:e}}t(260),t(262);var l=document.body.querySelector("#root"),s=r.default.createElement(a.default,{});o.default.render(s,l)},function(e,n,t){"use strict";
/** @license React v16.6.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=t(84),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,m=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,b=o?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var n=arguments.length-1,t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<n;r++)t+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,n,t,r,o,a,i,l){if(!e){if(e=void 0,void 0===n)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[t,r,o,a,i,l],c=0;(e=Error(n.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",t)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function w(e,n,t){this.props=e,this.context=n,this.refs=x,this.updater=t||y}function k(){}function E(e,n,t){this.props=e,this.context=n,this.refs=x,this.updater=t||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,n){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,n,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=w.prototype;var _=E.prototype=new k;_.constructor=E,r(_,w.prototype),_.isPureReactComponent=!0;var C={current:null,currentDispatcher:null},P=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function T(e,n,t){var r=void 0,o={},i=null,l=null;if(null!=n)for(r in void 0!==n.ref&&(l=n.ref),void 0!==n.key&&(i=""+n.key),n)P.call(n,r)&&!O.hasOwnProperty(r)&&(o[r]=n[r]);var s=arguments.length-2;if(1===s)o.children=t;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:C.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var S=/\/+/g,j=[];function M(e,n,t,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=n,o.func=t,o.context=r,o.count=0,o}return{result:e,keyPrefix:n,func:t,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function z(e,n,t){return null==e?0:function e(n,t,r,o){var l=typeof n;"undefined"!==l&&"boolean"!==l||(n=null);var s=!1;if(null===n)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(n.$$typeof){case a:case i:s=!0}}if(s)return r(o,n,""===t?"."+A(n,0):t),1;if(s=0,t=""===t?".":t+":",Array.isArray(n))for(var c=0;c<n.length;c++){var u=t+A(l=n[c],c);s+=e(l,u,r,o)}else if(u=null===n||"object"!=typeof n?null:"function"==typeof(u=g&&n[g]||n["@@iterator"])?u:null,"function"==typeof u)for(n=u.call(n),c=0;!(l=n.next()).done;)s+=e(l=l.value,u=t+A(l,c++),r,o);else"object"===l&&v("31","[object Object]"==(r=""+n)?"object with keys {"+Object.keys(n).join(", ")+"}":r,"");return s}(e,"",n,t)}function A(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return n[e]})}(e.key):n.toString(36)}function I(e,n){e.func.call(e.context,n,e.count++)}function D(e,n,t){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,n,e.count++),Array.isArray(e)?U(e,r,t,function(e){return e}):null!=e&&(N(e)&&(e=function(e,n){return{$$typeof:a,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||n&&n.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+t)),r.push(e))}function U(e,n,t,r,o){var a="";null!=t&&(a=(""+t).replace(S,"$&/")+"/"),z(e,D,n=M(n,a,r,o)),R(n)}var L={Children:{map:function(e,n,t){if(null==e)return e;var r=[];return U(e,r,null,n,t),r},forEach:function(e,n,t){if(null==e)return e;z(e,I,n=M(null,null,n,t)),R(n)},count:function(e){return z(e,function(){return null},null)},toArray:function(e){var n=[];return U(e,n,null,function(e){return e}),n},only:function(e){return N(e)||v("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:E,createContext:function(e,n){return void 0===n&&(n=null),(e={$$typeof:d,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:b,_ctor:e,_status:-1,_result:null}},memo:function(e,n){return{$$typeof:h,type:e,compare:void 0===n?null:n}},Fragment:l,StrictMode:s,Suspense:m,createElement:T,cloneElement:function(e,n,t){null==e&&v("267",e);var o=void 0,i=r({},e.props),l=e.key,s=e.ref,c=e._owner;if(null!=n){void 0!==n.ref&&(s=n.ref,c=C.current),void 0!==n.key&&(l=""+n.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),n)P.call(n,o)&&!O.hasOwnProperty(o)&&(i[o]=void 0===n[o]&&void 0!==u?u[o]:n[o])}if(1===(o=arguments.length-2))i.children=t;else if(1<o){u=Array(o);for(var d=0;d<o;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:a,type:e.type,key:l,ref:s,props:i,_owner:c}},createFactory:function(e){var n=T.bind(null,e);return n.type=e,n},isValidElement:N,version:"16.6.3",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:r}};L.unstable_ConcurrentMode=f,L.unstable_Profiler=c;var F={default:L},B=F&&L||F;e.exports=B.default||B},function(e,n,t){"use strict";
/** @license React v16.6.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=t(0),o=t(84),a=t(132);function i(e){for(var n=arguments.length-1,t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<n;r++)t+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,n,t,r,o,a,i,l){if(!e){if(e=void 0,void 0===n)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[t,r,o,a,i,l],c=0;(e=Error(n.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",t)}r||i("227");var l=!1,s=null,c=!1,u=null,d={onError:function(e){l=!0,s=e}};function f(e,n,t,r,o,a,i,c,u){l=!1,s=null,function(e,n,t,r,o,a,i,l,s){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}.apply(d,arguments)}var p=null,m={};function h(){if(p)for(var e in m){var n=m[e],t=p.indexOf(e);if(-1<t||i("96",e),!g[t])for(var r in n.extractEvents||i("97",e),g[t]=n,t=n.eventTypes){var o=void 0,a=t[r],l=n,s=r;v.hasOwnProperty(s)&&i("99",s),v[s]=a;var c=a.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&b(c[o],l,s);o=!0}else a.registrationName?(b(a.registrationName,l,s),o=!0):o=!1;o||i("98",r,e)}}}function b(e,n,t){y[e]&&i("100",e),y[e]=n,x[e]=n.eventTypes[t].dependencies}var g=[],v={},y={},x={},w=null,k=null,E=null;function _(e,n,t){var r=e.type||"unknown-event";e.currentTarget=E(t),function(e,n,t,r,o,a,d,p,m){if(f.apply(this,arguments),l){if(l){var h=s;l=!1,s=null}else i("198"),h=void 0;c||(c=!0,u=h)}}(r,n,void 0,e),e.currentTarget=null}function C(e,n){return null==n&&i("30"),null==e?n:Array.isArray(e)?Array.isArray(n)?(e.push.apply(e,n),e):(e.push(n),e):Array.isArray(n)?[e].concat(n):[e,n]}function P(e,n,t){Array.isArray(e)?e.forEach(n,t):e&&n.call(t,e)}var O=null;function T(e){if(e){var n=e._dispatchListeners,t=e._dispatchInstances;if(Array.isArray(n))for(var r=0;r<n.length&&!e.isPropagationStopped();r++)_(e,n[r],t[r]);else n&&_(e,n,t);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var N={injectEventPluginOrder:function(e){p&&i("101"),p=Array.prototype.slice.call(e),h()},injectEventPluginsByName:function(e){var n,t=!1;for(n in e)if(e.hasOwnProperty(n)){var r=e[n];m.hasOwnProperty(n)&&m[n]===r||(m[n]&&i("102",n),m[n]=r,t=!0)}t&&h()}};function S(e,n){var t=e.stateNode;if(!t)return null;var r=w(t);if(!r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(t&&"function"!=typeof t&&i("231",n,typeof t),t)}function j(e){if(null!==e&&(O=C(O,e)),e=O,O=null,e&&(P(e,T),O&&i("95"),c))throw e=u,c=!1,u=null,e}var M=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+M,z="__reactEventHandlers$"+M;function A(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function I(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;i("33")}function U(e){return e[z]||null}function L(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function F(e,n,t){(n=S(e,t.dispatchConfig.phasedRegistrationNames[n]))&&(t._dispatchListeners=C(t._dispatchListeners,n),t._dispatchInstances=C(t._dispatchInstances,e))}function B(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var n=e._targetInst,t=[];n;)t.push(n),n=L(n);for(n=t.length;0<n--;)F(t[n],"captured",e);for(n=0;n<t.length;n++)F(t[n],"bubbled",e)}}function H(e,n,t){e&&t&&t.dispatchConfig.registrationName&&(n=S(e,t.dispatchConfig.registrationName))&&(t._dispatchListeners=C(t._dispatchListeners,n),t._dispatchInstances=C(t._dispatchInstances,e))}function W(e){e&&e.dispatchConfig.registrationName&&H(e._targetInst,null,e)}function K(e){P(e,B)}var V=!("undefined"==typeof window||!window.document||!window.document.createElement);function $(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var q={animationend:$("Animation","AnimationEnd"),animationiteration:$("Animation","AnimationIteration"),animationstart:$("Animation","AnimationStart"),transitionend:$("Transition","TransitionEnd")},Y={},G={};function X(e){if(Y[e])return Y[e];if(!q[e])return e;var n,t=q[e];for(n in t)if(t.hasOwnProperty(n)&&n in G)return Y[e]=t[n];return e}V&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete q.animationend.animation,delete q.animationiteration.animation,delete q.animationstart.animation),"TransitionEvent"in window||delete q.transitionend.transition);var Q=X("animationend"),J=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),ne="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),te=null,re=null,oe=null;function ae(){if(oe)return oe;var e,n,t=re,r=t.length,o="value"in te?te.value:te.textContent,a=o.length;for(e=0;e<r&&t[e]===o[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===o[a-n];n++);return oe=o.slice(e,1<n?1-n:void 0)}function ie(){return!0}function le(){return!1}function se(e,n,t,r){for(var o in this.dispatchConfig=e,this._targetInst=n,this.nativeEvent=t,e=this.constructor.Interface)e.hasOwnProperty(o)&&((n=e[o])?this[o]=n(t):"target"===o?this.target=r:this[o]=t[o]);return this.isDefaultPrevented=(null!=t.defaultPrevented?t.defaultPrevented:!1===t.returnValue)?ie:le,this.isPropagationStopped=le,this}function ce(e,n,t,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,n,t,r),o}return new this(e,n,t,r)}function ue(e){e instanceof this||i("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=ce,e.release=ue}o(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:le,destructor:function(){var e,n=this.constructor.Interface;for(e in n)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),se.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},se.extend=function(e){function n(){}function t(){return r.apply(this,arguments)}var r=this;n.prototype=r.prototype;var a=new n;return o(a,t.prototype),t.prototype=a,t.prototype.constructor=t,t.Interface=o({},r.Interface,e),t.extend=r.extend,de(t),t},de(se);var fe=se.extend({data:null}),pe=se.extend({data:null}),me=[9,13,27,32],he=V&&"CompositionEvent"in window,be=null;V&&"documentMode"in document&&(be=document.documentMode);var ge=V&&"TextEvent"in window&&!be,ve=V&&(!he||be&&8<be&&11>=be),ye=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function ke(e,n){switch(e){case"keyup":return-1!==me.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _e=!1;var Ce={eventTypes:xe,extractEvents:function(e,n,t,r){var o=void 0,a=void 0;if(he)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else _e?ke(e,t)&&(o=xe.compositionEnd):"keydown"===e&&229===t.keyCode&&(o=xe.compositionStart);return o?(ve&&"ko"!==t.locale&&(_e||o!==xe.compositionStart?o===xe.compositionEnd&&_e&&(a=ae()):(re="value"in(te=r)?te.value:te.textContent,_e=!0)),o=fe.getPooled(o,n,t,r),a?o.data=a:null!==(a=Ee(t))&&(o.data=a),K(o),a=o):a=null,(e=ge?function(e,n){switch(e){case"compositionend":return Ee(n);case"keypress":return 32!==n.which?null:(we=!0,ye);case"textInput":return(e=n.data)===ye&&we?null:e;default:return null}}(e,t):function(e,n){if(_e)return"compositionend"===e||!he&&ke(e,n)?(e=ae(),oe=re=te=null,_e=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return ve&&"ko"!==n.locale?null:n.data;default:return null}}(e,t))?((n=pe.getPooled(xe.beforeInput,n,t,r)).data=e,K(n)):n=null,null===a?n:null===n?a:[a,n]}},Pe=null,Oe=null,Te=null;function Ne(e){if(e=k(e)){"function"!=typeof Pe&&i("280");var n=w(e.stateNode);Pe(e.stateNode,e.type,n)}}function Se(e){Oe?Te?Te.push(e):Te=[e]:Oe=e}function je(){if(Oe){var e=Oe,n=Te;if(Te=Oe=null,Ne(e),n)for(e=0;e<n.length;e++)Ne(n[e])}}function Me(e,n){return e(n)}function Re(e,n,t){return e(n,t)}function ze(){}var Ae=!1;function Ie(e,n){if(Ae)return e(n);Ae=!0;try{return Me(e,n)}finally{Ae=!1,(null!==Oe||null!==Te)&&(ze(),je())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!De[e.type]:"textarea"===n}function Le(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Fe(e){if(!V)return!1;var n=(e="on"+e)in document;return n||((n=document.createElement("div")).setAttribute(e,"return;"),n="function"==typeof n[e]),n}function Be(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function He(e){e._valueTracker||(e._valueTracker=function(e){var n=Be(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function We(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}var Ke=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ve=/^(.*)[\\\/]/,$e="function"==typeof Symbol&&Symbol.for,qe=$e?Symbol.for("react.element"):60103,Ye=$e?Symbol.for("react.portal"):60106,Ge=$e?Symbol.for("react.fragment"):60107,Xe=$e?Symbol.for("react.strict_mode"):60108,Qe=$e?Symbol.for("react.profiler"):60114,Je=$e?Symbol.for("react.provider"):60109,Ze=$e?Symbol.for("react.context"):60110,en=$e?Symbol.for("react.concurrent_mode"):60111,nn=$e?Symbol.for("react.forward_ref"):60112,tn=$e?Symbol.for("react.suspense"):60113,rn=$e?Symbol.for("react.memo"):60115,on=$e?Symbol.for("react.lazy"):60116,an="function"==typeof Symbol&&Symbol.iterator;function ln(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=an&&e[an]||e["@@iterator"])?e:null}function sn(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case en:return"ConcurrentMode";case Ge:return"Fragment";case Ye:return"Portal";case Qe:return"Profiler";case Xe:return"StrictMode";case tn:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case nn:var n=e.render;return n=n.displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case rn:return sn(e.type);case on:if(e=1===e._status?e._result:null)return sn(e)}return null}function cn(e){var n="";do{e:switch(e.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var t=e._debugOwner,r=e._debugSource,o=sn(e.type),a=null;t&&(a=sn(t.type)),t=o,o="",r?o=" (at "+r.fileName.replace(Ve,"")+":"+r.lineNumber+")":a&&(o=" (created by "+a+")"),a="\n    in "+(t||"Unknown")+o;break e;default:a=""}n+=a,e=e.return}while(e);return n}var un=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dn=Object.prototype.hasOwnProperty,fn={},pn={};function mn(e,n,t,r,o){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n}var hn={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){hn[e]=new mn(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var n=e[0];hn[n]=new mn(n,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){hn[e]=new mn(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){hn[e]=new mn(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){hn[e]=new mn(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){hn[e]=new mn(e,3,!0,e,null)}),["capture","download"].forEach(function(e){hn[e]=new mn(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){hn[e]=new mn(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){hn[e]=new mn(e,5,!1,e.toLowerCase(),null)});var bn=/[\-:]([a-z])/g;function gn(e){return e[1].toUpperCase()}function vn(e,n,t,r){var o=hn.hasOwnProperty(n)?hn[n]:null;(null!==o?0===o.type:!r&&(2<n.length&&("o"===n[0]||"O"===n[0])&&("n"===n[1]||"N"===n[1])))||(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!dn.call(pn,e)||!dn.call(fn,e)&&(un.test(e)?pn[e]=!0:(fn[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}function yn(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function xn(e,n){var t=n.checked;return o({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function wn(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=yn(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function kn(e,n){null!=(n=n.checked)&&vn(e,"checked",n,!1)}function En(e,n){kn(e,n);var t=yn(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?Cn(e,n.type,t):n.hasOwnProperty("defaultValue")&&Cn(e,n.type,yn(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function _n(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function Cn(e,n,t){"number"===n&&e.ownerDocument.activeElement===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var n=e.replace(bn,gn);hn[n]=new mn(n,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var n=e.replace(bn,gn);hn[n]=new mn(n,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var n=e.replace(bn,gn);hn[n]=new mn(n,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),hn.tabIndex=new mn("tabIndex",1,!1,"tabindex",null);var Pn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function On(e,n,t){return(e=se.getPooled(Pn.change,e,n,t)).type="change",Se(t),K(e),e}var Tn=null,Nn=null;function Sn(e){j(e)}function jn(e){if(We(D(e)))return e}function Mn(e,n){if("change"===e)return n}var Rn=!1;function zn(){Tn&&(Tn.detachEvent("onpropertychange",An),Nn=Tn=null)}function An(e){"value"===e.propertyName&&jn(Nn)&&Ie(Sn,e=On(Nn,e,Le(e)))}function In(e,n,t){"focus"===e?(zn(),Nn=t,(Tn=n).attachEvent("onpropertychange",An)):"blur"===e&&zn()}function Dn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return jn(Nn)}function Un(e,n){if("click"===e)return jn(n)}function Ln(e,n){if("input"===e||"change"===e)return jn(n)}V&&(Rn=Fe("input")&&(!document.documentMode||9<document.documentMode));var Fn={eventTypes:Pn,_isInputEventSupported:Rn,extractEvents:function(e,n,t,r){var o=n?D(n):window,a=void 0,i=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?a=Mn:Ue(o)?Rn?a=Ln:(a=Dn,i=In):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Un),a&&(a=a(e,n)))return On(a,t,r);i&&i(e,o,n),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Cn(o,"number",o.value)}},Bn=se.extend({view:null,detail:null}),Hn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Wn(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=Hn[e])&&!!n[e]}function Kn(){return Wn}var Vn=0,$n=0,qn=!1,Yn=!1,Gn=Bn.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var n=Vn;return Vn=e.screenX,qn?"mousemove"===e.type?e.screenX-n:0:(qn=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var n=$n;return $n=e.screenY,Yn?"mousemove"===e.type?e.screenY-n:0:(Yn=!0,0)}}),Xn=Gn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Qn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jn={eventTypes:Qn,extractEvents:function(e,n,t,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(t.relatedTarget||t.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=n,n=(n=t.relatedTarget||t.toElement)?A(n):null):a=null,a===n)return null;var i=void 0,l=void 0,s=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(i=Gn,l=Qn.mouseLeave,s=Qn.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Xn,l=Qn.pointerLeave,s=Qn.pointerEnter,c="pointer");var u=null==a?o:D(a);if(o=null==n?o:D(n),(e=i.getPooled(l,a,t,r)).type=c+"leave",e.target=u,e.relatedTarget=o,(t=i.getPooled(s,n,t,r)).type=c+"enter",t.target=o,t.relatedTarget=u,r=n,a&&r)e:{for(o=r,c=0,i=n=a;i;i=L(i))c++;for(i=0,s=o;s;s=L(s))i++;for(;0<c-i;)n=L(n),c--;for(;0<i-c;)o=L(o),i--;for(;c--;){if(n===o||n===o.alternate)break e;n=L(n),o=L(o)}n=null}else n=null;for(o=n,n=[];a&&a!==o&&(null===(c=a.alternate)||c!==o);)n.push(a),a=L(a);for(a=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)a.push(r),r=L(r);for(r=0;r<n.length;r++)H(n[r],"bubbled",e);for(r=a.length;0<r--;)H(a[r],"captured",t);return[e,t]}},Zn=Object.prototype.hasOwnProperty;function et(e,n){return e===n?0!==e||0!==n||1/e==1/n:e!=e&&n!=n}function nt(e,n){if(et(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++)if(!Zn.call(n,t[r])||!et(e[t[r]],n[t[r]]))return!1;return!0}function tt(e){var n=e;if(e.alternate)for(;n.return;)n=n.return;else{if(0!=(2&n.effectTag))return 1;for(;n.return;)if(0!=(2&(n=n.return).effectTag))return 1}return 3===n.tag?2:3}function rt(e){2!==tt(e)&&i("188")}function ot(e){if(!(e=function(e){var n=e.alternate;if(!n)return 3===(n=tt(e))&&i("188"),1===n?null:e;for(var t=e,r=n;;){var o=t.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var l=o.child;l;){if(l===t)return rt(o),e;if(l===r)return rt(o),n;l=l.sibling}i("188")}if(t.return!==r.return)t=o,r=a;else{l=!1;for(var s=o.child;s;){if(s===t){l=!0,t=o,r=a;break}if(s===r){l=!0,r=o,t=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===t){l=!0,t=a,r=o;break}if(s===r){l=!0,r=a,t=o;break}s=s.sibling}l||i("189")}}t.alternate!==r&&i("190")}return 3!==t.tag&&i("188"),t.stateNode.current===t?e:n}(e)))return null;for(var n=e;;){if(5===n.tag||6===n.tag)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===e)break;for(;!n.sibling;){if(!n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}var at=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),it=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),lt=Bn.extend({relatedTarget:null});function st(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}var ct={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ut={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dt=Bn.extend({key:function(e){if(e.key){var n=ct[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=st(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ut[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kn,charCode:function(e){return"keypress"===e.type?st(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?st(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ft=Gn.extend({dataTransfer:null}),pt=Bn.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kn}),mt=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ht=Gn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),bt=[["abort","abort"],[Q,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],gt={},vt={};function yt(e,n){var t=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));n={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[t],isInteractive:n},gt[e]=n,vt[t]=n}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){yt(e,!0)}),bt.forEach(function(e){yt(e,!1)});var xt={eventTypes:gt,isInteractiveTopLevelEventType:function(e){return void 0!==(e=vt[e])&&!0===e.isInteractive},extractEvents:function(e,n,t,r){var o=vt[e];if(!o)return null;switch(e){case"keypress":if(0===st(t))return null;case"keydown":case"keyup":e=dt;break;case"blur":case"focus":e=lt;break;case"click":if(2===t.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ft;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pt;break;case Q:case J:case Z:e=at;break;case ee:e=mt;break;case"scroll":e=Bn;break;case"wheel":e=ht;break;case"copy":case"cut":case"paste":e=it;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Xn;break;default:e=se}return K(n=e.getPooled(o,n,t,r)),n}},wt=xt.isInteractiveTopLevelEventType,kt=[];function Et(e){var n=e.targetInst,t=n;do{if(!t){e.ancestors.push(t);break}var r;for(r=t;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(t),t=A(r)}while(t);for(t=0;t<e.ancestors.length;t++){n=e.ancestors[t];var o=Le(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=null,l=0;l<g.length;l++){var s=g[l];s&&(s=s.extractEvents(r,n,a,o))&&(i=C(i,s))}j(i)}}var _t=!0;function Ct(e,n){if(!n)return null;var t=(wt(e)?Ot:Tt).bind(null,e);n.addEventListener(e,t,!1)}function Pt(e,n){if(!n)return null;var t=(wt(e)?Ot:Tt).bind(null,e);n.addEventListener(e,t,!0)}function Ot(e,n){Re(Tt,e,n)}function Tt(e,n){if(_t){var t=Le(n);if(null===(t=A(t))||"number"!=typeof t.tag||2===tt(t)||(t=null),kt.length){var r=kt.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{Ie(Et,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>kt.length&&kt.push(e)}}}var Nt={},St=0,jt="_reactListenersID"+(""+Math.random()).slice(2);function Mt(e){return Object.prototype.hasOwnProperty.call(e,jt)||(e[jt]=St++,Nt[e[jt]]={}),Nt[e[jt]]}function Rt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function zt(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function At(e,n){var t,r=zt(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=zt(r)}}function It(){for(var e=window,n=Rt();n instanceof e.HTMLIFrameElement;){try{e=n.contentDocument.defaultView}catch(e){break}n=Rt(e.document)}return n}function Dt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}var Ut=V&&"documentMode"in document&&11>=document.documentMode,Lt={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Ft=null,Bt=null,Ht=null,Wt=!1;function Kt(e,n){var t=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;return Wt||null==Ft||Ft!==Rt(t)?null:("selectionStart"in(t=Ft)&&Dt(t)?t={start:t.selectionStart,end:t.selectionEnd}:t={anchorNode:(t=(t.ownerDocument&&t.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset},Ht&&nt(Ht,t)?null:(Ht=t,(e=se.getPooled(Lt.select,Bt,e,n)).type="select",e.target=Ft,K(e),e))}var Vt={eventTypes:Lt,extractEvents:function(e,n,t,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Mt(a),o=x.onSelect;for(var i=0;i<o.length;i++){var l=o[i];if(!a.hasOwnProperty(l)||!a[l]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=n?D(n):window,e){case"focus":(Ue(a)||"true"===a.contentEditable)&&(Ft=a,Bt=n,Ht=null);break;case"blur":Ht=Bt=Ft=null;break;case"mousedown":Wt=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wt=!1,Kt(t,r);case"selectionchange":if(Ut)break;case"keydown":case"keyup":return Kt(t,r)}return null}};function $t(e,n){return e=o({children:void 0},n),(n=function(e){var n="";return r.Children.forEach(e,function(e){null!=e&&(n+=e)}),n}(n.children))&&(e.children=n),e}function qt(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+yn(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function Yt(e,n){return null!=n.dangerouslySetInnerHTML&&i("91"),o({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Gt(e,n){var t=n.value;null==t&&(t=n.defaultValue,null!=(n=n.children)&&(null!=t&&i("92"),Array.isArray(n)&&(1>=n.length||i("93"),n=n[0]),t=n),null==t&&(t="")),e._wrapperState={initialValue:yn(t)}}function Xt(e,n){var t=yn(n.value),r=yn(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function Qt(e){var n=e.textContent;n===e._wrapperState.initialValue&&(e.value=n)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=U,k=I,E=D,N.injectEventPluginsByName({SimpleEventPlugin:xt,EnterLeaveEventPlugin:Jn,ChangeEventPlugin:Fn,SelectEventPlugin:Vt,BeforeInputEventPlugin:Ce});var Jt={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zt(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?Zt(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var nr,tr=void 0,rr=(nr=function(e,n){if(e.namespaceURI!==Jt.svg||"innerHTML"in e)e.innerHTML=n;else{for((tr=tr||document.createElement("div")).innerHTML="<svg>"+n+"</svg>",n=tr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,n)})}:nr);function or(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ir=["Webkit","ms","Moz","O"];function lr(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||ar.hasOwnProperty(e)&&ar[e]?(""+n).trim():n+"px"}function sr(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=lr(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(ar).forEach(function(e){ir.forEach(function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),ar[n]=ar[e]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ur(e,n){n&&(cr[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML)&&i("137",e,""),null!=n.dangerouslySetInnerHTML&&(null!=n.children&&i("60"),"object"==typeof n.dangerouslySetInnerHTML&&"__html"in n.dangerouslySetInnerHTML||i("61")),null!=n.style&&"object"!=typeof n.style&&i("62",""))}function dr(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(e,n){var t=Mt(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);n=x[n];for(var r=0;r<n.length;r++){var o=n[r];if(!t.hasOwnProperty(o)||!t[o]){switch(o){case"scroll":Pt("scroll",e);break;case"focus":case"blur":Pt("focus",e),Pt("blur",e),t.blur=!0,t.focus=!0;break;case"cancel":case"close":Fe(o)&&Pt(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===ne.indexOf(o)&&Ct(o,e)}t[o]=!0}}}function pr(){}var mr=null,hr=null;function br(e,n){switch(e){case"button":case"input":case"select":case"textarea":return!!n.autoFocus}return!1}function gr(e,n){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var vr="function"==typeof setTimeout?setTimeout:void 0,yr="function"==typeof clearTimeout?clearTimeout:void 0;function xr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function wr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var kr=[],Er=-1;function _r(e){0>Er||(e.current=kr[Er],kr[Er]=null,Er--)}function Cr(e,n){kr[++Er]=e.current,e.current=n}var Pr={},Or={current:Pr},Tr={current:!1},Nr=Pr;function Sr(e,n){var t=e.type.contextTypes;if(!t)return Pr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in t)a[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=a),a}function jr(e){return null!=(e=e.childContextTypes)}function Mr(e){_r(Tr),_r(Or)}function Rr(e){_r(Tr),_r(Or)}function zr(e,n,t){Or.current!==Pr&&i("168"),Cr(Or,n),Cr(Tr,t)}function Ar(e,n,t){var r=e.stateNode;if(e=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())a in e||i("108",sn(n)||"Unknown",a);return o({},t,r)}function Ir(e){var n=e.stateNode;return n=n&&n.__reactInternalMemoizedMergedChildContext||Pr,Nr=Or.current,Cr(Or,n),Cr(Tr,Tr.current),!0}function Dr(e,n,t){var r=e.stateNode;r||i("169"),t?(n=Ar(e,n,Nr),r.__reactInternalMemoizedMergedChildContext=n,_r(Tr),_r(Or),Cr(Or,n)):_r(Tr),Cr(Tr,t)}var Ur=null,Lr=null;function Fr(e){return function(n){try{return e(n)}catch(e){}}}function Br(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Hr(e,n,t,r){return new Br(e,n,t,r)}function Wr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Kr(e,n){var t=e.alternate;return null===t?((t=Hr(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.effectTag=0,t.nextEffect=null,t.firstEffect=null,t.lastEffect=null),t.childExpirationTime=e.childExpirationTime,t.expirationTime=e.expirationTime,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,t.firstContextDependency=e.firstContextDependency,t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Vr(e,n,t,r,o,a){var l=2;if(r=e,"function"==typeof e)Wr(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ge:return $r(t.children,o,a,n);case en:return qr(t,3|o,a,n);case Xe:return qr(t,2|o,a,n);case Qe:return(e=Hr(12,t,n,4|o)).elementType=Qe,e.type=Qe,e.expirationTime=a,e;case tn:return(e=Hr(13,t,n,o)).elementType=tn,e.type=tn,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case nn:l=11;break e;case rn:l=14;break e;case on:l=16,r=null;break e}i("130",null==e?e:typeof e,"")}return(n=Hr(l,t,n,o)).elementType=e,n.type=r,n.expirationTime=a,n}function $r(e,n,t,r){return(e=Hr(7,e,r,n)).expirationTime=t,e}function qr(e,n,t,r){return e=Hr(8,e,r,n),n=0==(1&n)?Xe:en,e.elementType=n,e.type=n,e.expirationTime=t,e}function Yr(e,n,t){return(e=Hr(6,e,null,n)).expirationTime=t,e}function Gr(e,n,t){return(n=Hr(4,null!==e.children?e.children:[],e.key,n)).expirationTime=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Xr(e,n){e.didError=!1;var t=e.earliestPendingTime;0===t?e.earliestPendingTime=e.latestPendingTime=n:t<n?e.earliestPendingTime=n:e.latestPendingTime>n&&(e.latestPendingTime=n),Zr(n,e)}function Qr(e,n){e.didError=!1;var t=e.latestPingedTime;0!==t&&t>=n&&(e.latestPingedTime=0),t=e.earliestPendingTime;var r=e.latestPendingTime;t===n?e.earliestPendingTime=r===n?e.latestPendingTime=0:r:r===n&&(e.latestPendingTime=t),t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===t?e.earliestSuspendedTime=e.latestSuspendedTime=n:t<n?e.earliestSuspendedTime=n:r>n&&(e.latestSuspendedTime=n),Zr(n,e)}function Jr(e,n){var t=e.earliestPendingTime;return t>n&&(n=t),(e=e.earliestSuspendedTime)>n&&(n=e),n}function Zr(e,n){var t=n.earliestSuspendedTime,r=n.latestSuspendedTime,o=n.earliestPendingTime,a=n.latestPingedTime;0===(o=0!==o?o:a)&&(0===e||r<e)&&(o=r),0!==(e=o)&&t>e&&(e=t),n.nextExpirationTimeToWorkOn=o,n.expirationTime=e}var eo=!1;function no(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function to(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ro(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function oo(e,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=n:(e.lastUpdate.next=n,e.lastUpdate=n)}function ao(e,n){var t=e.alternate;if(null===t){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=no(e.memoizedState))}else r=e.updateQueue,o=t.updateQueue,null===r?null===o?(r=e.updateQueue=no(e.memoizedState),o=t.updateQueue=no(t.memoizedState)):r=e.updateQueue=to(o):null===o&&(o=t.updateQueue=to(r));null===o||r===o?oo(r,n):null===r.lastUpdate||null===o.lastUpdate?(oo(r,n),oo(o,n)):(oo(r,n),o.lastUpdate=n)}function io(e,n){var t=e.updateQueue;null===(t=null===t?e.updateQueue=no(e.memoizedState):lo(e,t)).lastCapturedUpdate?t.firstCapturedUpdate=t.lastCapturedUpdate=n:(t.lastCapturedUpdate.next=n,t.lastCapturedUpdate=n)}function lo(e,n){var t=e.alternate;return null!==t&&n===t.updateQueue&&(n=e.updateQueue=to(n)),n}function so(e,n,t,r,a,i){switch(t.tag){case 1:return"function"==typeof(e=t.payload)?e.call(i,r,a):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(a="function"==typeof(e=t.payload)?e.call(i,r,a):e))break;return o({},r,a);case 2:eo=!0}return r}function co(e,n,t,r,o){eo=!1;for(var a=(n=lo(e,n)).baseState,i=null,l=0,s=n.firstUpdate,c=a;null!==s;){var u=s.expirationTime;u<o?(null===i&&(i=s,a=c),l<u&&(l=u)):(c=so(e,0,s,c,t,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===n.lastEffect?n.firstEffect=n.lastEffect=s:(n.lastEffect.nextEffect=s,n.lastEffect=s))),s=s.next}for(u=null,s=n.firstCapturedUpdate;null!==s;){var d=s.expirationTime;d<o?(null===u&&(u=s,null===i&&(a=c)),l<d&&(l=d)):(c=so(e,0,s,c,t,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===n.lastCapturedEffect?n.firstCapturedEffect=n.lastCapturedEffect=s:(n.lastCapturedEffect.nextEffect=s,n.lastCapturedEffect=s))),s=s.next}null===i&&(n.lastUpdate=null),null===u?n.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===u&&(a=c),n.baseState=a,n.firstUpdate=i,n.firstCapturedUpdate=u,e.expirationTime=l,e.memoizedState=c}function uo(e,n,t){null!==n.firstCapturedUpdate&&(null!==n.lastUpdate&&(n.lastUpdate.next=n.firstCapturedUpdate,n.lastUpdate=n.lastCapturedUpdate),n.firstCapturedUpdate=n.lastCapturedUpdate=null),fo(n.firstEffect,t),n.firstEffect=n.lastEffect=null,fo(n.firstCapturedEffect,t),n.firstCapturedEffect=n.lastCapturedEffect=null}function fo(e,n){for(;null!==e;){var t=e.callback;if(null!==t){e.callback=null;var r=n;"function"!=typeof t&&i("191",t),t.call(r)}e=e.nextEffect}}function po(e,n){return{value:e,source:n,stack:cn(n)}}var mo={current:null},ho=null,bo=null,go=null;function vo(e,n){var t=e.type._context;Cr(mo,t._currentValue),t._currentValue=n}function yo(e){var n=mo.current;_r(mo),e.type._context._currentValue=n}function xo(e){ho=e,go=bo=null,e.firstContextDependency=null}function wo(e,n){return go!==e&&!1!==n&&0!==n&&("number"==typeof n&&1073741823!==n||(go=e,n=1073741823),n={context:e,observedBits:n,next:null},null===bo?(null===ho&&i("293"),ho.firstContextDependency=bo=n):bo=bo.next=n),e._currentValue}var ko={},Eo={current:ko},_o={current:ko},Co={current:ko};function Po(e){return e===ko&&i("174"),e}function Oo(e,n){Cr(Co,n),Cr(_o,e),Cr(Eo,ko);var t=n.nodeType;switch(t){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:er(null,"");break;default:n=er(n=(t=8===t?n.parentNode:n).namespaceURI||null,t=t.tagName)}_r(Eo),Cr(Eo,n)}function To(e){_r(Eo),_r(_o),_r(Co)}function No(e){Po(Co.current);var n=Po(Eo.current),t=er(n,e.type);n!==t&&(Cr(_o,e),Cr(Eo,t))}function So(e){_o.current===e&&(_r(Eo),_r(_o))}function jo(e,n){if(e&&e.defaultProps)for(var t in n=o({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}var Mo=Ke.ReactCurrentOwner,Ro=(new r.Component).refs;function zo(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:o({},n,t),e.memoizedState=t,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=t)}var Ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tt(e)},enqueueSetState:function(e,n,t){e=e._reactInternalFiber;var r=_i(),o=ro(r=Xa(r,e));o.payload=n,null!=t&&(o.callback=t),Va(),ao(e,o),Za(e,r)},enqueueReplaceState:function(e,n,t){e=e._reactInternalFiber;var r=_i(),o=ro(r=Xa(r,e));o.tag=1,o.payload=n,null!=t&&(o.callback=t),Va(),ao(e,o),Za(e,r)},enqueueForceUpdate:function(e,n){e=e._reactInternalFiber;var t=_i(),r=ro(t=Xa(t,e));r.tag=2,null!=n&&(r.callback=n),Va(),ao(e,r),Za(e,t)}};function Io(e,n,t,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!n.prototype||!n.prototype.isPureReactComponent||(!nt(t,r)||!nt(o,a))}function Do(e,n,t){var r=!1,o=Pr,a=n.contextType;return"object"==typeof a&&null!==a?a=Mo.currentDispatcher.readContext(a):(o=jr(n)?Nr:Or.current,a=(r=null!=(r=n.contextTypes))?Sr(e,o):Pr),n=new n(t,a),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=Ao,e.stateNode=n,n._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),n}function Uo(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&Ao.enqueueReplaceState(n,n.state,null)}function Lo(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs=Ro;var a=n.contextType;"object"==typeof a&&null!==a?o.context=Mo.currentDispatcher.readContext(a):(a=jr(n)?Nr:Or.current,o.context=Sr(e,a)),null!==(a=e.updateQueue)&&(co(e,a,t,o,r),o.state=e.memoizedState),"function"==typeof(a=n.getDerivedStateFromProps)&&(zo(e,n,a,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&Ao.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(co(e,a,t,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Fo=Array.isArray;function Bo(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){t=t._owner;var r=void 0;t&&(1!==t.tag&&i("289"),r=t.stateNode),r||i("147",e);var o=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===o?n.ref:((n=function(e){var n=r.refs;n===Ro&&(n=r.refs={}),null===e?delete n[o]:n[o]=e})._stringRef=o,n)}"string"!=typeof e&&i("284"),t._owner||i("290",e)}return e}function Ho(e,n){"textarea"!==e.type&&i("31","[object Object]"===Object.prototype.toString.call(n)?"object with keys {"+Object.keys(n).join(", ")+"}":n,"")}function Wo(e){function n(n,t){if(e){var r=n.lastEffect;null!==r?(r.nextEffect=t,n.lastEffect=t):n.firstEffect=n.lastEffect=t,t.nextEffect=null,t.effectTag=8}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n,t){return(e=Kr(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.effectTag=2,t):r:(n.effectTag=2,t):t}function l(n){return e&&null===n.alternate&&(n.effectTag=2),n}function s(e,n,t,r){return null===n||6!==n.tag?((n=Yr(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function c(e,n,t,r){return null!==n&&n.elementType===t.type?((r=o(n,t.props)).ref=Bo(e,n,t),r.return=e,r):((r=Vr(t.type,t.key,t.props,null,e.mode,r)).ref=Bo(e,n,t),r.return=e,r)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Gr(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function d(e,n,t,r,a){return null===n||7!==n.tag?((n=$r(t,e.mode,r,a)).return=e,n):((n=o(n,t)).return=e,n)}function f(e,n,t){if("string"==typeof n||"number"==typeof n)return(n=Yr(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case qe:return(t=Vr(n.type,n.key,n.props,null,e.mode,t)).ref=Bo(e,null,n),t.return=e,t;case Ye:return(n=Gr(n,e.mode,t)).return=e,n}if(Fo(n)||ln(n))return(n=$r(n,e.mode,t,null)).return=e,n;Ho(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t||"number"==typeof t)return null!==o?null:s(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case qe:return t.key===o?t.type===Ge?d(e,n,t.props.children,r,o):c(e,n,t,r):null;case Ye:return t.key===o?u(e,n,t,r):null}if(Fo(t)||ln(t))return null!==o?null:d(e,n,t,r,null);Ho(e,t)}return null}function m(e,n,t,r,o){if("string"==typeof r||"number"==typeof r)return s(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case qe:return e=e.get(null===r.key?t:r.key)||null,r.type===Ge?d(n,e,r.props.children,o,r.key):c(n,e,r,o);case Ye:return u(n,e=e.get(null===r.key?t:r.key)||null,r,o)}if(Fo(r)||ln(r))return d(n,e=e.get(t)||null,r,o,null);Ho(n,r)}return null}function h(o,i,l,s){for(var c=null,u=null,d=i,h=i=0,b=null;null!==d&&h<l.length;h++){d.index>h?(b=d,d=null):b=d.sibling;var g=p(o,d,l[h],s);if(null===g){null===d&&(d=b);break}e&&d&&null===g.alternate&&n(o,d),i=a(g,i,h),null===u?c=g:u.sibling=g,u=g,d=b}if(h===l.length)return t(o,d),c;if(null===d){for(;h<l.length;h++)(d=f(o,l[h],s))&&(i=a(d,i,h),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);h<l.length;h++)(b=m(d,o,h,l[h],s))&&(e&&null!==b.alternate&&d.delete(null===b.key?h:b.key),i=a(b,i,h),null===u?c=b:u.sibling=b,u=b);return e&&d.forEach(function(e){return n(o,e)}),c}function b(o,l,s,c){var u=ln(s);"function"!=typeof u&&i("150"),null==(s=u.call(s))&&i("151");for(var d=u=null,h=l,b=l=0,g=null,v=s.next();null!==h&&!v.done;b++,v=s.next()){h.index>b?(g=h,h=null):g=h.sibling;var y=p(o,h,v.value,c);if(null===y){h||(h=g);break}e&&h&&null===y.alternate&&n(o,h),l=a(y,l,b),null===d?u=y:d.sibling=y,d=y,h=g}if(v.done)return t(o,h),u;if(null===h){for(;!v.done;b++,v=s.next())null!==(v=f(o,v.value,c))&&(l=a(v,l,b),null===d?u=v:d.sibling=v,d=v);return u}for(h=r(o,h);!v.done;b++,v=s.next())null!==(v=m(h,o,b,v.value,c))&&(e&&null!==v.alternate&&h.delete(null===v.key?b:v.key),l=a(v,l,b),null===d?u=v:d.sibling=v,d=v);return e&&h.forEach(function(e){return n(o,e)}),u}return function(e,r,a,s){var c="object"==typeof a&&null!==a&&a.type===Ge&&null===a.key;c&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case qe:e:{for(u=a.key,c=r;null!==c;){if(c.key===u){if(7===c.tag?a.type===Ge:c.elementType===a.type){t(e,c.sibling),(r=o(c,a.type===Ge?a.props.children:a.props)).ref=Bo(e,c,a),r.return=e,e=r;break e}t(e,c);break}n(e,c),c=c.sibling}a.type===Ge?((r=$r(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Vr(a.type,a.key,a.props,null,e.mode,s)).ref=Bo(e,r,a),s.return=e,e=s)}return l(e);case Ye:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){t(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}t(e,r);break}n(e,r),r=r.sibling}(r=Gr(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(t(e,r.sibling),(r=o(r,a)).return=e,e=r):(t(e,r),(r=Yr(a,e.mode,s)).return=e,e=r),l(e);if(Fo(a))return h(e,r,a,s);if(ln(a))return b(e,r,a,s);if(u&&Ho(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:i("152",(s=e.type).displayName||s.name||"Component")}return t(e,r)}}var Ko=Wo(!0),Vo=Wo(!1),$o=null,qo=null,Yo=!1;function Go(e,n){var t=Hr(5,null,null,0);t.elementType="DELETED",t.type="DELETED",t.stateNode=n,t.return=e,t.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=t,e.lastEffect=t):e.firstEffect=e.lastEffect=t}function Xo(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,!0);default:return!1}}function Qo(e){if(Yo){var n=qo;if(n){var t=n;if(!Xo(e,n)){if(!(n=xr(t))||!Xo(e,n))return e.effectTag|=2,Yo=!1,void($o=e);Go($o,t)}$o=e,qo=wr(n)}else e.effectTag|=2,Yo=!1,$o=e}}function Jo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;$o=e}function Zo(e){if(e!==$o)return!1;if(!Yo)return Jo(e),Yo=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!gr(n,e.memoizedProps))for(n=qo;n;)Go(e,n),n=xr(n);return Jo(e),qo=$o?xr(e.stateNode):null,!0}function ea(){qo=$o=null,Yo=!1}var na=Ke.ReactCurrentOwner;function ta(e,n,t,r){n.child=null===e?Vo(n,null,t,r):Ko(n,e.child,t,r)}function ra(e,n,t,r,o){t=t.render;var a=n.ref;return xo(n),r=t(r,a),n.effectTag|=1,ta(e,n,r,o),n.child}function oa(e,n,t,r,o,a){if(null===e){var i=t.type;return"function"!=typeof i||Wr(i)||void 0!==i.defaultProps||null!==t.compare?((e=Vr(t.type,null,r,null,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=i,aa(e,n,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(t=null!==(t=t.compare)?t:nt)(o,r)&&e.ref===n.ref)?fa(e,n,a):(n.effectTag|=1,(e=Kr(i,r)).ref=n.ref,e.return=n,n.child=e)}function aa(e,n,t,r,o,a){return null!==e&&o<a&&nt(e.memoizedProps,r)&&e.ref===n.ref?fa(e,n,a):la(e,n,t,r,a)}function ia(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.effectTag|=128)}function la(e,n,t,r,o){var a=jr(t)?Nr:Or.current;return a=Sr(n,a),xo(n),t=t(r,a),n.effectTag|=1,ta(e,n,t,o),n.child}function sa(e,n,t,r,o){if(jr(t)){var a=!0;Ir(n)}else a=!1;if(xo(n),null===n.stateNode)null!==e&&(e.alternate=null,n.alternate=null,n.effectTag|=2),Do(n,t,r),Lo(n,t,r,o),r=!0;else if(null===e){var i=n.stateNode,l=n.memoizedProps;i.props=l;var s=i.context,c=t.contextType;"object"==typeof c&&null!==c?c=Mo.currentDispatcher.readContext(c):c=Sr(n,c=jr(t)?Nr:Or.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&Uo(n,i,r,c),eo=!1;var f=n.memoizedState;s=i.state=f;var p=n.updateQueue;null!==p&&(co(n,p,r,i,o),s=n.memoizedState),l!==r||f!==s||Tr.current||eo?("function"==typeof u&&(zo(n,t,u,r),s=n.memoizedState),(l=eo||Io(n,t,l,r,f,s,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.effectTag|=4)):("function"==typeof i.componentDidMount&&(n.effectTag|=4),n.memoizedProps=r,n.memoizedState=s),i.props=r,i.state=s,i.context=c,r=l):("function"==typeof i.componentDidMount&&(n.effectTag|=4),r=!1)}else i=n.stateNode,l=n.memoizedProps,i.props=n.type===n.elementType?l:jo(n.type,l),s=i.context,"object"==typeof(c=t.contextType)&&null!==c?c=Mo.currentDispatcher.readContext(c):c=Sr(n,c=jr(t)?Nr:Or.current),(d="function"==typeof(u=t.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&Uo(n,i,r,c),eo=!1,s=n.memoizedState,f=i.state=s,null!==(p=n.updateQueue)&&(co(n,p,r,i,o),f=n.memoizedState),l!==r||s!==f||Tr.current||eo?("function"==typeof u&&(zo(n,t,u,r),f=n.memoizedState),(u=eo||Io(n,t,l,r,s,f,c))?(d||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,c)),"function"==typeof i.componentDidUpdate&&(n.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(n.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(n.effectTag|=256),n.memoizedProps=r,n.memoizedState=f),i.props=r,i.state=f,i.context=c,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(n.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(n.effectTag|=256),r=!1);return ca(e,n,t,r,a,o)}function ca(e,n,t,r,o,a){ia(e,n);var i=0!=(64&n.effectTag);if(!r&&!i)return o&&Dr(n,t,!1),fa(e,n,a);r=n.stateNode,na.current=n;var l=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.effectTag|=1,null!==e&&i?(n.child=Ko(n,e.child,null,a),n.child=Ko(n,null,l,a)):ta(e,n,l,a),n.memoizedState=r.state,o&&Dr(n,t,!0),n.child}function ua(e){var n=e.stateNode;n.pendingContext?zr(0,n.pendingContext,n.pendingContext!==n.context):n.context&&zr(0,n.context,!1),Oo(e,n.containerInfo)}function da(e,n,t){var r=n.mode,o=n.pendingProps,a=n.memoizedState;if(0==(64&n.effectTag)){a=null;var i=!1}else a={timedOutAt:null!==a?a.timedOutAt:0},i=!0,n.effectTag&=-65;return null===e?i?(i=o.fallback,o=$r(null,r,0,null),0==(1&n.mode)&&(o.child=null!==n.memoizedState?n.child.child:n.child),r=$r(i,r,t,null),o.sibling=r,(t=o).return=r.return=n):t=r=Vo(n,null,o.children,t):null!==e.memoizedState?(e=(r=e.child).sibling,i?(t=o.fallback,o=Kr(r,r.pendingProps),0==(1&n.mode)&&((i=null!==n.memoizedState?n.child.child:n.child)!==r.child&&(o.child=i)),r=o.sibling=Kr(e,t,e.expirationTime),t=o,o.childExpirationTime=0,t.return=r.return=n):t=r=Ko(n,r.child,o.children,t)):(e=e.child,i?(i=o.fallback,(o=$r(null,r,0,null)).child=e,0==(1&n.mode)&&(o.child=null!==n.memoizedState?n.child.child:n.child),(r=o.sibling=$r(i,r,t,null)).effectTag|=2,t=o,o.childExpirationTime=0,t.return=r.return=n):r=t=Ko(n,e,o.children,t)),n.memoizedState=a,n.child=t,r}function fa(e,n,t){if(null!==e&&(n.firstContextDependency=e.firstContextDependency),n.childExpirationTime<t)return null;if(null!==e&&n.child!==e.child&&i("153"),null!==n.child){for(t=Kr(e=n.child,e.pendingProps,e.expirationTime),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Kr(e,e.pendingProps,e.expirationTime)).return=n;t.sibling=null}return n.child}function pa(e,n,t){var r=n.expirationTime;if(null!==e&&e.memoizedProps===n.pendingProps&&!Tr.current&&r<t){switch(n.tag){case 3:ua(n),ea();break;case 5:No(n);break;case 1:jr(n.type)&&Ir(n);break;case 4:Oo(n,n.stateNode.containerInfo);break;case 10:vo(n,n.memoizedProps.value);break;case 13:if(null!==n.memoizedState)return 0!==(r=n.child.childExpirationTime)&&r>=t?da(e,n,t):null!==(n=fa(e,n,t))?n.sibling:null}return fa(e,n,t)}switch(n.expirationTime=0,n.tag){case 2:r=n.elementType,null!==e&&(e.alternate=null,n.alternate=null,n.effectTag|=2),e=n.pendingProps;var o=Sr(n,Or.current);if(xo(n),o=r(e,o),n.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(n.tag=1,jr(r)){var a=!0;Ir(n)}else a=!1;n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&zo(n,r,l,e),o.updater=Ao,n.stateNode=o,o._reactInternalFiber=n,Lo(n,r,e,t),n=ca(null,n,r,!0,a,t)}else n.tag=0,ta(null,n,o,t),n=n.child;return n;case 16:switch(o=n.elementType,null!==e&&(e.alternate=null,n.alternate=null,n.effectTag|=2),a=n.pendingProps,e=function(e){var n=e._result;switch(e._status){case 1:return n;case 2:case 0:throw n;default:throw e._status=0,(n=(n=e._ctor)()).then(function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)},function(n){0===e._status&&(e._status=2,e._result=n)}),e._result=n,n}}(o),n.type=e,o=n.tag=function(e){if("function"==typeof e)return Wr(e)?1:0;if(null!=e){if((e=e.$$typeof)===nn)return 11;if(e===rn)return 14}return 2}(e),a=jo(e,a),l=void 0,o){case 0:l=la(null,n,e,a,t);break;case 1:l=sa(null,n,e,a,t);break;case 11:l=ra(null,n,e,a,t);break;case 14:l=oa(null,n,e,jo(e.type,a),r,t);break;default:i("283",e)}return l;case 0:return r=n.type,o=n.pendingProps,la(e,n,r,o=n.elementType===r?o:jo(r,o),t);case 1:return r=n.type,o=n.pendingProps,sa(e,n,r,o=n.elementType===r?o:jo(r,o),t);case 3:return ua(n),null===(r=n.updateQueue)&&i("282"),o=null!==(o=n.memoizedState)?o.element:null,co(n,r,n.pendingProps,null,t),(r=n.memoizedState.element)===o?(ea(),n=fa(e,n,t)):(o=n.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(qo=wr(n.stateNode.containerInfo),$o=n,o=Yo=!0),o?(n.effectTag|=2,n.child=Vo(n,null,r,t)):(ta(e,n,r,t),ea()),n=n.child),n;case 5:return No(n),null===e&&Qo(n),r=n.type,o=n.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,gr(r,o)?l=null:null!==a&&gr(r,a)&&(n.effectTag|=16),ia(e,n),1!==t&&1&n.mode&&o.hidden?(n.expirationTime=1,n=null):(ta(e,n,l,t),n=n.child),n;case 6:return null===e&&Qo(n),null;case 13:return da(e,n,t);case 4:return Oo(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Ko(n,null,r,t):ta(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,ra(e,n,r,o=n.elementType===r?o:jo(r,o),t);case 7:return ta(e,n,n.pendingProps,t),n.child;case 8:case 12:return ta(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,o=n.pendingProps,l=n.memoizedProps,vo(n,a=o.value),null!==l){var s=l.value;if(0===(a=s===a&&(0!==s||1/s==1/a)||s!=s&&a!=a?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!Tr.current){n=fa(e,n,t);break e}}else for(null!==(l=n.child)&&(l.return=n);null!==l;){if(null!==(s=l.firstContextDependency))do{if(s.context===r&&0!=(s.observedBits&a)){if(1===l.tag){var c=ro(t);c.tag=2,ao(l,c)}l.expirationTime<t&&(l.expirationTime=t),null!==(c=l.alternate)&&c.expirationTime<t&&(c.expirationTime=t);for(var u=l.return;null!==u;){if(c=u.alternate,u.childExpirationTime<t)u.childExpirationTime=t,null!==c&&c.childExpirationTime<t&&(c.childExpirationTime=t);else{if(!(null!==c&&c.childExpirationTime<t))break;c.childExpirationTime=t}u=u.return}}c=l.child,s=s.next}while(null!==s);else c=10===l.tag&&l.type===n.type?null:l.child;if(null!==c)c.return=l;else for(c=l;null!==c;){if(c===n){c=null;break}if(null!==(l=c.sibling)){l.return=c.return,c=l;break}c=c.return}l=c}}ta(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=(a=n.pendingProps).children,xo(n),r=r(o=wo(o,a.unstable_observedBits)),n.effectTag|=1,ta(e,n,r,t),n.child;case 14:return oa(e,n,o=n.type,a=jo(o.type,n.pendingProps),r,t);case 15:return aa(e,n,n.type,n.pendingProps,r,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:jo(r,o),null!==e&&(e.alternate=null,n.alternate=null,n.effectTag|=2),n.tag=1,jr(r)?(e=!0,Ir(n)):e=!1,xo(n),Do(n,r,o),Lo(n,r,o,t),ca(null,n,r,!0,e,t);default:i("156")}}function ma(e){e.effectTag|=4}var ha=void 0,ba=void 0,ga=void 0,va=void 0;function ya(e,n){var t=n.source,r=n.stack;null===r&&null!==t&&(r=cn(t)),null!==t&&sn(t.type),n=n.value,null!==e&&1===e.tag&&sn(e.type);try{console.error(n)}catch(e){setTimeout(function(){throw e})}}function xa(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ga(e,n)}else n.current=null}function wa(e){switch("function"==typeof Lr&&Lr(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var t=n=n.next;do{var r=t.destroy;if(null!==r){var o=e;try{r()}catch(e){Ga(o,e)}}t=t.next}while(t!==n)}break;case 1:if(xa(e),"function"==typeof(n=e.stateNode).componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){Ga(e,n)}break;case 5:xa(e);break;case 4:_a(e)}}function ka(e){return 5===e.tag||3===e.tag||4===e.tag}function Ea(e){e:{for(var n=e.return;null!==n;){if(ka(n)){var t=n;break e}n=n.return}i("160"),t=void 0}var r=n=void 0;switch(t.tag){case 5:n=t.stateNode,r=!1;break;case 3:case 4:n=t.stateNode.containerInfo,r=!0;break;default:i("161")}16&t.effectTag&&(or(n,""),t.effectTag&=-17);e:n:for(t=e;;){for(;null===t.sibling;){if(null===t.return||ka(t.return)){t=null;break e}t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag;){if(2&t.effectTag)continue n;if(null===t.child||4===t.tag)continue n;t.child.return=t,t=t.child}if(!(2&t.effectTag)){t=t.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(t)if(r){var a=n,l=o.stateNode,s=t;8===a.nodeType?a.parentNode.insertBefore(l,s):a.insertBefore(l,s)}else n.insertBefore(o.stateNode,t);else r?(l=n,s=o.stateNode,8===l.nodeType?(a=l.parentNode).insertBefore(s,l):(a=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==a.onclick||(a.onclick=pr)):n.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function _a(e){for(var n=e,t=!1,r=void 0,o=void 0;;){if(!t){t=n.return;e:for(;;){switch(null===t&&i("160"),t.tag){case 5:r=t.stateNode,o=!1;break e;case 3:case 4:r=t.stateNode.containerInfo,o=!0;break e}t=t.return}t=!0}if(5===n.tag||6===n.tag){e:for(var a=n,l=a;;)if(wa(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===a)break;for(;null===l.sibling;){if(null===l.return||l.return===a)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(a=r,l=n.stateNode,8===a.nodeType?a.parentNode.removeChild(l):a.removeChild(l)):r.removeChild(n.stateNode)}else if(4===n.tag?(r=n.stateNode.containerInfo,o=!0):wa(n),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(t=!1)}n.sibling.return=n.return,n=n.sibling}}function Ca(e,n){switch(n.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var t=n.stateNode;if(null!=t){var r=n.memoizedProps,o=null!==e?e.memoizedProps:r;e=n.type;var a=n.updateQueue;if(n.updateQueue=null,null!==a){for(t[z]=r,"input"===e&&"radio"===r.type&&null!=r.name&&kn(t,r),dr(e,o),n=dr(e,r),o=0;o<a.length;o+=2){var l=a[o],s=a[o+1];"style"===l?sr(t,s):"dangerouslySetInnerHTML"===l?rr(t,s):"children"===l?or(t,s):vn(t,l,s,n)}switch(e){case"input":En(t,r);break;case"textarea":Xt(t,r);break;case"select":n=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?qt(t,!!r.multiple,e,!1):n!==!!r.multiple&&(null!=r.defaultValue?qt(t,!!r.multiple,r.defaultValue,!0):qt(t,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:null===n.stateNode&&i("162"),n.stateNode.nodeValue=n.memoizedProps;break;case 3:case 12:break;case 13:if(e=n,null===(t=n.memoizedState)?r=!1:(r=!0,e=n.child,0===t.timedOutAt&&(t.timedOutAt=_i())),null!==e)e:for(n=t=e;;){if(5===n.tag)e=n.stateNode,r?e.style.display="none":(e=n.stateNode,a=null!=(a=n.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,e.style.display=lr("display",a));else if(6===n.tag)n.stateNode.nodeValue=r?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(e=n.child.sibling).return=n,n=e;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===t)break e;for(;null===n.sibling;){if(null===n.return||n.return===t)break e;n=n.return}n.sibling.return=n.return,n=n.sibling}break;case 17:break;default:i("163")}}function Pa(e,n,t){(t=ro(t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){zi(r),ya(e,n)},t}function Oa(e,n,t){(t=ro(t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(t.callback=function(){"function"!=typeof r&&(null===Wa?Wa=new Set([this]):Wa.add(this));var t=n.value,o=n.stack;ya(e,n),this.componentDidCatch(t,{componentStack:null!==o?o:""})}),t}function Ta(e){switch(e.tag){case 1:jr(e.type)&&Mr();var n=e.effectTag;return 2048&n?(e.effectTag=-2049&n|64,e):null;case 3:return To(),Rr(),0!=(64&(n=e.effectTag))&&i("285"),e.effectTag=-2049&n|64,e;case 5:return So(e),null;case 13:return 2048&(n=e.effectTag)?(e.effectTag=-2049&n|64,e):null;case 4:return To(),null;case 10:return yo(e),null;default:return null}}ha=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},ba=function(){},ga=function(e,n,t,r,a){var i=e.memoizedProps;if(i!==r){var l=n.stateNode;switch(Po(Eo.current),e=null,t){case"input":i=xn(l,i),r=xn(l,r),e=[];break;case"option":i=$t(l,i),r=$t(l,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Yt(l,i),r=Yt(l,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(l.onclick=pr)}ur(t,r),l=t=void 0;var s=null;for(t in i)if(!r.hasOwnProperty(t)&&i.hasOwnProperty(t)&&null!=i[t])if("style"===t){var c=i[t];for(l in c)c.hasOwnProperty(l)&&(s||(s={}),s[l]="")}else"dangerouslySetInnerHTML"!==t&&"children"!==t&&"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&"autoFocus"!==t&&(y.hasOwnProperty(t)?e||(e=[]):(e=e||[]).push(t,null));for(t in r){var u=r[t];if(c=null!=i?i[t]:void 0,r.hasOwnProperty(t)&&u!==c&&(null!=u||null!=c))if("style"===t)if(c){for(l in c)!c.hasOwnProperty(l)||u&&u.hasOwnProperty(l)||(s||(s={}),s[l]="");for(l in u)u.hasOwnProperty(l)&&c[l]!==u[l]&&(s||(s={}),s[l]=u[l])}else s||(e||(e=[]),e.push(t,s)),s=u;else"dangerouslySetInnerHTML"===t?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(e=e||[]).push(t,""+u)):"children"===t?c===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(t,""+u):"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&(y.hasOwnProperty(t)?(null!=u&&fr(a,t),e||c===u||(e=[])):(e=e||[]).push(t,u))}s&&(e=e||[]).push("style",s),a=e,(n.updateQueue=a)&&ma(n)}},va=function(e,n,t,r){t!==r&&ma(n)};var Na={readContext:wo},Sa=Ke.ReactCurrentOwner,ja=1073741822,Ma=0,Ra=!1,za=null,Aa=null,Ia=0,Da=-1,Ua=!1,La=null,Fa=!1,Ba=null,Ha=null,Wa=null;function Ka(){if(null!==za)for(var e=za.return;null!==e;){var n=e;switch(n.tag){case 1:var t=n.type.childContextTypes;null!=t&&Mr();break;case 3:To(),Rr();break;case 5:So(n);break;case 4:To();break;case 10:yo(n)}e=e.return}Aa=null,Ia=0,Da=-1,Ua=!1,za=null}function Va(){null!==Ha&&(a.unstable_cancelCallback(Ba),Ha())}function $a(e){for(;;){var n=e.alternate,t=e.return,r=e.sibling;if(0==(1024&e.effectTag)){za=e;e:{var a=n,l=Ia,s=(n=e).pendingProps;switch(n.tag){case 2:case 16:break;case 15:case 0:break;case 1:jr(n.type)&&Mr();break;case 3:To(),Rr(),(s=n.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==a&&null!==a.child||(Zo(n),n.effectTag&=-3),ba(n);break;case 5:So(n);var c=Po(Co.current);if(l=n.type,null!==a&&null!=n.stateNode)ga(a,n,l,s,c),a.ref!==n.ref&&(n.effectTag|=128);else if(s){var u=Po(Eo.current);if(Zo(n)){a=(s=n).stateNode;var d=s.type,f=s.memoizedProps,p=c;switch(a[R]=s,a[z]=f,l=void 0,c=d){case"iframe":case"object":Ct("load",a);break;case"video":case"audio":for(d=0;d<ne.length;d++)Ct(ne[d],a);break;case"source":Ct("error",a);break;case"img":case"image":case"link":Ct("error",a),Ct("load",a);break;case"form":Ct("reset",a),Ct("submit",a);break;case"details":Ct("toggle",a);break;case"input":wn(a,f),Ct("invalid",a),fr(p,"onChange");break;case"select":a._wrapperState={wasMultiple:!!f.multiple},Ct("invalid",a),fr(p,"onChange");break;case"textarea":Gt(a,f),Ct("invalid",a),fr(p,"onChange")}for(l in ur(c,f),d=null,f)f.hasOwnProperty(l)&&(u=f[l],"children"===l?"string"==typeof u?a.textContent!==u&&(d=["children",u]):"number"==typeof u&&a.textContent!==""+u&&(d=["children",""+u]):y.hasOwnProperty(l)&&null!=u&&fr(p,l));switch(c){case"input":He(a),_n(a,f,!0);break;case"textarea":He(a),Qt(a);break;case"select":case"option":break;default:"function"==typeof f.onClick&&(a.onclick=pr)}l=d,s.updateQueue=l,(s=null!==l)&&ma(n)}else{f=n,a=l,p=s,d=9===c.nodeType?c:c.ownerDocument,u===Jt.html&&(u=Zt(a)),u===Jt.html?"script"===a?((a=d.createElement("div")).innerHTML="<script><\/script>",d=a.removeChild(a.firstChild)):"string"==typeof p.is?d=d.createElement(a,{is:p.is}):(d=d.createElement(a),"select"===a&&p.multiple&&(d.multiple=!0)):d=d.createElementNS(u,a),(a=d)[R]=f,a[z]=s,ha(a,n,!1,!1),p=a;var m=c,h=dr(d=l,f=s);switch(d){case"iframe":case"object":Ct("load",p),c=f;break;case"video":case"audio":for(c=0;c<ne.length;c++)Ct(ne[c],p);c=f;break;case"source":Ct("error",p),c=f;break;case"img":case"image":case"link":Ct("error",p),Ct("load",p),c=f;break;case"form":Ct("reset",p),Ct("submit",p),c=f;break;case"details":Ct("toggle",p),c=f;break;case"input":wn(p,f),c=xn(p,f),Ct("invalid",p),fr(m,"onChange");break;case"option":c=$t(p,f);break;case"select":p._wrapperState={wasMultiple:!!f.multiple},c=o({},f,{value:void 0}),Ct("invalid",p),fr(m,"onChange");break;case"textarea":Gt(p,f),c=Yt(p,f),Ct("invalid",p),fr(m,"onChange");break;default:c=f}ur(d,c),u=void 0;var b=d,g=p,v=c;for(u in v)if(v.hasOwnProperty(u)){var x=v[u];"style"===u?sr(g,x):"dangerouslySetInnerHTML"===u?null!=(x=x?x.__html:void 0)&&rr(g,x):"children"===u?"string"==typeof x?("textarea"!==b||""!==x)&&or(g,x):"number"==typeof x&&or(g,""+x):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(y.hasOwnProperty(u)?null!=x&&fr(m,u):null!=x&&vn(g,u,x,h))}switch(d){case"input":He(p),_n(p,f,!1);break;case"textarea":He(p),Qt(p);break;case"option":null!=f.value&&p.setAttribute("value",""+yn(f.value));break;case"select":(c=p).multiple=!!f.multiple,null!=(p=f.value)?qt(c,!!f.multiple,p,!1):null!=f.defaultValue&&qt(c,!!f.multiple,f.defaultValue,!0);break;default:"function"==typeof c.onClick&&(p.onclick=pr)}(s=br(l,s))&&ma(n),n.stateNode=a}null!==n.ref&&(n.effectTag|=128)}else null===n.stateNode&&i("166");break;case 6:a&&null!=n.stateNode?va(a,n,a.memoizedProps,s):("string"!=typeof s&&(null===n.stateNode&&i("166")),a=Po(Co.current),Po(Eo.current),Zo(n)?(l=(s=n).stateNode,a=s.memoizedProps,l[R]=s,(s=l.nodeValue!==a)&&ma(n)):(l=n,(s=(9===a.nodeType?a:a.ownerDocument).createTextNode(s))[R]=n,l.stateNode=s));break;case 11:break;case 13:if(s=n.memoizedState,0!=(64&n.effectTag)){n.expirationTime=l,za=n;break e}s=null!==s,l=null!==a&&null!==a.memoizedState,null!==a&&!s&&l&&(null!==(a=a.child.sibling)&&(null!==(c=n.firstEffect)?(n.firstEffect=a,a.nextEffect=c):(n.firstEffect=n.lastEffect=a,a.nextEffect=null),a.effectTag=8)),(s!==l||0==(1&n.effectTag)&&s)&&(n.effectTag|=4);break;case 7:case 8:case 12:break;case 4:To(),ba(n);break;case 10:yo(n);break;case 9:case 14:break;case 17:jr(n.type)&&Mr();break;default:i("156")}za=null}if(n=e,1===Ia||1!==n.childExpirationTime){for(s=0,l=n.child;null!==l;)(a=l.expirationTime)>s&&(s=a),(c=l.childExpirationTime)>s&&(s=c),l=l.sibling;n.childExpirationTime=s}if(null!==za)return za;null!==t&&0==(1024&t.effectTag)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.effectTag&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(e=Ta(e)))return e.effectTag&=1023,e;null!==t&&(t.firstEffect=t.lastEffect=null,t.effectTag|=1024)}if(null!==r)return r;if(null===t)break;e=t}return null}function qa(e){var n=pa(e.alternate,e,Ia);return e.memoizedProps=e.pendingProps,null===n&&(n=$a(e)),Sa.current=null,n}function Ya(e,n){Ra&&i("243"),Va(),Ra=!0,Sa.currentDispatcher=Na;var t=e.nextExpirationTimeToWorkOn;t===Ia&&e===Aa&&null!==za||(Ka(),Ia=t,za=Kr((Aa=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(n)for(;null!==za&&!Ti();)za=qa(za);else for(;null!==za;)za=qa(za)}catch(n){if(go=bo=ho=null,null===za)r=!0,zi(n);else{null===za&&i("271");var o=za,a=o.return;if(null!==a){e:{var l=e,s=a,c=o,u=n;if(a=Ia,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var d=u;u=s;var f=-1,p=-1;do{if(13===u.tag){var m=u.alternate;if(null!==m&&null!==(m=m.memoizedState)){p=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=u.pendingProps.maxDuration)&&(0>=m?f=0:(-1===f||m<f)&&(f=m))}u=u.return}while(null!==u);u=s;do{if((m=13===u.tag)&&(m=void 0!==u.memoizedProps.fallback&&null===u.memoizedState),m){if(s=Qa.bind(null,l,u,c,0==(1&u.mode)?1073741823:a),d.then(s,s),0==(1&u.mode)){u.effectTag|=64,c.effectTag&=-1957,1===c.tag&&null===c.alternate&&(c.tag=17),c.expirationTime=a;break e}-1===f?l=1073741823:(-1===p&&(p=10*(1073741822-Jr(l,a))-5e3),l=p+f),0<=l&&Da<l&&(Da=l),u.effectTag|=2048,u.expirationTime=a;break e}u=u.return}while(null!==u);u=Error((sn(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+cn(c))}Ua=!0,u=po(u,c),l=s;do{switch(l.tag){case 3:c=u,l.effectTag|=2048,l.expirationTime=a,io(l,a=Pa(l,c,a));break e;case 1:if(c=u,s=l.type,d=l.stateNode,0==(64&l.effectTag)&&("function"==typeof s.getDerivedStateFromError||null!==d&&"function"==typeof d.componentDidCatch&&(null===Wa||!Wa.has(d)))){l.effectTag|=2048,l.expirationTime=a,io(l,a=Oa(l,c,a));break e}}l=l.return}while(null!==l)}za=$a(o);continue}r=!0,zi(n)}}break}if(Ra=!1,go=bo=ho=Sa.currentDispatcher=null,r)Aa=null,e.finishedWork=null;else if(null!==za)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&i("281"),Aa=null,Ua){if(o=e.latestPendingTime,a=e.latestSuspendedTime,l=e.latestPingedTime,0!==o&&o<t||0!==a&&a<t||0!==l&&l<t)return Qr(e,t),void Ei(e,r,t,e.expirationTime,-1);if(!e.didError&&n)return e.didError=!0,t=e.nextExpirationTimeToWorkOn=t,n=e.expirationTime=1073741823,void Ei(e,r,t,n,-1)}n&&-1!==Da?(Qr(e,t),(n=10*(1073741822-Jr(e,t)))<Da&&(Da=n),n=10*(1073741822-_i()),n=Da-n,Ei(e,r,t,e.expirationTime,0>n?0:n)):(e.pendingCommitExpirationTime=t,e.finishedWork=r)}}function Ga(e,n){for(var t=e.return;null!==t;){switch(t.tag){case 1:var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wa||!Wa.has(r)))return ao(t,e=Oa(t,e=po(n,e),1073741823)),void Za(t,1073741823);break;case 3:return ao(t,e=Pa(t,e=po(n,e),1073741823)),void Za(t,1073741823)}t=t.return}3===e.tag&&(ao(e,t=Pa(e,t=po(n,e),1073741823)),Za(e,1073741823))}function Xa(e,n){return 0!==Ma?e=Ma:Ra?e=Fa?1073741823:Ia:1&n.mode?(e=pi?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Aa&&e===Ia&&--e):e=1073741823,pi&&(0===si||e<si)&&(si=e),e}function Qa(e,n,t,r){var o=e.earliestSuspendedTime,a=e.latestSuspendedTime;if(0!==o&&r<=o&&r>=a){a=o=r,e.didError=!1;var i=e.latestPingedTime;(0===i||i>a)&&(e.latestPingedTime=a),Zr(a,e)}else Xr(e,o=Xa(o=_i(),n));0!=(1&n.mode)&&e===Aa&&Ia===r&&(Aa=null),Ja(n,o),0==(1&n.mode)&&(Ja(t,o),1===t.tag&&null!==t.stateNode&&((n=ro(o)).tag=2,ao(t,n))),0!==(t=e.expirationTime)&&Ci(e,t)}function Ja(e,n){e.expirationTime<n&&(e.expirationTime=n);var t=e.alternate;null!==t&&t.expirationTime<n&&(t.expirationTime=n);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(t=r.alternate,r.childExpirationTime<n&&(r.childExpirationTime=n),null!==t&&t.childExpirationTime<n&&(t.childExpirationTime=n),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Za(e,n){null!==(e=Ja(e,n))&&(!Ra&&0!==Ia&&n>Ia&&Ka(),Xr(e,n),Ra&&!Fa&&Aa===e||Ci(e,e.expirationTime),yi>vi&&(yi=0,i("185")))}function ei(e,n,t,r,o){var a=Ma;Ma=1073741823;try{return e(n,t,r,o)}finally{Ma=a}}var ni=null,ti=null,ri=0,oi=void 0,ai=!1,ii=null,li=0,si=0,ci=!1,ui=null,di=!1,fi=!1,pi=!1,mi=null,hi=a.unstable_now(),bi=1073741822-(hi/10|0),gi=bi,vi=50,yi=0,xi=null;function wi(){bi=1073741822-((a.unstable_now()-hi)/10|0)}function ki(e,n){if(0!==ri){if(n<ri)return;null!==oi&&a.unstable_cancelCallback(oi)}ri=n,e=a.unstable_now()-hi,oi=a.unstable_scheduleCallback(Ni,{timeout:10*(1073741822-n)-e})}function Ei(e,n,t,r,o){e.expirationTime=r,0!==o||Ti()?0<o&&(e.timeoutHandle=vr(function(e,n,t){e.pendingCommitExpirationTime=t,e.finishedWork=n,wi(),gi=bi,ji(e,t)}.bind(null,e,n,t),o)):(e.pendingCommitExpirationTime=t,e.finishedWork=n)}function _i(){return ai?gi:(Pi(),0!==li&&1!==li||(wi(),gi=bi),gi)}function Ci(e,n){null===e.nextScheduledRoot?(e.expirationTime=n,null===ti?(ni=ti=e,e.nextScheduledRoot=e):(ti=ti.nextScheduledRoot=e).nextScheduledRoot=ni):n>e.expirationTime&&(e.expirationTime=n),ai||(di?fi&&(ii=e,li=1073741823,Mi(e,1073741823,!1)):1073741823===n?Si(1073741823,!1):ki(e,n))}function Pi(){var e=0,n=null;if(null!==ti)for(var t=ti,r=ni;null!==r;){var o=r.expirationTime;if(0===o){if((null===t||null===ti)&&i("244"),r===r.nextScheduledRoot){ni=ti=r.nextScheduledRoot=null;break}if(r===ni)ni=o=r.nextScheduledRoot,ti.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ti){(ti=t).nextScheduledRoot=ni,r.nextScheduledRoot=null;break}t.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=t.nextScheduledRoot}else{if(o>e&&(e=o,n=r),r===ti)break;if(1073741823===e)break;t=r,r=r.nextScheduledRoot}}ii=n,li=e}var Oi=!1;function Ti(){return!!Oi||!!a.unstable_shouldYield()&&(Oi=!0)}function Ni(){try{if(!Ti()&&null!==ni){wi();var e=ni;do{var n=e.expirationTime;0!==n&&bi<=n&&(e.nextExpirationTimeToWorkOn=bi),e=e.nextScheduledRoot}while(e!==ni)}Si(0,!0)}finally{Oi=!1}}function Si(e,n){if(Pi(),n)for(wi(),gi=bi;null!==ii&&0!==li&&e<=li&&!(Oi&&bi>li);)Mi(ii,li,bi>li),Pi(),wi(),gi=bi;else for(;null!==ii&&0!==li&&e<=li;)Mi(ii,li,!1),Pi();if(n&&(ri=0,oi=null),0!==li&&ki(ii,li),yi=0,xi=null,null!==mi)for(e=mi,mi=null,n=0;n<e.length;n++){var t=e[n];try{t._onComplete()}catch(e){ci||(ci=!0,ui=e)}}if(ci)throw e=ui,ui=null,ci=!1,e}function ji(e,n){ai&&i("253"),ii=e,li=n,Mi(e,n,!1),Si(1073741823,!1)}function Mi(e,n,t){if(ai&&i("245"),ai=!0,t){var r=e.finishedWork;null!==r?Ri(e,r,n):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,yr(r)),Ya(e,t),null!==(r=e.finishedWork)&&(Ti()?e.finishedWork=r:Ri(e,r,n)))}else null!==(r=e.finishedWork)?Ri(e,r,n):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,yr(r)),Ya(e,t),null!==(r=e.finishedWork)&&Ri(e,r,n));ai=!1}function Ri(e,n,t){var r=e.firstBatch;if(null!==r&&r._expirationTime>=t&&(null===mi?mi=[r]:mi.push(r),r._defer))return e.finishedWork=n,void(e.expirationTime=0);e.finishedWork=null,e===xi?yi++:(xi=e,yi=0),Fa=Ra=!0,e.current===n&&i("177"),0===(t=e.pendingCommitExpirationTime)&&i("261"),e.pendingCommitExpirationTime=0,r=n.expirationTime;var o=n.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Xr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Xr(e,r)):r>o&&Xr(e,r)),Zr(0,e),Sa.current=null,1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,mr=_t,Dt(o=It())){if("selectionStart"in o)var a={start:o.selectionStart,end:o.selectionEnd};else e:{var l=(a=(a=o.ownerDocument)&&a.defaultView||window).getSelection&&a.getSelection();if(l&&0!==l.rangeCount){a=l.anchorNode;var s=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{a.nodeType,c.nodeType}catch(e){a=null;break e}var u=0,d=-1,f=-1,p=0,m=0,h=o,b=null;n:for(;;){for(var g;h!==a||0!==s&&3!==h.nodeType||(d=u+s),h!==c||0!==l&&3!==h.nodeType||(f=u+l),3===h.nodeType&&(u+=h.nodeValue.length),null!==(g=h.firstChild);)b=h,h=g;for(;;){if(h===o)break n;if(b===a&&++p===s&&(d=u),b===c&&++m===l&&(f=u),null!==(g=h.nextSibling))break;b=(h=b).parentNode}h=g}a=-1===d||-1===f?null:{start:d,end:f}}else a=null}a=a||{start:0,end:0}}else a=null;for(hr={focusedElem:o,selectionRange:a},_t=!1,La=r;null!==La;){o=!1,a=void 0;try{for(;null!==La;){if(256&La.effectTag)e:{var v=La.alternate;switch((s=La).tag){case 0:case 11:case 15:break e;case 1:if(256&s.effectTag&&null!==v){var y=v.memoizedProps,x=v.memoizedState,w=s.stateNode,k=w.getSnapshotBeforeUpdate(s.elementType===s.type?y:jo(s.type,y),x);w.__reactInternalSnapshotBeforeUpdate=k}break e;case 3:case 5:case 6:case 4:case 17:break e;default:i("163")}}La=La.nextEffect}}catch(e){o=!0,a=e}o&&(null===La&&i("178"),Ga(La,a),null!==La&&(La=La.nextEffect))}for(La=r;null!==La;){v=!1,y=void 0;try{for(;null!==La;){var E=La.effectTag;if(16&E&&or(La.stateNode,""),128&E){var _=La.alternate;if(null!==_){var C=_.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(14&E){case 2:Ea(La),La.effectTag&=-3;break;case 6:Ea(La),La.effectTag&=-3,Ca(La.alternate,La);break;case 4:Ca(La.alternate,La);break;case 8:_a(x=La),x.return=null,x.child=null,x.alternate&&(x.alternate.child=null,x.alternate.return=null)}La=La.nextEffect}}catch(e){v=!0,y=e}v&&(null===La&&i("178"),Ga(La,y),null!==La&&(La=La.nextEffect))}if(C=hr,_=It(),E=C.focusedElem,y=C.selectionRange,_!==E&&E&&E.ownerDocument&&function e(n,t){return!(!n||!t)&&(n===t||(!n||3!==n.nodeType)&&(t&&3===t.nodeType?e(n,t.parentNode):"contains"in n?n.contains(t):!!n.compareDocumentPosition&&!!(16&n.compareDocumentPosition(t))))}(E.ownerDocument.documentElement,E)){null!==y&&Dt(E)&&(_=y.start,void 0===(C=y.end)&&(C=_),"selectionStart"in E?(E.selectionStart=_,E.selectionEnd=Math.min(C,E.value.length)):(C=(_=E.ownerDocument||document)&&_.defaultView||window).getSelection&&(C=C.getSelection(),x=E.textContent.length,v=Math.min(y.start,x),y=void 0===y.end?v:Math.min(y.end,x),!C.extend&&v>y&&(x=y,y=v,v=x),x=At(E,v),w=At(E,y),x&&w&&(1!==C.rangeCount||C.anchorNode!==x.node||C.anchorOffset!==x.offset||C.focusNode!==w.node||C.focusOffset!==w.offset)&&((_=_.createRange()).setStart(x.node,x.offset),C.removeAllRanges(),v>y?(C.addRange(_),C.extend(w.node,w.offset)):(_.setEnd(w.node,w.offset),C.addRange(_))))),_=[];for(C=E;C=C.parentNode;)1===C.nodeType&&_.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<_.length;E++)(C=_[E]).element.scrollLeft=C.left,C.element.scrollTop=C.top}for(hr=null,_t=!!mr,mr=null,e.current=n,La=r;null!==La;){r=!1,E=void 0;try{for(_=t;null!==La;){var P=La.effectTag;if(36&P){var O=La.alternate;switch(v=_,(C=La).tag){case 0:case 11:case 15:break;case 1:var T=C.stateNode;if(4&C.effectTag)if(null===O)T.componentDidMount();else{var N=C.elementType===C.type?O.memoizedProps:jo(C.type,O.memoizedProps);T.componentDidUpdate(N,O.memoizedState,T.__reactInternalSnapshotBeforeUpdate)}var S=C.updateQueue;null!==S&&uo(0,S,T);break;case 3:var j=C.updateQueue;if(null!==j){if(y=null,null!==C.child)switch(C.child.tag){case 5:y=C.child.stateNode;break;case 1:y=C.child.stateNode}uo(0,j,y)}break;case 5:var M=C.stateNode;null===O&&4&C.effectTag&&br(C.type,C.memoizedProps)&&M.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:i("163")}}if(128&P){var R=La.ref;if(null!==R){var z=La.stateNode;switch(La.tag){case 5:var A=z;break;default:A=z}"function"==typeof R?R(A):R.current=A}}La=La.nextEffect}}catch(e){r=!0,E=e}r&&(null===La&&i("178"),Ga(La,E),null!==La&&(La=La.nextEffect))}Ra=Fa=!1,"function"==typeof Ur&&Ur(n.stateNode),P=n.expirationTime,0===(n=(n=n.childExpirationTime)>P?n:P)&&(Wa=null),e.expirationTime=n,e.finishedWork=null}function zi(e){null===ii&&i("246"),ii.expirationTime=0,ci||(ci=!0,ui=e)}function Ai(e,n){var t=di;di=!0;try{return e(n)}finally{(di=t)||ai||Si(1073741823,!1)}}function Ii(e,n){if(di&&!fi){fi=!0;try{return e(n)}finally{fi=!1}}return e(n)}function Di(e,n,t){if(pi)return e(n,t);di||ai||0===si||(Si(si,!1),si=0);var r=pi,o=di;di=pi=!0;try{return e(n,t)}finally{pi=r,(di=o)||ai||Si(1073741823,!1)}}function Ui(e,n,t,r,o){var a=n.current;e:if(t){n:{2===tt(t=t._reactInternalFiber)&&1===t.tag||i("170");var l=t;do{switch(l.tag){case 3:l=l.stateNode.context;break n;case 1:if(jr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break n}}l=l.return}while(null!==l);i("171"),l=void 0}if(1===t.tag){var s=t.type;if(jr(s)){t=Ar(t,s,l);break e}}t=l}else t=Pr;return null===n.context?n.context=t:n.pendingContext=t,n=o,(o=ro(r)).payload={element:e},null!==(n=void 0===n?null:n)&&(o.callback=n),Va(),ao(a,o),Za(a,r),r}function Li(e,n,t,r){var o=n.current;return Ui(e,n,t,o=Xa(_i(),o),r)}function Fi(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Bi(e){var n=1073741822-25*(1+((1073741822-_i()+500)/25|0));n>=ja&&(n=ja-1),this._expirationTime=ja=n,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Hi(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wi(e,n,t){e={current:n=Hr(3,null,null,n?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:t,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=n.stateNode=e}function Ki(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Vi(e,n,t,r,o){Ki(t)||i("200");var a=t._reactRootContainer;if(a){if("function"==typeof o){var l=o;o=function(){var e=Fi(a._internalRoot);l.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,n,o):a.render(n,o)}else{if(a=t._reactRootContainer=function(e,n){if(n||(n=!(!(n=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==n.nodeType||!n.hasAttribute("data-reactroot"))),!n)for(var t;t=e.lastChild;)e.removeChild(t);return new Wi(e,!1,n)}(t,r),"function"==typeof o){var s=o;o=function(){var e=Fi(a._internalRoot);s.call(e)}}Ii(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,n,o):a.render(n,o)})}return Fi(a._internalRoot)}function $i(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ki(n)||i("200"),function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)}Pe=function(e,n,t){switch(n){case"input":if(En(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=U(r);o||i("90"),We(r),En(r,o)}}}break;case"textarea":Xt(e,t);break;case"select":null!=(n=t.value)&&qt(e,!!t.multiple,n,!1)}},Bi.prototype.render=function(e){this._defer||i("250"),this._hasChildren=!0,this._children=e;var n=this._root._internalRoot,t=this._expirationTime,r=new Hi;return Ui(e,n,null,t,r._onCommit),r},Bi.prototype.then=function(e){if(this._didComplete)e();else{var n=this._callbacks;null===n&&(n=this._callbacks=[]),n.push(e)}},Bi.prototype.commit=function(){var e=this._root._internalRoot,n=e.firstBatch;if(this._defer&&null!==n||i("251"),this._hasChildren){var t=this._expirationTime;if(n!==this){this._hasChildren&&(t=this._expirationTime=n._expirationTime,this.render(this._children));for(var r=null,o=n;o!==this;)r=o,o=o._next;null===r&&i("251"),r._next=o._next,this._next=n,e.firstBatch=this}this._defer=!1,ji(e,t),n=this._next,this._next=null,null!==(n=e.firstBatch=n)&&n._hasChildren&&n.render(n._children)}else this._next=null,this._defer=!1},Bi.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var n=0;n<e.length;n++)(0,e[n])()}},Hi.prototype.then=function(e){if(this._didCommit)e();else{var n=this._callbacks;null===n&&(n=this._callbacks=[]),n.push(e)}},Hi.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var n=0;n<e.length;n++){var t=e[n];"function"!=typeof t&&i("191",t),t()}}},Wi.prototype.render=function(e,n){var t=this._internalRoot,r=new Hi;return null!==(n=void 0===n?null:n)&&r.then(n),Li(e,t,null,r._onCommit),r},Wi.prototype.unmount=function(e){var n=this._internalRoot,t=new Hi;return null!==(e=void 0===e?null:e)&&t.then(e),Li(null,n,null,t._onCommit),t},Wi.prototype.legacy_renderSubtreeIntoContainer=function(e,n,t){var r=this._internalRoot,o=new Hi;return null!==(t=void 0===t?null:t)&&o.then(t),Li(n,r,e,o._onCommit),o},Wi.prototype.createBatch=function(){var e=new Bi(this),n=e._expirationTime,t=this._internalRoot,r=t.firstBatch;if(null===r)t.firstBatch=e,e._next=null;else{for(t=null;null!==r&&r._expirationTime>=n;)t=r,r=r._next;e._next=r,null!==t&&(t._next=e)}return e},Me=Ai,Re=Di,ze=function(){ai||0===si||(Si(si,!1),si=0)};var qi={createPortal:$i,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternalFiber;return void 0===n&&("function"==typeof e.render?i("188"):i("268",Object.keys(e))),e=null===(e=ot(n))?null:e.stateNode},hydrate:function(e,n,t){return Vi(null,e,n,!0,t)},render:function(e,n,t){return Vi(null,e,n,!1,t)},unstable_renderSubtreeIntoContainer:function(e,n,t,r){return(null==e||void 0===e._reactInternalFiber)&&i("38"),Vi(e,n,t,!1,r)},unmountComponentAtNode:function(e){return Ki(e)||i("40"),!!e._reactRootContainer&&(Ii(function(){Vi(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return $i.apply(void 0,arguments)},unstable_batchedUpdates:Ai,unstable_interactiveUpdates:Di,flushSync:function(e,n){ai&&i("187");var t=di;di=!0;try{return ei(e,n)}finally{di=t,Si(1073741823,!1)}},unstable_flushControlled:function(e){var n=di;di=!0;try{ei(e)}finally{(di=n)||ai||Si(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,D,U,N.injectEventPluginsByName,v,K,function(e){P(e,W)},Se,je,Tt,j]},unstable_createRoot:function(e,n){return Ki(e)||i("299","unstable_createRoot"),new Wi(e,!0,null!=n&&!0===n.hydrate)}};!function(e){var n=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var n=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(n.isDisabled||!n.supportsFiber)return!0;try{var t=n.inject(e);Ur=Fr(function(e){return n.onCommitFiberRoot(t,e)}),Lr=Fr(function(e){return n.onCommitFiberUnmount(t,e)})}catch(e){}})(o({},e,{findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return n?n(e):null}}))}({findFiberByHostInstance:A,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});var Yi={default:qi},Gi=Yi&&qi||Yi;e.exports=Gi.default||Gi},function(e,n,t){"use strict";e.exports=t(133)},function(e,n,t){"use strict";
/** @license React v16.6.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(n,"__esModule",{value:!0});var r=null,o=!1,a=3,i=-1,l=-1,s=!1,c=!1;function u(){if(!s){var e=r.expirationTime;c?g():c=!0,b(p,e)}}function d(){var e=r,n=r.next;if(r===n)r=null;else{var t=r.previous;r=t.next=n,n.previous=t}e.next=e.previous=null,t=e.callback,n=e.expirationTime,e=e.priorityLevel;var o=a,i=l;a=e,l=n;try{var s=t()}finally{a=o,l=i}if("function"==typeof s)if(s={callback:s,priorityLevel:e,expirationTime:n,next:null,previous:null},null===r)r=s.next=s.previous=s;else{t=null,e=r;do{if(e.expirationTime>=n){t=e;break}e=e.next}while(e!==r);null===t?t=r:t===r&&(r=s,u()),(n=t.previous).next=t.previous=s,s.next=t,s.previous=n}}function f(){if(-1===i&&null!==r&&1===r.priorityLevel){s=!0;try{do{d()}while(null!==r&&1===r.priorityLevel)}finally{s=!1,null!==r?u():c=!1}}}function p(e){s=!0;var t=o;o=e;try{if(e)for(;null!==r;){var a=n.unstable_now();if(!(r.expirationTime<=a))break;do{d()}while(null!==r&&r.expirationTime<=a)}else if(null!==r)do{d()}while(null!==r&&!v())}finally{s=!1,o=t,null!==r?u():c=!1,f()}}var m,h,b,g,v,y=Date,x="function"==typeof setTimeout?setTimeout:void 0,w="function"==typeof clearTimeout?clearTimeout:void 0,k="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,E="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){m=k(function(n){w(h),e(n)}),h=x(function(){E(m),e(n.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var C=performance;n.unstable_now=function(){return C.now()}}else n.unstable_now=function(){return y.now()};if("undefined"!=typeof window&&window._schedMock){var P=window._schedMock;b=P[0],g=P[1],v=P[2]}else if("undefined"==typeof window||"function"!=typeof window.addEventListener){var O=null,T=-1,N=function(e,n){if(null!==O){var t=O;O=null;try{T=n,t(e)}finally{T=-1}}};b=function(e,n){-1!==T?setTimeout(b,0,e,n):(O=e,setTimeout(N,n,!0,n),setTimeout(N,1073741823,!1,1073741823))},g=function(){O=null},v=function(){return!1},n.unstable_now=function(){return-1===T?0:T}}else{"undefined"!=typeof console&&("function"!=typeof k&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof E&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var S=null,j=!1,M=-1,R=!1,z=!1,A=0,I=33,D=33;v=function(){return A<=n.unstable_now()};var U="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===U){j=!1,e=S;var t=M;S=null,M=-1;var r=n.unstable_now(),o=!1;if(0>=A-r){if(!(-1!==t&&t<=r))return R||(R=!0,_(L)),S=e,void(M=t);o=!0}if(null!==e){z=!0;try{e(o)}finally{z=!1}}}},!1);var L=function(e){if(null!==S){_(L);var n=e-A+D;n<D&&I<D?(8>n&&(n=8),D=n<I?I:n):I=n,A=e+D,j||(j=!0,window.postMessage(U,"*"))}else R=!1};b=function(e,n){S=e,M=n,z||0>n?window.postMessage(U,"*"):R||(R=!0,_(L))},g=function(){S=null,j=!1,M=-1}}n.unstable_ImmediatePriority=1,n.unstable_UserBlockingPriority=2,n.unstable_NormalPriority=3,n.unstable_IdlePriority=5,n.unstable_LowPriority=4,n.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=a,o=i;a=e,i=n.unstable_now();try{return t()}finally{a=r,i=o,f()}},n.unstable_scheduleCallback=function(e,t){var o=-1!==i?i:n.unstable_now();if("object"==typeof t&&null!==t&&"number"==typeof t.timeout)t=o+t.timeout;else switch(a){case 1:t=o+-1;break;case 2:t=o+250;break;case 5:t=o+1073741823;break;case 4:t=o+1e4;break;default:t=o+5e3}if(e={callback:e,priorityLevel:a,expirationTime:t,next:null,previous:null},null===r)r=e.next=e.previous=e,u();else{o=null;var l=r;do{if(l.expirationTime>t){o=l;break}l=l.next}while(l!==r);null===o?o=r:o===r&&(r=e,u()),(t=o.previous).next=o.previous=e,e.next=o,e.previous=t}return e},n.unstable_cancelCallback=function(e){var n=e.next;if(null!==n){if(n===e)r=null;else{e===r&&(r=n);var t=e.previous;t.next=n,n.previous=t}e.next=e.previous=null}},n.unstable_wrapCallback=function(e){var t=a;return function(){var r=a,o=i;a=t,i=n.unstable_now();try{return e.apply(this,arguments)}finally{a=r,i=o,f()}}},n.unstable_getCurrentPriorityLevel=function(){return a},n.unstable_shouldYield=function(){return!o&&(null!==r&&r.expirationTime<l||v())}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=s(t(0)),o=t(35),a=t(39),i=t(55),l=s(t(139));function s(e){return e&&e.__esModule?e:{default:e}}n.default=function(){return r.default.createElement(o.HashRouter,null,r.default.createElement(a.AuthenticationProvider,null,r.default.createElement(i.ThemeProvider,null,r.default.createElement(l.default,null))))}},function(e,n,t){"use strict";var r=t(136);function o(){}e.exports=function(){function e(e,n,t,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n};return t.checkPropTypes=o,t.PropTypes=t,t}},function(e,n,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,n){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,n){var t,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(t===setTimeout)return setTimeout(e,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(e){t=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],u=!1,d=-1;function f(){u&&s&&(u=!1,s.length?c=s.concat(c):d=-1,c.length&&p())}function p(){if(!u){var e=l(f);u=!0;for(var n=c.length;n;){for(s=c,c=[];++d<n;)s&&s[d].run();d=-1,n=c.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function m(e,n){this.fun=e,this.array=n}function h(){}o.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];c.push(new m(e,n)),1!==c.length||u||l(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Layout=void 0;var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=t(0),a=u(o),i=t(19),l=u(t(201)),s=u(t(214)),c=u(t(259));function u(e){return e&&e.__esModule?e:{default:e}}var d=n.Layout=function(e){function n(){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.Component),r(n,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement(a.default.Fragment,null,a.default.createElement(l.default,null),a.default.createElement(i.Container,null,a.default.createElement(i.Row,null,a.default.createElement(i.Col,{xs:2}),a.default.createElement(i.Col,{xs:8},a.default.createElement(s.default,null)),a.default.createElement(i.Col,{xs:2}))),a.default.createElement(c.default,null)))}}]),n}();n.default=d},function(e,n,t){"use strict";n.__esModule=!0,n.uncontrolledPropTypes=function(e,n){var t={};return Object.keys(e).forEach(function(e){t[a(e)]=o}),t},n.isProp=function(e,n){return void 0!==e[n]},n.defaultKey=a,n.canAcceptRef=function(e){return!!e&&("function"!=typeof e||e.prototype&&e.prototype.isReactComponent)};var r;(r=t(5))&&r.__esModule;var o=function(){};function a(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}},function(e,n,t){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(n){var t=this.constructor.getDerivedStateFromProps(e,n);return null!=t?t:null}.bind(this))}function a(e,n){try{var t=this.props,r=this.state;this.props=e,this.state=n,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(t,r)}finally{this.props=t,this.state=r}}function i(e){var n=e.prototype;if(!n||!n.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof n.getSnapshotBeforeUpdate)return e;var t=null,i=null,l=null;if("function"==typeof n.componentWillMount?t="componentWillMount":"function"==typeof n.UNSAFE_componentWillMount&&(t="UNSAFE_componentWillMount"),"function"==typeof n.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof n.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof n.componentWillUpdate?l="componentWillUpdate":"function"==typeof n.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==t||null!==i||null!==l){var s=e.displayName||e.name,c="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+c+" but also contains the following legacy lifecycles:"+(null!==t?"\n  "+t:"")+(null!==i?"\n  "+i:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(n.componentWillMount=r,n.componentWillReceiveProps=o),"function"==typeof n.getSnapshotBeforeUpdate){if("function"!=typeof n.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");n.componentWillUpdate=a;var u=n.componentDidUpdate;n.componentDidUpdate=function(e,n,t){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:t;u.call(this,e,n,r)}}return e}t.r(n),t.d(n,"polyfill",function(){return i}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,n,t){"use strict";n.__esModule=!0,n.transitionTimeout=function(e){var n="transition"+e+"Timeout",t="transition"+e;return function(e){if(e[t]){if(null==e[n])return new Error(n+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[n])return new Error(n+" must be a number (in milliseconds)")}return null}},n.classNamesShape=n.timeoutsShape=void 0;var r,o=(r=t(2))&&r.__esModule?r:{default:r};var a=o.default.oneOfType([o.default.number,o.default.shape({enter:o.default.number,exit:o.default.number}).isRequired]);n.timeoutsShape=a;var i=o.default.oneOfType([o.default.string,o.default.shape({enter:o.default.string,exit:o.default.string,active:o.default.string}),o.default.shape({enter:o.default.string,enterDone:o.default.string,enterActive:o.default.string,exit:o.default.string,exitDone:o.default.string,exitActive:o.default.string})]);n.classNamesShape=i},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e){return(0,o.default)(e).replace(a,"-ms-")};var o=r(t(144)),a=/^ms-/;e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return e.replace(r,"-$1").toLowerCase()};var r=/([A-Z])/g;e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var n=e.ownerDocument;return"defaultView"in n?n.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(n){var t=e.style;"float"==(n=(0,o.default)(n))&&(n="styleFloat");var r=e.currentStyle[n]||null;if(null==r&&t&&t[n]&&(r=t[n]),i.test(r)&&!a.test(n)){var l=t.left,s=e.runtimeStyle,c=s&&s.left;c&&(s.left=e.currentStyle.left),t.left="fontSize"===n?"1em":r,r=t.pixelLeft+"px",t.left=l,c&&(s.left=c)}return r}}};var o=r(t(87)),a=/^(top|right|bottom|left)$/,i=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e,n){return"removeProperty"in e.style?e.style.removeProperty(n):e.style.removeAttribute(n)},e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return!(!e||!r.test(e))};var r=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e,n){if(!o&&a.default){var t=document.body,r=t.matches||t.matchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector;o=r?function(e,n){return r.call(e,n)}:l}return o?o(e,n):null};var o,a=r(t(17)),i=r(t(15));function l(e,n){for(var t=(0,i.default)(e.document||e.ownerDocument,n),r=0;t[r]&&t[r]!==e;)r++;return!!t[r]}e.exports=n.default},function(e,n,t){e.exports={default:t(150),__esModule:!0}},function(e,n,t){t(151),e.exports=t(24).Object.assign},function(e,n,t){var r=t(40);r(r.S+r.F,"Object",{assign:t(153)})},function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,n,t){"use strict";var r=t(46),o=t(63),a=t(49),i=t(94),l=t(92),s=Object.assign;e.exports=!s||t(42)(function(){var e={},n={},t=Symbol(),r="abcdefghijklmnopqrst";return e[t]=7,r.split("").forEach(function(e){n[e]=e}),7!=s({},e)[t]||Object.keys(s({},n)).join("")!=r})?function(e,n){for(var t=i(e),s=arguments.length,c=1,u=o.f,d=a.f;s>c;)for(var f,p=l(arguments[c++]),m=u?r(p).concat(u(p)):r(p),h=m.length,b=0;h>b;)d.call(p,f=m[b++])&&(t[f]=p[f]);return t}:s},function(e,n,t){var r=t(32),o=t(155),a=t(156);e.exports=function(e){return function(n,t,i){var l,s=r(n),c=o(s.length),u=a(i,c);if(e&&t!=t){for(;c>u;)if((l=s[u++])!=l)return!0}else for(;c>u;u++)if((e||u in s)&&s[u]===t)return e||u||0;return!e&&-1}}},function(e,n,t){var r=t(59),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,n,t){var r=t(59),o=Math.max,a=Math.min;e.exports=function(e,n){return(e=r(e))<0?o(e+n,0):a(e,n)}},function(e,n,t){e.exports={default:t(158),__esModule:!0}},function(e,n,t){t(159),t(165),e.exports=t(67).f("iterator")},function(e,n,t){"use strict";var r=t(160)(!0);t(96)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,n=this._t,t=this._i;return t>=n.length?{value:void 0,done:!0}:(e=r(n,t),this._i+=e.length,{value:e,done:!1})})},function(e,n,t){var r=t(59),o=t(58);e.exports=function(e){return function(n,t){var a,i,l=String(o(n)),s=r(t),c=l.length;return s<0||s>=c?e?"":void 0:(a=l.charCodeAt(s))<55296||a>56319||s+1===c||(i=l.charCodeAt(s+1))<56320||i>57343?e?l.charAt(s):a:e?l.slice(s,s+2):i-56320+(a-55296<<10)+65536}}},function(e,n,t){"use strict";var r=t(65),o=t(45),a=t(66),i={};t(28)(i,t(33)("iterator"),function(){return this}),e.exports=function(e,n,t){e.prototype=r(i,{next:o(1,t)}),a(e,n+" Iterator")}},function(e,n,t){var r=t(29),o=t(41),a=t(46);e.exports=t(31)?Object.defineProperties:function(e,n){o(e);for(var t,i=a(n),l=i.length,s=0;l>s;)r.f(e,t=i[s++],n[t]);return e}},function(e,n,t){var r=t(23).document;e.exports=r&&r.documentElement},function(e,n,t){var r=t(25),o=t(94),a=t(60)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,n,t){t(166);for(var r=t(23),o=t(28),a=t(64),i=t(33)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),s=0;s<l.length;s++){var c=l[s],u=r[c],d=u&&u.prototype;d&&!d[i]&&o(d,i,c),a[c]=a.Array}},function(e,n,t){"use strict";var r=t(167),o=t(168),a=t(64),i=t(32);e.exports=t(96)(Array,"Array",function(e,n){this._t=i(e),this._i=0,this._k=n},function(){var e=this._t,n=this._k,t=this._i++;return!e||t>=e.length?(this._t=void 0,o(1)):o(0,"keys"==n?t:"values"==n?e[t]:[t,e[t]])},"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(e,n){e.exports=function(){}},function(e,n){e.exports=function(e,n){return{value:n,done:!!e}}},function(e,n,t){e.exports={default:t(170),__esModule:!0}},function(e,n,t){t(171),t(176),t(177),t(178),e.exports=t(24).Symbol},function(e,n,t){"use strict";var r=t(23),o=t(25),a=t(31),i=t(40),l=t(97),s=t(172).KEY,c=t(42),u=t(61),d=t(66),f=t(48),p=t(33),m=t(67),h=t(68),b=t(173),g=t(174),v=t(41),y=t(30),x=t(32),w=t(57),k=t(45),E=t(65),_=t(175),C=t(99),P=t(29),O=t(46),T=C.f,N=P.f,S=_.f,j=r.Symbol,M=r.JSON,R=M&&M.stringify,z=p("_hidden"),A=p("toPrimitive"),I={}.propertyIsEnumerable,D=u("symbol-registry"),U=u("symbols"),L=u("op-symbols"),F=Object.prototype,B="function"==typeof j,H=r.QObject,W=!H||!H.prototype||!H.prototype.findChild,K=a&&c(function(){return 7!=E(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(e,n,t){var r=T(F,n);r&&delete F[n],N(e,n,t),r&&e!==F&&N(F,n,r)}:N,V=function(e){var n=U[e]=E(j.prototype);return n._k=e,n},$=B&&"symbol"==typeof j.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof j},q=function(e,n,t){return e===F&&q(L,n,t),v(e),n=w(n,!0),v(t),o(U,n)?(t.enumerable?(o(e,z)&&e[z][n]&&(e[z][n]=!1),t=E(t,{enumerable:k(0,!1)})):(o(e,z)||N(e,z,k(1,{})),e[z][n]=!0),K(e,n,t)):N(e,n,t)},Y=function(e,n){v(e);for(var t,r=b(n=x(n)),o=0,a=r.length;a>o;)q(e,t=r[o++],n[t]);return e},G=function(e){var n=I.call(this,e=w(e,!0));return!(this===F&&o(U,e)&&!o(L,e))&&(!(n||!o(this,e)||!o(U,e)||o(this,z)&&this[z][e])||n)},X=function(e,n){if(e=x(e),n=w(n,!0),e!==F||!o(U,n)||o(L,n)){var t=T(e,n);return!t||!o(U,n)||o(e,z)&&e[z][n]||(t.enumerable=!0),t}},Q=function(e){for(var n,t=S(x(e)),r=[],a=0;t.length>a;)o(U,n=t[a++])||n==z||n==s||r.push(n);return r},J=function(e){for(var n,t=e===F,r=S(t?L:x(e)),a=[],i=0;r.length>i;)!o(U,n=r[i++])||t&&!o(F,n)||a.push(U[n]);return a};B||(l((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),n=function(t){this===F&&n.call(L,t),o(this,z)&&o(this[z],e)&&(this[z][e]=!1),K(this,e,k(1,t))};return a&&W&&K(F,e,{configurable:!0,set:n}),V(e)}).prototype,"toString",function(){return this._k}),C.f=X,P.f=q,t(98).f=_.f=Q,t(49).f=G,t(63).f=J,a&&!t(47)&&l(F,"propertyIsEnumerable",G,!0),m.f=function(e){return V(p(e))}),i(i.G+i.W+i.F*!B,{Symbol:j});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var ne=O(p.store),te=0;ne.length>te;)h(ne[te++]);i(i.S+i.F*!B,"Symbol",{for:function(e){return o(D,e+="")?D[e]:D[e]=j(e)},keyFor:function(e){if(!$(e))throw TypeError(e+" is not a symbol!");for(var n in D)if(D[n]===e)return n},useSetter:function(){W=!0},useSimple:function(){W=!1}}),i(i.S+i.F*!B,"Object",{create:function(e,n){return void 0===n?E(e):Y(E(e),n)},defineProperty:q,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:Q,getOwnPropertySymbols:J}),M&&i(i.S+i.F*(!B||c(function(){var e=j();return"[null]"!=R([e])||"{}"!=R({a:e})||"{}"!=R(Object(e))})),"JSON",{stringify:function(e){for(var n,t,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(t=n=r[1],(y(n)||void 0!==e)&&!$(e))return g(n)||(n=function(e,n){if("function"==typeof t&&(n=t.call(this,e,n)),!$(n))return n}),r[1]=n,R.apply(M,r)}}),j.prototype[A]||t(28)(j.prototype,A,j.prototype.valueOf),d(j,"Symbol"),d(Math,"Math",!0),d(r.JSON,"JSON",!0)},function(e,n,t){var r=t(48)("meta"),o=t(30),a=t(25),i=t(29).f,l=0,s=Object.isExtensible||function(){return!0},c=!t(42)(function(){return s(Object.preventExtensions({}))}),u=function(e){i(e,r,{value:{i:"O"+ ++l,w:{}}})},d=e.exports={KEY:r,NEED:!1,fastKey:function(e,n){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,r)){if(!s(e))return"F";if(!n)return"E";u(e)}return e[r].i},getWeak:function(e,n){if(!a(e,r)){if(!s(e))return!0;if(!n)return!1;u(e)}return e[r].w},onFreeze:function(e){return c&&d.NEED&&s(e)&&!a(e,r)&&u(e),e}}},function(e,n,t){var r=t(46),o=t(63),a=t(49);e.exports=function(e){var n=r(e),t=o.f;if(t)for(var i,l=t(e),s=a.f,c=0;l.length>c;)s.call(e,i=l[c++])&&n.push(i);return n}},function(e,n,t){var r=t(93);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,n,t){var r=t(32),o=t(98).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(r(e))}},function(e,n){},function(e,n,t){t(68)("asyncIterator")},function(e,n,t){t(68)("observable")},function(e,n,t){e.exports={default:t(180),__esModule:!0}},function(e,n,t){t(181),e.exports=t(24).Object.setPrototypeOf},function(e,n,t){var r=t(40);r(r.S,"Object",{setPrototypeOf:t(182).set})},function(e,n,t){var r=t(30),o=t(41),a=function(e,n){if(o(e),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,n,r){try{(r=t(88)(Function.call,t(99).f(Object.prototype,"__proto__").set,2))(e,[]),n=!(e instanceof Array)}catch(e){n=!0}return function(e,t){return a(e,t),n?e.__proto__=t:r(e,t),e}}({},!1):void 0),check:a}},function(e,n,t){e.exports={default:t(184),__esModule:!0}},function(e,n,t){t(185);var r=t(24).Object;e.exports=function(e,n){return r.create(e,n)}},function(e,n,t){var r=t(40);r(r.S,"Object",{create:t(65)})},function(e,n,t){"use strict";n.__esModule=!0;var r=t(0),o=(i(r),i(t(2))),a=i(t(187));i(t(188));function i(e){return e&&e.__esModule?e:{default:e}}function l(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function s(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function c(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}var u=1073741823;n.default=function(e,n){var t,i,d="__create-react-context-"+(0,a.default)()+"__",f=function(e){function t(){var n,r,o,a;l(this,t);for(var i=arguments.length,c=Array(i),u=0;u<i;u++)c[u]=arguments[u];return n=r=s(this,e.call.apply(e,[this].concat(c))),r.emitter=(o=r.props.value,a=[],{on:function(e){a.push(e)},off:function(e){a=a.filter(function(n){return n!==e})},get:function(){return o},set:function(e,n){o=e,a.forEach(function(e){return e(o,n)})}}),s(r,n)}return c(t,e),t.prototype.getChildContext=function(){var e;return(e={})[d]=this.emitter,e},t.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t=this.props.value,r=e.value,o=void 0;((a=t)===(i=r)?0!==a||1/a==1/i:a!=a&&i!=i)?o=0:(o="function"==typeof n?n(t,r):u,0!=(o|=0)&&this.emitter.set(e.value,o))}var a,i},t.prototype.render=function(){return this.props.children},t}(r.Component);f.childContextTypes=((t={})[d]=o.default.object.isRequired,t);var p=function(n){function t(){var e,r;l(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return e=r=s(this,n.call.apply(n,[this].concat(a))),r.state={value:r.getValue()},r.onUpdate=function(e,n){0!=((0|r.observedBits)&n)&&r.setState({value:r.getValue()})},s(r,e)}return c(t,n),t.prototype.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=null==n?u:n},t.prototype.componentDidMount=function(){this.context[d]&&this.context[d].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?u:e},t.prototype.componentWillUnmount=function(){this.context[d]&&this.context[d].off(this.onUpdate)},t.prototype.getValue=function(){return this.context[d]?this.context[d].get():e},t.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(r.Component);return p.contextTypes=((i={})[d]=o.default.object,i),{Provider:f,Consumer:p}},e.exports=n.default},function(e,n,t){"use strict";(function(n){var t="__global_unique_id__";e.exports=function(){return n[t]=(n[t]||0)+1}}).call(this,t(69))},function(e,n,t){"use strict";var r=t(189);e.exports=r},function(e,n,t){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e,n){return function(t){var r=t.currentTarget,i=t.target,l=(0,a.default)(r,e);l.some(function(e){return(0,o.default)(e,i)})&&n.call(this,t)}};var o=r(t(43)),a=r(t(15));e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e){void 0===e&&(e=(0,o.default)());try{return e.activeElement}catch(e){}};var o=r(t(37));e.exports=n.default},function(e,n,t){"use strict";e.exports=t(193)},function(e,n,t){"use strict";
/** @license React v16.6.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(n,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,b=r?Symbol.for("react.lazy"):60116;function g(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case o:switch(e=e.type){case d:case f:case i:case s:case l:return e;default:switch(e=e&&e.$$typeof){case u:case p:case c:return e;default:return n}}case a:return n}}}function v(e){return g(e)===f}n.typeOf=g,n.AsyncMode=d,n.ConcurrentMode=f,n.ContextConsumer=u,n.ContextProvider=c,n.Element=o,n.ForwardRef=p,n.Fragment=i,n.Profiler=s,n.Portal=a,n.StrictMode=l,n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===s||e===l||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===h||e.$$typeof===c||e.$$typeof===u||e.$$typeof===p)},n.isAsyncMode=function(e){return v(e)||g(e)===d},n.isConcurrentMode=v,n.isContextConsumer=function(e){return g(e)===u},n.isContextProvider=function(e){return g(e)===c},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},n.isForwardRef=function(e){return g(e)===p},n.isFragment=function(e){return g(e)===i},n.isProfiler=function(e){return g(e)===s},n.isPortal=function(e){return g(e)===a},n.isStrictMode=function(e){return g(e)===l}},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(195));n.addClass=o.default;var a=r(t(196));n.removeClass=a.default;var i=r(t(105));n.hasClass=i.default;var l={addClass:o.default,removeClass:a.default,hasClass:i.default};n.default=l},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e,n){e.classList?e.classList.add(n):(0,o.default)(e,n)||("string"==typeof e.className?e.className=e.className+" "+n:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+n))};var o=r(t(105));e.exports=n.default},function(e,n,t){"use strict";function r(e,n){return e.replace(new RegExp("(^|\\s)"+n+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,n){e.classList?e.classList.remove(n):"string"==typeof e.className?e.className=r(e.className,n):e.setAttribute("class",r(e.className&&e.className.baseVal||"",n))}},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return(0,r.default)(e)||(n=e,n&&"body"===n.tagName.toLowerCase())?function(e){var n=(0,o.default)(e),t=(0,r.default)(n);return n.body.clientWidth<t.innerWidth}(e):e.scrollHeight>e.clientHeight;var n};var r=a(t(198)),o=a(t(37));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=n.default},function(e,n,t){"use strict";n.__esModule=!0,n.ariaHidden=a,n.hideSiblings=function(e,n){var t=n.root,r=n.backdrop;o(e,[t,r],function(e){return a(!0,e)})},n.showSiblings=function(e,n){var t=n.root,r=n.backdrop;o(e,[t,r],function(e){return a(!1,e)})};var r=["template","script","style"],o=function(e,n,t){n=[].concat(n),[].forEach.call(e.children,function(e){var o,a,i;-1===n.indexOf(e)&&(a=(o=e).nodeType,i=o.tagName,1===a&&-1===r.indexOf(i.toLowerCase()))&&t(e)})};function a(e,n){n&&(e?n.setAttribute("aria-hidden","true"):n.removeAttribute("aria-hidden"))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return(0,a.default)(function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=null;return n.forEach(function(e){if(null==o){var n=e.apply(void 0,t);null!=n&&(o=n)}}),o})};var r,o=t(73),a=(r=o)&&r.__esModule?r:{default:r};e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=c(t(0)),o=t(19),a=t(35),i=t(39),l=t(55),s=c(t(202));function c(e){return e&&e.__esModule?e:{default:e}}n.default=(0,l.withTheme)((0,i.withAuthentication)(function(e){var n=e.logout,t=e.theme;return r.default.createElement(o.Navbar,{bg:t,variant:t},r.default.createElement(o.Navbar.Brand,{as:a.Link,to:"/"},"Navbar"),r.default.createElement(o.Nav,{className:"mr-auto"},r.default.createElement(o.Nav.Link,{as:a.Link,to:"/"},"Hello"),r.default.createElement(o.Nav.Link,{as:a.Link,to:"/todo"},"Todo"),r.default.createElement(o.Nav.Link,{as:a.Link,to:"/messages"},"Messages"),r.default.createElement(o.Nav.Link,{as:a.Link,to:"/login"},"Login")),r.default.createElement(s.default,null),r.default.createElement(o.Button,{variant:"outline-warning",onClick:n},"Logout"))}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=l(t(0)),o=l(t(109)),a=l(t(110)),i=l(t(112));function l(e){return e&&e.__esModule?e:{default:e}}var s=(0,t(35).withRouter)(function(e){var n=e.history,t=null;return r.default.createElement(o.default,{inline:!0,onSubmit:function(){var e="/hello/"+t.value;n.push(e)}},r.default.createElement(a.default,{type:"text",placeholder:"Search",className:"mr-sm-2",ref:function(e){t=e}}),r.default.createElement(i.default,{variant:"outline-info"},"Search"))});n.default=s},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=function(e,n){var t,r,c=void 0===n?{}:n,f=c.displayName,p=void 0===f?d(e):f,m=c.Component,h=void 0===m?"div":m,b=c.defaultProps;return(0,u.createBootstrapComponent)((r=t=function(e){function n(){return e.apply(this,arguments)||this}(0,i.default)(n,e);var t=n.prototype;return t.render=function(){var e=this.props,n=e.className,t=e.bsPrefix,r=e.as,i=void 0===r?h:r,c=(0,a.default)(e,["className","bsPrefix","as"]);return s.default.createElement(i,(0,o.default)({},b,c,{className:(0,l.default)(n,t)}))},n}(s.default.Component),t.displayName=p,r),e)};var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=r(t(51)),u=t(14),d=function(e){return e[0].toUpperCase()+(0,c.default)(e).slice(1)};e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(1)),l=r(t(0)),s=r(t(34)),c=t(14);function u(e){var n=e.bsPrefix,t=e.innerRef,r=e.className,c=e.children,u=e.controlId,d=e.as,f=(0,a.default)(e,["bsPrefix","innerRef","className","children","controlId","as"]);return l.default.createElement(s.default.Provider,{value:{controlId:u}},l.default.createElement(d,(0,o.default)({},f,{ref:t,className:(0,i.default)(r,n)}),c))}u.defaultProps={as:"div"};var d=(0,c.createBootstrapComponent)(u,"form-group");n.default=d,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=t(14),u=r(t(34)),d=r(t(111)),f=r(t(206)),p=r(t(207)),m=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.default)(n,e),n.prototype.render=function(){var e=this.props,n=e.id,t=e.bsPrefix,r=e.inline,i=e.disabled,c=e.isValid,m=e.isInvalid,h=e.feedback,b=e.inputRef,g=e.className,v=e.style,y=e.title,x=e.type,w=e.label,k=e.children,E=e.custom,_=(0,a.default)(e,["id","bsPrefix","inline","disabled","isValid","isInvalid","feedback","inputRef","className","style","title","type","label","children","custom"]),C=null!=w&&!1!==w&&!k,P=s.default.createElement(f.default,(0,o.default)({},_,{type:x,ref:b,isValid:c,isInvalid:m,isStatic:!C,disabled:i}));return s.default.createElement(u.default.Transform,{mapToValue:function(e){var t=e.controlId;return{controlId:n||t,custom:E}}},s.default.createElement("div",{style:v,className:(0,l.default)(g,!E&&t,E&&"custom-control custom-"+x,r&&(E?"custom-control":t)+"-inline")},k||s.default.createElement(s.default.Fragment,null,P,C&&s.default.createElement(p.default,{title:y},w),(c||m)&&s.default.createElement(d.default,{type:c?"valid":"invalid"},h))))},n}(s.default.Component);m.defaultProps={type:"checkbox",inline:!1,disabled:!1,isValid:!1,isInvalid:!1,title:""};var h=(0,c.createBootstrapComponent)(m,{forwardRefAs:"inputRef",prefix:"form-check"});h.Input=f.default,h.Label=p.default;var b=h;n.default=b,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(1)),l=r(t(0)),s=t(14),c=r(t(34));function u(e){var n=e.id,t=e.bsPrefix,r=e.className,s=e.isValid,u=e.isInvalid,d=e.innerRef,f=e.isStatic,p=(0,a.default)(e,["id","bsPrefix","className","isValid","isInvalid","innerRef","isStatic"]);return l.default.createElement(c.default.Consumer,null,function(e){var a=e.controlId,c=e.custom;return l.default.createElement("input",(0,o.default)({},p,{ref:d,id:n||a,className:(0,i.default)(r,!c&&t,c&&"custom-control-input",s&&"is-valid",u&&"is-invalid",f&&"position-static")}))})}u.defaultProps={type:"checkbox"};var d=(0,s.createBootstrapComponent)(u,"form-check-input");n.default=d,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(1)),l=r(t(0)),s=t(14),c=r(t(34));function u(e){var n=e.bsPrefix,t=e.className,r=e.innerRef,s=e.htmlFor,u=(0,a.default)(e,["bsPrefix","className","innerRef","htmlFor"]);return l.default.createElement(c.default.Consumer,null,function(e){var a=e.controlId,c=e.custom;return l.default.createElement("label",(0,o.default)({},u,{ref:r,htmlFor:s||a,className:(0,i.default)(t,!c&&n,c&&"custom-control-label")}))})}u.defaultProps={type:"checkbox"};var d=(0,s.createBootstrapComponent)(u,"form-check-label");n.default=d,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(1)),l=r(t(0)),s=(r(t(4)),r(t(10))),c=r(t(209)),u=r(t(34)),d=t(14);function f(e){var n=e.bsPrefix,t=e.column,r=e.srOnly,s=e.className,u=e.innerRef,d=(0,a.default)(e,["bsPrefix","column","srOnly","className","innerRef"]),f=(0,i.default)(s,n,r&&"sr-only",t&&"col-form-label");return t?l.default.createElement(c.default,(0,o.default)({},d,{className:f,as:"label"})):l.default.createElement("label",(0,o.default)({},d,{ref:u,className:f}))}f.defaultProps={column:!1,srOnly:!1};var p=(0,s.default)(u.default,function(e,n){var t=e.controlId;return{htmlFor:n.htmlFor||t}},(0,d.createBootstrapComponent)(f,"form-label"));n.default=p,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=t(14),u=["xl","lg","md","sm","xs"],d=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.default)(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.className,r=e.as,i=(0,a.default)(e,["bsPrefix","className","as"]),c=[],d=[];return u.forEach(function(e){var t,r,o,a=i[e];if(delete i[e],null!=a&&"object"==typeof a){var l=a.span;t=void 0===l||l,r=a.offset,o=a.order}else t=a;var s="xs"!==e?"-"+e:"";null!=t&&c.push(!0===t?""+n+s:""+n+s+"-"+t),null!=o&&d.push("order"+s+"-"+o),null!=r&&d.push("offset"+s+"-"+r)}),c.length||c.push(n),s.default.createElement(r,(0,o.default)({},i,{className:l.default.apply(void 0,[t].concat(c,d))}))},n}(s.default.Component);d.defaultProps={as:"div"};var f=(0,c.createBootstrapComponent)(d,"col");n.default=f,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(1)),l=r(t(0)),s=t(14);function c(e){var n=e.bsPrefix,t=e.className,r=e.innerRef,s=e.as,c=(0,a.default)(e,["bsPrefix","className","innerRef","as"]);return l.default.createElement(s,(0,o.default)({},c,{ref:r,className:(0,i.default)(t,n)}))}c.defaultProps={as:"small"};var u=(0,s.createBootstrapComponent)(c,"form-text");n.default=u,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(212)),s=r(t(0)),c=r(t(213));function u(e){return!e||"#"===e.trim()}var d=function(e){function n(n,t){var r;return(r=e.call(this,n,t)||this).handleClick=r.handleClick.bind((0,l.default)((0,l.default)(r))),r.handleKeyDown=r.handleKeyDown.bind((0,l.default)((0,l.default)(r))),r}(0,i.default)(n,e);var t=n.prototype;return t.handleClick=function(e){var n=this.props,t=n.disabled,r=n.href,o=n.onClick;(t||u(r))&&e.preventDefault(),t?e.stopPropagation():o&&o(e)},t.handleKeyDown=function(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},t.render=function(){var e=this.props,n=e.as,t=e.disabled,r=e.onKeyDown,i=e.innerRef,l=(0,a.default)(e,["as","disabled","onKeyDown","innerRef"]);return u(l.href)&&(l.role=l.role||"button",l.href=l.href||"#"),t&&(l.tabIndex=-1,l["aria-disabled"]=!0),i&&(l.ref=i),s.default.createElement(n,(0,o.default)({},l,{onClick:this.handleClick,onKeyDown:(0,c.default)(this.handleKeyDown,r)}))},n}(s.default.Component);d.defaultProps={as:"a"};var f=d;n.default=f,e.exports=n.default},function(e,n){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,n,t){"use strict";n.__esModule=!0,n.default=void 0;var r=function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return n.filter(function(e){return null!=e}).reduce(function(e,n){if("function"!=typeof n)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?n:function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];e.apply(this,r),n.apply(this,r)}},null)};n.default=r,e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=f(t(0)),o=t(35),a=t(39),i=f(t(215)),l=f(t(216)),s=f(t(217)),c=f(t(226)),u=f(t(229)),d=f(t(257));function f(e){return e&&e.__esModule?e:{default:e}}n.default=(0,o.withRouter)((0,a.withAuthentication)(function(e){var n=e.isAuthenticated,t=e.location.pathname,a=!n&&"/login"!==t;return r.default.createElement(r.default.Fragment,null,a&&r.default.createElement(o.Redirect,{to:"/login"}),!a&&r.default.createElement(r.default.Fragment,null,r.default.createElement(o.Route,{exact:!0,path:"/",render:function(){return r.default.createElement(i.default,{name:"bob"})}}),r.default.createElement(o.Route,{path:"/hello/:name",component:l.default}),r.default.createElement(o.Route,{path:"/todo",component:s.default}),r.default.createElement(o.Route,{path:"/messages",component:c.default}),r.default.createElement(o.Route,{path:"/message/:id",component:u.default}),r.default.createElement(o.Route,{path:"/login",component:d.default})))}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),a=t(0),i=(r=a)&&r.__esModule?r:{default:r},l=t(19);var s=function(e){function n(){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,i.default.Component),o(n,[{key:"render",value:function(){var e=this.props.name;return i.default.createElement(l.Alert,{variant:"info"},"Hello ",e)}}]),n}();n.default=s},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(0),a=(r=o)&&r.__esModule?r:{default:r},i=t(19);n.default=function(e){var n=e.match.params.name;return a.default.createElement(i.Alert,{variant:"info"},"Hello ",n)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=i(t(0)),a=i(t(218));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={items:[],text:""},t.handleChange=t.handleChange.bind(t),t.handleSubmit=t.handleSubmit.bind(t),t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:"handleChange",value:function(e){this.setState({text:e.target.value})}},{key:"handleSubmit",value:function(e){e.preventDefault();var n={text:this.state.text,id:Date.now()};this.setState(function(e){return{items:e.items.concat(n),text:""}})}},{key:"render",value:function(){return o.default.createElement(a.default,{currentText:this.state.text,items:this.state.items,handleSubmit:this.handleSubmit,handleChange:this.handleChange})}}]),n}();n.default=l},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=l(t(0)),o=l(t(219)),a=l(t(225)),i=t(19);function l(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){var n=e.handleChange,t=e.handleSubmit,l=e.currentText,s=e.items;return r.default.createElement(i.Container,null,r.default.createElement("h3",null,"TODO"),r.default.createElement(i.Row,null,r.default.createElement(i.Col,{lg:6,xs:12},r.default.createElement(a.default,{handleSubmit:t,handleChange:n,nextPosition:s.length+1,currentText:l})),r.default.createElement(i.Col,{lg:6,xs:12},r.default.createElement(o.default,{items:s}))))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(0)),o=i(t(220)),a=i(t(113));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){var n=e.items;return r.default.createElement(a.default,null,n.map(function(e){return r.default.createElement(o.default,{key:e.id,text:e.text})}))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=a(t(0)),o=a(t(113));function a(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){var n=e.text;return r.default.createElement(o.default.Item,null,n)}},function(e,n,t){"use strict";var r=t(114),o=t(3);n.__esModule=!0,n.default=void 0;var a=o(t(9)),i=o(t(13)),l=o(t(16)),s=o(t(0)),c=o(t(15)),u=o(t(10)),d=r(t(74)),f=o(t(115)),p=o(t(222)),m=function(){},h=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleSelect=function(e,t){var r=n.props,o=r.onSelect,a=r.parentOnSelect;null!=e&&(o&&o(e,t),a&&a(e,t))},n.handleKeyDown=function(e){var t,r=n.props.onKeyDown;switch(r&&r(e),e.key){case"ArrowLeft":case"ArrowUp":t=n.getNextActiveChild(-1);break;case"ArrowRight":case"ArrowDown":t=n.getNextActiveChild(1);break;default:return}t&&(e.preventDefault(),n.handleSelect(t.dataset.rbEventKey,e),n._needsRefocus=!0)},n.attachRef=function(e){n.listNode=e},n.state={navContext:null},n}(0,l.default)(n,e),n.getDerivedStateFromProps=function(e){var n=e.activeKey,t=e.getControlledId,r=e.getControllerId;return{navContext:{role:e.role,activeKey:(0,d.makeEventKey)(n),getControlledId:t||m,getControllerId:r||m}}};var t=n.prototype;return t.componentDidUpdate=function(){if(this._needsRefocus&&this.listNode){var e=this.listNode.querySelector("[data-rb-event-key].active");e&&e.focus()}},t.getNextActiveChild=function(e){if(!this.listNode)return null;var n=(0,c.default)(this.listNode,"[data-rb-event-key]:not(.disabled)"),t=this.listNode.querySelector(".active"),r=n.indexOf(t);if(-1===r)return null;var o=r+e;return o>=n.length&&(o=0),o<0&&(o=n.length-1),n[o]},t.render=function(){var e=this.props,n=e.as,t=(e.onSelect,e.parentOnSelect,e.getControlledId,e.getControllerId,e.activeKey,(0,i.default)(e,["as","onSelect","parentOnSelect","getControlledId","getControllerId","activeKey"]));return"tablist"===t.role&&(t.onKeyDown=this.handleKeyDown),s.default.createElement(d.default.Provider,{value:this.handleSelect},s.default.createElement(f.default.Provider,{value:this.state.navContext},s.default.createElement(n,(0,a.default)({},t,{onKeyDown:this.handleKeyDown,ref:this.attachRef}))))},n}(s.default.Component);h.defaultProps={as:"ul"};var b=(0,u.default)([d.default,p.default],function(e,n,t){var r=t.role;return n?{activeKey:n.activeKey,parentOnSelect:e,role:r||"tablist",getControllerId:n.getControllerId,getControlledId:n.getControlledId}:{parentOnSelect:e}},h);n.default=b,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(0)).default.createContext(null);n.default=o,e.exports=n.default},function(e,n,t){"use strict";var r=t(3);n.__esModule=!0,n.default=void 0;var o=r(t(9)),a=r(t(13)),i=r(t(16)),l=r(t(1)),s=r(t(0)),c=r(t(224)),u=t(74),d=t(14),f=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var t=n.props,r=t.onClick;if(t.disabled)return e.preventDefault(),void e.stopPropagation();r&&r(e)},n}return(0,i.default)(n,e),n.prototype.render=function(){var e=this.props,n=e.bsPrefix,t=e.active,r=e.disabled,i=e.className,d=e.variant,f=e.action,p=e.as,m=e.eventKey,h=(0,a.default)(e,["bsPrefix","active","disabled","className","variant","action","as","eventKey"]);return s.default.createElement(c.default,(0,o.default)({},h,{eventKey:(0,u.makeEventKey)(m,h.href),as:p||(f?h.href?"a":"button":"div"),onClick:this.handleClick,className:(0,l.default)(i,n,t&&"active",r&&"disabled",d&&n+"-"+d,f&&n+"-action")}))},n}(s.default.Component);f.defaultProps={variant:null,active:!1,disabled:!1};var p=(0,d.createBootstrapComponent)(f,"list-group-item");n.default=p,e.exports=n.default},function(e,n,t){"use strict";var r=t(114),o=t(3);n.__esModule=!0,n.default=void 0;var a=o(t(9)),i=o(t(13)),l=o(t(16)),s=o(t(1)),c=o(t(0)),u=o(t(115)),d=r(t(74)),f=function(e){function n(){return e.apply(this,arguments)||this}return(0,l.default)(n,e),n.prototype.render=function(){var e=this,n=this.props,t=n.active,r=n.className,o=n.tabIndex,l=n.eventKey,f=n.onSelect,p=n.as,m=(0,i.default)(n,["active","className","tabIndex","eventKey","onSelect","as"]),h=(0,d.makeEventKey)(l,m.href);return c.default.createElement(d.default.Consumer,null,function(n){return c.default.createElement(u.default.Consumer,null,function(i){var l=t;return i&&(m.role||"tablist"!==i.role||(m.role="tab"),m["data-rb-event-key"]=h,m.id=i.getControllerId(h),m["aria-controls"]=i.getControlledId(h),l=null==t&&null!=h?i.activeKey===h:t),"tab"===m.role&&(m.tabIndex=l?o:-1,m["aria-selected"]=l),c.default.createElement(p,(0,a.default)({},m,{className:(0,s.default)(r,l&&"active"),onClick:function(t){var r=e.props.onClick;r&&r(t),null!=h&&(f&&f(h,t),n&&n(h,t))}}))})})},n}(c.default.Component);f.defaultProps={disabled:!1};var p=f;n.default=p,e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(0)),o=i(t(109)),a=i(t(112));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){var n=e.handleSubmit,t=e.handleChange,i=e.nextPosition,l=e.currentText;return r.default.createElement(o.default,{onSubmit:n},r.default.createElement(o.default.Group,null,r.default.createElement(o.default.Label,null,"Task"),r.default.createElement(o.default.Control,{type:"text",placeholder:"Feed the cat",onChange:t,value:l}),r.default.createElement(o.default.Text,{className:"text-muted"},"What needs to be done?")),r.default.createElement(a.default,{variant:"primary",type:"submit"},"Add #",i))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=l(t(0)),a=l(t(227)),i=l(t(54));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={messages:[]},t.deleteMessage=t.deleteMessage.bind(t),t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:"fetchMessages",value:function(){var e=this;(0,i.default)({url:"/api/messages"}).then(function(n){e.setState({messages:n})}).catch(function(n){console.error(n),e.setState({messages:[]})})}},{key:"deleteMessage",value:function(e){var n=this,t="/api/messages/"+e._id;(0,i.default)({url:t,method:"DELETE"}).then(function(t){var r=n.state.messages,o=r.indexOf(e);o>-1&&r.splice(o,1),n.setState({messages:r})}).catch(function(e){console.error(e),n.setState({messages:[]})})}},{key:"componentDidMount",value:function(){this.fetchMessages()}},{key:"render",value:function(){return o.default.createElement(a.default,{messages:this.state.messages,deleteMessage:this.deleteMessage})}}]),n}();n.default=s},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(0)),o=t(19),a=i(t(228));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){var n=e.messages,t=e.deleteMessage;return r.default.createElement(o.Container,null,r.default.createElement("h3",null,"Messages"),r.default.createElement(o.ListGroup,null,n.map(function(e,n){return r.default.createElement(o.ListGroup.Item,{key:n},r.default.createElement(a.default,{message:e,deleteMessage:t}))})))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(0),a=(r=o)&&r.__esModule?r:{default:r},i=t(35),l=t(19);n.default=function(e){var n=e.message,t=e.deleteMessage,r="/message/"+n._id;return a.default.createElement(l.Row,null,a.default.createElement(l.Col,{xs:8},n.body),a.default.createElement(l.Col,{xs:4},a.default.createElement(l.ButtonToolbar,null,a.default.createElement(l.Button,{variant:"outline-primary"},a.default.createElement(i.Link,{to:r},"Détails")),a.default.createElement(l.Button,{variant:"danger",onClick:function(){return t(n)}},"Delete"))))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=l(t(0)),a=l(t(230)),i=l(t(54));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={id:e.match.params.id,message:null},t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:"fetchMessage",value:function(){var e=this,n="/api/messages/"+this.state.id;(0,i.default)({url:n}).then(function(n){e.setState({message:n})}).catch(function(n){console.error(n),e.setState({message:[]})})}},{key:"componentDidMount",value:function(){setTimeout(this.fetchMessage.bind(this),2e3)}},{key:"render",value:function(){return o.default.createElement(a.default,{message:this.state.message})}}]),n}();n.default=s},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(0),a=(r=o)&&r.__esModule?r:{default:r},i=t(19),l=t(231);n.default=function(e){var n=e.message;return a.default.createElement(i.Jumbotron,null,a.default.createElement("h3",null,"Messages"),!n&&a.default.createElement(l.CircleLoader,null),n&&a.default.createElement("p",null,n.body))}},function(e,n,t){var r,o,a;o=[e,t(232),t(239),t(240),t(241),t(242),t(243),t(244),t(245),t(246),t(247),t(248),t(249),t(250),t(251),t(252),t(253),t(254),t(255),t(256)],void 0===(a="function"==typeof(r=function(e,n,t,r,o,a,i,l,s,c,u,d,f,p,m,h,b,g,v,y){"use strict";var x=L(n),w=L(t),k=L(r),E=L(o),_=L(a),C=L(i),P=L(l),O=L(s),T=L(c),N=L(u),S=L(d),j=L(f),M=L(p),R=L(m),z=L(h),A=L(b),I=L(g),D=L(v),U=L(y);function L(e){return e&&e.__esModule?e:{default:e}}e.exports={BarLoader:x.default,BeatLoader:w.default,BounceLoader:k.default,CircleLoader:E.default,ClipLoader:_.default,ClimbingBoxLoader:C.default,DotLoader:P.default,FadeLoader:O.default,GridLoader:T.default,HashLoader:N.default,MoonLoader:S.default,PacmanLoader:j.default,PropagateLoader:M.default,PulseLoader:R.default,RingLoader:z.default,RiseLoader:A.default,RotateLoader:I.default,ScaleLoader:D.default,SyncLoader:U.default}})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7),t(118)],void 0===(a="function"==typeof(r=function(e,n,t,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;var i=c(n),l=c(t),s=c(o);function c(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function d(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var f=(0,r.keyframes)("0%{left:-35%;right:100%}60%{left:100%;right:-90%}100%{left:100%;right:-90%}"),p=(0,r.keyframes)("0%{left:-200%;right:100%}60%{left:107%;right:-8%}100%{left:107%;right:-8%}"),m=e.Loader=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var i=arguments.length,l=Array(i),s=0;s<i;s++)l[s]=arguments[s];return o=d(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(l))),t=o,o.style=function(e){var n=o.props,t=n.height,a=n.color,i=n.heightUnit;return(0,r.css)("{position:absolute;height:",""+t+i,";overflow:hidden;background-color:",a,";background-clip:padding-box;display:block;border-radius:2px;will-change:left,right;animation-fill-mode:forwards;animation:",1===e?f:p," 2.1s ",2===e?"1.15s":""," ",1===e?"cubic-bezier(0.65, 0.815, 0.735, 0.395)":"cubic-bezier(0.165, 0.84, 0.44, 1)"," infinite;}")},o.wrapper=function(){var e=o.props,n=e.width,t=e.height,i=e.color,l=e.heightUnit,s=e.widthUnit,c=e.className,u=(0,r.css)("{position:relative;width:",""+n+s,";height:",""+t+l,";overflow:hidden;background-color:",(0,a.calculateRgba)(i,.2),";background-clip:padding-box;}");return c?(0,r.css)(u,";",c):u},d(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),u(n,[{key:"render",value:function(){var e=this.props.loading;return e?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),n}(i.default.Component);m.propTypes={loading:l.default.bool,color:l.default.string,width:l.default.number,widthUnit:l.default.string,height:l.default.number,heightUnit:l.default.string,className:l.default.string},m.defaultProps={loading:!0,color:"#000000",width:100,widthUnit:"px",height:4,heightUnit:"px",className:""};var h=(0,s.default)(["loading","color","width","height","heightUnit","widthUnit","className"])(m);h.defaultProps=m.defaultProps,e.default=h})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=l(t(26)),o=l(t(21)),a=l(t(27)),i=t(0);l(t(116)),l(t(117));function l(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){return function(n){var t=(0,i.createFactory)(n);return function(n){function i(){return(0,r.default)(this,i),(0,o.default)(this,n.apply(this,arguments))}return(0,a.default)(i,n),i.prototype.shouldComponentUpdate=function(n){return e(this.props,n)},i.prototype.render=function(){return t(this.props)},i}(i.Component)}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(e,n){return function(t){return t[e]=n,t}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(237),a=(r=o)&&r.__esModule?r:{default:r};n.default=a.default},function(e,n,t){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,n){return e===n?0!==e||0!==n||1/e==1/n:e!=e&&n!=n}e.exports=function(e,n){if(o(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),a=Object.keys(n);if(t.length!==a.length)return!1;for(var i=0;i<t.length;i++)if(!r.call(n,t[i])||!o(e[t[i]],n[t[i]]))return!1;return!0}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(e,n){for(var t={},r=0;r<n.length;r++){var o=n[r];e.hasOwnProperty(o)&&(t[o]=e[o])}return t}},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("50%{transform:scale(0.75);opacity:0.2}100%{transform:scale(1);opacity:1}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.color,a=n.size,i=n.sizeUnit,l=n.margin;return(0,r.css)("{display:inline-block;background-color:",t,";width:",""+a+i,";height:",""+a+i,";margin:",l,";border-radius:100%;animation:",d," 0.7s ",e%2?"0s":"0.35s"," infinite linear;animation-fill-mode:both;}")},o.wrapper=function(){var e=o.props.className;return e||""},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,margin:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,sizeUnit:"px",margin:"2px",className:""};var p=(0,l.default)(["loading","color","size","margin","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.size,a=n.color,i=n.sizeUnit;return(0,r.css)("{position:absolute;height:",""+t+i,";width:",""+t+i,";background-color:",a,";border-radius:100%;opacity:0.6;top:0;left:0;animation-fill-mode:both;animation:",d," 2.1s ",1===e?"1s":"0s"," infinite ease-in-out;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.className,i=(0,r.css)("{position:relative;width:",""+n+t,";height:",""+n+t,";}");return a?(0,r.css)(i,";",a):i},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:60,sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.size,a=n.color,i=n.sizeUnit;return(0,r.css)("{position:absolute;height:",""+t*(1-e/10)+i,";width:",""+t*(1-e/10)+i,";border:1px solid ",a,";border-radius:100%;transition:2s;border-bottom:none;border-right:none;top:",.7*e*2.5,"%;left:",.35*e*2.5,"%;animation-fill-mode:'';animation:",d," 1s ",.2*e,"s infinite linear;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.className,i=(0,r.css)("{position:relative;width:",""+n+t,";height:",""+n+t,";}");return a?(0,r.css)(i,";",a):i},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:50,sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(0.8)}100%{transform:rotate(360deg) scale(1)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.color,i=e.className,l=(0,r.css)("{background:transparent !important;width:",""+n+t,";height:",""+n+t,";border-radius:100%;border:2px solid;border-color:",a,";border-bottom-color:transparent;display:inline-block;animation:",d," 0.75s 0s infinite linear;animation-fill-mode:both;}");return i?(0,r.css)(l,";",i):l},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.style()}):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:35,sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:translate(0,-1em) rotate(-45deg)}5%{transform:translate(0,-1em) rotate(-50deg)}20%{transform:translate(1em,-2em) rotate(47deg)}25%{transform:translate(1em,-2em) rotate(45deg)}30%{transform:translate(1em,-2em) rotate(40deg)}45%{transform:translate(2em,-3em) rotate(137deg)}50%{transform:translate(2em,-3em) rotate(135deg)}55%{transform:translate(2em,-3em) rotate(130deg)}70%{transform:translate(3em,-4em) rotate(217deg)}75%{transform:translate(3em,-4em) rotate(220deg)}100%{transform:translate(0,-1em) rotate(-225deg)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(){var e=o.props.color;return(0,r.css)("{position:absolute;left:0;bottom:-0.1em;height:1em;width:1em;background-color:transparent;border-radius:15%;border:0.25em solid ",e,";transform:translate(0,-1em) rotate(-45deg);animation-fill-mode:both;animation:",d," 2.5s infinite cubic-bezier(.79,0,.47,.97);}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit;return(0,r.css)("{position:absolute;top:50%;left:50%;margin-top:-2.7em;margin-left:-2.7em;width:5.4em;height:5.4em;font-size:",""+n+t,";}")},o.hill=function(){var e=o.props.color;return(0,r.css)("{position:absolute;width:7.1em;height:7.1em;top:1.7em;left:1.7em;border-left:0.25em solid ",e,";transform:rotate(45deg);}")},o.container=function(){var e=o.props.className,n=(0,r.css)("{position:relative;width:7.1em;height:7.1em;}");return e?(0,r.css)(n,";",e):n},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.container()},a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style()}),a.default.createElement("div",{className:this.hill()}))):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("100%{transform:rotate(360deg)}"),f=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),p=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.size,a=n.sizeUnit,i=n.color;return(0,r.css)("{position:absolute;top:",e%2?"0":"auto",";bottom:",e%2?"auto":"0",";height:",""+t/2+a,";width:",""+t/2+a,";background-color:",i,";border-radius:100%;animation-fill-mode:forwards;animation:",f," 2s ",2===e?"-1s":"0s"," infinite linear;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.className,i=(0,r.css)("{position:relative;width:",""+n+t,";height:",""+n+t,";animation-fill-mode:forwards;animation:",d," 2s 0s infinite linear;}");return a?(0,r.css)(i,";",a):i},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),n}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:60,sizeUnit:"px",className:""};var m=(0,l.default)(["loading","color","size","sizeUnit","className"])(p);m.defaultProps=p.defaultProps,e.default=m})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("50%{opacity:0.3}100%{opacity:1}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.height,a=n.width,i=n.margin,l=n.color,s=n.radius,c=n.widthUnit,u=n.heightUnit,f=n.radiusUnit;return(0,r.css)("{position:absolute;width:",""+a+c,";height:",""+t+u,";margin:",i,";background-color:",l,";border-radius:",""+s+f,";transition:2s;animation-fill-mode:'both';animation:",d," 1.2s ",.12*e,"s infinite ease-in-out;}")},o.radius=20,o.quarter=o.radius/2+o.radius/5.5,o.wrapper=function(){var e=o.props.className,n=(0,r.css)("{position:relative;font-size:0;top:",o.radius,"px;left:",o.radius,"px;width:",3*o.radius,"px;height:",3*o.radius,"px;}");return e?(0,r.css)(n,";",e):n},o.a=function(){return(0,r.css)(o.style(1),";top:",o.radius,"px;left:0;")},o.b=function(){return(0,r.css)(o.style(2),";top:",o.quarter,"px;left:",o.quarter,"px;transform:rotate(-45deg);")},o.c=function(){return(0,r.css)(o.style(3),";top:0;left:",o.radius,"px;transform:rotate(90deg);")},o.d=function(){return(0,r.css)(o.style(4),";top:",-o.quarter,"px;left:",o.quarter,"px;transform:rotate(45deg);")},o.e=function(){return(0,r.css)(o.style(5),";top:",-o.radius,"px;left:0;")},o.f=function(){return(0,r.css)(o.style(6),";top:",-o.quarter,"px;left:",-o.quarter,"px;transform:rotate(-45deg);")},o.g=function(){return(0,r.css)(o.style(7),";top:0;left:",-o.radius,"px;transform:rotate(90deg);")},o.h=function(){return(0,r.css)(o.style(8),";top:",o.quarter,"px;left:",-o.quarter,"px;transform:rotate(45deg);")},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.a()}),a.default.createElement("div",{className:this.b()}),a.default.createElement("div",{className:this.c()}),a.default.createElement("div",{className:this.d()}),a.default.createElement("div",{className:this.e()}),a.default.createElement("div",{className:this.f()}),a.default.createElement("div",{className:this.g()}),a.default.createElement("div",{className:this.h()})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number,heightUnit:i.default.string,widthUnit:i.default.string,radiusUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",height:15,width:5,margin:"2px",radius:2,widthUnit:"px",heightUnit:"px",radiusUnit:"px",className:""};var p=(0,l.default)(["loading","color","height","width","margin","radius","widthUnit","heightUnit","radiusUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:scale(1)}50%{transform:scale(0.5);opacity:0.7}100%{transform:scale(1);opacity:1}"),f=function(e){return Math.random()*e},p=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.color,a=n.size,i=n.sizeUnit,l=n.margin;return(0,r.css)("{display:inline-block;background-color:",t,";width:",""+a+i,";height:",""+a+i,";margin:",l,";border-radius:100%;animation-fill-mode:'both';animation:",d," ",e/100+.6,"s ",e/100-.2,"s infinite ease;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.margin,i=e.className,l=(0,r.css)("{width:",""+(3*parseFloat(n)+6*parseFloat(a))+t,";font-size:0;}");return i?(0,r.css)(l,";",i):l},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))})):null}}]),n}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string,sizeUnit:i.default.string,className:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px",sizeUnit:"px",className:""};var m=(0,l.default)(["loading","color","size","margin","sizeUnit","className"])(p);m.defaultProps=p.defaultProps,e.default=m})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7),t(118)],void 0===(a="function"==typeof(r=function(e,n,t,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=c(n),l=c(t),s=c(o);function c(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function d(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var i=arguments.length,l=Array(i),s=0;s<i;s++)l[s]=arguments[s];return o=d(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(l))),t=o,o.thickness=function(){var e=o.props.size;return e/5},o.lat=function(){var e=o.props.size;return(e-o.thickness())/2},o.offset=function(){return o.lat()-o.thickness()},o.color=function(){var e=o.props.color;return(0,a.calculateRgba)(e,.75)},o.before=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=o.color(),i=o.lat(),l=o.thickness(),s=o.offset();return(0,r.keyframes)("0%{width:",l,"px;box-shadow:",i,"px ",-s,"px ",a,",",-i,"px ",s,"px ",a,"}35%{width:",""+n+t,";box-shadow:0 ",-s,"px ",a,",0 ",s,"px ",a,"}70%{width:",l,"px;box-shadow:",-i,"px ",-s,"px ",a,",",i,"px ",s,"px ",a,"}100%{box-shadow:",i,"px ",-s,"px ",a,",",-i,"px ",s,"px ",a,"}")},o.after=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=o.color(),i=o.lat(),l=o.thickness(),s=o.offset();return(0,r.keyframes)("0%{height:",l,"px;box-shadow:",s,"px ",i,"px ",a,",",-s,"px ",-i,"px ",a,"}35%{height:",""+n+t,";box-shadow:",s,"px 0 ",a,",",-s,"px 0 ",a,"}70%{height:",l,"px;box-shadow:",s,"px ",-i,"px ",a,",",-s,"px ",i,"px ",a,"}100%{box-shadow:",s,"px ",i,"px ",a,",",-s,"px ",-i,"px ",a,"}")},o.style=function(e){var n=o.props,t=n.size,a=n.sizeUnit;return(0,r.css)("{position:absolute;content:'';top:50%;left:50%;display:block;width:",""+t/5+a,";height:",""+t/5+a,";border-radius:",""+t/10+a,";transform:translate(-50%,-50%);animation-fill-mode:none;animation:",1===e?o.before():o.after()," 2s infinite;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.className,i=(0,r.css)("{position:relative;width:",""+n+t,";height:",""+n+t,";transform:rotate(165deg);}");return a?(0,r.css)(i,";",a):i},d(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),u(n,[{key:"render",value:function(){var e=this.props.loading;return e?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),n}(i.default.Component);f.propTypes={loading:l.default.bool,size:l.default.number,color:l.default.string,sizeUnit:l.default.string,className:l.default.string},f.defaultProps={loading:!0,size:50,color:"#000000",sizeUnit:"px",className:""};var p=(0,s.default)(["loading","color","size","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("100%{transform:rotate(360deg)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.moonSize=function(){var e=o.props.size;return e/7},o.ballStyle=function(e){var n=o.props.sizeUnit;return(0,r.css)("{width:",""+e+n,";height:",""+e+n,";border-radius:100%;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit;return(0,r.css)("{position:relative;width:",""+(n+2*o.moonSize())+t,";height:",""+(n+2*o.moonSize())+t,";animation:",d," 0.6s 0s infinite linear;animation-fill-mode:forwards;}")},o.ball=function(){var e=o.props,n=e.color,t=e.size,a=e.sizeUnit;return(0,r.css)(o.ballStyle(o.moonSize()),";background-color:",n,";opacity:0.8;position:absolute;top:",""+(t/2-o.moonSize()/2)+a,";animation:",d," 0.6s 0s infinite linear;animation-fill-mode:forwards;")},o.circle=function(){var e=o.props,n=e.size,t=e.color,a=e.className,i=(0,r.css)(o.ballStyle(n),";border:",o.moonSize(),"px solid ",t,";opacity:0.1;");return a?(0,r.css)(i,";",a):i},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.ball()}),a.default.createElement("div",{className:this.circle()})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:60,sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=[(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(-44deg)}"),(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(44deg)}")],f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.ball=function(){var e=o.props,n=e.size,t=e.sizeUnit;return(0,r.keyframes)("75%{opacity:0.7}100%{transform:translate(",""+-4*n+t,",",""+-n/4+t,")}")},o.ballStyle=function(e){var n=o.props,t=n.color,a=n.margin,i=n.size,l=n.sizeUnit;return(0,r.css)("{width:",""+i/3+l,";height:",""+i/3+l,";background-color:",t,";margin:",a,";border-radius:100%;transform:translate(0,",""+-i/4+l,");position:absolute;top:",i,"px;left:",""+4*i+l,";animation:",o.ball()," 1s ",.25*e,"s infinite linear;animation-fill-mode:both;}")},o.s1=function(){var e=o.props,n=e.size,t=e.sizeUnit;return""+n+t+" solid transparent"},o.s2=function(){var e=o.props,n=e.size,t=e.sizeUnit,r=e.color;return""+n+t+" solid "+r},o.pacmanStyle=function(e){var n=o.props,t=n.size,a=n.sizeUnit,i=o.s1(),l=o.s2();return(0,r.css)("{width:0;height:0;border-right:",i,";border-top:",0===e?i:l,";border-left:",l,";border-bottom:",0===e?l:i,";border-radius:",""+t+a,";position:absolute;animation:",d[e]," 0.8s infinite ease-in-out;animation-fill-mode:both;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.className,i=(0,r.css)("{position:relative;font-size:0;height:",""+n+t,";width:",""+n+t,";}");return a?(0,r.css)(i,";",a):i},o.pac=function(){return o.pacmanStyle(0)},o.man=function(){return o.pacmanStyle(1)},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.pac()}),a.default.createElement("div",{className:this.man()}),a.default.createElement("div",{className:this.ballStyle(2)}),a.default.createElement("div",{className:this.ballStyle(3)}),a.default.createElement("div",{className:this.ballStyle(4)}),a.default.createElement("div",{className:this.ballStyle(5)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:25,margin:"2px",sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","margin","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=[1,3,5],f=[(0,r.keyframes)("25%{transform:translateX(-",d[0],"rem) scale(0.75)}50%{transform:translateX(-",d[1],"rem) scale(0.6)}75%{transform:translateX(-",d[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",d[0],"rem) scale(0.75)}50%{transform:translateX(-",d[1],"rem) scale(0.6)}75%{transform:translateX(-",d[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",d[0],"rem) scale(0.75)}75%{transform:translateX(-",d[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",d[0],"rem) scale(0.75)}75%{transform:translateX(",d[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",d[0],"rem) scale(0.75)}50%{transform:translateX(",d[1],"rem) scale(0.6)}75%{transform:translateX(",d[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",d[0],"rem) scale(0.75)}50%{transform:translateX(",d[1],"rem) scale(0.6)}75%{transform:translateX(",d[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}")],p=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.size,a=n.sizeUnit,i=n.color;return(0,r.css)("{position:absolute;font-size:",""+t/3+a,";width:",""+t+a,";height:",""+t+a,";background:",i,";border-radius:50%;animation:",f[e]," 1.5s  infinite;animation-fill-mode:forwards;}")},o.wrapper=function(){var e=o.props.className,n=(0,r.css)("{position:relative;}");return e?(0,r.css)(n,";",e):n},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),n}(a.default.Component);p.propTypes={loading:i.default.bool,size:i.default.number,color:i.default.string,sizeUnit:i.default.string,className:i.default.string},p.defaultProps={loading:!0,size:15,color:"#000000",sizeUnit:"px",className:""};var m=(0,l.default)(["loading","color","size","sizeUnit","className"])(p);m.defaultProps=p.defaultProps,e.default=m})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:scale(1);opacity:1}45%{transform:scale(0.1);opacity:0.7}80%{transform:scale(1);opacity:1}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.color,a=n.size,i=n.sizeUnit,l=n.margin;return(0,r.css)("{background-color:",t,";width:",""+a+i,";height:",""+a+i,";margin:",l,";border-radius:100%;display:inline-block;animation:",d," 0.75s ",.12*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},o.wrapper=function(){var e=o.props.className;return e||""},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px",sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","margin","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(180deg) rotateY(360deg) rotateZ(360deg)}"),f=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(360deg) rotateY(180deg) rotateZ(360deg)}"),p=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.size,a=n.sizeUnit,i=n.color;return(0,r.css)("{position:absolute;top:0;left:0;width:",""+t+a,";height:",""+t+a,";border:",""+t/10+a," solid ",i,";opacity:0.4;border-radius:100%;animation-fill-mode:forwards;perspective:800px;animation:",1===e?d:f," 2s 0s infinite linear;}")},o.wrapper=function(){var e=o.props,n=e.size,t=e.sizeUnit,a=e.className,i=(0,r.css)("{width:",""+n+t,";height:",""+n+t,";position:relative;}");return a?(0,r.css)(i,";",a):i},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),n}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,sizeUnit:i.default.string,className:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:60,sizeUnit:"px",className:""};var m=(0,l.default)(["loading","color","size","sizeUnit","className"])(p);m.defaultProps=p.defaultProps,e.default=m})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:scale(1.1)}25%{translateY(-",30,"px)}50%{transform:scale(0.4)}75%{transform:translateY(",30,"px)}100%{transform:translateY(0) scale(1.0)}"),f=(0,r.keyframes)("0%{transform:scale(0.4)}25%{translateY(",30,"px)}50%{transform:scale(1.1)}75%{transform:translateY(",-30,"px)}100%{transform:translateY(0) scale(0.75)}"),p=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.color,a=n.size,i=n.sizeUnit,l=n.margin;return(0,r.css)("{background-color:",t,";width:",""+a+i,";height:",""+a+i,";margin:",""+l,";border-radius:100%;display:inline-block;animation:",e%2==0?d:f," 1s 0s infinite cubic-bezier(.15,.46,.9,.6);animation-fill-mode:both;}")},o.wrapper=function(){var e=o.props.className;return e||""},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),n}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string,sizeUnit:i.default.string,className:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px",sizeUnit:"px",className:""};var m=(0,l.default)(["loading","color","size","margin","sizeUnit","className"])(p);m.defaultProps=p.defaultProps,e.default=m})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){return(0,r.css)("{opacity:0.8;position:absolute;top:0;left:",e%2?-28:25,"px;}")},o.ball=function(){var e=o.props,n=e.color,t=e.size,a=e.sizeUnit,i=e.margin;return(0,r.css)("{background-color:",n,";width:",""+t+a,";height:",""+t+a,";margin:",i,";border-radius:100%;}")},o.wrapper=function(){var e=o.props.className,n=(0,r.css)(o.ball(),";display:inline-block;position:relative;animation-fill-mode:both;animation:",d," 1s 0s infinite cubic-bezier(.7,-.13,.22,.86);");return e?(0,r.css)(n,";",e):n},o.long=function(){return(0,r.css)(o.ball(),";",o.style(1),";")},o.short=function(){return(0,r.css)(o.ball(),";",o.style(2),";")},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.long()}),a.default.createElement("div",{className:this.short()})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px",sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","margin","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("0%{transform:scaley(1.0)}50%{transform:scaley(0.4)}100%{transform:scaley(1.0)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.color,a=n.width,i=n.height,l=n.margin,s=n.radius,c=n.widthUnit,u=n.heightUnit,f=n.radiusUnit;return(0,r.css)("{background-color:",t,";width:",""+a+c,";height:",""+i+u,";margin:",l,";border-radius:",""+s+f,";display:inline-block;animation:",d," 1s ",.1*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},o.wrapper=function(){var e=o.props.className;return e||""},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number,heightUnit:i.default.string,widthUnit:i.default.string,radiusUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",height:35,width:4,margin:"2px",radius:2,heightUnit:"px",widthUnit:"px",radiusUnit:"px",className:""};var p=(0,l.default)(["loading","color","height","width","margin","radius","heightUnit","widthUnit","radiusUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){var r,o,a;o=[n,t(0),t(2),t(6),t(7)],void 0===(a="function"==typeof(r=function(e,n,t,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(n),i=s(t),l=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function u(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var d=(0,r.keyframes)("33%{transform:translateY(10px)}66%{transform:translateY(-10px)}100%{transform:translateY(0)}"),f=function(e){function n(){var e,t,o;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return o=u(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t=o,o.style=function(e){var n=o.props,t=n.color,a=n.size,i=n.sizeUnit,l=n.margin;return(0,r.css)("{background-color:",t,";width:",""+a+i,";height:",""+a+i,";margin:",l,";border-radius:100%;display:inline-block;animation:",d," 0.6s ",.07*e,"s infinite ease-in-out;animation-fill-mode:both;}")},o.wrapper=function(){var e=o.props.className;return e||""},u(o,t)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),c(n,[{key:"render",value:function(){var e=this.props.loading;return e?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),n}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string,sizeUnit:i.default.string,className:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px",sizeUnit:"px",className:""};var p=(0,l.default)(["loading","color","size","margin","sizeUnit","className"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(n,o):r)||(e.exports=a)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=s(t(0)),a=t(35),i=t(39),l=s(t(258));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={email:"",password:""},t.authenticate=t.authenticate.bind(t),t.onFieldChange=t.onFieldChange.bind(t),t}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:"onFieldChange",value:function(e){var n,t,r;this.setState((n={},t=e.target.name,r=e.target.value,t in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r,n))}},{key:"authenticate",value:function(e){var n=this.props.login,t=this.state,r=t.email,o=t.password;e.preventDefault(),n({email:r,password:o})}},{key:"render",value:function(){var e=this.state,n=e.email,t=e.password,r=!!this.props.jwt;return o.default.createElement(o.default.Fragment,null,r&&o.default.createElement(a.Redirect,{to:"/messages"}),!r&&o.default.createElement(l.default,{email:n,password:t,authenticate:this.authenticate,onFieldChange:this.onFieldChange}))}}]),n}();n.default=(0,i.withAuthentication)(c)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(0),a=(r=o)&&r.__esModule?r:{default:r},i=t(19);n.default=function(e){var n=e.email,t=e.password,r=e.authenticate,o=e.onFieldChange;return a.default.createElement(i.Container,null,a.default.createElement(i.Row,null,a.default.createElement(i.Col,{xs:{span:8,offset:2},style:{marginTop:"200px"}},a.default.createElement(i.Form,{onSubmit:r},a.default.createElement(i.Form.Group,{as:i.Row,controlId:"formHorizontalEmail"},a.default.createElement(i.Form.Label,{column:!0,sm:2},"Email"),a.default.createElement(i.Col,{sm:10},a.default.createElement(i.Form.Control,{name:"email",type:"email",placeholder:"Email",value:n,onChange:o}))),a.default.createElement(i.Form.Group,{as:i.Row,controlId:"formHorizontalPassword"},a.default.createElement(i.Form.Label,{column:!0,sm:2},"Password"),a.default.createElement(i.Col,{sm:10},a.default.createElement(i.Form.Control,{name:"password",type:"password",placeholder:"Password",value:t,onChange:o}))),a.default.createElement(i.Form.Group,{as:i.Row},a.default.createElement(i.Col,{sm:{span:10,offset:2}},a.default.createElement(i.Button,{type:"submit"},"Sign in")))))))}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=t(0),a=(r=o)&&r.__esModule?r:{default:r},i=t(19),l=t(39),s=t(55);var c=(0,l.withAuthentication)(function(e){var n=e.jwt,t=e.theme,r=e.toggleTheme;return a.default.createElement(i.Navbar,{bg:t,variant:t,fixed:"bottom"},a.default.createElement(i.Nav,{className:"mr-auto"},a.default.createElement(i.Navbar.Brand,null,"Current JWT : ",n," ")),a.default.createElement(i.Button,{variant:"outline-info",id:"buttonTheme",onClick:r},"Change Theme"))}),u=(0,s.withTheme)(c);n.default=u},function(e,n,t){var r=t(75);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=t(120)(r,o);r.locals&&(e.exports=r.locals),e.hot.accept(75,function(){var n=t(75);if("string"==typeof n&&(n=[[e.i,n,""]]),!function(e,n){var t,r=0;for(t in e){if(!n||e[t]!==n[t])return!1;r++}for(t in n)r--;return 0===r}(r.locals,n.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(n)}),e.hot.dispose(function(){a()})},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,a=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,n,t){var r=t(76);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=t(120)(r,o);r.locals&&(e.exports=r.locals),e.hot.accept(76,function(){var n=t(76);if("string"==typeof n&&(n=[[e.i,n,""]]),!function(e,n){var t,r=0;for(t in e){if(!n||e[t]!==n[t])return!1;r++}for(t in n)r--;return 0===r}(r.locals,n.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(n)}),e.hot.dispose(function(){a()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW1vdGlvbi9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29udGV4dC10b29sYm94L2xpYi9tYXBDb250ZXh0VG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaW5ET00uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvZGl2V2l0aENsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GYWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvdHJpZ2dlckJyb3dzZXJSZWZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DbG9zZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU2FmZUFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0FsZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CcmVhZGNydW1iSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0JyZWFkY3J1bWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CdXR0b25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0J1dHRvblRvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NhcmRJbWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ2FyZENvbHVtbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJkRGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NhcmRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsQ2FwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL0VsZW1lbnRDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29sbGFwc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZiYXJDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRHJvcGRvd25NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRHJvcGRvd25Ub2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9TZWxlY3RhYmxlQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ecm9wZG93bkl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ecm9wZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Ryb3Bkb3duQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GZWVkYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybUNoZWNrSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtQ2hlY2tMYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1DaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1MYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1UZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0ltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRmlndXJlSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GaWd1cmVDYXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRmlndXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvSW5wdXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0p1bWJvdHJvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9BYnN0cmFjdE5hdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Fic3RyYWN0TmF2SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0xpc3RHcm91cEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9MaXN0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsRGlhbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWxGb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbEhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9Cb290c3RyYXBNb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2YmFyQnJhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZiYXJDb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkRyb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvT3ZlcmxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL092ZXJsYXlUcmlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFnZUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1Byb2dyZXNzQmFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUmVzcG9uc2l2ZUVtYmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU3BsaXRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFiUGFuZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RvZ2dsZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RvZ2dsZUJ1dHRvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvZm9yd2FyZFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29udGV4dHMvYXV0aGVudGljYXRpb24uanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvdXRpbHMvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29udGV4dHMvdGhlbWUuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9Ecm9wZG93bkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9saXN0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvU2VsZWN0YWJsZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAuY3NzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvc3R5bGUvYXBwbGljYXRpb24uc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9saWIvZXNtL1BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vUmVmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9Ecm9wZG93bk1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL0Ryb3Bkb3duVG9nZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb250ZXh0LXRvb2xib3gvbGliL3RyYW5zZm9ybUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvRHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9yZWFjdC91dGlscy93aXRoX2NvbnRleHRfY29uc3VtZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3Qvc2VydmljZXMvc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL1Jvb3RDbG9zZVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL29mZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2hhc0NsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL1dhaXRGb3JDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL3V0aWxzL2dldENvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0ZlZWRiYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9MaXN0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9OYXZDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2Uvc2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS93cmFwRGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2hlbHBlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9PdmVybGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMtcnVsZS1zaGVldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZW1vdGlvbi9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2VudHJpZXMvYXBwbGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9yZWFjdC9jb21wb25lbnRzL21haW4uanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy9sYXlvdXQuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2dldENvbXB1dGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL3JlbW92ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2lzVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9tYXRjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2d1ZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvdXRpbHMvaXNPdmVyZmxvd2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvaXNXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL3V0aWxzL21hbmFnZUFyaWFIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvbmF2aWdhdGlvbi9zZWFyY2hfZm9ybS5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNoZWNrSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUNoZWNrTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybUxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0NvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9TYWZlQW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9yZWFjdC9jb21wb25lbnRzL3JvdXRlcl9vdXRsZXQuanN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy9oZWxsb193b3JsZC9oZWxsb193b3JsZC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9yZWFjdC9jb21wb25lbnRzL2hlbGxvX3dvcmxkL2hlbGxvX2Zyb21fcGFyYW1zLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvdG9kb19hcHAvdG9kb19hcHBfY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvdG9kb19hcHAvdG9kb19hcHBfY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvdG9kb19hcHAvdG9kb19saXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvdG9kb19hcHAvdG9kb19pdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9BYnN0cmFjdE5hdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9UYWJDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0xpc3RHcm91cEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQWJzdHJhY3ROYXZJdGVtLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy90b2RvX2FwcC90b2RvX2Zvcm0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy9tZXNzYWdlcy9tZXNzYWdlc19jb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy9tZXNzYWdlcy9tZXNzYWdlc19jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy9tZXNzYWdlcy9tZXNzYWdlX2l0ZW0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvcmVhY3QvY29tcG9uZW50cy9tZXNzYWdlL21lc3NhZ2VfY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlX2NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9CYXJMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaG91bGRVcGRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXRTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9nZXREaXNwbGF5TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2UvdXRpbHMvcGljay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvQmVhdExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvQm91bmNlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9DaXJjbGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL0NsaXBMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL0NsaW1iaW5nQm94TG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9Eb3RMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL0ZhZGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL0dyaWRMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL0hhc2hMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL01vb25Mb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL1BhY21hbkxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvUHJvcGFnYXRlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9QdWxzZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvUmluZ0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvUmlzZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvUm90YXRlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9TY2FsZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvU3luY0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvbG9naW4vbG9naW5fY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvbG9naW4vbG9naW5fY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3JlYWN0L2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAuY3NzP2M2YjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3N0eWxlL2FwcGxpY2F0aW9uLnNjc3M/YTM2MyJdLCJuYW1lcyI6WyJwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayIsIndpbmRvdyIsImNodW5rSWQiLCJtb3JlTW9kdWxlcyIsImhvdEF2YWlsYWJsZUZpbGVzTWFwIiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJtb2R1bGVJZCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhvdFVwZGF0ZSIsImhvdFdhaXRpbmdGaWxlcyIsImhvdENodW5rc0xvYWRpbmciLCJob3RVcGRhdGVEb3dubG9hZGVkIiwiaG90QWRkVXBkYXRlQ2h1bmsiLCJob3RDdXJyZW50Q2hpbGRNb2R1bGUiLCJob3RBcHBseU9uVXBkYXRlIiwiaG90Q3VycmVudEhhc2giLCJob3RSZXF1ZXN0VGltZW91dCIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsInQiLCJtb2RlIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJuZXdTdGF0dXMiLCJpIiwibGVuZ3RoIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiaG90Q2hlY2siLCJhcHBseSIsIkVycm9yIiwicmVxdWVzdFRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIlhNTEh0dHBSZXF1ZXN0IiwicmVxdWVzdFBhdGgiLCJwIiwib3BlbiIsInRpbWVvdXQiLCJzZW5kIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVwZGF0ZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGF0YSIsImRpc3Bvc2VIYW5kbGVycyIsIl9kaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsInNwbGljZSIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJsIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJjaGVjayIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiaG90Q3JlYXRlTW9kdWxlIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJndW1lbnRzIiwiYXJnIiwiYXJnVHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImlubmVyIiwiZGVmYXVsdCIsIm9iaiIsIndhcm5pbmciLCJjb25kaXRpb24iLCJmb3JtYXQiLCJmIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImdsb2JhbCIsImZsdXNoIiwiaHlkcmF0ZSIsImN4IiwibWVyZ2UiLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwiaW5qZWN0R2xvYmFsIiwia2V5ZnJhbWVzIiwiY3NzIiwic2hlZXQiLCJjYWNoZXMiLCJjcmVhdGVfZW1vdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY29udGV4dCIsIl9jcmVhdGVFbW90aW9uIiwiX3Nob3VsZFVwZGF0ZTIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3NoYWxsb3dFcXVhbDIiLCJfcGljazIiLCJwcm9wS2V5cyIsInByb3BzIiwibmV4dFByb3BzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsInRoaXMiLCJtYXliZU9wdHMiLCJtYXBUb1Byb3BzIiwiQ29tcG9uZW50IiwiJG1hcENvbnRleHRUb1Byb3BzIiwiY29uc3VtZXJzIiwiX3JlYWN0IiwiX2ZvcndhcmRSZWYiLCJnZXREaXNwbGF5TmFtZSIsImRpc3BsYXlOYW1lIiwiZW5zdXJlQ29uc3VtZXIiLCJDb25zdW1lciIsIl9yZWYiLCJtYXliZUFycmF5T2ZDb25zdW1lcnMiLCJfcmVmJGZvcndhcmRSZWZBcyIsImZvcndhcmRSZWZBcyIsIlNpbmdsZUNvbnN1bWVyIiwiY29udGV4dFRyYW5zZm9ybSIsInJlZiIsIl9leHRlbmRzMiIsInByb3BzV2l0aFJlZiIsIl9leHRlbmRzMyIsInJlZHVjZVJpZ2h0IiwiQ29udGV4dCIsIl9sZW4iLCJfa2V5IiwiX2xlbjIiLCJjb250ZXh0cyIsIl9rZXkyIiwidW5jb250cm9sbGFibGUiLCJjb250cm9sbGVkVmFsdWVzIiwibWV0aG9kcyIsImNhbkFjY2VwdFJlZiIsIlV0aWxzIiwiY29udHJvbGxlZFByb3BzIiwiUFJPUFNfVE9fT01JVCIsImRlZmF1bHRLZXkiLCJpbnZhcmlhbnQiLCJVbmNvbnRyb2xsZWRDb21wb25lbnQiLCJfUmVhY3QkQ29tcG9uZW50Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3RoaXMiLCJoYW5kbGVycyIsInByb3BOYW1lIiwiaGFuZGxlck5hbWUiLCJfdGhpcyRwcm9wcyIsIl9ub3RpZnlpbmciLCJfdmFsdWVzIiwidW5tb3VudGVkIiwiZm9yY2VVcGRhdGUiLCJhdHRhY2hSZWYiLCJfX3Byb3RvX18iLCJfcHJvdG8iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfdGhpczIiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiX3RoaXMzIiwiaXNQcm9wIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJfdGhpczQiLCJfdGhpcyRwcm9wczIiLCJpbm5lclJlZiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInByb3AiLCJuZXdQcm9wcyIsInByb3BWYWx1ZSIsInByb3BUeXBlcyIsInVuY29udHJvbGxlZFByb3BUeXBlcyIsIm1ldGhvZCIsIl90aGlzJGlubmVyIiwiV3JhcHBlZENvbXBvbmVudCIsImZvcndhcmRSZWYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwiX2pzeEZpbGVOYW1lIiwibGluZU51bWJlciIsIl9fc2VsZiIsIkNvbnRyb2xsZWRDb21wb25lbnQiLCJkZWZlckNvbnRyb2xUbyIsIm5ld0NvbXBvbmVudCIsImFkZGl0aW9ucyIsIm5leHRNZXRob2RzIiwibmV3T2JqIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50Iiwib3B0cyIsInByZWZpeCIsImlzQ2xhc3N5IiwiaXNSZWFjdENvbXBvbmVudCIsIl9vcHRzIiwiX29wdHMkZm9yd2FyZFJlZkFzIiwicHJlZml4ZXMiLCJic1ByZWZpeCIsIlRoZW1lQ29uc3VtZXIiLCJfaW5oZXJpdHNMb29zZTIiLCJfUmVhY3QkY3JlYXRlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJNYXAiLCJQcm92aWRlciIsIl9kZWZhdWx0IiwiVGhlbWVQcm92aWRlciIsImVsZW1lbnQiLCJzZWxlY3RvciIsImZvdW5kIiwibWF5YmVJRCIsIm1heWJlQ2xhc3MiLCJuYW1lT25seSIsInNpbXBsZVNlbGVjdG9yUkUiLCJ0ZXN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidG9BcnJheSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibm9kZSIsInRyYW5zZm9ybXMiLCJzdHlsZSIsIl9jYW1lbGl6ZVN0eWxlIiwiX2dldENvbXB1dGVkU3R5bGUyIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9oeXBoZW5hdGVTdHlsZSIsIl9pc1RyYW5zZm9ybSIsIl9yZW1vdmVTdHlsZSIsIl9wcm9wZXJ0aWVzIiwidHJhbnNmb3JtIiwiY3NzVGV4dCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiX2luaGVyaXRzTG9vc2UiLCJkaXZXaXRoQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwicmVhY3RfZGVmYXVsdCIsImNsYXNzbmFtZXNfZGVmYXVsdCIsImZvcndhcmRSZWZfZGVmYXVsdCIsImVzX1RoZW1lUHJvdmlkZXIiLCJjcmVhdGVXaXRoQnNQcmVmaXhfcGFzY2FsQ2FzZSIsInN0ciIsInRvVXBwZXJDYXNlIiwiY2FtZWxpemVfZGVmYXVsdCIsImNyZWF0ZVdpdGhCc1ByZWZpeCIsIl90ZW1wIiwiX2NsYXNzIiwiX3RlbXAyIiwiX3JlZiRkaXNwbGF5TmFtZSIsIl9yZWYkQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiX3RoaXMkcHJvcHMkYXMiLCJhcyIsIlRhZyIsIl9mYWRlU3R5bGVzIiwidHJpZ2dlckJyb3dzZXJSZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJmYWRlU3R5bGVzIiwicmVhY3RfdHJhbnNpdGlvbl9ncm91cF9UcmFuc2l0aW9uIiwiRmFkZV9GYWRlIiwiRmFkZSIsImhhbmRsZUVudGVyIiwib25FbnRlciIsIlRyYW5zaXRpb25fZGVmYXVsdCIsImFkZEVuZExpc3RlbmVyIiwiZW5kX2RlZmF1bHQiLCJpbm5lclByb3BzIiwiY2xvbmVFbGVtZW50IiwiaW4iLCJtb3VudE9uRW50ZXIiLCJ1bm1vdW50T25FeGl0IiwiYXBwZWFyIiwiZXNfRmFkZSIsIkNsb3NlQnV0dG9uX0Nsb3NlQnV0dG9uIiwiQ2xvc2VCdXR0b24iLCJsYWJlbCIsIm9uQ2xpY2siLCJhcmlhLWhpZGRlbiIsImVzX0Nsb3NlQnV0dG9uIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsInV0aWxzX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImZ1bmNzIiwiZmlsdGVyIiwicmVkdWNlIiwiYWNjIiwiaXNUcml2aWFsSHJlZiIsImhyZWYiLCJ0cmltIiwiU2FmZUFuY2hvcl9TYWZlQW5jaG9yIiwiU2FmZUFuY2hvciIsImhhbmRsZUNsaWNrIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwiZGlzYWJsZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIm9uS2V5RG93biIsInJvbGUiLCJ0YWJJbmRleCIsImVzX1NhZmVBbmNob3IiLCJBbGVydF9BbGVydCIsIkFsZXJ0IiwiaGFuZGxlQ2xvc2UiLCJvbkNsb3NlIiwic2hvdyIsImNsb3NlTGFiZWwiLCJ2YXJpYW50IiwiZGlzbWlzc2libGUiLCJUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsImFsZXJ0IiwiRGVjb3JhdGVkQWxlcnQiLCJsaWJfZGVmYXVsdCIsIkRpdlN0eWxlZEFzSDQiLCJMaW5rIiwiSGVhZGluZyIsImVzX0FsZXJ0IiwiQmFkZ2VfQmFkZ2UiLCJCYWRnZSIsInBpbGwiLCJlc19CYWRnZSIsIkJyZWFkY3J1bWJJdGVtX0JyZWFkY3J1bWJJdGVtIiwiQnJlYWRjcnVtYkl0ZW0iLCJ0aXRsZSIsImVsZW1lbnRQcm9wcyIsImxpbmtQcm9wcyIsImFyaWEtY3VycmVudCIsImVzX0JyZWFkY3J1bWJJdGVtIiwiQnJlYWRjcnVtYl9CcmVhZGNydW1iIiwiQnJlYWRjcnVtYiIsImxpc3RQcm9wcyIsImFyaWEtbGFiZWwiLCJEZWNvcmF0ZWRCcmVhZGNydW1iIiwiSXRlbSIsImVzX0JyZWFkY3J1bWIiLCJCdXR0b25fQnV0dG9uIiwiQnV0dG9uIiwic2l6ZSIsImJsb2NrIiwiZXNfQnV0dG9uIiwiQnV0dG9uR3JvdXBfQnV0dG9uR3JvdXAiLCJCdXR0b25Hcm91cCIsInRvZ2dsZSIsInZlcnRpY2FsIiwiYmFzZUNsYXNzIiwiZXNfQnV0dG9uR3JvdXAiLCJCdXR0b25Ub29sYmFyX0J1dHRvblRvb2xiYXIiLCJCdXR0b25Ub29sYmFyIiwiZXNfQnV0dG9uVG9vbGJhciIsIkNhcmRDb250ZXh0IiwiQ2FyZEltZ19DYXJkSW1nIiwiQ2FyZEltZyIsImVzX0NhcmRJbWciLCJDYXJkQm9keSIsIkNhcmRfQ2FyZCIsIkNhcmQiLCJzdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNhcmRDb250ZXh0IiwiY2FyZEhlYWRlckJzUHJlZml4IiwiYmciLCJ0ZXh0IiwiYm9yZGVyIiwiYm9keSIsIkRpdlN0eWxlZEFzSDUiLCJEaXZTdHlsZWRBc0g2IiwiRGVjb3JhdGVkQ2FyZCIsIkltZyIsIlRpdGxlIiwiU3VidGl0bGUiLCJCb2R5IiwiVGV4dCIsIkhlYWRlciIsIkZvb3RlciIsIkltZ092ZXJsYXkiLCJlc19DYXJkIiwiQ2FyZENvbHVtbnMiLCJDYXJkRGVjayIsIkNhcmRHcm91cCIsIkNhcm91c2VsQ2FwdGlvbl9DYXJvdXNlbENhcHRpb24iLCJDYXJvdXNlbENhcHRpb24iLCJlc19DYXJvdXNlbENhcHRpb24iLCJlc19DYXJvdXNlbEl0ZW0iLCJDYXJvdXNlbEl0ZW0iLCJmdW5jIiwiaW5kZXgiLCJDaGlsZHJlbiIsImlzVmFsaWRFbGVtZW50IiwiQ2Fyb3VzZWxfY291bnRDaGlsZHJlbiIsIkNhcm91c2VsX2RlZmF1bHRQcm9wcyIsInNsaWRlIiwiZmFkZSIsImludGVydmFsIiwia2V5Ym9hcmQiLCJwYXVzZU9uSG92ZXIiLCJ3cmFwIiwiaW5kaWNhdG9ycyIsImNvbnRyb2xzIiwiYWN0aXZlSW5kZXgiLCJwcmV2SWNvbiIsInByZXZMYWJlbCIsIm5leHRJY29uIiwibmV4dExhYmVsIiwiQ2Fyb3VzZWxfQ2Fyb3VzZWwiLCJDYXJvdXNlbCIsImhhbmRsZVNsaWRlRW5kIiwicGVuZGluZ0luZGV4IiwiX3BlbmRpbmdJbmRleCIsIl9pc1NsaWRpbmciLCJ0byIsImN5Y2xlIiwiaGFuZGxlTW91c2VPdXQiLCJoYW5kbGVNb3VzZU92ZXIiLCJwYXVzZSIsInRhZ05hbWUiLCJoYW5kbGVQcmV2IiwiaGFuZGxlTmV4dCIsImhhbmRsZU5leHRXaGVuVmlzaWJsZSIsImlzVW5tb3VudGVkIiwiaGlkZGVuIiwic3R5bGVfZGVmYXVsdCIsImNhcm91c2VsIiwiY3VycmVudCIsInNlbGVjdCIsInByZXZDbGFzc2VzIiwiY3VycmVudENsYXNzZXMiLCJjcmVhdGVSZWYiLCJjb21wb25lbnREaWRNb3VudCIsInByZXZpb3VzQWN0aXZlSW5kZXgiLCJsYXN0UG9zc2libGVJbmRleCIsIm5leHRJbmRleCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJkaXJlY3Rpb24iLCJjb21wb25lbnREaWRVcGRhdGUiLCJfIiwicHJldlN0YXRlIiwiX3RoaXMkcHJvcHMzIiwib3JkZXJDbGFzc05hbWUiLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIl90aGlzJHN0YXRlIiwic2FmZVNldFN0YXRlIiwibmV4dEVsZW1lbnQiLCJ0cmFuc2l0aW9uX2RlZmF1bHQiLCJlbmQiLCJjbGVhclRpbWVvdXQiLCJzZXRTdGF0ZSIsIl9pc1BhdXNlZCIsImNsZWFySW50ZXJ2YWwiLCJfaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsInNlbGVjdFRocm90dGxlIiwicGVyc2lzdCIsInNldFRpbWVvdXQiLCJfdGhpczQkcHJvcHMiLCJvblNlbGVjdCIsInJlbmRlckNvbnRyb2xzIiwicHJvcGVydGllcyIsImNvdW50IiwicmVuZGVySW5kaWNhdG9ycyIsIl90aGlzNSIsIl90aGlzJHByb3BzNCIsIm9uU2xpZGVFbmQiLCJfdGhpcyRzdGF0ZTIiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VPdXQiLCJwcmV2aW91cyIsInJlYWN0IiwiRGVjb3JhdGVkQ2Fyb3VzZWwiLCJDYXB0aW9uIiwiZXNfQ2Fyb3VzZWwiLCJERVZJQ0VfU0laRVMiLCJDb2xfQ29sIiwiQ29sIiwic3BhbnMiLCJicmtQb2ludCIsInNwYW4iLCJvZmZzZXQiLCJvcmRlciIsIl9wcm9wVmFsdWUkc3BhbiIsImluZml4IiwiX2NvbGxhcHNlU3R5bGVzIiwiZXNfQ29sIiwiTUFSR0lOUyIsImhlaWdodCIsIndpZHRoIiwiY29sbGFwc2VTdHlsZXMiLCJDb2xsYXBzZV9kZWZhdWx0UHJvcHMiLCJkaW1lbnNpb24iLCJnZXREaW1lbnNpb25WYWx1ZSIsImVsZW0iLCJtYXJnaW5zIiwicGFyc2VJbnQiLCJDb2xsYXBzZV9Db2xsYXBzZSIsIkNvbGxhcHNlIiwiZ2V0RGltZW5zaW9uIiwiaGFuZGxlRW50ZXJpbmciLCJfZ2V0U2Nyb2xsRGltZW5zaW9uVmFsdWUiLCJoYW5kbGVFbnRlcmVkIiwiaGFuZGxlRXhpdCIsImhhbmRsZUV4aXRpbmciLCJvbkVudGVyaW5nIiwib25FbnRlcmVkIiwib25FeGl0Iiwib25FeGl0aW5nIiwiYXJpYS1leHBhbmRlZCIsImVzX0NvbGxhcHNlIiwiTmF2YmFyQ29udGV4dCIsIkRyb3Bkb3duTWVudV9Ecm9wZG93bk1lbnUiLCJEcm9wZG93bk1lbnUiLCJhbGlnblJpZ2h0Iiwicm9vdENsb3NlRXZlbnQiLCJmbGlwIiwicG9wcGVyQ29uZmlnIiwic2hvd1Byb3BzIiwiaXNOYXZiYXIiLCJEcm9wZG93bk1lbnVfZGVmYXVsdCIsImFsaWduRW5kIiwidXNlUG9wcGVyIiwicGxhY2VtZW50IiwiY2xvc2UiLCJtZW51UHJvcHMiLCJfX3dyYXBwZWQiLCJyZWFjdF9kb20iLCJEcm9wZG93bk1lbnVfd3JhcFJlZiIsImVzX0Ryb3Bkb3duTWVudSIsIkRyb3Bkb3duVG9nZ2xlX0Ryb3Bkb3duVG9nZ2xlIiwiRHJvcGRvd25Ub2dnbGUiLCJzcGxpdCIsImNoaWxkQnNQcmVmaXgiLCJEcm9wZG93blRvZ2dsZV9kZWZhdWx0IiwidG9nZ2xlUHJvcHMiLCJEcm9wZG93blRvZ2dsZV93cmFwUmVmIiwiZXNfRHJvcGRvd25Ub2dnbGUiLCJTZWxlY3RhYmxlQ29udGV4dCIsIm1ha2VFdmVudEtleSIsImV2ZW50S2V5IiwiU3RyaW5nIiwiZXNfU2VsZWN0YWJsZUNvbnRleHQiLCJlc19OYXZDb250ZXh0IiwiRHJvcGRvd25JdGVtX0Ryb3Bkb3duSXRlbSIsIkRyb3Bkb3duSXRlbSIsImNvbnRleHRTZWxlY3QiLCJlc19Ecm9wZG93bkl0ZW0iLCJtYXBDb250ZXh0VG9Qcm9wc19kZWZhdWx0IiwibmF2Q29udGV4dCIsImFjdGl2ZUtleSIsIkRyb3Bkb3duX0Ryb3Bkb3duIiwiRHJvcGRvd24iLCJoYW5kbGVTZWxlY3QiLCJoYW5kbGVUb2dnbGUiLCJjdXJyZW50VGFyZ2V0Iiwib25Ub2dnbGUiLCJkcm9wIiwibmF2YmFyIiwiRHJvcGRvd25fZGVmYXVsdCIsIml0ZW1TZWxlY3RvciIsImRyb3Bkb3duUHJvcHMiLCJVbmNvbnRyb2xsZWREcm9wZG93biIsIkRlY29yYXRlZERyb3Bkb3duIiwiVG9nZ2xlIiwiTWVudSIsIkRpdmlkZXIiLCJlc19Ecm9wZG93biIsImVzX0Ryb3Bkb3duQnV0dG9uIiwiRHJvcGRvd25CdXR0b24iLCJtZW51Um9sZSIsIkZvcm1Db250ZXh0IiwiY29udHJvbElkIiwiVHJhbnNmb3JtIiwidHJhbnNmb3JtQ29udGV4dF9kZWZhdWx0IiwiZXNfRm9ybUNvbnRleHQiLCJGb3JtR3JvdXAiLCJlc19Gb3JtR3JvdXAiLCJGZWVkYmFja19GZWVkYmFjayIsIkZlZWRiYWNrIiwiZXNfRmVlZGJhY2siLCJGb3JtQ29udHJvbF9Gb3JtQ29udHJvbCIsIkZvcm1Db250cm9sIiwiX2NsYXNzZXMiLCJpbnB1dFJlZiIsImlzVmFsaWQiLCJpc0ludmFsaWQiLCJwbGFpbnRleHQiLCJyZWFkT25seSIsIl9jbGFzc2VzMiIsIl9jbGFzc2VzMyIsIkRlY29yYXRlZEZvcm1Db250cm9sIiwiX3JlZjIiLCJlc19Gb3JtQ29udHJvbCIsIkZvcm1DaGVja0lucHV0IiwiaXNTdGF0aWMiLCJjdXN0b20iLCJlc19Gb3JtQ2hlY2tJbnB1dCIsIkZvcm1DaGVja0xhYmVsIiwiaHRtbEZvciIsImVzX0Zvcm1DaGVja0xhYmVsIiwiRm9ybUNoZWNrX0Zvcm1DaGVjayIsIkZvcm1DaGVjayIsImlubGluZSIsImZlZWRiYWNrIiwiaGFzTGFiZWwiLCJpbnB1dCIsIm1hcFRvVmFsdWUiLCJGcmFnbWVudCIsIkRlY29yYXRlZEZvcm1DaGVjayIsIklucHV0IiwiTGFiZWwiLCJlc19Gb3JtQ2hlY2siLCJGb3JtTGFiZWwiLCJjb2x1bW4iLCJzck9ubHkiLCJlc19Gb3JtTGFiZWwiLCJfcmVmMyIsIkZvcm1UZXh0IiwiZXNfRm9ybVRleHQiLCJGb3JtIiwidmFsaWRhdGVkIiwiRGVjb3JhdGVkRm9ybSIsIlJvdyIsIkdyb3VwIiwiQ29udHJvbCIsIkNoZWNrIiwiZXNfRm9ybSIsIkNvbnRhaW5lcl9Db250YWluZXIiLCJDb250YWluZXIiLCJmbHVpZCIsImVzX0NvbnRhaW5lciIsIkltYWdlX0ltYWdlIiwiSW1hZ2UiLCJyb3VuZGVkIiwicm91bmRlZENpcmNsZSIsInRodW1ibmFpbCIsImVzX0ltYWdlIiwiRmlndXJlSW1hZ2VfRmlndXJlSW1hZ2UiLCJGaWd1cmVJbWFnZSIsImVzX0ZpZ3VyZUltYWdlIiwiRmlndXJlQ2FwdGlvbl9GaWd1cmVDYXB0aW9uIiwiRmlndXJlQ2FwdGlvbiIsImVzX0ZpZ3VyZUNhcHRpb24iLCJGaWd1cmVfRmlndXJlIiwiRmlndXJlIiwiRGVjb3JhdGVkRmlndXJlIiwiZXNfRmlndXJlIiwiSW5wdXRHcm91cF9JbnB1dEdyb3VwIiwiSW5wdXRHcm91cCIsIklucHV0R3JvdXBBcHBlbmQiLCJJbnB1dEdyb3VwUHJlcGVuZCIsIklucHV0R3JvdXBUZXh0IiwiRGVjb3JhdGVkSW5wdXRHcm91cCIsIlJhZGlvIiwiQ2hlY2tib3giLCJBcHBlbmQiLCJQcmVwZW5kIiwiZXNfSW5wdXRHcm91cCIsIkp1bWJvdHJvbl9KdW1ib3Ryb24iLCJKdW1ib3Ryb24iLCJlc19KdW1ib3Ryb24iLCJlc19UYWJDb250ZXh0Iiwibm9vcCIsIkFic3RyYWN0TmF2X0Fic3RyYWN0TmF2IiwiQWJzdHJhY3ROYXYiLCJwYXJlbnRPblNlbGVjdCIsIm5leHRBY3RpdmVDaGlsZCIsImdldE5leHRBY3RpdmVDaGlsZCIsImRhdGFzZXQiLCJyYkV2ZW50S2V5IiwiX25lZWRzUmVmb2N1cyIsImxpc3ROb2RlIiwiZ2V0Q29udHJvbGxlZElkIiwiZ2V0Q29udHJvbGxlcklkIiwiYWN0aXZlQ2hpbGQiLCJxdWVyeVNlbGVjdG9yIiwiZm9jdXMiLCJpdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGxfZGVmYXVsdCIsImVzX0Fic3RyYWN0TmF2IiwidGFiQ29udGV4dCIsIkFic3RyYWN0TmF2SXRlbV9BYnN0cmFjdE5hdkl0ZW0iLCJBYnN0cmFjdE5hdkl0ZW0iLCJuYXZLZXkiLCJpc0FjdGl2ZSIsImVzX0Fic3RyYWN0TmF2SXRlbSIsIkxpc3RHcm91cEl0ZW1fTGlzdEdyb3VwSXRlbSIsIkxpc3RHcm91cEl0ZW0iLCJhY3Rpb24iLCJlc19MaXN0R3JvdXBJdGVtIiwiTGlzdEdyb3VwX0xpc3RHcm91cCIsIkxpc3RHcm91cCIsIkRlY29yYXRlZExpc3RHcm91cCIsImVzX0xpc3RHcm91cCIsIk1lZGlhX01lZGlhIiwiTWVkaWEiLCJEZWNvcmF0ZWRNZWRpYSIsImVzX01lZGlhIiwiTW9kYWxCb2R5X01vZGFsQm9keSIsIk1vZGFsQm9keSIsImVzX01vZGFsQm9keSIsImVzX01vZGFsRGlhbG9nIiwiTW9kYWxEaWFsb2ciLCJjZW50ZXJlZCIsImJzQ2xhc3MiLCJNb2RhbEZvb3Rlcl9Nb2RhbEZvb3RlciIsIk1vZGFsRm9vdGVyIiwiZXNfTW9kYWxGb290ZXIiLCJlc19Nb2RhbENvbnRleHQiLCJvbkhpZGUiLCJNb2RhbEhlYWRlcl9Nb2RhbEhlYWRlciIsIk1vZGFsSGVhZGVyIiwiY2xvc2VCdXR0b24iLCJlc19Nb2RhbEhlYWRlciIsIk1vZGFsVGl0bGVfRGl2U3R5bGVkQXNINCIsIk1vZGFsVGl0bGVfTW9kYWxUaXRsZSIsIk1vZGFsVGl0bGUiLCJlc19Nb2RhbFRpdGxlIiwiU2VsZWN0b3IiLCJCb290c3RyYXBNb2RhbE1hbmFnZXJfQm9vdHN0cmFwTW9kYWxNYW5hZ2VyIiwiX01vZGFsTWFuYWdlciIsIkJvb3RzdHJhcE1vZGFsTWFuYWdlciIsImFkanVzdEFuZFN0b3JlIiwiYWRqdXN0IiwiYWN0dWFsIiwicGFyc2VGbG9hdCIsInJlc3RvcmUiLCJzZXRDb250YWluZXJTdHlsZSIsImNvbnRhaW5lclN0YXRlIiwiY29udGFpbmVyIiwib3ZlcmZsb3dpbmciLCJzY3JvbGxiYXJTaXplX2RlZmF1bHQiLCJlbCIsInJlbW92ZUNvbnRhaW5lclN0eWxlIiwiTW9kYWxfZGVmYXVsdFByb3BzIiwiYmFja2Ryb3AiLCJhdXRvRm9jdXMiLCJlbmZvcmNlRm9jdXMiLCJyZXN0b3JlRm9jdXMiLCJhbmltYXRpb24iLCJkaWFsb2dBcyIsIm1hbmFnZXIiLCJEaWFsb2dUcmFuc2l0aW9uIiwiQmFja2Ryb3BUcmFuc2l0aW9uIiwiTW9kYWxfTW9kYWwiLCJNb2RhbCIsIl9wcm9wcyIsInNldE1vZGFsUmVmIiwiX21vZGFsIiwiaGFuZGxlRGlhbG9nTW91c2VEb3duIiwiX3dhaXRpbmdGb3JNb3VzZVVwIiwiaGFuZGxlTW91c2VVcCIsImRpYWxvZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiZGlzcGxheSIsInVwZGF0ZURpYWxvZ1N0eWxlIiwiZXZlbnRzX2RlZmF1bHQiLCJvbiIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsImhhbmRsZUV4aXRlZCIsIl9sZW4zIiwiX2tleTMiLCJvbkV4aXRlZCIsIm9mZiIsInJlbmRlckJhY2tkcm9wIiwiYmFja2Ryb3BDbGFzc05hbWUiLCJtb2RhbENvbnRleHQiLCJpbkRPTV9kZWZhdWx0IiwiY29udGFpbmVySXNPdmVyZmxvd2luZyIsImlzQ29udGFpbmVyT3ZlcmZsb3dpbmciLCJtb2RhbElzT3ZlcmZsb3dpbmciLCJzY3JvbGxIZWlnaHQiLCJvd25lckRvY3VtZW50X2RlZmF1bHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nTGVmdCIsIl90aGlzJHByb3BzNSIsImRpYWxvZ0NsYXNzTmFtZSIsIkRpYWxvZyIsIm9uRXNjYXBlS2V5RG93biIsIm9uU2hvdyIsImJhY2tkcm9wU3R5bGUiLCJjbGlja0hhbmRsZXIiLCJNb2RhbF9kZWZhdWx0IiwiY29udGFpbmVyQ2xhc3NOYW1lIiwiYmFja2Ryb3BUcmFuc2l0aW9uIiwib25Nb3VzZVVwIiwib25Nb3VzZURvd24iLCJEZWNvcmF0ZWRNb2RhbCIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiZXNfTW9kYWwiLCJOYXZJdGVtX05hdkl0ZW0iLCJOYXZJdGVtIiwiZXNfTmF2SXRlbSIsIk5hdkxpbmtfZGVmYXVsdFByb3BzIiwiTmF2TGluayIsImVzX05hdkxpbmsiLCJOYXZfTmF2IiwiTmF2IiwiX2NsYXNzTmFtZXMiLCJuYXZiYXJCc1ByZWZpeCIsImZpbGwiLCJqdXN0aWZ5IiwiVW5jb250cm9sbGVkTmF2IiwiRGVjb3JhdGVkTmF2IiwibmF2YmFyQ29udGV4dCIsIl9OYXYiLCJlc19OYXYiLCJlc19OYXZiYXJCcmFuZCIsIk5hdmJhckJyYW5kIiwiZXNfTmF2YmFyQ29sbGFwc2UiLCJOYXZiYXJDb2xsYXBzZSIsImV4cGFuZGVkIiwiTmF2YmFyVG9nZ2xlX05hdmJhclRvZ2dsZSIsIk5hdmJhclRvZ2dsZSIsImVzX05hdmJhclRvZ2dsZSIsIk5hdmJhcl9OYXZiYXIiLCJOYXZiYXIiLCJfYXJncyIsImhhbmRsZUNvbGxhcHNlIiwiY29sbGFwc2VPblNlbGVjdCIsImV4cGFuZCIsImZpeGVkIiwic3RpY2t5IiwiZXhwYW5kQ2xhc3MiLCJEZWNvcmF0ZWROYXZiYXIiLCJCcmFuZCIsImVzX05hdmJhciIsIk5hdkRyb3Bkb3duX05hdkRyb3Bkb3duIiwiTmF2RHJvcGRvd24iLCJlc19OYXZEcm9wZG93biIsIk92ZXJsYXlfZGVmYXVsdFByb3BzIiwicm9vdENsb3NlIiwiT3ZlcmxheV9PdmVybGF5Iiwib3ZlcmxheSIsIm91dGVyUHJvcHMiLCJPdmVybGF5X2RlZmF1bHQiLCJvdmVybGF5UHJvcHMiLCJhcnJvd1Byb3BzIiwiYVJlZiIsIndyYXBSZWZzIiwiZXNfT3ZlcmxheSIsIk92ZXJsYXlUcmlnZ2VyX1JlZkhvbGRlciIsIlJlZkhvbGRlciIsIm5vcm1hbGl6ZURlbGF5IiwiZGVsYXkiLCJoaWRlIiwiT3ZlcmxheVRyaWdnZXJfT3ZlcmxheVRyaWdnZXIiLCJfUmVhY3QkQ29tcG9uZW50MiIsIk92ZXJsYXlUcmlnZ2VyIiwiZ2V0VGFyZ2V0IiwicmVhY3RfZG9tX2RlZmF1bHQiLCJmaW5kRE9NTm9kZSIsInRyaWdnZXIiLCJoYW5kbGVTaG93IiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsImhhbmRsZUhpZGUiLCJoYW5kbGVGb2N1cyIsIm9uRm9jdXMiLCJnZXRDaGlsZFByb3BzIiwiaGFuZGxlQmx1ciIsIm9uQmx1ciIsImhhbmRsZU1vdXNlT3Zlck91dCIsImRlZmF1bHRTaG93IiwiYXJpYU1vZGlmaWVyIiwiZW5hYmxlZCIsInBvcHBlciIsImluc3RhbmNlIiwiZ2V0QXR0cmlidXRlIiwidG9Mb3dlckNhc2UiLCJzZXRBdHRyaWJ1dGUiLCJfcHJvdG8yIiwib25seSIsImhhbmRsZXIiLCJyZWxhdGVkTmF0aXZlIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJuYXRpdmVFdmVudCIsImNvbnRhaW5zX2RlZmF1bHQiLCJfdGhpcyRwcm9wcyRwb3BwZXJDb24iLCJ0cmlnZ2VyUHJvcHMiLCJ0cmlnZ2VycyIsIm1vZGlmaWVycyIsImRlZmF1bHRPdmVybGF5U2hvd24iLCJlc19PdmVybGF5VHJpZ2dlciIsIlBhZ2VJdGVtIiwiYWN0aXZlTGFiZWwiLCJjcmVhdGVCdXR0b24iLCJkZWZhdWx0VmFsdWUiLCJGaXJzdCIsIlByZXYiLCJFbGxpcHNpcyIsIk5leHQiLCJMYXN0IiwiRGVjb3JhdGVkUGFnaW5hdGlvbiIsIlBhZ2luYXRpb24iLCJlc19QYWdpbmF0aW9uIiwiUG9wb3ZlciIsInNjaGVkdWxlVXBkYXRlIiwib3V0T2ZCb3VuZGFyaWVzIiwieC1wbGFjZW1lbnQiLCJlc19Qb3BvdmVyIiwiUk9VTkRfUFJFQ0lTSU9OIiwiUHJvZ3Jlc3NCYXJfUHJvZ3Jlc3NCYXIiLCJQcm9ncmVzc0JhciIsInJlbmRlclByb2dyZXNzQmFyIiwibm93Iiwic3RyaXBlZCIsImFuaW1hdGVkIiwicGVyY2VudGFnZSIsInJvdW5kIiwiZ2V0UGVyY2VudGFnZSIsImFyaWEtdmFsdWVub3ciLCJhcmlhLXZhbHVlbWluIiwiYXJpYS12YWx1ZW1heCIsImlzQ2hpbGQiLCJ3cmFwcGVyUHJvcHMiLCJEZWNvcmF0ZWRQcm9ncmVzc0JhciIsImVzX1Byb2dyZXNzQmFyIiwiUmVzcG9uc2l2ZUVtYmVkX1Jlc3BvbnNpdmVFbWJlZCIsIlJlc3BvbnNpdmVFbWJlZCIsImFzcGVjdFJhdGlvIiwiZXNfUmVzcG9uc2l2ZUVtYmVkIiwiUm93X1JvdyIsIm5vR3V0dGVycyIsImVzX1JvdyIsIlNwbGl0QnV0dG9uX1NwbGl0QnV0dG9uIiwiU3BsaXRCdXR0b24iLCJ0b2dnbGVMYWJlbCIsImVzX1NwbGl0QnV0dG9uIiwiVGFiQ29udGFpbmVyX1RhYkNvbnRhaW5lciIsIlRhYkNvbnRhaW5lciIsImdldEtleSIsImdlbmVyYXRlQ2hpbGRJZCIsImVzX1RhYkNvbnRhaW5lciIsIlRhYkNvbnRlbnRfVGFiQ29udGVudCIsIlRhYkNvbnRlbnQiLCJlc19UYWJDb250ZW50IiwiVGFiUGFuZV9UYWJQYW5lIiwiVGFiUGFuZSIsInBhbmUiLCJlc19UYWJQYW5lIiwicmVzdCIsInNob3VsZFRyYW5zaXRpb24iLCJhcmlhLWxhYmVsbGVkYnkiLCJUYWJfVGFiIiwiVGFiIiwiQ29udGVudCIsIlBhbmUiLCJlc19UYWIiLCJlc19UYWJsZSIsIlRhYmxlIiwiYm9yZGVyZWQiLCJob3ZlciIsInJlc3BvbnNpdmUiLCJ0YWJsZSIsInJlc3BvbnNpdmVDbGFzcyIsIlRhYnNfVGFiQ29udGFpbmVyIiwiVGFic19UYWJzIiwiVGFicyIsInJlbmRlclRhYiIsIl9jaGlsZCRwcm9wcyIsInRhYkNsYXNzTmFtZSIsIl90aGlzJHByb3BzJGFjdGl2ZUtleSIsImRlZmF1bHRBY3RpdmVLZXkiLCJnZXREZWZhdWx0QWN0aXZlS2V5IiwiY2hpbGRQcm9wcyIsImVzX1RhYnMiLCJUb2dnbGVCdXR0b25fbm9vcCIsIlRvZ2dsZUJ1dHRvbl9Ub2dnbGVCdXR0b24iLCJUb2dnbGVCdXR0b24iLCJmb2N1c2VkIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwiYXV0b0NvbXBsZXRlIiwiZXNfVG9nZ2xlQnV0dG9uIiwiVG9nZ2xlQnV0dG9uR3JvdXBfVG9nZ2xlQnV0dG9uR3JvdXAiLCJUb2dnbGVCdXR0b25Hcm91cCIsImdldFZhbHVlcyIsInZhbHVlcyIsImJyb3dzZXJfZGVmYXVsdCIsIlVuY29udHJvbGxlZFRvZ2dsZUJ1dHRvbkdyb3VwIiwiZXNfVG9nZ2xlQnV0dG9uR3JvdXAiLCJUb29sdGlwIiwiZXNfVG9vbHRpcCIsIkVYSVRJTkciLCJFTlRFUkVEIiwiRU5URVJJTkciLCJFWElURUQiLCJVTk1PVU5URUQiLCJQcm9wVHlwZXMiLCJfcmVhY3REb20iLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiaW5pdGlhbFN0YXR1cyIsInBhcmVudEdyb3VwIiwidHJhbnNpdGlvbkdyb3VwIiwiaXNNb3VudGluZyIsImVudGVyIiwiYXBwZWFyU3RhdHVzIiwibmV4dENhbGxiYWNrIiwiZ2V0Q2hpbGRDb250ZXh0IiwidXBkYXRlU3RhdHVzIiwicHJldlByb3BzIiwibmV4dFN0YXR1cyIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwiZXhpdCIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsIm9uVHJhbnNpdGlvbkVuZCIsImNhbmNlbCIsIm5leHRTdGF0ZSIsInNldE5leHRDYWxsYmFjayIsImNvbnRleHRUeXBlcyIsImNoaWxkQ29udGV4dFR5cGVzIiwicG9seWZpbGwiLCJfdHlwZW9mMiIsIl90eXBlb2YzIiwiX2Fzc2lnbiIsIl9hc3NpZ24yIiwiX19nIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJpdCIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3NldFByb3RvdHlwZU9mMiIsIl9jcmVhdGUyIiwid3JpdGFibGUiLCJkUCIsImNyZWF0ZURlc2MiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJJT2JqZWN0IiwiZGVmaW5lZCIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsIl90cmFuc2Zvcm1Db250ZXh0IiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwiY2hhckF0Iiwic3BsaWNlT25lIiwibGlzdCIsImsiLCJyZXNvbHZlX3BhdGhuYW1lIiwiZnJvbSIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInN1YnN0ciIsIl90eXBlb2YiLCJpdGVyYXRvciIsInZhbHVlX2VxdWFsIiwidmFsdWVFcXVhbCIsImV2ZXJ5IiwiYVR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJzdHJpcExlYWRpbmdTbGFzaCIsImhhc0Jhc2VuYW1lIiwiUmVnRXhwIiwic3RyaXBCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsInNlYXJjaCIsImhhc2giLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwibGlzdGVuZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJjYW5Vc2VET00iLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiY29uZmlybSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X3R5cGVvZiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2V4dGVuZHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiZXNfY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJpbnZhcmlhbnRfYnJvd3Nlcl9kZWZhdWx0IiwidWEiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInJhbmRvbSIsInRvU3RyaW5nIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiY3JlYXRlSGFzaEhpc3RvcnlfZXh0ZW5kcyIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicmVwbGFjZUhhc2hQYXRoIiwiZXNfY3JlYXRlSGFzaEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjcmVhdGVNZW1vcnlIaXN0b3J5X3R5cGVvZiIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZXh0ZW5kcyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJlc19jcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImVudHJ5IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsIlJvdXRlcl9leHRlbmRzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSb3V0ZXJfUm91dGVyIiwiUm91dGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwibWF0Y2giLCJjb21wdXRlTWF0Y2giLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsInJvdXRlciIsInJvdXRlIiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsIndhcm5pbmdfZGVmYXVsdCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImlzUmVxdWlyZWQiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsIkJyb3dzZXJSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkJyb3dzZXJSb3V0ZXJfQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiQnJvd3NlclJvdXRlcl9pbmhlcml0cyIsInN0cmluZyIsImJvb2wiLCJudW1iZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJIYXNoUm91dGVyX2luaGVyaXRzIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmtfY2xhc3NDYWxsQ2hlY2siLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiTGlua19pbmhlcml0cyIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImFycmF5IiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0Iiwic3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwic2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwicGF0dGVybiIsImNhY2hlS2V5IiwiY2FjaGUiLCJjb21waWxlZFBhdHRlcm4iLCJyZSIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJtYXRjaFBhdGhfY29tcGlsZVBhdGgiLCJleGVjIiwibWVtbyIsIlJvdXRlX2V4dGVuZHMiLCJSb3V0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVfaXNFbXB0eUNoaWxkcmVuIiwiUm91dGVfUm91dGUiLCJSb3V0ZSIsIlJvdXRlX2NsYXNzQ2FsbENoZWNrIiwiUm91dGVfaW5oZXJpdHMiLCJjb21wdXRlZE1hdGNoIiwiY29tcG9uZW50IiwibmV4dENvbnRleHQiLCJfY29udGV4dCRyb3V0ZXIiLCJzdGF0aWNDb250ZXh0IiwiZXNfUm91dGUiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlIiwiTmF2TGlua19leHRlbmRzIiwiTmF2TGlua190eXBlb2YiLCJOYXZMaW5rX05hdkxpbmsiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJOYXZMaW5rX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXNjYXBlZFBhdGgiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiZ2VuZXJhdGVQYXRoX3BhdHRlcm5DYWNoZSIsImdlbmVyYXRlUGF0aF9jYWNoZUNvdW50IiwiZXNfZ2VuZXJhdGVQYXRoIiwiY29tcGlsZWRHZW5lcmF0b3IiLCJjb21waWxlIiwiZ2VuZXJhdGVQYXRoX2NvbXBpbGVHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJSZWRpcmVjdF9leHRlbmRzIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwicGVyZm9ybSIsInByZXZUbyIsIm5leHRUbyIsImNvbXB1dGVUbyIsInJlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZExlYWRpbmdTbGFzaCIsImFkZEJhc2VuYW1lIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIlN0YXRpY1JvdXRlcl9TdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVQdXNoIiwiaGFuZGxlUmVwbGFjZSIsImhhbmRsZUxpc3RlbiIsImhhbmRsZUJsb2NrIiwiU3RhdGljUm91dGVyX2luaGVyaXRzIiwiU3RhdGljUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiYmFzZSIsIlN0YXRpY1JvdXRlcl9zdHJpcEJhc2VuYW1lIiwicmVhY3Rfcm91dGVyX2RvbV9lc19TdGF0aWNSb3V0ZXIiLCJTd2l0Y2hfU3dpdGNoIiwiU3dpdGNoIiwiU3dpdGNoX2NsYXNzQ2FsbENoZWNrIiwiU3dpdGNoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTd2l0Y2hfaW5oZXJpdHMiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Td2l0Y2giLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX2dlbmVyYXRlUGF0aCIsInJlYWN0X3JvdXRlcl9kb21fZXNfbWF0Y2hQYXRoIiwid2l0aFJvdXRlcl9leHRlbmRzIiwicmVhY3Rfcm91dGVyX2RvbV9lc193aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIndpdGhSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyb3V0ZUNvbXBvbmVudFByb3BzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJyZW5kZXJGbiIsIl9yZWYkYWxsb3dGYWxsYmFjayIsImFsbG93RmFsbGJhY2siLCJvd25lckRvY3VtZW50IiwicmVjYWxjIiwiX2luRE9NIiwic2Nyb2xsRGl2IiwicG9zaXRpb24iLCJ0b3AiLCJvdmVyZmxvdyIsIm9mZnNldFdpZHRoIiwiY2xpZW50V2lkdGgiLCJyZW1vdmVDaGlsZCIsIlNlc3Npb24iLCJBdXRoZW50aWNhdGlvbkNvbnRleHQiLCJSZWFjdCIsImp3dCIsImlzQXV0aGVudGljYXRlZCIsImxvZ2luIiwibG9nb3V0IiwiQXV0aGVudGljYXRpb25Db25zdW1lciIsIkF1dGhlbnRpY2F0aW9uUHJvdmlkZXIiLCJnZXRQcm90b3R5cGVPZiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJlbWFpbCIsInBhc3N3b3JkIiwiY3JlYXRlU2Vzc2lvbiIsImRlbGV0ZVNlc3Npb24iLCJfc3RhdGUiLCJwcm92aWRlclZhbHVlcyIsIl9yZWFjdDIiLCJ3aXRoQXV0aGVudGljYXRpb24iLCJfd2l0aF9jb250ZXh0X2NvbnN1bWVyMiIsImN0eCIsImhhcyIsIiRleHBvcnQiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsInZpcnR1YWwiLCJSIiwiVSIsImlzT2JqZWN0IiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImZhbGxiYWNrIiwicGFyZW50Tm9kZSIsIl9zdHlsZSIsIm9uRW5kIiwiZHVyYXRpb24iLCJiYWNrdXAiLCJmYWtlRXZlbnQiLCJkb25lIiwicGFyc2VEdXJhdGlvbiIsIl9wYXJzZUR1cmF0aW9uIiwibXVsdCIsImJpdG1hcCIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJweCIsInZhbGlkYXRvciIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJjb21wb25lbnROYW1lU2FmZSIsInByb3BGdWxsTmFtZVNhZmUiLCJySHlwaGVuIiwiY2hyIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJuZXh0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsIm1hdGNoZXMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJzdHJpbmdpZnkiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJfb24iLCJfb2ZmIiwiX2ZpbHRlciIsIl9saXN0ZW4iLCJfc2Vzc2lvbiIsIl9yZWYkbWV0aG9kIiwiX3JlZiRwYXJhbXMiLCJyZXRyaWV2ZUpXVCIsImhlYWRlcnMiLCJIZWFkZXJzIiwiYXBwZW5kIiwibG9nIiwicHJvY2VzcyIsImVudiIsImZldGNoIiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwianNvbiIsIlRoZW1lQ29udGV4dCIsInRoZW1lIiwic2V0VGhlbWVMaWdodCIsInNldFRoZW1lRGFyayIsInRvZ2dsZVRoZW1lIiwic2V0VGhlbWUiLCJ3aXRoVGhlbWUiLCJhbmltYXRpb25FbmQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvblRpbWluZyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uVGltaW5nIiwidHJhbnNpdGlvblByb3BlcnR5IiwiX2dldFRyYW5zaXRpb25Qcm9wZXJ0IiwidmVuZG9yTWFwIiwiTW96IiwiV2Via2l0IiwibXMiLCJ2ZW5kb3JzIiwidmVuZG9yIiwiZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMiLCJ0aW1pbmciLCJ2YWwiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInNoYXJlZCIsImNvcHlyaWdodCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJjb250ZW50V2luZG93Iiwid3JpdGUiLCJsdCIsIlByb3BlcnRpZXMiLCJkZWYiLCJUQUciLCJ0YWciLCJzdGF0IiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJnIiwiZXZhbCIsIm1lbnVSZWYiLCJ0b2dnbGVSZWYiLCJ0b2dnbGVOb2RlIiwiZXZlbnROYW1lIiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiIsInByb3BUeXBlIiwibm9kZVR5cGUiLCJ2YWxpZGF0ZSIsImNoZWNrVHlwZSIsImNoYWluZWRDaGVja1R5cGUiLCJNYW5hZ2VyQ29udGV4dCIsImdldFJlZmVyZW5jZVJlZiIsInJlZmVyZW5jZU5vZGUiLCJlc21fTWFuYWdlciIsIk1hbmFnZXIiLCJjbGFzc0NhbGxDaGVja19kZWZhdWx0IiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybl9kZWZhdWx0IiwiZXh0ZW5kc19kZWZhdWx0IiwiaW5oZXJpdHNfZGVmYXVsdCIsInVud3JhcEFycmF5Iiwic2FmZUludm9rZSIsImluaXRpYWxTdHlsZSIsImxlZnQiLCJvcGFjaXR5IiwicG9pbnRlckV2ZW50cyIsImluaXRpYWxBcnJvd1N0eWxlIiwiUG9wcGVyX0lubmVyUG9wcGVyIiwiSW5uZXJQb3BwZXIiLCJfcmV0IiwicG9wcGVyTm9kZSIsImFycm93Tm9kZSIsInNldFBvcHBlck5vZGUiLCJ1cGRhdGVQb3BwZXJJbnN0YW5jZSIsInNldEFycm93Tm9kZSIsInBvcHBlckluc3RhbmNlIiwidXBkYXRlU3RhdGVNb2RpZmllciIsImdldE9wdGlvbnMiLCJldmVudHNFbmFibGVkIiwicG9zaXRpb25GaXhlZCIsImFycm93IiwiYXBwbHlTdHlsZSIsImdldFBvcHBlclN0eWxlIiwib2Zmc2V0cyIsInN0eWxlcyIsImdldFBvcHBlclBsYWNlbWVudCIsImdldEFycm93U3R5bGUiLCJhcnJvd1N0eWxlcyIsImdldE91dE9mQm91bmRhcmllc1N0YXRlIiwiZGVzdHJveVBvcHBlckluc3RhbmNlIiwiZGVzdHJveSIsInJlZmVyZW5jZUVsZW1lbnQiLCJlbmFibGVFdmVudExpc3RlbmVycyIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInBsYWNlbWVudHMiLCJQb3BwZXIiLCJSZWZlcmVuY2VfSW5uZXJSZWZlcmVuY2UiLCJJbm5lclJlZmVyZW5jZSIsInJlZkhhbmRsZXIiLCJSZWZlcmVuY2UiLCJfcHJvcFR5cGVzIiwiX3JlYWN0UG9wcGVyIiwiX0Ryb3Bkb3duQ29udGV4dCIsIl9Sb290Q2xvc2VXcmFwcGVyIiwiX21hcENvbnRleHRUb1Byb3BzIiwidG9nZ2xlSWQiLCJwb3BwZXJJc0luaXRpYWxpemVkIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJzaG91bGRVcGRhdGVQb3BwZXIiLCJfXyIsIm1lbnUiLCJjaGlsZEFyZ3MiLCJvblJvb3RDbG9zZSIsImFueSIsImFyaWEtaGFzcG9wdXAiLCJfc2Nyb2xsYmFyU2l6ZSIsIl9pc092ZXJmbG93aW5nIiwiX21hbmFnZUFyaWFIaWRkZW4iLCJNb2RhbE1hbmFnZXIiLCJfcmVmJGhpZGVTaWJsaW5nTm9kZXMiLCJoaWRlU2libGluZ05vZGVzIiwiX3JlZiRoYW5kbGVDb250YWluZXJPIiwiaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3ciLCJtb2RhbHMiLCJjb250YWluZXJzIiwic2Nyb2xsYmFyU2l6ZSIsIm1vZGFsIiwiY29udGFpbmVySW5kZXhGcm9tTW9kYWwiLCJhcnIiLCJzb21lIiwiYWRkIiwibW9kYWxJZHgiLCJjb250YWluZXJJZHgiLCJoaWRlU2libGluZ3MiLCJhZGRDbGFzcyIsInJlbW92ZSIsInJlbW92ZUNsYXNzIiwic2hvd1NpYmxpbmdzIiwiX2RhdGEkbW9kYWxzIiwiYXJpYUhpZGRlbiIsImlzVG9wTW9kYWwiLCJfbWF0Y2hlcyIsIl9xdWVyeVNlbGVjdG9yQWxsIiwiX3VuY29udHJvbGxhYmxlIiwiX0Ryb3Bkb3duTWVudSIsIl9Ecm9wZG93blRvZ2dsZSIsInRvZ2dsZU9wZW4iLCJnZXROZXh0Rm9jdXNlZENoaWxkIiwiX25leHQiLCJfZm9jdXNJbkRyb3Bkb3duIiwibGFzdFNob3ciLCJwcmV2T3BlbiIsIm1heWJlRm9jdXNGaXJzdCIsImhhc01lbnVSb2xlIiwiZmlyc3QiLCJhY3RpdmVFbGVtZW50IiwiaXNCcm93c2VyIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwiZGVib3VuY2UiLCJjYWxsZWQiLCJzY2hlZHVsZWQiLCJpc0Z1bmN0aW9uIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsImdldE9mZnNldFBhcmVudCIsIm5vT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInVwcGVyU2lkZSIsImh0bWwiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJnZXRDbGllbnRSZWN0IiwicmlnaHQiLCJib3R0b20iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsImluY2x1ZGVTY3JvbGwiLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwicGFyZW50RWxlbWVudCIsImdldEJvdW5kYXJpZXMiLCJyZWZlcmVuY2UiLCJwYWRkaW5nIiwiYm91bmRhcmllc0VsZW1lbnQiLCJib3VuZGFyaWVzIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiYm91bmRhcmllc05vZGUiLCJpc0ZpeGVkIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsImFyZWEiLCJzb3J0IiwiZmlsdGVyZWRBcmVhcyIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJ4IiwibWFyZ2luQm90dG9tIiwieSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiZmluZCIsInJ1bk1vZGlmaWVycyIsImVuZHMiLCJmaW5kSW5kZXgiLCJjdXIiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInVwcGVyUHJvcCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlzTnVtZXJpYyIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJyZXZlcnNlIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwiZGl2aWRlciIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0Iiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsImtlZXBUb2dldGhlciIsIm9wU2lkZSIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwiZmxpcHBlZCIsIm9yaWdpbmFsUGxhY2VtZW50IiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJiZWhhdmlvciIsInN0ZXAiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbiIsImZsaXBWYXJpYXRpb25zIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiYXR0cmlidXRlcyIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsImpxdWVyeSIsIlBvcHBlclV0aWxzIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG9PYmplY3QiLCJDb250ZXh0Q29uc3VtZXIiLCJfYXBpIiwic3RvcmVKV1QiLCJzZXJpYWxpemVkIiwic2V0SXRlbSIsIl9hcGkyIiwiY2F0Y2giLCJyZW1vdmVJdGVtIiwiX2NhbWVsaXplIiwibXNQYXR0ZXJuIiwiYUZ1bmN0aW9uIiwidGhhdCIsImlzIiwidG9JT2JqZWN0IiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJjb2YiLCJfaXRlcmF0b3IyIiwiX3N5bWJvbDIiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsInByb3RvIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJoaWRkZW5LZXlzIiwicElFIiwiZ09QRCIsIl9jb250YWlucyIsIl9vd25lckRvY3VtZW50IiwiZXNjYXBlS2V5Q29kZSIsIlJvb3RDbG9zZVdyYXBwZXIiLCJhZGRFdmVudExpc3RlbmVycyIsImRvYyIsInJlbW92ZU1vdXNlQ2FwdHVyZUxpc3RlbmVyIiwiaGFuZGxlTW91c2VDYXB0dXJlIiwicmVtb3ZlTW91c2VMaXN0ZW5lciIsImhhbmRsZU1vdXNlIiwicmVtb3ZlS2V5dXBMaXN0ZW5lciIsImhhbmRsZUtleVVwIiwibW9iaWxlU2FmYXJpSGFja0xpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwicHJldmVudE1vdXNlUm9vdENsb3NlIiwiaXNMZWZ0Q2xpY2tFdmVudCIsImtleUNvZGUiLCJzcmNFbGVtZW50IiwiY29tcG9uZW50T3JFbGVtZW50IiwiX3JlYWN0SXMiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJjbGFzc0xpc3QiLCJiYXNlVmFsIiwiX2NvbXBvbmVudE9yRWxlbWVudCIsIl9XYWl0Rm9yQ29udGFpbmVyIiwiUG9ydGFsIiwib25Db250YWluZXJSZXNvbHZlZCIsIm9uUmVuZGVyZWQiLCJjcmVhdGVQb3J0YWwiLCJfZ2V0Q29udGFpbmVyIiwiV2FpdEZvckNvbnRhaW5lciIsInNldENvbnRhaW5lciIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiX2NvbnRhaW5lciIsImRlZmF1bHRDb250YWluZXIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJfY2xhc3NuYW1lcyIsIl9jcmVhdGVXaXRoQnNQcmVmaXgiLCJfVGhlbWVQcm92aWRlciIsIl9Gb3JtR3JvdXAiLCJfRm9ybUNvbnRyb2wiLCJfRm9ybUNoZWNrIiwiX0Zvcm1MYWJlbCIsIl9Gb3JtVGV4dCIsIl9GZWVkYmFjayIsIl9Gb3JtQ29udGV4dCIsIl9TYWZlQW5jaG9yIiwiX0Fic3RyYWN0TmF2IiwiX0xpc3RHcm91cEl0ZW0iLCJfc2V0U3RhdGljIiwiX3NldFN0YXRpYzIiLCJfZ2V0RGlzcGxheU5hbWUiLCJfZ2V0RGlzcGxheU5hbWUyIiwiQmFzZUNvbXBvbmVudCIsImhvY05hbWUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiY2FsY3VsYXRlUmdiYSIsImNvbG9yIiwicmdiVmFsdWVzIiwiaGV4IiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInJlZnMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhdHRycyIsIm5vbmNlIiwibmMiLCJnZXROb25jZSIsImFkZEF0dHJzIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwic3R5bGVTaGVldCIsImNyZWF0ZVRleHROb2RlIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsIlJFQUNUX1NUQVRJQ1MiLCJnZXREZWZhdWx0UHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsIl9lbmQiLCJfaW1wbGVtZW50YXRpb24yIiwiX2FjdGl2ZUVsZW1lbnQiLCJfZWxlbWVudFR5cGUiLCJfUG9ydGFsIiwibW9kYWxNYW5hZ2VyIiwiZXhpdGVkIiwib25Qb3J0YWxSZW5kZXJlZCIsInJlbW92ZUtleWRvd25MaXN0ZW5lciIsImhhbmRsZURvY3VtZW50S2V5RG93biIsInJlbW92ZUZvY3VzTGlzdGVuZXIiLCJyZXN0b3JlTGFzdEZvY3VzIiwic2V0RGlhbG9nUmVmIiwic2V0QmFja2Ryb3BSZWYiLCJoYW5kbGVIaWRkZW4iLCJoYW5kbGVCYWNrZHJvcENsaWNrIiwib25CYWNrZHJvcENsaWNrIiwiX2lzTW91bnRlZCIsImN1cnJlbnRBY3RpdmVFbGVtZW50IiwibGFzdEZvY3VzIiwicmVuZGVyRGlhbG9nIiwiX3RoaXMkcHJvcHM0JHJvbGUiLCJkaWFsb2dQcm9wcyIsImFyaWEtbW9kYWwiLCJvbWl0UHJvcHMiLCJPdmVybGF5Iiwib25IaWRkZW5MaXN0ZW5lciIsIl9sYXN0VGFyZ2V0IiwiY29udGFpbmVyUGFkZGluZyIsIl90aGlzJHByb3BzMiRwb3BwZXJDbyIsIl9wb3BwZXJDb25maWckbW9kaWZpZSIsInBvcHBlclByb3BzIiwiZW5hYmxlRXZlbnRzIiwiaW5uZXJDaGlsZCIsImluc2VydFJ1bGUiLCJ0b1NoZWV0Iiwic2VsZWN0b3JzIiwibGluZSIsImRlcHRoIiwiYXQiLCJmYWN0b3J5IiwibWVtb2l6ZV9lc20iLCJ1bml0bGVzc19lc20iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJXZWJraXRMaW5lQ2xhbXAiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJoYXNoX2VzbSIsInN0eWxpc19lc20iLCJYIiwiaWEiLCJaIiwidiIsInciLCJMIiwiamEiLCJrYSIsImFhIiwiYmEiLCJsYSIsIm1hIiwibmEiLCJlYSIsIm9hIiwiSCIsInEiLCJBIiwiRCIsInoiLCJNIiwiSyIsInUiLCJJIiwiSiIsIk4iLCJjYSIsImRhIiwiZmEiLCJZIiwiRSIsImhhIiwiUSIsInVzZSIsIlQiLCJoeXBoZW5hdGVSZWdleCIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJpbmRleF9lc21fcHJvY2Vzc1N0eWxlVmFsdWUiLCJjbGFzc25hbWVzIiwiY2xzIiwidG9BZGQiLCJtYWtlU3R5bGVUYWciLCJTdHlsZVNoZWV0IiwiaXNTcGVlZHkiLCJ0YWdzIiwiY3RyIiwiaW5qZWN0IiwiaW5qZWN0ZWQiLCJzcGVlZHkiLCJpbnNlcnQiLCJydWxlIiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJzaGVldEZvclRhZyIsImNzc1J1bGVzIiwiX3RhZyIsIl9fU0VDUkVUX0VNT1RJT05fXyIsInN0eWxpc09wdGlvbnMiLCJpbnNlcnRpb25QbHVnaW4iLCJzdHlsaXNfcnVsZV9zaGVldF9kZWZhdWx0IiwiY3VycmVudFNvdXJjZU1hcCIsInJlZ2lzdGVyZWQiLCJpbnNlcnRlZCIsInN0eWxpcyIsInN0eWxpc1BsdWdpbnMiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwiaW50ZXJwb2xhdGlvbiIsImNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwibWVyZ2VkUHJvcHMiLCJvYmplY3RUb1N0cmluZ0NhY2hlIiwiY2FjaGVkIiwic3R5bGVzV2l0aExhYmVsIiwiV2Vha01hcCIsImxhYmVsUGF0dGVybiIsImNyZWF0ZVN0eWxlcyIsInN0cmluZ3MiLCJzdHJpbmdNb2RlIiwiaWRlbnRpZmllck5hbWUiLCJyYXciLCJpbnRlcnBvbGF0aW9ucyIsInAxIiwiY3JlYXRlQ2xhc3NOYW1lIiwic2NvcGUiLCJyZWdpc3RlcmVkU3R5bGVzIiwicmF3Q2xhc3NOYW1lIiwiaHlkcmF0ZVNpbmdsZUlkIiwiY2h1bmtzIiwiZW1vdGlvbiIsImlkcyIsInJvb3RFbGVtIiwicmVhY3RNYWluRWxlbSIsIlJlYWN0TWFpbiIsIlJlYWN0RE9NIiwiZm9yIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInVwZGF0ZXIiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImN1cnJlbnREaXNwYXRjaGVyIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJrZXlQcmVmaXgiLCJWIiwiPSIsIjoiLCJlc2NhcGUiLCJQdXJlQ29tcG9uZW50IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImNvbXBhcmUiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjcmVhdGVGYWN0b3J5IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJvbkVycm9yIiwicGEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInFhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJzYSIsInRhIiwiZGVwZW5kZW5jaWVzIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsInJldHVybiIsIk5hIiwiZGlzcGF0Y2hDb25maWciLCJPYSIsIl90YXJnZXRJbnN0IiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVmEiLCJXYSIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImViIiwiZmIiLCJnYiIsInRleHRDb250ZW50IiwiaGIiLCJpYiIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwia2IiLCJldmVudFBvb2wiLCJsYiIsImRlc3RydWN0b3IiLCJqYiIsImdldFBvb2xlZCIsImNhbmNlbEJ1YmJsZSIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJtYiIsIm5iIiwib2IiLCJwYiIsInFiIiwicmIiLCJzYiIsInRiIiwidWIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwidmIiLCJ3YiIsInhiIiwiZGV0YWlsIiwieWIiLCJCYiIsImxvY2FsZSIsIndoaWNoIiwiemIiLCJjaGFyIiwiQWIiLCJDYiIsIkRiIiwiRWIiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsIm1vbnRoIiwidGVsIiwidGltZSIsIndlZWsiLCJRYiIsIlJiIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJTYiIsIlRiIiwiVmIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlViIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJvYyIsInBjIiwicWMiLCJyYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ2YyIsInhjIiwieWMiLCJ0YyIsInVjIiwic2MiLCJzZXRBdHRyaWJ1dGVOUyIsInpjIiwiQWMiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkJjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJjaGFuZ2UiLCJIYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIldjIiwidmlldyIsIlhjIiwiQWx0IiwiTWV0YSIsIlNoaWZ0IiwiWWMiLCJnZXRNb2RpZmllclN0YXRlIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsImRkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJlZCIsInBvaW50ZXJJZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJmZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZ2QiLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm5kIiwic2libGluZyIsIm1kIiwib2QiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJwZCIsImNsaXBib2FyZERhdGEiLCJxZCIsInJkIiwiY2hhckNvZGUiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInVkIiwidmQiLCJkYXRhVHJhbnNmZXIiLCJ3ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ4ZCIsInlkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsImlzSW50ZXJhY3RpdmUiLCJEZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkVkIiwiRmQiLCJHZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlRkIiwiVWQiLCJjb250ZW50RWRpdGFibGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJlZSIsImRlIiwiZmUiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImdlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoZSIsImllIiwiamUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwia2UiLCJtYXRobWwiLCJzdmciLCJsZSIsIm5lIiwib2UiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGUiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJxZSIsImdyaWRBcmVhIiwibGluZUNsYW1wIiwic2UiLCJ0ZSIsInNldFByb3BlcnR5IiwidWUiLCJtZW51aXRlbSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmUiLCJ3ZSIsInhlIiwiYmx1ciIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJfX2h0bWwiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIlNldCIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIldlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJmaXJzdENvbnRleHREZXBlbmRlbmN5IiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJYZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiZWYiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImZmIiwiZ2YiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImhmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJsZiIsIm1mIiwicGF5bG9hZCIsIm5mIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInRmIiwidWYiLCJ2ZiIsInN0YWNrIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIm9ic2VydmVkQml0cyIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsIktmIiwiTGYiLCJOZiIsIk9mIiwiUGYiLCJVZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlZmIiwiV2YiLCJjb250ZXh0VHlwZSIsInJlYWRDb250ZXh0IiwiWGYiLCJZZiIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJaZiIsIiRmIiwiX3N0cmluZ1JlZiIsImFnIiwiZGVsZXRlIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJ2ZyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIndnIiwicGVuZGluZ0NvbnRleHQiLCJ4ZyIsInRpbWVkT3V0QXQiLCJ5ZyIsIk1mIiwiWWUiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ6ZyIsIkFnIiwiQmciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJfcmVhY3RSb290Q29udGFpbmVyIiwib25jbGljayIsIk9nIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIlBnIiwiUWciLCJSZyIsImNvbXBvbmVudERpZENhdGNoIiwiU2ciLCJjb21wb25lbnRTdGFjayIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiZWgiLCJjcmVhdGVFbGVtZW50TlMiLCJmaCIsImdoIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiaGgiLCJtYXhEdXJhdGlvbiIsImloIiwiZmluaXNoZWRXb3JrIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsInVuc3RhYmxlX25vdyIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiRmgiLCJ0aW1lb3V0SGFuZGxlIiwiSGgiLCJJaCIsIm5leHRTY2hlZHVsZWRSb290IiwiSmgiLCJLaCIsIkxoIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIk1oIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJkYiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIkZiIiwiR2IiLCJ3YyIsImNpIiwiQ2ciLCJEZyIsImRpIiwiSWMiLCJFZyIsImNlIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVmgiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJXaCIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJYaCIsIl9pbnRlcm5hbFJvb3QiLCJZaCIsIiRoIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiWmgiLCJhaSIsIlVoIiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsImJpIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJWZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJlaSIsImZpIiwicHJpb3JpdHlMZXZlbCIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIl9yZWFjdFJvdXRlckRvbSIsIl9hdXRoZW50aWNhdGlvbiIsIl90aGVtZSIsIl9sYXlvdXQyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiX3JlYWN0Qm9vdHN0cmFwIiwiTGF5b3V0IiwiX25hdmlnYXRpb24yIiwieHMiLCJfcm91dGVyX291dGxldDIiLCJfZm9vdGVyMiIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsInRyYW5zaXRpb25UaW1lb3V0IiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJjbGFzc05hbWVzU2hhcGUiLCJ0aW1lb3V0c1NoYXBlIiwiZW50ZXJEb25lIiwiZW50ZXJBY3RpdmUiLCJleGl0RG9uZSIsImV4aXRBY3RpdmUiLCJfaHlwaGVuYXRlIiwiclVwcGVyIiwib3BlbmVyIiwiY3VycmVudFN0eWxlIiwicm51bW5vbnB4IiwicnBvc2l0aW9uIiwicnVuU3R5bGUiLCJydW50aW1lU3R5bGUiLCJyc0xlZnQiLCJwaXhlbExlZnQiLCJyZW1vdmVQcm9wZXJ0eSIsInN1cHBvcnRlZFRyYW5zZm9ybXMiLCJtYXRjaGVzQ2FjaGUiLCJuYXRpdmVNYXRjaCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiaWU4TWF0Y2hlc1NlbGVjdG9yIiwiZ2V0S2V5cyIsImdPUFMiLCIkYXNzaWduIiwiYUxlbiIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJ0b0ludGVnZXIiLCIkYXQiLCJpdGVyYXRlZCIsIl90IiwiX2kiLCJwb2ludCIsIlRPX1NUUklORyIsInBvcyIsIk9iamVjdFByb3RvIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIkNvbGxlY3Rpb24iLCJhZGRUb1Vuc2NvcGFibGVzIiwiX2siLCJBcmd1bWVudHMiLCJERVNDUklQVE9SUyIsIk1FVEEiLCJLRVkiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCJnT1BOIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImJ1Z2d5IiwiJE9iamVjdCIsIl9wcm9wVHlwZXMyIiwiX2d1ZDIiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsImVtaXR0ZXIiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZvcndhcmRSZWYiLCJQcm9maWxlciIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNQcm9maWxlciIsImlzUG9ydGFsIiwiaXNTdHJpY3RNb2RlIiwiX2FkZENsYXNzIiwiX3JlbW92ZUNsYXNzIiwiX2hhc0NsYXNzIiwiaGFzQ2xhc3MiLCJyZXBsYWNlQ2xhc3NOYW1lIiwib3JpZ0NsYXNzIiwiY2xhc3NUb1JlbW92ZSIsIl9pc1dpbmRvdyIsIndpbiIsImJvZHlJc092ZXJmbG93aW5nIiwicm9vdCIsInNpYmxpbmdzIiwiQkxBQ0tMSVNUIiwiZXhjbHVkZSIsInZhbGlkYXRvcnMiLCJfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJfc2VhcmNoX2Zvcm0yIiwiU2VhcmNoRm9ybVdpdGhSb3V0ZXIiLCJ3aXRoUm91dGVyIiwic2VhcmNoSW5wdXQiLCJfRm9ybTIiLCJvblN1Ym1pdCIsIl9Gb3JtQ29udHJvbDIiLCJwbGFjZWhvbGRlciIsIl9CdXR0b24yIiwicGFzY2FsQ2FzZSIsIl9Gb3JtQ2hlY2tJbnB1dCIsIl9Gb3JtQ2hlY2tMYWJlbCIsIl9Db2wiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsIl9jcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJyZWRpcmVjdFRvTG9naW4iLCJfaGVsbG9fd29ybGQyIiwiSGVsbG9Gcm9tUGFyYW1zIiwiVG9kb0FwcENvbnRhaW5lciIsIk1lc3NhZ2VzQ29udGFpbmVyIiwiTWVzc2FnZUNvbnRhaW5lciIsIkxvZ2luQ29udGFpbmVyIiwiSGVsbG9Xb3JsZCIsImhhbmRsZUNoYW5nZSIsImhhbmRsZVN1Ym1pdCIsIm5ld0l0ZW0iLCJfdG9kb19hcHBfY29tcG9uZW50MiIsImN1cnJlbnRUZXh0IiwiX3RvZG9fZm9ybTIiLCJuZXh0UG9zaXRpb24iLCJfdG9kb19saXN0MiIsIl9MaXN0R3JvdXAyIiwiX3RvZG9faXRlbTIiLCJfU2VsZWN0YWJsZUNvbnRleHQiLCJfTmF2Q29udGV4dCIsIl9UYWJDb250ZXh0IiwiX0Fic3RyYWN0TmF2SXRlbSIsIm1lc3NhZ2VzIiwiZGVsZXRlTWVzc2FnZSIsIl9pZCIsIl9pZ25vcmVkIiwibWVzc2FnZUluZGV4IiwiZmV0Y2hNZXNzYWdlcyIsIl9tZXNzYWdlc19jb21wb25lbnQyIiwiX21lc3NhZ2VfaXRlbTIiLCJkZXRhaWxzUGF0aCIsImZldGNoTWVzc2FnZSIsIl9tZXNzYWdlX2NvbXBvbmVudDIiLCJfcmVhY3RTcGlubmVycyIsIkNpcmNsZUxvYWRlciIsIl9CYXJMb2FkZXIiLCJfQmVhdExvYWRlciIsIl9Cb3VuY2VMb2FkZXIiLCJfQ2lyY2xlTG9hZGVyIiwiX0NsaXBMb2FkZXIiLCJfQ2xpbWJpbmdCb3hMb2FkZXIiLCJfRG90TG9hZGVyIiwiX0ZhZGVMb2FkZXIiLCJfR3JpZExvYWRlciIsIl9IYXNoTG9hZGVyIiwiX01vb25Mb2FkZXIiLCJfUGFjbWFuTG9hZGVyIiwiX1Byb3BhZ2F0ZUxvYWRlciIsIl9QdWxzZUxvYWRlciIsIl9SaW5nTG9hZGVyIiwiX1Jpc2VMb2FkZXIiLCJfUm90YXRlTG9hZGVyIiwiX1NjYWxlTG9hZGVyIiwiX1N5bmNMb2FkZXIiLCJfQmFyTG9hZGVyMiIsIl9CZWF0TG9hZGVyMiIsIl9Cb3VuY2VMb2FkZXIyIiwiX0NpcmNsZUxvYWRlcjIiLCJfQ2xpcExvYWRlcjIiLCJfQ2xpbWJpbmdCb3hMb2FkZXIyIiwiX0RvdExvYWRlcjIiLCJfRmFkZUxvYWRlcjIiLCJfR3JpZExvYWRlcjIiLCJfSGFzaExvYWRlcjIiLCJfTW9vbkxvYWRlcjIiLCJfUGFjbWFuTG9hZGVyMiIsIl9Qcm9wYWdhdGVMb2FkZXIyIiwiX1B1bHNlTG9hZGVyMiIsIl9SaW5nTG9hZGVyMiIsIl9SaXNlTG9hZGVyMiIsIl9Sb3RhdGVMb2FkZXIyIiwiX1NjYWxlTG9hZGVyMiIsIl9TeW5jTG9hZGVyMiIsIkJhckxvYWRlciIsIkJlYXRMb2FkZXIiLCJCb3VuY2VMb2FkZXIiLCJDbGlwTG9hZGVyIiwiQ2xpbWJpbmdCb3hMb2FkZXIiLCJEb3RMb2FkZXIiLCJGYWRlTG9hZGVyIiwiR3JpZExvYWRlciIsIkhhc2hMb2FkZXIiLCJNb29uTG9hZGVyIiwiUGFjbWFuTG9hZGVyIiwiUHJvcGFnYXRlTG9hZGVyIiwiUHVsc2VMb2FkZXIiLCJSaW5nTG9hZGVyIiwiUmlzZUxvYWRlciIsIlJvdGF0ZUxvYWRlciIsIlNjYWxlTG9hZGVyIiwiU3luY0xvYWRlciIsIl9lbW90aW9uIiwiX29ubHlVcGRhdGVGb3JLZXlzIiwiX2luZGV4IiwiTG9hZGVyIiwiX29ubHlVcGRhdGVGb3JLZXlzMiIsIl9jcmVhdGVDbGFzcyIsImxvbmciLCJzaG9ydCIsImhlaWdodFVuaXQiLCJ3cmFwcGVyIiwid2lkdGhVbml0IiwibG9hZGluZyIsIl9jbGFzc0NhbGxDaGVjazMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMiLCJfaW5oZXJpdHMzIiwiU2hvdWxkVXBkYXRlIiwiX3NoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImJlYXQiLCJzaXplVW5pdCIsIm1hcmdpbiIsImJvdW5jZSIsImNpcmNsZSIsImNsaXAiLCJjbGltYmluZ0JveCIsImhpbGwiLCJyb3RhdGUiLCJyYWRpdXMiLCJyYWRpdXNVbml0IiwicXVhcnRlciIsImdyaWQiLCJyYW5kIiwidGhpY2tuZXNzIiwibGF0IiwiYWZ0ZXIiLCJtb29uIiwibW9vblNpemUiLCJiYWxsU3R5bGUiLCJiYWxsIiwicGFjbWFuIiwiczEiLCJzMiIsInBhY21hblN0eWxlIiwiX3RoaXMkcHJvcHM2IiwicGFjIiwibWFuIiwiZGlzdGFuY2UiLCJwcm9wYWdhdGUiLCJwdWxzZSIsImV2ZW4iLCJvZGQiLCJzY2FsZSIsInN5bmMiLCJhdXRoZW50aWNhdGUiLCJvbkZpZWxkQ2hhbmdlIiwiX3N0YXRlMiIsImF1dGhlbnRpY2F0ZWQiLCJfbG9naW5fY29tcG9uZW50MiIsInNtIiwiTmF2aWdhdGlvbldpdGhBdXRoZW50aWNhdGlvbiIsIk5hdmlnYXRpb25XaXRoQXV0aGVudGljYXRpb25BbmRUaGVtZSIsImhtciIsImxvY2FscyIsIm5ld0NvbnRlbnQiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJjdXJyZW50RGlyIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIl0sIm1hcHBpbmdzIjoiYUFHQSxJQUFBQSxFQUFBQyxPQUFBLGlCQUNBQSxPQUFBLGlCQUNBLFNBQUFDLEVBQUFDLElBaVJBLFNBQUFELEVBQUFDLEdBQ0EsSUFBQUMs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RyxLQUFBd3FHLEdBQ0FILEdBUUFFLEVBRkEsSUFBQUMsRUFBQTUrRyxRQUFBLE1BRUE0K0csRUFDRyxJQUFBQSxFQUFBNStHLFFBQUEsS0FFSHMrRyxFQUFBTSxFQUdBSixFQUFBSSxFQUFBNXpHLFFBQUEsWUFJQSxPQUFBaEksS0FBQXNnRCxVQUFBcTdELEdBQUEseUJDbEZBLElBQUFyNUMsRUFBYzVsRSxFQUFRLElBRXRCLGlCQUFBNGxFLE1BQUEsRUFBNENoaEUsRUFBQTdDLEVBQVM2akUsRUFBQSxNQU9yRCxJQUFBbmhFLEVBQUEsQ0FBZWc2RyxLQUFBLEVBRWY5b0csZUFQQUEsRUFRQWl5RCxnQkFBQWovRCxHQUVBdEYsRUFBYXJELEVBQVEsSUFBUkEsQ0FBOEQ0bEUsRUFBQW5oRSxHQUUzRW1oRSxFQUFBODRDLFNBQUE5NUcsRUFBQTBELFFBQUFzOUQsRUFBQTg0QyxRQUdBOTVHLEVBQUF6RSxJQUFBcUksT0FBbUIsR0FBZ0gsV0FDbkksSUFBQW0yRyxFQUFtQjMrRyxFQUFRLElBaUIzQixHQWZBLGlCQUFBMitHLE1BQUEsRUFBb0QvNUcsRUFBQTdDLEVBQVM0OEcsRUFBQSxPQUU3RCxTQUFBMzRHLEVBQUFDLEdBQ0EsSUFBQTZELEVBQUE5QyxFQUFBLEVBRUEsSUFBQThDLEtBQUE5RCxFQUFBLENBQ0EsSUFBQUMsR0FBQUQsRUFBQThELEtBQUE3RCxFQUFBNkQsR0FBQSxTQUNBOUMsSUFHQSxJQUFBOEMsS0FBQTdELEVBQUFlLElBRUEsV0FBQUEsRUFWQSxDQVdHNCtELEVBQUE4NEMsT0FBQUMsRUFBQUQsUUFFSCxVQUFBbjhHLE1BQUEsdURBRUFjLEVBQUFzN0csS0FHQS81RyxFQUFBekUsSUFBQTBJLFFBQUEsV0FBZ0N4RiIsImZpbGUiOiJhcHBsaWNhdGlvbi1jNzMzNjQxOTI1NjNlNWNkYjI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbiBcdFx0aWYgKG51bGwpIHNjcmlwdC5jcm9zc09yaWdpbiA9IG51bGw7XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0fVxuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCJjNzMzNjQxOTI1NjNlNWNkYjI1NFwiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuIFx0XHR2YXIgY2I7XG4gXHRcdHZhciBpO1xuIFx0XHR2YXIgajtcbiBcdFx0dmFyIG1vZHVsZTtcbiBcdFx0dmFyIG1vZHVsZUlkO1xuXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHQpXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHRcdH0pO1xuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDEyOSkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTI5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBkZWZhdWx0OiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgY3JlYXRlRW1vdGlvbiBmcm9tICdjcmVhdGUtZW1vdGlvbic7XG5cbnZhciBjb250ZXh0ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxudmFyIF9jcmVhdGVFbW90aW9uID0gY3JlYXRlRW1vdGlvbihjb250ZXh0KSxcbiAgICBmbHVzaCA9IF9jcmVhdGVFbW90aW9uLmZsdXNoLFxuICAgIGh5ZHJhdGUgPSBfY3JlYXRlRW1vdGlvbi5oeWRyYXRlLFxuICAgIGN4ID0gX2NyZWF0ZUVtb3Rpb24uY3gsXG4gICAgbWVyZ2UgPSBfY3JlYXRlRW1vdGlvbi5tZXJnZSxcbiAgICBnZXRSZWdpc3RlcmVkU3R5bGVzID0gX2NyZWF0ZUVtb3Rpb24uZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWwgPSBfY3JlYXRlRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzID0gX2NyZWF0ZUVtb3Rpb24ua2V5ZnJhbWVzLFxuICAgIGNzcyA9IF9jcmVhdGVFbW90aW9uLmNzcyxcbiAgICBzaGVldCA9IF9jcmVhdGVFbW90aW9uLnNoZWV0LFxuICAgIGNhY2hlcyA9IF9jcmVhdGVFbW90aW9uLmNhY2hlcztcblxuZXhwb3J0IHsgZmx1c2gsIGh5ZHJhdGUsIGN4LCBtZXJnZSwgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5qZWN0R2xvYmFsLCBrZXlmcmFtZXMsIGNzcywgc2hlZXQsIGNhY2hlcyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Nob3VsZFVwZGF0ZSA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlJyk7XG5cbnZhciBfc2hvdWxkVXBkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3VsZFVwZGF0ZSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnLi9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vc2V0RGlzcGxheU5hbWUnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXREaXNwbGF5TmFtZSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi93cmFwRGlzcGxheU5hbWUnKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcERpc3BsYXlOYW1lKTtcblxudmFyIF9waWNrID0gcmVxdWlyZSgnLi91dGlscy9waWNrJyk7XG5cbnZhciBfcGljazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9waWNrKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG9ubHlVcGRhdGVGb3JLZXlzID0gZnVuY3Rpb24gb25seVVwZGF0ZUZvcktleXMocHJvcEtleXMpIHtcbiAgdmFyIGhvYyA9ICgwLCBfc2hvdWxkVXBkYXRlMi5kZWZhdWx0KShmdW5jdGlvbiAocHJvcHMsIG5leHRQcm9wcykge1xuICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKCgwLCBfcGljazIuZGVmYXVsdCkobmV4dFByb3BzLCBwcm9wS2V5cyksICgwLCBfcGljazIuZGVmYXVsdCkocHJvcHMsIHByb3BLZXlzKSk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gKDAsIF9zZXREaXNwbGF5TmFtZTIuZGVmYXVsdCkoKDAsIF93cmFwRGlzcGxheU5hbWUyLmRlZmF1bHQpKEJhc2VDb21wb25lbnQsICdvbmx5VXBkYXRlRm9yS2V5cycpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG9ubHlVcGRhdGVGb3JLZXlzOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hcENvbnRleHRUb1Byb3BzO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2ZvcndhcmRSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZvcndhcmRSZWZcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpIHtcbiAgdmFyIG5hbWUgPSB0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJyA/IENvbXBvbmVudCA6IENvbXBvbmVudC5uYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZTtcbiAgcmV0dXJuIG5hbWUgPyBcIkNvbnRleHRUcmFuc2Zvcm0oXCIgKyBuYW1lICsgXCIpXCIgOiAnQ29udGV4dFRyYW5zZm9ybSc7XG59O1xuXG52YXIgZW5zdXJlQ29uc3VtZXIgPSBmdW5jdGlvbiBlbnN1cmVDb25zdW1lcihjKSB7XG4gIHJldHVybiBjLkNvbnN1bWVyIHx8IGM7XG59O1xuXG5mdW5jdGlvbiAkbWFwQ29udGV4dFRvUHJvcHMoX3JlZiwgQ29tcG9uZW50KSB7XG4gIHZhciBtYXliZUFycmF5T2ZDb25zdW1lcnMgPSBfcmVmLmNvbnN1bWVycyxcbiAgICAgIG1hcFRvUHJvcHMgPSBfcmVmLm1hcFRvUHJvcHMsXG4gICAgICBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICBfcmVmJGZvcndhcmRSZWZBcyA9IF9yZWYuZm9yd2FyZFJlZkFzLFxuICAgICAgZm9yd2FyZFJlZkFzID0gX3JlZiRmb3J3YXJkUmVmQXMgPT09IHZvaWQgMCA/ICdyZWYnIDogX3JlZiRmb3J3YXJkUmVmQXM7XG4gIHZhciBjb25zdW1lcnMgPSBtYXliZUFycmF5T2ZDb25zdW1lcnM7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KG1heWJlQXJyYXlPZkNvbnN1bWVycykpIHtcbiAgICBjb25zdW1lcnMgPSBbbWF5YmVBcnJheU9mQ29uc3VtZXJzXTtcbiAgfVxuXG4gIHZhciBTaW5nbGVDb25zdW1lciA9IGVuc3VyZUNvbnN1bWVyKGNvbnN1bWVyc1swXSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlUmVuZGVyKHByb3BzLCByZWYpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIHByb3BzV2l0aFJlZiA9IF9leHRlbmRzKChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2ZvcndhcmRSZWZBc10gPSByZWYsIF9leHRlbmRzMiksIHByb3BzKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNpbmdsZUNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzV2l0aFJlZiwgbWFwVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBtdWx0aVJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgdmFyIF9leHRlbmRzMztcblxuICAgIHZhciBwcm9wc1dpdGhSZWYgPSBfZXh0ZW5kcygoX2V4dGVuZHMzID0ge30sIF9leHRlbmRzM1tmb3J3YXJkUmVmQXNdID0gcmVmLCBfZXh0ZW5kczMpLCBwcm9wcyk7XG5cbiAgICByZXR1cm4gY29uc3VtZXJzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChpbm5lciwgQ29udGV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBDb25zdW1lciA9IGVuc3VyZUNvbnN1bWVyKENvbnRleHQpO1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlubmVyLmFwcGx5KHZvaWQgMCwgYXJncy5jb25jYXQoW3ZhbHVlXSkpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjb250ZXh0cyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBjb250ZXh0c1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wc1dpdGhSZWYsIG1hcFRvUHJvcHMuYXBwbHkodm9pZCAwLCBjb250ZXh0cy5jb25jYXQoW3Byb3BzXSkpKSk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHZhciBjb250ZXh0VHJhbnNmb3JtID0gY29uc3VtZXJzLmxlbmd0aCA9PT0gMSA/IHNpbmdsZVJlbmRlciA6IG11bHRpUmVuZGVyO1xuICByZXR1cm4gKDAsIF9mb3J3YXJkUmVmLmRlZmF1bHQpKGNvbnRleHRUcmFuc2Zvcm0sIHtcbiAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUgfHwgZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFwQ29udGV4dFRvUHJvcHMobWF5YmVPcHRzLCBtYXBUb1Byb3BzLCBDb21wb25lbnQpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHJldHVybiAkbWFwQ29udGV4dFRvUHJvcHMobWF5YmVPcHRzLCBtYXBUb1Byb3BzKTtcbiAgcmV0dXJuICRtYXBDb250ZXh0VG9Qcm9wcyh7XG4gICAgY29uc3VtZXJzOiBtYXliZU9wdHMsXG4gICAgbWFwVG9Qcm9wczogbWFwVG9Qcm9wc1xuICB9LCBDb21wb25lbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5jb250cm9sbGFibGU7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW52YXJpYW50XCIpKTtcblxudmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vdXRpbHNcIikpO1xuXG52YXIgX2pzeEZpbGVOYW1lID0gXCJzcmMvaW5kZXguanNcIjtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZS5fX3Byb3RvX18gPSBzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIHVuY29udHJvbGxhYmxlKENvbXBvbmVudCwgY29udHJvbGxlZFZhbHVlcywgbWV0aG9kcykge1xuICBpZiAobWV0aG9kcyA9PT0gdm9pZCAwKSB7XG4gICAgbWV0aG9kcyA9IFtdO1xuICB9XG5cbiAgdmFyIGRpc3BsYXlOYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICB2YXIgY2FuQWNjZXB0UmVmID0gVXRpbHMuY2FuQWNjZXB0UmVmKENvbXBvbmVudCk7XG4gIHZhciBjb250cm9sbGVkUHJvcHMgPSBPYmplY3Qua2V5cyhjb250cm9sbGVkVmFsdWVzKTtcbiAgdmFyIFBST1BTX1RPX09NSVQgPSBjb250cm9sbGVkUHJvcHMubWFwKFV0aWxzLmRlZmF1bHRLZXkpO1xuICAhKGNhbkFjY2VwdFJlZiB8fCAhbWV0aG9kcy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoZmFsc2UsICdbdW5jb250cm9sbGFibGVdIHN0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBwYXNzIHRocm91Z2ggbWV0aG9kcyAnICsgJ2JlY2F1c2UgdGhleSBoYXZlIG5vIGFzc29jaWF0ZWQgaW5zdGFuY2VzLiBDaGVjayBjb21wb25lbnQ6ICcgKyBkaXNwbGF5TmFtZSArICcsICcgKyAnYXR0ZW1wdGluZyB0byBwYXNzIHRocm91Z2ggbWV0aG9kczogJyArIG1ldGhvZHMuam9pbignLCAnKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBVbmNvbnRyb2xsZWRDb21wb25lbnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoVW5jb250cm9sbGVkQ29tcG9uZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFVuY29udHJvbGxlZENvbXBvbmVudCgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5oYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBjb250cm9sbGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgdmFyIGhhbmRsZXJOYW1lID0gY29udHJvbGxlZFZhbHVlc1twcm9wTmFtZV07XG5cbiAgICAgICAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wc1toYW5kbGVyTmFtZV0pIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgICAgICAgX3RoaXMuX25vdGlmeWluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKVtoYW5kbGVyTmFtZV0uYXBwbHkoX3RoaXMkcHJvcHMsIFt2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgICAgICAgX3RoaXMuX25vdGlmeWluZyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLl92YWx1ZXNbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgaWYgKCFfdGhpcy51bm1vdW50ZWQpIF90aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlcnNbaGFuZGxlck5hbWVdID0gaGFuZGxlQ2hhbmdlO1xuICAgICAgfSk7XG4gICAgICBpZiAobWV0aG9kcy5sZW5ndGgpIF90aGlzLmF0dGFjaFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgX3RoaXMuaW5uZXIgPSByZWY7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBVbmNvbnRyb2xsZWRDb21wb25lbnQucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgIC8vbGV0IHRoZSBmb3JjZVVwZGF0ZSB0cmlnZ2VyIHRoZSB1cGRhdGVcbiAgICAgIHJldHVybiAhdGhpcy5fbm90aWZ5aW5nO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgY29udHJvbGxlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpczIuX3ZhbHVlc1trZXldID0gcHJvcHNbVXRpbHMuZGVmYXVsdEtleShrZXkpXTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnRyb2xsZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgcHJvcCBzd2l0Y2hlcyBmcm9tIGNvbnRyb2xsZWQgdG8gVW5jb250cm9sbGVkXG4gICAgICAgICAqIHJlc2V0IGl0cyB2YWx1ZSB0byB0aGUgZGVmYXVsdFZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIVV0aWxzLmlzUHJvcChuZXh0UHJvcHMsIGtleSkgJiYgVXRpbHMuaXNQcm9wKHByb3BzLCBrZXkpKSB7XG4gICAgICAgICAgX3RoaXMzLl92YWx1ZXNba2V5XSA9IG5leHRQcm9wc1tVdGlscy5kZWZhdWx0S2V5KGtleSldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVubW91bnRlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczIuaW5uZXJSZWYsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMyLCBbXCJpbm5lclJlZlwiXSk7XG5cbiAgICAgIFBST1BTX1RPX09NSVQuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBkZWxldGUgcHJvcHNbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuICAgICAgY29udHJvbGxlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICAgIHZhciBwcm9wVmFsdWUgPSBfdGhpczQucHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICBuZXdQcm9wc1twcm9wTmFtZV0gPSBwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCA/IHByb3BWYWx1ZSA6IF90aGlzNC5fdmFsdWVzW3Byb3BOYW1lXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIG5ld1Byb3BzLCB0aGlzLmhhbmRsZXJzLCB7XG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgdGhpcy5hdHRhY2hSZWZcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFVuY29udHJvbGxlZENvbXBvbmVudDtcbiAgfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIFVuY29udHJvbGxlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiVW5jb250cm9sbGVkKFwiICsgZGlzcGxheU5hbWUgKyBcIilcIjtcbiAgVW5jb250cm9sbGVkQ29tcG9uZW50LnByb3BUeXBlcyA9IF9leHRlbmRzKHtcbiAgICBpbm5lclJlZjogZnVuY3Rpb24gaW5uZXJSZWYoKSB7fVxuICB9LCBVdGlscy51bmNvbnRyb2xsZWRQcm9wVHlwZXMoY29udHJvbGxlZFZhbHVlcywgZGlzcGxheU5hbWUpKTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICBVbmNvbnRyb2xsZWRDb21wb25lbnQucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAkcHJveGllZE1ldGhvZCgpIHtcbiAgICAgIHZhciBfdGhpcyRpbm5lcjtcblxuICAgICAgcmV0dXJuIChfdGhpcyRpbm5lciA9IHRoaXMuaW5uZXIpW21ldGhvZF0uYXBwbHkoX3RoaXMkaW5uZXIsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG4gIHZhciBXcmFwcGVkQ29tcG9uZW50ID0gVW5jb250cm9sbGVkQ29tcG9uZW50O1xuXG4gIGlmIChfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKSB7XG4gICAgV3JhcHBlZENvbXBvbmVudCA9IF9yZWFjdC5kZWZhdWx0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFVuY29udHJvbGxlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGlubmVyUmVmOiByZWYsXG4gICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxMjdcbiAgICAgICAgfSxcbiAgICAgICAgX19zZWxmOiB0aGlzXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgV3JhcHBlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBVbmNvbnRyb2xsZWRDb21wb25lbnQucHJvcFR5cGVzO1xuICB9XG5cbiAgV3JhcHBlZENvbXBvbmVudC5Db250cm9sbGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICAvKipcbiAgICogdXNlZnVsIHdoZW4gd3JhcHBpbmcgYSBDb21wb25lbnQgYW5kIHlvdSB3YW50IHRvIGNvbnRyb2xcbiAgICogZXZlcnl0aGluZ1xuICAgKi9cblxuICBXcmFwcGVkQ29tcG9uZW50LmRlZmVyQ29udHJvbFRvID0gZnVuY3Rpb24gKG5ld0NvbXBvbmVudCwgYWRkaXRpb25zLCBuZXh0TWV0aG9kcykge1xuICAgIGlmIChhZGRpdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgYWRkaXRpb25zID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuY29udHJvbGxhYmxlKG5ld0NvbXBvbmVudCwgX2V4dGVuZHMoe30sIGNvbnRyb2xsZWRWYWx1ZXMsIGFkZGl0aW9ucyksIG5leHRNZXRob2RzKTtcbiAgfTtcblxuICByZXR1cm4gV3JhcHBlZENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50ID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5UaGVtZUNvbnN1bWVyID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfZm9yd2FyZFJlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvZm9yd2FyZFJlZlwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfUmVhY3QkY3JlYXRlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobmV3IE1hcCgpKSxcbiAgICBQcm92aWRlciA9IF9SZWFjdCRjcmVhdGVDb250ZXh0LlByb3ZpZGVyLFxuICAgIENvbnN1bWVyID0gX1JlYWN0JGNyZWF0ZUNvbnRleHQuQ29uc3VtZXI7XG5cbmV4cG9ydHMuVGhlbWVDb25zdW1lciA9IENvbnN1bWVyO1xuXG52YXIgVGhlbWVQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFRoZW1lUHJvdmlkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMucHJlZml4ZXMgPSBuZXcgTWFwKCk7XG4gICAgT2JqZWN0LmtleXMoX3RoaXMucHJvcHMucHJlZml4ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX3RoaXMucHJlZml4ZXMuc2V0KGtleSwgX3RoaXMucHJvcHMucHJlZml4ZXNba2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRoZW1lUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByZWZpeGVzXG4gICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFRoZW1lUHJvdmlkZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChDb21wb25lbnQsIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykgb3B0cyA9IHtcbiAgICBwcmVmaXg6IG9wdHNcbiAgfTtcbiAgdmFyIGlzQ2xhc3N5ID0gQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7IC8vIElmIGl0J3MgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCBtYWtlIHN1cmUgd2UgZG9uJ3QgYnJlYWsgaXQgd2l0aCBhIHJlZlxuXG4gIHZhciBfb3B0cyA9IG9wdHMsXG4gICAgICBwcmVmaXggPSBfb3B0cy5wcmVmaXgsXG4gICAgICBfb3B0cyRmb3J3YXJkUmVmQXMgPSBfb3B0cy5mb3J3YXJkUmVmQXMsXG4gICAgICBmb3J3YXJkUmVmQXMgPSBfb3B0cyRmb3J3YXJkUmVmQXMgPT09IHZvaWQgMCA/IGlzQ2xhc3N5ID8gJ3JlZicgOiAnaW5uZXJSZWYnIDogX29wdHMkZm9yd2FyZFJlZkFzO1xuICByZXR1cm4gKDAsIF9mb3J3YXJkUmVmLmRlZmF1bHQpKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBfcmVmKTtcbiAgICBwcm9wc1tmb3J3YXJkUmVmQXNdID0gcmVmO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAocHJlZml4ZXMpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgYnNQcmVmaXg6IHByb3BzLmJzUHJlZml4IHx8IHByZWZpeGVzLmdldChwcmVmaXgpIHx8IHByZWZpeFxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9LCB7XG4gICAgZGlzcGxheU5hbWU6IFwiQm9vdHN0cmFwKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIlxuICB9KTtcbn1cblxudmFyIF9kZWZhdWx0ID0gVGhlbWVQcm92aWRlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcXNhO1xuLy8gWmVwdG8uanNcbi8vIChjKSAyMDEwLTIwMTUgVGhvbWFzIEZ1Y2hzXG4vLyBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBzaW1wbGVTZWxlY3RvclJFID0gL15bXFx3LV0qJC87XG52YXIgdG9BcnJheSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsIFtdLnNsaWNlKTtcblxuZnVuY3Rpb24gcXNhKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIHZhciBtYXliZUlEID0gc2VsZWN0b3JbMF0gPT09ICcjJyxcbiAgICAgIG1heWJlQ2xhc3MgPSBzZWxlY3RvclswXSA9PT0gJy4nLFxuICAgICAgbmFtZU9ubHkgPSBtYXliZUlEIHx8IG1heWJlQ2xhc3MgPyBzZWxlY3Rvci5zbGljZSgxKSA6IHNlbGVjdG9yLFxuICAgICAgaXNTaW1wbGUgPSBzaW1wbGVTZWxlY3RvclJFLnRlc3QobmFtZU9ubHkpLFxuICAgICAgZm91bmQ7XG5cbiAgaWYgKGlzU2ltcGxlKSB7XG4gICAgaWYgKG1heWJlSUQpIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmdldEVsZW1lbnRCeUlkID8gZWxlbWVudCA6IGRvY3VtZW50O1xuICAgICAgcmV0dXJuIChmb3VuZCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZU9ubHkpKSA/IFtmb3VuZF0gOiBbXTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIG1heWJlQ2xhc3MpIHJldHVybiB0b0FycmF5KGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShuYW1lT25seSkpO1xuICAgIHJldHVybiB0b0FycmF5KGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpKTtcbiAgfVxuXG4gIHJldHVybiB0b0FycmF5KGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0eWxlO1xuXG52YXIgX2NhbWVsaXplU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2NhbWVsaXplU3R5bGVcIikpO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9oeXBoZW5hdGVTdHlsZVwiKSk7XG5cbnZhciBfZ2V0Q29tcHV0ZWRTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldENvbXB1dGVkU3R5bGVcIikpO1xuXG52YXIgX3JlbW92ZVN0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZW1vdmVTdHlsZVwiKSk7XG5cbnZhciBfcHJvcGVydGllcyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9uL3Byb3BlcnRpZXNcIik7XG5cbnZhciBfaXNUcmFuc2Zvcm0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90cmFuc2l0aW9uL2lzVHJhbnNmb3JtXCIpKTtcblxuZnVuY3Rpb24gc3R5bGUobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHZhciBjc3MgPSAnJztcbiAgdmFyIHRyYW5zZm9ybXMgPSAnJztcbiAgdmFyIHByb3BzID0gcHJvcGVydHk7XG5cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5vZGUuc3R5bGVbKDAsIF9jYW1lbGl6ZVN0eWxlLmRlZmF1bHQpKHByb3BlcnR5KV0gfHwgKDAsIF9nZXRDb21wdXRlZFN0eWxlMi5kZWZhdWx0KShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKCgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHByb3BzID0ge30pW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9wc1trZXldO1xuXG4gICAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgICAgKDAsIF9yZW1vdmVTdHlsZS5kZWZhdWx0KShub2RlLCAoMCwgX2h5cGhlbmF0ZVN0eWxlLmRlZmF1bHQpKGtleSkpO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc1RyYW5zZm9ybS5kZWZhdWx0KShrZXkpKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IGtleSArIFwiKFwiICsgdmFsdWUgKyBcIikgXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzcyArPSAoMCwgX2h5cGhlbmF0ZVN0eWxlLmRlZmF1bHQpKGtleSkgKyBcIjogXCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHRyYW5zZm9ybXMpIHtcbiAgICBjc3MgKz0gX3Byb3BlcnRpZXMudHJhbnNmb3JtICsgXCI6IFwiICsgdHJhbnNmb3JtcyArIFwiO1wiO1xuICB9XG5cbiAgbm9kZS5zdHlsZS5jc3NUZXh0ICs9ICc7JyArIGNzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gIHJldHVybiBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwLCByZWYpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgcCwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMocC5jbGFzc05hbWUsIGNsYXNzTmFtZSlcbiAgICB9KSk7XG4gIH0pO1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBmb3J3YXJkUmVmIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvZm9yd2FyZFJlZic7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgX1JlYWN0JGNyZWF0ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSksXG4gICAgUHJvdmlkZXIgPSBfUmVhY3QkY3JlYXRlQ29udGV4dC5Qcm92aWRlcixcbiAgICBDb25zdW1lciA9IF9SZWFjdCRjcmVhdGVDb250ZXh0LkNvbnN1bWVyO1xuXG52YXIgVGhlbWVQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUaGVtZVByb3ZpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnByZWZpeGVzID0gbmV3IE1hcCgpO1xuICAgIE9iamVjdC5rZXlzKF90aGlzLnByb3BzLnByZWZpeGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF90aGlzLnByZWZpeGVzLnNldChrZXksIF90aGlzLnByb3BzLnByZWZpeGVzW2tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcmVmaXhlc1xuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUaGVtZVByb3ZpZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5mdW5jdGlvbiBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ29tcG9uZW50LCBvcHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIG9wdHMgPSB7XG4gICAgcHJlZml4OiBvcHRzXG4gIH07XG4gIHZhciBpc0NsYXNzeSA9IENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50OyAvLyBJZiBpdCdzIGEgZnVuY3Rpb25hbCBjb21wb25lbnQgbWFrZSBzdXJlIHdlIGRvbid0IGJyZWFrIGl0IHdpdGggYSByZWZcblxuICB2YXIgX29wdHMgPSBvcHRzLFxuICAgICAgcHJlZml4ID0gX29wdHMucHJlZml4LFxuICAgICAgX29wdHMkZm9yd2FyZFJlZkFzID0gX29wdHMuZm9yd2FyZFJlZkFzLFxuICAgICAgZm9yd2FyZFJlZkFzID0gX29wdHMkZm9yd2FyZFJlZkFzID09PSB2b2lkIDAgPyBpc0NsYXNzeSA/ICdyZWYnIDogJ2lubmVyUmVmJyA6IF9vcHRzJGZvcndhcmRSZWZBcztcbiAgcmV0dXJuIGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBfcmVmKTtcblxuICAgIHByb3BzW2ZvcndhcmRSZWZBc10gPSByZWY7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChwcmVmaXhlcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgYnNQcmVmaXg6IHByb3BzLmJzUHJlZml4IHx8IHByZWZpeGVzLmdldChwcmVmaXgpIHx8IHByZWZpeFxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9LCB7XG4gICAgZGlzcGxheU5hbWU6IFwiQm9vdHN0cmFwKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIlxuICB9KTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50LCBDb25zdW1lciBhcyBUaGVtZUNvbnN1bWVyIH07XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjYW1lbGl6ZSBmcm9tICdkb20taGVscGVycy91dGlsL2NhbWVsaXplJztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4uL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgcGFzY2FsQ2FzZSA9IGZ1bmN0aW9uIHBhc2NhbENhc2Uoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaXplKHN0cikuc2xpY2UoMSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVXaXRoQnNQcmVmaXgocHJlZml4LCBfdGVtcCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDI7XG5cbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfcmVmJGRpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBwYXNjYWxDYXNlKHByZWZpeCkgOiBfcmVmJGRpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRDb21wb25lbnQgPSBfcmVmLkNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkQ29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9yZWYkQ29tcG9uZW50LFxuICAgICAgZGVmYXVsdFByb3BzID0gX3JlZi5kZWZhdWx0UHJvcHM7XG5cbiAgcmV0dXJuIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCgoX3RlbXAyID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKF9jbGFzcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBfY2xhc3MoKSB7XG4gICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IF9jbGFzcy5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICAgIFRhZyA9IF90aGlzJHByb3BzJGFzID09PSB2b2lkIDAgPyBDb21wb25lbnQgOiBfdGhpcyRwcm9wcyRhcyxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcImFzXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzLCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZSwgX3RlbXAyKSwgcHJlZml4KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5cbnZhciBfZmFkZVN0eWxlcztcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb24sIHsgRU5URVJFRCwgRU5URVJJTkcgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuaW1wb3J0IG9uRW5kIGZyb20gJ2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vZW5kJztcbmltcG9ydCB0cmlnZ2VyQnJvd3NlclJlZmxvdyBmcm9tICcuL3V0aWxzL3RyaWdnZXJCcm93c2VyUmVmbG93JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZVxufTtcbnZhciBmYWRlU3R5bGVzID0gKF9mYWRlU3R5bGVzID0ge30sIF9mYWRlU3R5bGVzW0VOVEVSSU5HXSA9ICdzaG93JywgX2ZhZGVTdHlsZXNbRU5URVJFRF0gPSAnc2hvdycsIF9mYWRlU3R5bGVzKTtcblxudmFyIEZhZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRmFkZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmFkZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGYWRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgYWRkRW5kTGlzdGVuZXI6IG9uRW5kXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXJcbiAgICB9KSwgZnVuY3Rpb24gKHN0YXR1cywgaW5uZXJQcm9wcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCdmYWRlJywgY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsIGZhZGVTdHlsZXNbc3RhdHVzXSlcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRmFkZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRmFkZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsIi8vIHJlYWRpbmcgYSBkaW1lbnNpb24gcHJvcCB3aWxsIGNhdXNlIHRoZSBicm93c2VyIHRvIHJlY2FsY3VsYXRlLFxuLy8gd2hpY2ggd2lsbCBsZXQgb3VyIGFuaW1hdGlvbnMgd29ya1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJpZ2dlckJyb3dzZXJSZWZsb3cobm9kZSkge1xuICBub2RlLm9mZnNldEhlaWdodDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogJ0Nsb3NlJ1xufTtcblxudmFyIENsb3NlQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENsb3NlQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDbG9zZUJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2xvc2VCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIGNsYXNzTmFtZTogXCJjbG9zZVwiLFxuICAgICAgb25DbGljazogb25DbGlja1xuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgICB9LCBcIlxceEQ3XCIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgbGFiZWwpKTtcbiAgfTtcblxuICByZXR1cm4gQ2xvc2VCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNsb3NlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENsb3NlQnV0dG9uOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZiAhPSBudWxsO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgIH1cblxuICAgIGlmIChhY2MgPT09IG51bGwpIHJldHVybiBmO1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDaGFpbmVkRnVuY3Rpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdhJ1xufTtcblxuZnVuY3Rpb24gaXNUcml2aWFsSHJlZihocmVmKSB7XG4gIHJldHVybiAhaHJlZiB8fCBocmVmLnRyaW0oKSA9PT0gJyMnO1xufVxuLyoqXG4gKiBUaGVyZSBhcmUgc2l0dWF0aW9ucyBkdWUgdG8gYnJvd3NlciBxdWlya3Mgb3IgQm9vdHN0cmFwIENTUyB3aGVyZVxuICogYW4gYW5jaG9yIHRhZyBpcyBuZWVkZWQsIHdoZW4gc2VtYW50aWNhbGx5IGEgYnV0dG9uIHRhZyBpcyB0aGVcbiAqIGJldHRlciBjaG9pY2UuIFNhZmVBbmNob3IgZW5zdXJlcyB0aGF0IHdoZW4gYW4gYW5jaG9yIGlzIHVzZWQgbGlrZSBhXG4gKiBidXR0b24gaXRzIGFjY2Vzc2libGUuIEl0IGFsc28gZW11bGF0ZXMgaW5wdXQgYGRpc2FibGVkYCBiZWhhdmlvciBmb3JcbiAqIGxpbmtzLCB3aGljaCBpcyB1c3VhbGx5IGRlc2lyYWJsZSBmb3IgQnV0dG9ucywgTmF2SXRlbXMsIERyb3Bkb3duSXRlbXMsIGV0Yy5cbiAqL1xuXG5cbnZhciBTYWZlQW5jaG9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFNhZmVBbmNob3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNhZmVBbmNob3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBfdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTYWZlQW5jaG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGhyZWYgPSBfdGhpcyRwcm9wcy5ocmVmLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljaztcblxuICAgIGlmIChkaXNhYmxlZCB8fCBpc1RyaXZpYWxIcmVmKGhyZWYpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMyLm9uS2V5RG93bixcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczIuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJhc1wiLCBcImRpc2FibGVkXCIsIFwib25LZXlEb3duXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gICAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgICAvLyBvdGhlcndpc2UsIHRoZSBjdXJzb3IgaW5jb3JyZWN0bHkgc3R5bGVkIChleGNlcHQgd2l0aCByb2xlPSdidXR0b24nKVxuXG4gICAgICBwcm9wcy5ocmVmID0gcHJvcHMuaHJlZiB8fCAnIyc7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xuICAgICAgcHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlubmVyUmVmKSBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgIG9uS2V5RG93bjogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU2FmZUFuY2hvcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2FmZUFuY2hvci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBTYWZlQW5jaG9yOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgZGl2V2l0aENsYXNzTmFtZSBmcm9tICcuL3V0aWxzL2RpdldpdGhDbGFzc05hbWUnO1xuaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcbmltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tICcuL0Nsb3NlQnV0dG9uJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG4vKipcbiAqIEBwcm9wZXJ0eSB7QWxlcnRIZWFkaW5nfSBIZWFkaW5nXG4gKiBAcHJvcGVydHkge0FsZXJ0TGlua30gTGlua1xuICovXG5cbnZhciBBbGVydCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShBbGVydCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWxlcnQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKGZhbHNlLCBlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHNob3cgPSBfdGhpcyRwcm9wcy5zaG93LFxuICAgICAgICBjbG9zZUxhYmVsID0gX3RoaXMkcHJvcHMuY2xvc2VMYWJlbCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudCxcbiAgICAgICAgZGlzbWlzc2libGUgPSBfdGhpcyRwcm9wcy5kaXNtaXNzaWJsZSxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIF8gPSBfdGhpcyRwcm9wcy5vbkNsb3NlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInNob3dcIiwgXCJjbG9zZUxhYmVsXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJ2YXJpYW50XCIsIFwiZGlzbWlzc2libGVcIiwgXCJ0cmFuc2l0aW9uXCIsIFwib25DbG9zZVwiXSk7XG5cbiAgICB2YXIgYWxlcnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgIHJvbGU6IFwiYWxlcnRcIlxuICAgIH0sIFRyYW5zaXRpb24gPyBwcm9wcyA6IHVuZGVmaW5lZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHZhcmlhbnQgJiYgYnNQcmVmaXggKyBcIi1cIiArIHZhcmlhbnQsIGRpc21pc3NpYmxlICYmIGJzUHJlZml4ICsgXCItZGlzbWlzc2libGVcIilcbiAgICB9KSwgZGlzbWlzc2libGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbG9zZSxcbiAgICAgIGxhYmVsOiBjbG9zZUxhYmVsXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgICBpZiAoIVRyYW5zaXRpb24pIHJldHVybiBzaG93ID8gYWxlcnQgOiBudWxsO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICAgIHVubW91bnRPbkV4aXQ6IHRydWVcbiAgICB9LCBwcm9wcywge1xuICAgICAgaW46IHNob3dcbiAgICB9KSwgYWxlcnQpO1xuICB9O1xuXG4gIHJldHVybiBBbGVydDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQWxlcnQuZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiB0cnVlLFxuICB0cmFuc2l0aW9uOiBGYWRlLFxuICBjbG9zZUxhYmVsOiAnQ2xvc2UgYWxlcnQnXG59O1xudmFyIERlY29yYXRlZEFsZXJ0ID0gdW5jb250cm9sbGFibGUoY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEFsZXJ0LCAnYWxlcnQnKSwge1xuICBzaG93OiAnb25DbG9zZSdcbn0pO1xudmFyIERpdlN0eWxlZEFzSDQgPSBkaXZXaXRoQ2xhc3NOYW1lKCdoNCcpO1xuRGVjb3JhdGVkQWxlcnQuTGluayA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnYWxlcnQtbGluaycsIHtcbiAgQ29tcG9uZW50OiBTYWZlQW5jaG9yXG59KTtcbkRlY29yYXRlZEFsZXJ0LkhlYWRpbmcgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2FsZXJ0LWhlYWRpbmcnLCB7XG4gIENvbXBvbmVudDogRGl2U3R5bGVkQXNINFxufSk7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRBbGVydDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgQmFkZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQmFkZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJhZGdlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCYWRnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudCxcbiAgICAgICAgcGlsbCA9IF90aGlzJHByb3BzLnBpbGwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJ2YXJpYW50XCIsIFwicGlsbFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgcGlsbCAmJiBic1ByZWZpeCArIFwiLXBpbGxcIiwgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJhZGdlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CYWRnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHBpbGw6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJhZGdlLCAnYmFkZ2UnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIEJyZWFkY3J1bWJJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyZWFkY3J1bWJJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcmVhZGNydW1iSXRlbSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJlYWRjcnVtYkl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICAgIHZhciBocmVmID0gcHJvcHMuaHJlZixcbiAgICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgICAgdGFyZ2V0ID0gcHJvcHMudGFyZ2V0LFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiaHJlZlwiLCBcInRpdGxlXCIsIFwidGFyZ2V0XCJdKTtcblxuICAgIHZhciBsaW5rUHJvcHMgPSB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGJzUHJlZml4LCBjbGFzc05hbWUsIHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICAgIH0pLFxuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYWN0aXZlID8gJ3BhZ2UnIDogdW5kZWZpbmVkXG4gICAgfSwgYWN0aXZlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICAgIH0pXG4gICAgfSkpIDogUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCBsaW5rUHJvcHMpKSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyZWFkY3J1bWJJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CcmVhZGNydW1iSXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZTogZmFsc2UsXG4gIGFzOiAnbGknXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJyZWFkY3J1bWJJdGVtLCAnYnJlYWRjcnVtYi1pdGVtJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBCcmVhZGNydW1iSXRlbSBmcm9tICcuL0JyZWFkY3J1bWJJdGVtJztcblxudmFyIEJyZWFkY3J1bWIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJlYWRjcnVtYiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJlYWRjcnVtYigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJlYWRjcnVtYi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGxpc3RQcm9wcyA9IF90aGlzJHByb3BzLmxpc3RQcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwibGlzdFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJsYWJlbFwiLCBcImFzXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCBfZXh0ZW5kcyh7XG4gICAgICByb2xlOiBcIm5hdmlnYXRpb25cIlxuICAgIH0sIGxpc3RQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGJzUHJlZml4LCBsaXN0UHJvcHMuY2xhc3NOYW1lKVxuICAgIH0pLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBCcmVhZGNydW1iO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CcmVhZGNydW1iLmRlZmF1bHRQcm9wcyA9IHtcbiAgbGFiZWw6ICdicmVhZGNydW1iJyxcbiAgbGlzdFByb3BzOiB7fSxcbiAgYXM6ICduYXYnXG59O1xudmFyIERlY29yYXRlZEJyZWFkY3J1bWIgPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQnJlYWRjcnVtYiwgJ2JyZWFkY3J1bWInKTtcbkRlY29yYXRlZEJyZWFkY3J1bWIuSXRlbSA9IEJyZWFkY3J1bWJJdGVtO1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkQnJlYWRjcnVtYjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcblxudmFyIEJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wcy52YXJpYW50LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHMuYmxvY2ssXG4gICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlLFxuICAgICAgICBhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInZhcmlhbnRcIiwgXCJzaXplXCIsIFwiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiYmxvY2tcIiwgXCJ0eXBlXCIsIFwiYXNcIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgYWN0aXZlICYmICdhY3RpdmUnLCBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgYmxvY2sgJiYgYnNQcmVmaXggKyBcIi1ibG9ja1wiLCBzaXplICYmIGJzUHJlZml4ICsgXCItXCIgKyBzaXplKTtcblxuICAgIGlmIChwcm9wcy5ocmVmKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgYXM6IGFzLFxuICAgICAgICBpbm5lclJlZjogaW5uZXJSZWYsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc2VzLCBwcm9wcy5kaXNhYmxlZCAmJiAnZGlzYWJsZWQnKVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHZhciBDb21wb25lbnQgPSBhcyB8fCAnYnV0dG9uJztcbiAgICBpZiAoaW5uZXJSZWYpIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHZhcmlhbnQ6ICdwcmltYXJ5JyxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICB0eXBlOiAnYnV0dG9uJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChCdXR0b24sIHtcbiAgcHJlZml4OiAnYnRuJyxcbiAgZm9yd2FyZFJlZkFzOiAnaW5uZXJSZWYnXG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgQnV0dG9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnV0dG9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJ1dHRvbkdyb3VwKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgdG9nZ2xlID0gX3RoaXMkcHJvcHMudG9nZ2xlLFxuICAgICAgICB2ZXJ0aWNhbCA9IF90aGlzJHByb3BzLnZlcnRpY2FsLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInNpemVcIiwgXCJ0b2dnbGVcIiwgXCJ2ZXJ0aWNhbFwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICAgIHZhciBiYXNlQ2xhc3MgPSBic1ByZWZpeDtcbiAgICBpZiAodmVydGljYWwpIGJhc2VDbGFzcyA9IGJzUHJlZml4ICsgXCItdmVydGljYWxcIjtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYmFzZUNsYXNzLCBzaXplICYmIGJzUHJlZml4ICsgXCItXCIgKyBzaXplLCB0b2dnbGUgJiYgYnNQcmVmaXggKyBcIi10b2dnbGVcIilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CdXR0b25Hcm91cC5kZWZhdWx0UHJvcHMgPSB7XG4gIHZlcnRpY2FsOiBmYWxzZSxcbiAgdG9nZ2xlOiBmYWxzZSxcbiAgcm9sZTogJ2dyb3VwJyxcbiAgYXM6ICdkaXYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJ1dHRvbkdyb3VwLCAnYnRuLWdyb3VwJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIEJ1dHRvblRvb2xiYXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnV0dG9uVG9vbGJhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uVG9vbGJhcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnV0dG9uVG9vbGJhci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b25Ub29sYmFyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CdXR0b25Ub29sYmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ3Rvb2xiYXInXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJ1dHRvblRvb2xiYXIsICdidG4tdG9vbGJhcicpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBDYXJkSW1nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENhcmRJbWcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhcmRJbWcoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENhcmRJbWcucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwidmFyaWFudFwiLCBcImFzXCJdKTtcblxuICAgIHZhciBiYXNlQ2xhc3MgPSB2YXJpYW50ID8gYnNQcmVmaXggKyBcIi1cIiArIHZhcmlhbnQgOiBic1ByZWZpeDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhiYXNlQ2xhc3MsIGNsYXNzTmFtZSlcbiAgICB9LCBwcm9wcykpO1xuICB9O1xuXG4gIHJldHVybiBDYXJkSW1nO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJkSW1nLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdpbWcnLFxuICB2YXJpYW50OiBudWxsXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KENhcmRJbWcsICdjYXJkLWltZycpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCBkaXZXaXRoQ2xhc3NOYW1lIGZyb20gJy4vdXRpbHMvZGl2V2l0aENsYXNzTmFtZSc7XG5pbXBvcnQgQ2FyZENvbnRleHQgZnJvbSAnLi9DYXJkQ29udGV4dCc7XG5pbXBvcnQgQ2FyZEltZyBmcm9tICcuL0NhcmRJbWcnO1xudmFyIENhcmRCb2R5ID0gY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLWJvZHknKTtcblxudmFyIENhcmQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2FyZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2FyZCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIENhcmQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYpIHtcbiAgICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4O1xuICAgIHJldHVybiB7XG4gICAgICBjYXJkQ29udGV4dDoge1xuICAgICAgICBjYXJkSGVhZGVyQnNQcmVmaXg6IGJzUHJlZml4ICsgXCItaGVhZGVyXCJcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBDYXJkLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJnID0gX3RoaXMkcHJvcHMuYmcsXG4gICAgICAgIHRleHQgPSBfdGhpcyRwcm9wcy50ZXh0LFxuICAgICAgICBib3JkZXIgPSBfdGhpcyRwcm9wcy5ib3JkZXIsXG4gICAgICAgIGJvZHkgPSBfdGhpcyRwcm9wcy5ib2R5LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCIsIFwiYmdcIiwgXCJ0ZXh0XCIsIFwiYm9yZGVyXCIsIFwiYm9keVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBiZyAmJiBcImJnLVwiICsgYmcsIHRleHQgJiYgXCJ0ZXh0LVwiICsgdGV4dCwgYm9yZGVyICYmIFwiYm9yZGVyLVwiICsgYm9yZGVyKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDYXJkQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuY2FyZENvbnRleHRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSwgcHJvcHMpLCBib2R5ID8gUmVhY3QuY3JlYXRlRWxlbWVudChDYXJkQm9keSwgbnVsbCwgY2hpbGRyZW4pIDogY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gQ2FyZDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2FyZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2JyxcbiAgYm9keTogZmFsc2Vcbn07XG52YXIgRGl2U3R5bGVkQXNINSA9IGRpdldpdGhDbGFzc05hbWUoJ2g1Jyk7XG52YXIgRGl2U3R5bGVkQXNINiA9IGRpdldpdGhDbGFzc05hbWUoJ2g2Jyk7XG52YXIgRGVjb3JhdGVkQ2FyZCA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChDYXJkLCAnY2FyZCcpO1xuRGVjb3JhdGVkQ2FyZC5JbWcgPSBDYXJkSW1nO1xuRGVjb3JhdGVkQ2FyZC5UaXRsZSA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC10aXRsZScsIHtcbiAgQ29tcG9uZW50OiBEaXZTdHlsZWRBc0g1XG59KTtcbkRlY29yYXRlZENhcmQuU3VidGl0bGUgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2NhcmQtc3VidGl0bGUnLCB7XG4gIENvbXBvbmVudDogRGl2U3R5bGVkQXNINlxufSk7XG5EZWNvcmF0ZWRDYXJkLkJvZHkgPSBDYXJkQm9keTtcbkRlY29yYXRlZENhcmQuTGluayA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1saW5rJywge1xuICBDb21wb25lbnQ6ICdhJ1xufSk7XG5EZWNvcmF0ZWRDYXJkLlRleHQgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2NhcmQtdGV4dCcsIHtcbiAgQ29tcG9uZW50OiAncCdcbn0pO1xuRGVjb3JhdGVkQ2FyZC5IZWFkZXIgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2NhcmQtaGVhZGVyJyk7XG5EZWNvcmF0ZWRDYXJkLkZvb3RlciA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1mb290ZXInKTtcbkRlY29yYXRlZENhcmQuSW1nT3ZlcmxheSA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1pbWctb3ZlcmxheScpO1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkQ2FyZDsiLCJpbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1jb2x1bW5zJyk7IiwiaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXaXRoQnNQcmVmaXgoJ2NhcmQtZGVjaycpOyIsImltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLWdyb3VwJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcblxudmFyIENhcm91c2VsQ2FwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDYXJvdXNlbENhcHRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhcm91c2VsQ2FwdGlvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2Fyb3VzZWxDYXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwiYnNQcmVmaXhcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWxDYXB0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJvdXNlbENhcHRpb24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KENhcm91c2VsQ2FwdGlvbiwgJ2Nhcm91c2VsLWNhcHRpb24nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgQ2Fyb3VzZWxJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENhcm91c2VsSXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2Fyb3VzZWxJdGVtKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDYXJvdXNlbEl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWxJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ2Fyb3VzZWxJdGVtLCAnY2Fyb3VzZWwtaXRlbScpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgbWFwcyBvdmVyIGNoaWxkcmVuIHRoYXQgYXJlIFwidmFsaWQgZWxlbWVudHNcIi5cbiAqXG4gKiBUaGUgbWFwRnVuY3Rpb24gcHJvdmlkZWQgaW5kZXggd2lsbCBiZSBub3JtYWxpc2VkIHRvIHRoZSBjb21wb25lbnRzIG1hcHBlZCxcbiAqIHNvIGFuIGludmFsaWQgY29tcG9uZW50IHdvdWxkIG5vdCBpbmNyZWFzZSB0aGUgaW5kZXguXG4gKlxuICovXG5cbmZ1bmN0aW9uIG1hcChjaGlsZHJlbiwgZnVuYykge1xuICB2YXIgaW5kZXggPSAwO1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gZnVuYyhjaGlsZCwgaW5kZXgrKykgOiBjaGlsZDtcbiAgfSk7XG59XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBlbGVtZW50c1wiLlxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkIHdpdGggdGhlIGluZGV4IHJlZmxlY3RpbmcgdGhlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICovXG5cblxuZnVuY3Rpb24gZm9yRWFjaChjaGlsZHJlbiwgZnVuYykge1xuICB2YXIgaW5kZXggPSAwO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSBmdW5jKGNoaWxkLCBpbmRleCsrKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IG1hcCwgZm9yRWFjaCB9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICdkb20taGVscGVycy9zdHlsZSc7XG5pbXBvcnQgdHJhbnNpdGlvbiBmcm9tICdkb20taGVscGVycy90cmFuc2l0aW9uJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IENhcm91c2VsQ2FwdGlvbiBmcm9tICcuL0Nhcm91c2VsQ2FwdGlvbic7XG5pbXBvcnQgQ2Fyb3VzZWxJdGVtIGZyb20gJy4vQ2Fyb3VzZWxJdGVtJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5pbXBvcnQgeyBtYXAsIGZvckVhY2ggfSBmcm9tICcuL3V0aWxzL0VsZW1lbnRDaGlsZHJlbic7XG5pbXBvcnQgdHJpZ2dlckJyb3dzZXJSZWZsb3cgZnJvbSAnLi91dGlscy90cmlnZ2VyQnJvd3NlclJlZmxvdyc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgY291bnRDaGlsZHJlbiA9IGZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oYykge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjKS5maWx0ZXIoUmVhY3QuaXNWYWxpZEVsZW1lbnQpLmxlbmd0aDtcbn07IC8vIFRPRE86IGBzbGlkZWAgc2hvdWxkIGJlIGBhbmltYXRlYC5cblxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzbGlkZTogdHJ1ZSxcbiAgZmFkZTogZmFsc2UsXG4gIGludGVydmFsOiA1MDAwLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICB3cmFwOiB0cnVlLFxuICBpbmRpY2F0b3JzOiB0cnVlLFxuICBjb250cm9sczogdHJ1ZSxcbiAgYWN0aXZlSW5kZXg6IDAsXG4gIHByZXZJY29uOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICBjbGFzc05hbWU6IFwiY2Fyb3VzZWwtY29udHJvbC1wcmV2LWljb25cIlxuICB9KSxcbiAgcHJldkxhYmVsOiAnUHJldmlvdXMnLFxuICBuZXh0SWNvbjogUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgY2xhc3NOYW1lOiBcImNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uXCJcbiAgfSksXG4gIG5leHRMYWJlbDogJ05leHQnXG59O1xuXG52YXIgQ2Fyb3VzZWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2Fyb3VzZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhcm91c2VsKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVTbGlkZUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwZW5kaW5nSW5kZXggPSBfdGhpcy5fcGVuZGluZ0luZGV4O1xuICAgICAgX3RoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgX3RoaXMuX3BlbmRpbmdJbmRleCA9IG51bGw7XG4gICAgICBpZiAocGVuZGluZ0luZGV4ICE9IG51bGwpIF90aGlzLnRvKHBlbmRpbmdJbmRleCk7ZWxzZSBfdGhpcy5jeWNsZSgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmN5Y2xlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5wYXVzZU9uSG92ZXIpIF90aGlzLnBhdXNlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkgcmV0dXJuO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy5oYW5kbGVQcmV2KGV2ZW50KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy5oYW5kbGVOZXh0KGV2ZW50KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU5leHRXaGVuVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuaXNVbm1vdW50ZWQgJiYgIWRvY3VtZW50LmhpZGRlbiAmJiBzdHlsZXMoX3RoaXMuY2Fyb3VzZWwuY3VycmVudCwgJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlTmV4dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVOZXh0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5faXNTbGlkaW5nKSByZXR1cm47XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB3cmFwID0gX3RoaXMkcHJvcHMud3JhcCxcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IF90aGlzJHByb3BzLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIGluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgICAgdmFyIGNvdW50ID0gY291bnRDaGlsZHJlbihfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmIChpbmRleCA+IGNvdW50IC0gMSkge1xuICAgICAgICBpZiAoIXdyYXApIHJldHVybjtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZWxlY3QoaW5kZXgsIGUsICduZXh0Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVByZXYgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLl9pc1NsaWRpbmcpIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB3cmFwID0gX3RoaXMkcHJvcHMyLndyYXAsXG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBfdGhpcyRwcm9wczIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgaW5kZXggPSBhY3RpdmVJbmRleCAtIDE7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaWYgKCF3cmFwKSByZXR1cm47XG4gICAgICAgIGluZGV4ID0gY291bnRDaGlsZHJlbihfdGhpcy5wcm9wcy5jaGlsZHJlbikgLSAxO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZWxlY3QoaW5kZXgsIGUsICdwcmV2Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgcHJldkNsYXNzZXM6ICcnLFxuICAgICAgY3VycmVudENsYXNzZXM6ICdhY3RpdmUnXG4gICAgfTtcbiAgICBfdGhpcy5pc1VubW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLmNhcm91c2VsID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmN5Y2xlKCk7XG4gIH07XG5cbiAgQ2Fyb3VzZWwuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2aW91c0FjdGl2ZUluZGV4ID0gX3JlZi5hY3RpdmVJbmRleDtcblxuICAgIGlmIChuZXh0UHJvcHMuYWN0aXZlSW5kZXggIT09IHByZXZpb3VzQWN0aXZlSW5kZXgpIHtcbiAgICAgIHZhciBsYXN0UG9zc2libGVJbmRleCA9IGNvdW50Q2hpbGRyZW4obmV4dFByb3BzLmNoaWxkcmVuKSAtIDE7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obmV4dFByb3BzLmFjdGl2ZUluZGV4LCBsYXN0UG9zc2libGVJbmRleCkpO1xuICAgICAgdmFyIGRpcmVjdGlvbjtcblxuICAgICAgaWYgKG5leHRJbmRleCA9PT0gMCAmJiBwcmV2aW91c0FjdGl2ZUluZGV4ID49IGxhc3RQb3NzaWJsZUluZGV4IHx8IHByZXZpb3VzQWN0aXZlSW5kZXggPD0gbmV4dEluZGV4KSB7XG4gICAgICAgIGRpcmVjdGlvbiA9ICduZXh0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpcmVjdGlvbiA9ICdwcmV2JztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICAgIHByZXZpb3VzQWN0aXZlSW5kZXg6IHByZXZpb3VzQWN0aXZlSW5kZXgsXG4gICAgICAgIGFjdGl2ZUluZGV4OiBuZXh0SW5kZXhcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzMy5ic1ByZWZpeCxcbiAgICAgICAgc2xpZGUgPSBfdGhpcyRwcm9wczMuc2xpZGU7XG4gICAgaWYgKCFzbGlkZSB8fCB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4ID09PSBwcmV2U3RhdGUuYWN0aXZlSW5kZXggfHwgdGhpcy5faXNTbGlkaW5nKSByZXR1cm47XG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBfdGhpcyRzdGF0ZS5hY3RpdmVJbmRleCxcbiAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkc3RhdGUuZGlyZWN0aW9uO1xuICAgIHZhciBvcmRlckNsYXNzTmFtZSwgZGlyZWN0aW9uYWxDbGFzc05hbWU7XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIG9yZGVyQ2xhc3NOYW1lID0gYnNQcmVmaXggKyBcIi1pdGVtLW5leHRcIjtcbiAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gYnNQcmVmaXggKyBcIi1pdGVtLWxlZnRcIjtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBvcmRlckNsYXNzTmFtZSA9IGJzUHJlZml4ICsgXCItaXRlbS1wcmV2XCI7XG4gICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IGJzUHJlZml4ICsgXCItaXRlbS1yaWdodFwiO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWU7XG4gICAgdGhpcy5wYXVzZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGlkLXVwZGF0ZS1zZXQtc3RhdGVcblxuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHByZXZDbGFzc2VzOiAnYWN0aXZlJyxcbiAgICAgIGN1cnJlbnRDbGFzc2VzOiBvcmRlckNsYXNzTmFtZVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpdGVtcyA9IF90aGlzMi5jYXJvdXNlbC5jdXJyZW50LmNoaWxkcmVuO1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gaXRlbXNbYWN0aXZlSW5kZXhdO1xuICAgICAgdHJpZ2dlckJyb3dzZXJSZWZsb3cobmV4dEVsZW1lbnQpO1xuXG4gICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgcHJldkNsYXNzZXM6IGNsYXNzTmFtZXMoJ2FjdGl2ZScsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKSxcbiAgICAgICAgY3VycmVudENsYXNzZXM6IGNsYXNzTmFtZXMob3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJhbnNpdGlvbi5lbmQobmV4dEVsZW1lbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgICBwcmV2Q2xhc3NlczogJycsXG4gICAgICAgICAgICBjdXJyZW50Q2xhc3NlczogJ2FjdGl2ZSdcbiAgICAgICAgICB9LCBfdGhpczIuaGFuZGxlU2xpZGVFbmQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIHRoaXMuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUoc3RhdGUsIGNiKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5pc1VubW91bnRlZCkgcmV0dXJuO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMzLmlzVW5tb3VudGVkICYmIGNiKCk7XG4gICAgfSk7XG4gIH07IC8vIFRoaXMgbWlnaHQgYmUgYSBwdWJsaWMgQVBJLlxuXG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uY3ljbGUgPSBmdW5jdGlvbiBjeWNsZSgpIHtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcblxuICAgIGlmICh0aGlzLnByb3BzLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLmhhbmRsZU5leHRXaGVuVmlzaWJsZSA6IHRoaXMuaGFuZGxlTmV4dCwgdGhpcy5wcm9wcy5pbnRlcnZhbCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50byA9IGZ1bmN0aW9uIHRvKGluZGV4LCBldmVudCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gY291bnRDaGlsZHJlbihjaGlsZHJlbikgLSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgdGhpcy5fcGVuZGluZ0luZGV4ID0gaW5kZXg7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY3QoaW5kZXgsIGV2ZW50KTtcbiAgfTtcblxuICBfcHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24gc2VsZWN0KGluZGV4LCBldmVudCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy5zZWxlY3RUaHJvdHRsZSk7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LnBlcnNpc3QpIGV2ZW50LnBlcnNpc3QoKTsgLy8gVGhlIHRpbWVvdXQgdGhyb3R0bGVzIGZhc3QgY2xpY2tzLCBpbiBvcmRlciB0byBnaXZlIGFueSBwZW5kaW5nIHN0YXRlXG4gICAgLy8gYSBjaGFuY2UgdG8gdXBkYXRlIGFuZCBwcm9wYWdhdGUgYmFjayB0aHJvdWdoIHByb3BzXG5cbiAgICB0aGlzLnNlbGVjdFRocm90dGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXM0LnRpbWVvdXQpO1xuICAgICAgdmFyIF90aGlzNCRwcm9wcyA9IF90aGlzNC5wcm9wcyxcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IF90aGlzNCRwcm9wcy5hY3RpdmVJbmRleCxcbiAgICAgICAgICBvblNlbGVjdCA9IF90aGlzNCRwcm9wcy5vblNlbGVjdDtcbiAgICAgIGlmIChpbmRleCA9PT0gYWN0aXZlSW5kZXggfHwgX3RoaXM0Ll9pc1NsaWRpbmcgfHwgX3RoaXM0LmlzVW5tb3VudGVkKSByZXR1cm47XG4gICAgICBvblNlbGVjdChpbmRleCwgZGlyZWN0aW9uIHx8IChpbmRleCA8IGFjdGl2ZUluZGV4ID8gJ3ByZXYnIDogJ25leHQnKSwgZXZlbnQpO1xuICAgIH0sIDUwKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyQ29udHJvbHMgPSBmdW5jdGlvbiByZW5kZXJDb250cm9scyhwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIGJzUHJlZml4ID0gdGhpcy5wcm9wcy5ic1ByZWZpeDtcbiAgICB2YXIgd3JhcCA9IHByb3BlcnRpZXMud3JhcCxcbiAgICAgICAgY2hpbGRyZW4gPSBwcm9wZXJ0aWVzLmNoaWxkcmVuLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHByb3BlcnRpZXMuYWN0aXZlSW5kZXgsXG4gICAgICAgIHByZXZJY29uID0gcHJvcGVydGllcy5wcmV2SWNvbixcbiAgICAgICAgbmV4dEljb24gPSBwcm9wZXJ0aWVzLm5leHRJY29uLFxuICAgICAgICBwcmV2TGFiZWwgPSBwcm9wZXJ0aWVzLnByZXZMYWJlbCxcbiAgICAgICAgbmV4dExhYmVsID0gcHJvcGVydGllcy5uZXh0TGFiZWw7XG4gICAgdmFyIGNvdW50ID0gY291bnRDaGlsZHJlbihjaGlsZHJlbik7XG4gICAgcmV0dXJuIFsod3JhcCB8fCBhY3RpdmVJbmRleCAhPT0gMCkgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCB7XG4gICAgICBrZXk6IFwicHJldlwiLFxuICAgICAgY2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLWNvbnRyb2wtcHJldlwiLFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVQcmV2XG4gICAgfSwgcHJldkljb24sIHByZXZMYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgcHJldkxhYmVsKSksICh3cmFwIHx8IGFjdGl2ZUluZGV4ICE9PSBjb3VudCAtIDEpICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2FmZUFuY2hvciwge1xuICAgICAga2V5OiBcIm5leHRcIixcbiAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1jb250cm9sLW5leHRcIixcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlTmV4dFxuICAgIH0sIG5leHRJY29uLCBuZXh0TGFiZWwgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgIH0sIG5leHRMYWJlbCkpXTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVySW5kaWNhdG9ycyA9IGZ1bmN0aW9uIHJlbmRlckluZGljYXRvcnMoY2hpbGRyZW4sIGFjdGl2ZUluZGV4KSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgYnNQcmVmaXggPSB0aGlzLnByb3BzLmJzUHJlZml4O1xuICAgIHZhciBpbmRpY2F0b3JzID0gW107XG4gICAgZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgaW5kaWNhdG9ycy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgIGNsYXNzTmFtZTogaW5kZXggPT09IGFjdGl2ZUluZGV4ID8gJ2FjdGl2ZScgOiBudWxsLFxuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1LnRvKGluZGV4LCBlKTtcbiAgICAgICAgfVxuICAgICAgfSksIC8vIEZvcmNlIHdoaXRlc3BhY2UgYmV0d2VlbiBpbmRpY2F0b3IgZWxlbWVudHMuIEJvb3RzdHJhcCByZXF1aXJlc1xuICAgICAgLy8gdGhpcyBmb3IgY29ycmVjdCBzcGFjaW5nIG9mIGVsZW1lbnRzLlxuICAgICAgJyAnKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcIm9sXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1pbmRpY2F0b3JzXCJcbiAgICB9LCBpbmRpY2F0b3JzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzNC5ic1ByZWZpeCxcbiAgICAgICAgc2xpZGUgPSBfdGhpcyRwcm9wczQuc2xpZGUsXG4gICAgICAgIGZhZGUgPSBfdGhpcyRwcm9wczQuZmFkZSxcbiAgICAgICAgaW5kaWNhdG9ycyA9IF90aGlzJHByb3BzNC5pbmRpY2F0b3JzLFxuICAgICAgICBjb250cm9scyA9IF90aGlzJHByb3BzNC5jb250cm9scyxcbiAgICAgICAgd3JhcCA9IF90aGlzJHByb3BzNC53cmFwLFxuICAgICAgICBwcmV2SWNvbiA9IF90aGlzJHByb3BzNC5wcmV2SWNvbixcbiAgICAgICAgcHJldkxhYmVsID0gX3RoaXMkcHJvcHM0LnByZXZMYWJlbCxcbiAgICAgICAgbmV4dEljb24gPSBfdGhpcyRwcm9wczQubmV4dEljb24sXG4gICAgICAgIG5leHRMYWJlbCA9IF90aGlzJHByb3BzNC5uZXh0TGFiZWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNC5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuLFxuICAgICAgICBrZXlib2FyZCA9IF90aGlzJHByb3BzNC5rZXlib2FyZCxcbiAgICAgICAgXzUgPSBfdGhpcyRwcm9wczQuYWN0aXZlSW5kZXgsXG4gICAgICAgIF80ID0gX3RoaXMkcHJvcHM0LnBhdXNlT25Ib3ZlcixcbiAgICAgICAgXzMgPSBfdGhpcyRwcm9wczQuaW50ZXJ2YWwsXG4gICAgICAgIF8yID0gX3RoaXMkcHJvcHM0Lm9uU2VsZWN0LFxuICAgICAgICBfMSA9IF90aGlzJHByb3BzNC5vblNsaWRlRW5kLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzNCwgW1wiYnNQcmVmaXhcIiwgXCJzbGlkZVwiLCBcImZhZGVcIiwgXCJpbmRpY2F0b3JzXCIsIFwiY29udHJvbHNcIiwgXCJ3cmFwXCIsIFwicHJldkljb25cIiwgXCJwcmV2TGFiZWxcIiwgXCJuZXh0SWNvblwiLCBcIm5leHRMYWJlbFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwia2V5Ym9hcmRcIiwgXCJhY3RpdmVJbmRleFwiLCBcInBhdXNlT25Ib3ZlclwiLCBcImludGVydmFsXCIsIFwib25TZWxlY3RcIiwgXCJvblNsaWRlRW5kXCJdKTtcblxuICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBhY3RpdmVJbmRleCA9IF90aGlzJHN0YXRlMi5hY3RpdmVJbmRleCxcbiAgICAgICAgcHJldmlvdXNBY3RpdmVJbmRleCA9IF90aGlzJHN0YXRlMi5wcmV2aW91c0FjdGl2ZUluZGV4LFxuICAgICAgICBwcmV2Q2xhc3NlcyA9IF90aGlzJHN0YXRlMi5wcmV2Q2xhc3NlcyxcbiAgICAgICAgY3VycmVudENsYXNzZXMgPSBfdGhpcyRzdGF0ZTIuY3VycmVudENsYXNzZXM7XG4gICAgcmV0dXJuICgvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgc2xpZGUgJiYgJ3NsaWRlJywgZmFkZSAmJiBic1ByZWZpeCArIFwiLWZhZGVcIiksXG4gICAgICAgIG9uS2V5RG93bjoga2V5Ym9hcmQgPyB0aGlzLmhhbmRsZUtleURvd24gOiB1bmRlZmluZWQsXG4gICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLmhhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5oYW5kbGVNb3VzZU91dFxuICAgICAgfSksIGluZGljYXRvcnMgJiYgdGhpcy5yZW5kZXJJbmRpY2F0b3JzKGNoaWxkcmVuLCBhY3RpdmVJbmRleCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGJzUHJlZml4ICsgXCItaW5uZXJcIixcbiAgICAgICAgcmVmOiB0aGlzLmNhcm91c2VsXG4gICAgICB9LCBtYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBpbmRleCA9PT0gYWN0aXZlSW5kZXg7XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4ID09PSBwcmV2aW91c0FjdGl2ZUluZGV4O1xuICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNoaWxkLnByb3BzLmNsYXNzTmFtZSwgYnNQcmVmaXggKyBcIi1pdGVtXCIsIGN1cnJlbnQgJiYgY3VycmVudENsYXNzZXMsIHByZXZpb3VzICYmIHByZXZDbGFzc2VzKVxuICAgICAgICB9KTtcbiAgICAgIH0pKSwgY29udHJvbHMgJiYgdGhpcy5yZW5kZXJDb250cm9scyh7XG4gICAgICAgIHdyYXA6IHdyYXAsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgYWN0aXZlSW5kZXg6IGFjdGl2ZUluZGV4LFxuICAgICAgICBwcmV2SWNvbjogcHJldkljb24sXG4gICAgICAgIHByZXZMYWJlbDogcHJldkxhYmVsLFxuICAgICAgICBuZXh0SWNvbjogbmV4dEljb24sXG4gICAgICAgIG5leHRMYWJlbDogbmV4dExhYmVsXG4gICAgICB9KSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBDYXJvdXNlbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2Fyb3VzZWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIERlY29yYXRlZENhcm91c2VsID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KHVuY29udHJvbGxhYmxlKENhcm91c2VsLCB7XG4gIGFjdGl2ZUluZGV4OiAnb25TZWxlY3QnXG59KSwgJ2Nhcm91c2VsJyk7XG5EZWNvcmF0ZWRDYXJvdXNlbC5DYXB0aW9uID0gQ2Fyb3VzZWxDYXB0aW9uO1xuRGVjb3JhdGVkQ2Fyb3VzZWwuSXRlbSA9IENhcm91c2VsSXRlbTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZENhcm91c2VsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgREVWSUNFX1NJWkVTID0gWyd4bCcsICdsZycsICdtZCcsICdzbScsICd4cyddO1xuXG52YXIgQ29sID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29sKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJhc1wiXSk7XG5cbiAgICB2YXIgc3BhbnMgPSBbXTtcbiAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgIERFVklDRV9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChicmtQb2ludCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW2Jya1BvaW50XTtcbiAgICAgIGRlbGV0ZSBwcm9wc1ticmtQb2ludF07XG4gICAgICB2YXIgc3Bhbiwgb2Zmc2V0LCBvcmRlcjtcblxuICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhciBfcHJvcFZhbHVlJHNwYW4gPSBwcm9wVmFsdWUuc3BhbjtcbiAgICAgICAgc3BhbiA9IF9wcm9wVmFsdWUkc3BhbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wVmFsdWUkc3BhbjtcbiAgICAgICAgb2Zmc2V0ID0gcHJvcFZhbHVlLm9mZnNldDtcbiAgICAgICAgb3JkZXIgPSBwcm9wVmFsdWUub3JkZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGFuID0gcHJvcFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5maXggPSBicmtQb2ludCAhPT0gJ3hzJyA/IFwiLVwiICsgYnJrUG9pbnQgOiAnJztcbiAgICAgIGlmIChzcGFuICE9IG51bGwpIHNwYW5zLnB1c2goc3BhbiA9PT0gdHJ1ZSA/IFwiXCIgKyBic1ByZWZpeCArIGluZml4IDogXCJcIiArIGJzUHJlZml4ICsgaW5maXggKyBcIi1cIiArIHNwYW4pO1xuICAgICAgaWYgKG9yZGVyICE9IG51bGwpIGNsYXNzZXMucHVzaChcIm9yZGVyXCIgKyBpbmZpeCArIFwiLVwiICsgb3JkZXIpO1xuICAgICAgaWYgKG9mZnNldCAhPSBudWxsKSBjbGFzc2VzLnB1c2goXCJvZmZzZXRcIiArIGluZml4ICsgXCItXCIgKyBvZmZzZXQpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFzcGFucy5sZW5ndGgpIHtcbiAgICAgIHNwYW5zLnB1c2goYnNQcmVmaXgpOyAvLyBwbGFpbiAnY29sJ1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMuYXBwbHkodm9pZCAwLCBbY2xhc3NOYW1lXS5jb25jYXQoc3BhbnMsIGNsYXNzZXMpKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ29sO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Db2wuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ29sLCAnY29sJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuXG52YXIgX2NvbGxhcHNlU3R5bGVzO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBjc3MgZnJvbSAnZG9tLWhlbHBlcnMvc3R5bGUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBvbkVuZCBmcm9tICdkb20taGVscGVycy90cmFuc2l0aW9uL2VuZCc7XG5pbXBvcnQgVHJhbnNpdGlvbiwgeyBFWElURUQsIEVOVEVSRUQsIEVOVEVSSU5HLCBFWElUSU5HIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJztcbmltcG9ydCB0cmlnZ2VyQnJvd3NlclJlZmxvdyBmcm9tICcuL3V0aWxzL3RyaWdnZXJCcm93c2VyUmVmbG93JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xudmFyIE1BUkdJTlMgPSB7XG4gIGhlaWdodDogWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJ10sXG4gIHdpZHRoOiBbJ21hcmdpbkxlZnQnLCAnbWFyZ2luUmlnaHQnXVxufTtcblxuZnVuY3Rpb24gZ2V0RGltZW5zaW9uVmFsdWUoZGltZW5zaW9uLCBlbGVtKSB7XG4gIHZhciBvZmZzZXQgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gIHZhciB2YWx1ZSA9IGVsZW1bb2Zmc2V0XTtcbiAgdmFyIG1hcmdpbnMgPSBNQVJHSU5TW2RpbWVuc2lvbl07XG4gIHJldHVybiB2YWx1ZSArIHBhcnNlSW50KGNzcyhlbGVtLCBtYXJnaW5zWzBdKSwgMTApICsgcGFyc2VJbnQoY3NzKGVsZW0sIG1hcmdpbnNbMV0pLCAxMCk7XG59XG5cbnZhciBjb2xsYXBzZVN0eWxlcyA9IChfY29sbGFwc2VTdHlsZXMgPSB7fSwgX2NvbGxhcHNlU3R5bGVzW0VYSVRFRF0gPSAnY29sbGFwc2UnLCBfY29sbGFwc2VTdHlsZXNbRVhJVElOR10gPSAnY29sbGFwc2luZycsIF9jb2xsYXBzZVN0eWxlc1tFTlRFUklOR10gPSAnY29sbGFwc2luZycsIF9jb2xsYXBzZVN0eWxlc1tFTlRFUkVEXSA9ICdjb2xsYXBzZSBzaG93JywgX2NvbGxhcHNlU3R5bGVzKTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZGltZW5zaW9uOiAnaGVpZ2h0JyxcbiAgZ2V0RGltZW5zaW9uVmFsdWU6IGdldERpbWVuc2lvblZhbHVlXG59O1xuXG52YXIgQ29sbGFwc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ29sbGFwc2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbGxhcHNlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgZWxlbS5zdHlsZVtfdGhpcy5nZXREaW1lbnNpb24oKV0gPSAnMCc7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciBkaW1lbnNpb24gPSBfdGhpcy5nZXREaW1lbnNpb24oKTtcblxuICAgICAgZWxlbS5zdHlsZVtkaW1lbnNpb25dID0gX3RoaXMuX2dldFNjcm9sbERpbWVuc2lvblZhbHVlKGVsZW0sIGRpbWVuc2lvbik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgZWxlbS5zdHlsZVtfdGhpcy5nZXREaW1lbnNpb24oKV0gPSBudWxsO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciBkaW1lbnNpb24gPSBfdGhpcy5nZXREaW1lbnNpb24oKTtcblxuICAgICAgZWxlbS5zdHlsZVtkaW1lbnNpb25dID0gX3RoaXMucHJvcHMuZ2V0RGltZW5zaW9uVmFsdWUoZGltZW5zaW9uLCBlbGVtKSArIFwicHhcIjtcbiAgICAgIHRyaWdnZXJCcm93c2VyUmVmbG93KGVsZW0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0aW5nID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIGVsZW0uc3R5bGVbX3RoaXMuZ2V0RGltZW5zaW9uKCldID0gJzAnO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXREaW1lbnNpb24gPSBmdW5jdGlvbiBnZXREaW1lbnNpb24oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnByb3BzLmRpbWVuc2lvbiA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMucHJvcHMuZGltZW5zaW9uKCkgOiB0aGlzLnByb3BzLmRpbWVuc2lvbjtcbiAgfTtcbiAgLyogLS0gRXhwYW5kaW5nIC0tICovXG5cblxuICAvLyBmb3IgdGVzdGluZ1xuICBfcHJvdG8uX2dldFNjcm9sbERpbWVuc2lvblZhbHVlID0gZnVuY3Rpb24gX2dldFNjcm9sbERpbWVuc2lvblZhbHVlKGVsZW0sIGRpbWVuc2lvbikge1xuICAgIHZhciBzY3JvbGwgPSBcInNjcm9sbFwiICsgZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgcmV0dXJuIGVsZW1bc2Nyb2xsXSArIFwicHhcIjtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfdGhpcyRwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgb25FeGl0aW5nID0gX3RoaXMkcHJvcHMub25FeGl0aW5nLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLmRpbWVuc2lvbjtcbiAgICBkZWxldGUgcHJvcHMuZ2V0RGltZW5zaW9uVmFsdWU7XG4gICAgdmFyIGhhbmRsZUVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRW50ZXIsIG9uRW50ZXIpO1xuICAgIHZhciBoYW5kbGVFbnRlcmluZyA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyaW5nLCBvbkVudGVyaW5nKTtcbiAgICB2YXIgaGFuZGxlRW50ZXJlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyZWQsIG9uRW50ZXJlZCk7XG4gICAgdmFyIGhhbmRsZUV4aXQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odGhpcy5oYW5kbGVFeGl0LCBvbkV4aXQpO1xuICAgIHZhciBoYW5kbGVFeGl0aW5nID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRXhpdGluZywgb25FeGl0aW5nKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBhZGRFbmRMaXN0ZW5lcjogb25FbmRcbiAgICB9LCBwcm9wcywge1xuICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IHByb3BzLnJvbGUgPyBwcm9wcy5pbiA6IG51bGwsXG4gICAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nXG4gICAgfSksIGZ1bmN0aW9uIChzdGF0ZSwgaW5uZXJQcm9wcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBjb2xsYXBzZVN0eWxlc1tzdGF0ZV0sIF90aGlzMi5nZXREaW1lbnNpb24oKSA9PT0gJ3dpZHRoJyAmJiAnd2lkdGgnKVxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBDb2xsYXBzZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ29sbGFwc2UuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJhc2VEcm9wZG93bk1lbnUgZnJvbSAncmVhY3Qtb3ZlcmxheXMvRHJvcGRvd25NZW51JztcbmltcG9ydCBOYXZiYXJDb250ZXh0IGZyb20gJy4vTmF2YmFyQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgd3JhcFJlZiA9IGZ1bmN0aW9uIHdyYXBSZWYocHJvcHMpIHtcbiAgdmFyIHJlZiA9IHByb3BzLnJlZjtcblxuICBwcm9wcy5yZWYgPSByZWYuX193cmFwcGVkIHx8IChyZWYuX193cmFwcGVkID0gZnVuY3Rpb24gKHIpIHtcbiAgICByZXR1cm4gcmVmKGZpbmRET01Ob2RlKHIpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxudmFyIERyb3Bkb3duTWVudSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93bk1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duTWVudSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd25NZW51LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYWxpZ25SaWdodCA9IF90aGlzJHByb3BzLmFsaWduUmlnaHQsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3RoaXMkcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIGZsaXAgPSBfdGhpcyRwcm9wcy5mbGlwLFxuICAgICAgICBwb3BwZXJDb25maWcgPSBfdGhpcyRwcm9wcy5wb3BwZXJDb25maWcsXG4gICAgICAgIHNob3dQcm9wcyA9IF90aGlzJHByb3BzLnNob3csXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFsaWduUmlnaHRcIiwgXCJyb290Q2xvc2VFdmVudFwiLCBcImZsaXBcIiwgXCJwb3BwZXJDb25maWdcIiwgXCJzaG93XCIsIFwiYXNcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGlzTmF2YmFyKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlRHJvcGRvd25NZW51LCB7XG4gICAgICAgIGZsaXA6IGZsaXAsXG4gICAgICAgIHNob3c6IHNob3dQcm9wcyxcbiAgICAgICAgYWxpZ25FbmQ6IGFsaWduUmlnaHQsXG4gICAgICAgIHVzZVBvcHBlcjogIWlzTmF2YmFyLFxuICAgICAgICBwb3BwZXJDb25maWc6IHBvcHBlckNvbmZpZyxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQ6IHJvb3RDbG9zZUV2ZW50XG4gICAgICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICAgICAgICBzaG93ID0gX3JlZi5zaG93LFxuICAgICAgICAgICAgYWxpZ25FbmQgPSBfcmVmLmFsaWduRW5kLFxuICAgICAgICAgICAgY2xvc2UgPSBfcmVmLmNsb3NlLFxuICAgICAgICAgICAgbWVudVByb3BzID0gX3JlZi5wcm9wcztcbiAgICAgICAgd3JhcFJlZihtZW51UHJvcHMpOyAvLyBGb3IgY3VzdG9tIGNvbXBvbmVudHMgcHJvdmlkZSBhZGRpdGlvbmFsLCBub24tRE9NLCBwcm9wcztcblxuICAgICAgICBpZiAodHlwZW9mIENvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBtZW51UHJvcHMuc2hvdyA9IHNob3c7XG4gICAgICAgICAgbWVudVByb3BzLmNsb3NlID0gY2xvc2U7XG4gICAgICAgICAgbWVudVByb3BzLmFsaWduUmlnaHQgPSBhbGlnbkVuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuXG4gICAgICAgIGlmIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRoZSBkZWZhdWx0IHBvcHBlciBzdHlsZSxcbiAgICAgICAgICAvLyBtZW51cyBhcmUgZGlzcGxheTogbm9uZSB3aGVuIG5vdCBzaG93bi5cbiAgICAgICAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwgbWVudVByb3BzLnN0eWxlKTtcbiAgICAgICAgICBwcm9wc1sneC1wbGFjZW1lbnQnXSA9IHBsYWNlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCBtZW51UHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNob3cgJiYgJ3Nob3cnLCBhbGlnbkVuZCAmJiBic1ByZWZpeCArIFwiLXJpZ2h0XCIpXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsaWduUmlnaHQ6IGZhbHNlLFxuICBhczogJ2RpdicsXG4gIGZsaXA6IHRydWVcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRHJvcGRvd25NZW51LCAnZHJvcGRvd24tbWVudScpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCBCYXNlRHJvcGRvd25Ub2dnbGUgZnJvbSAncmVhY3Qtb3ZlcmxheXMvRHJvcGRvd25Ub2dnbGUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIHdyYXBSZWYgPSBmdW5jdGlvbiB3cmFwUmVmKHByb3BzKSB7XG4gIHZhciByZWYgPSBwcm9wcy5yZWY7XG5cbiAgcHJvcHMucmVmID0gcmVmLl9fd3JhcHBlZCB8fCAocmVmLl9fd3JhcHBlZCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgcmV0dXJuIHJlZihmaW5kRE9NTm9kZShyKSk7XG4gIH0pO1xuXG4gIHJldHVybiBwcm9wcztcbn07XG5cbnZhciBEcm9wZG93blRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93blRvZ2dsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25Ub2dnbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3Bkb3duVG9nZ2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHNwbGl0ID0gX3RoaXMkcHJvcHMuc3BsaXQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRCc1ByZWZpeCA9IF90aGlzJHByb3BzLmNoaWxkQnNQcmVmaXgsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInNwbGl0XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjaGlsZEJzUHJlZml4XCIsIFwiYXNcIl0pOyAvLyBUaGlzIGludGVudGlvbmFsbHkgZm9yd2FyZHMgc2l6ZSBhbmQgdmFyaWFudCAoaWYgc2V0KSB0byB0aGVcbiAgICAvLyB1bmRlcmx5aW5nIGNvbXBvbmVudCwgdG8gYWxsb3cgaXQgdG8gcmVuZGVyIHNpemUgYW5kIHN0eWxlIHZhcmlhbnRzLlxuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlRHJvcGRvd25Ub2dnbGUsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdG9nZ2xlID0gX3JlZi50b2dnbGUsXG4gICAgICAgICAgdG9nZ2xlUHJvcHMgPSBfcmVmLnByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIG9uQ2xpY2s6IHRvZ2dsZSxcbiAgICAgICAgYnNQcmVmaXg6IGNoaWxkQnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBzcGxpdCAmJiBic1ByZWZpeCArIFwiLXNwbGl0XCIpXG4gICAgICB9LCB3cmFwUmVmKHRvZ2dsZVByb3BzKSwgcHJvcHMpLCBjaGlsZHJlbik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93blRvZ2dsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBCdXR0b25cbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRHJvcGRvd25Ub2dnbGUsICdkcm9wZG93bi10b2dnbGUnKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFNlbGVjdGFibGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IHZhciBtYWtlRXZlbnRLZXkgPSBmdW5jdGlvbiBtYWtlRXZlbnRLZXkoZXZlbnRLZXksIGhyZWYpIHtcbiAgaWYgKGV2ZW50S2V5ICE9IG51bGwpIHJldHVybiBTdHJpbmcoZXZlbnRLZXkpO1xuICByZXR1cm4gaHJlZiB8fCBudWxsO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdGFibGVDb250ZXh0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgTmF2Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBOYXZDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtYXBDb250ZXh0VG9Qcm9wcyBmcm9tICdyZWFjdC1jb250ZXh0LXRvb2xib3gvbGliL21hcENvbnRleHRUb1Byb3BzJztcbmltcG9ydCBjaGFpbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IFNlbGVjdGFibGVDb250ZXh0LCB7IG1ha2VFdmVudEtleSB9IGZyb20gJy4vU2VsZWN0YWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBOYXZDb250ZXh0IGZyb20gJy4vTmF2Q29udGV4dCc7XG5cbnZhciBEcm9wZG93bkl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJvcGRvd25JdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bkl0ZW0oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrLFxuICAgICAgICAgIGV2ZW50S2V5ID0gX3RoaXMkcHJvcHMuZXZlbnRLZXksXG4gICAgICAgICAgaHJlZiA9IF90aGlzJHByb3BzLmhyZWY7XG4gICAgICB2YXIga2V5ID0gbWFrZUV2ZW50S2V5KGV2ZW50S2V5LCBocmVmKTsgLy8gU2FmZUFuY2hvciBoYW5kbGVzIHRoZSBkaXNhYmxlZCBjYXNlLCBidXQgYmUgaGFuZGxlIGl0IGhlcmVcbiAgICAgIC8vIGZvciBvdGhlciBjb21wb25lbnRzXG5cbiAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgaWYgKG9uU2VsZWN0KSBvblNlbGVjdChrZXksIGV2ZW50KTtcbiAgICAgIGlmIChrZXkgIT09IG51bGwgJiYgX3RoaXMuY29udGV4dFNlbGVjdCkgX3RoaXMuY29udGV4dFNlbGVjdChrZXksIGV2ZW50KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3Bkb3duSXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczIuYnNQcmVmaXgsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzMi5hY3RpdmUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICBfID0gX3RoaXMkcHJvcHMyLmV2ZW50S2V5LFxuICAgICAgICBfMSA9IF90aGlzJHByb3BzMi5vblNlbGVjdCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYnNQcmVmaXhcIiwgXCJhY3RpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImV2ZW50S2V5XCIsIFwib25TZWxlY3RcIiwgXCJhc1wiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGFjdGl2ZSAmJiAnYWN0aXZlJywgcHJvcHMuZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJyksXG4gICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd25JdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bkl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBhczogU2FmZUFuY2hvcixcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgbWFwQ29udGV4dFRvUHJvcHMoW1NlbGVjdGFibGVDb250ZXh0LCBOYXZDb250ZXh0XSwgZnVuY3Rpb24gKG9uU2VsZWN0LCBuYXZDb250ZXh0LCBwcm9wcykge1xuICB2YXIgX3JlZiA9IG5hdkNvbnRleHQgfHwge30sXG4gICAgICBhY3RpdmVLZXkgPSBfcmVmLmFjdGl2ZUtleTtcblxuICB2YXIga2V5ID0gbWFrZUV2ZW50S2V5KHByb3BzLmV2ZW50S2V5LCBwcm9wcy5ocmVmKTtcbiAgcmV0dXJuIHtcbiAgICBvblNlbGVjdDogY2hhaW4ocHJvcHMub25TZWxlY3QsIG9uU2VsZWN0KSxcbiAgICBhY3RpdmU6IHByb3BzLmFjdGl2ZSA9PSBudWxsICYmIGtleSAhPSBudWxsID8gbWFrZUV2ZW50S2V5KGFjdGl2ZUtleSkgPT09IGtleSA6IHByb3BzLmFjdGl2ZVxuICB9O1xufSwgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KERyb3Bkb3duSXRlbSwgJ2Ryb3Bkb3duLWl0ZW0nKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1hcENvbnRleHRUb1Byb3BzIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvbWFwQ29udGV4dFRvUHJvcHMnO1xuaW1wb3J0IEJhc2VEcm9wZG93biBmcm9tICdyZWFjdC1vdmVybGF5cy9Ecm9wZG93bic7XG5pbXBvcnQgY2hhaW4gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBEcm9wZG93bk1lbnUgZnJvbSAnLi9Ecm9wZG93bk1lbnUnO1xuaW1wb3J0IERyb3Bkb3duVG9nZ2xlIGZyb20gJy4vRHJvcGRvd25Ub2dnbGUnO1xuaW1wb3J0IERyb3Bkb3duSXRlbSBmcm9tICcuL0Ryb3Bkb3duSXRlbSc7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQgZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2JyxcbiAgbmF2YmFyOiBmYWxzZVxufTtcblxudmFyIERyb3Bkb3duID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyb3Bkb3duLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVNlbGVjdCA9IGZ1bmN0aW9uIChrZXksIGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25TZWxlY3QpIF90aGlzLnByb3BzLm9uU2VsZWN0KGtleSwgZXZlbnQpO1xuXG4gICAgICBfdGhpcy5oYW5kbGVUb2dnbGUoZmFsc2UsIGV2ZW50LCAnc2VsZWN0Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRvZ2dsZSA9IGZ1bmN0aW9uIChzaG93LCBldmVudCwgc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlID09PSB2b2lkIDApIHtcbiAgICAgICAgc291cmNlID0gZXZlbnQudHlwZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGRvY3VtZW50KSBzb3VyY2UgPSAncm9vdENsb3NlJztcblxuICAgICAgX3RoaXMucHJvcHMub25Ub2dnbGUoc2hvdywgZXZlbnQsIHtcbiAgICAgICAgc291cmNlOiBzb3VyY2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgZHJvcCA9IF90aGlzJHByb3BzLmRyb3AsXG4gICAgICAgIHNob3cgPSBfdGhpcyRwcm9wcy5zaG93LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBhbGlnblJpZ2h0ID0gX3RoaXMkcHJvcHMuYWxpZ25SaWdodCxcbiAgICAgICAgXzEgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgXzMgPSBfdGhpcyRwcm9wcy5vblRvZ2dsZSxcbiAgICAgICAgXzQgPSBfdGhpcyRwcm9wcy5uYXZiYXIsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiZHJvcFwiLCBcInNob3dcIiwgXCJjbGFzc05hbWVcIiwgXCJhc1wiLCBcImFsaWduUmlnaHRcIiwgXCJvblNlbGVjdFwiLCBcIm9uVG9nZ2xlXCIsIFwibmF2YmFyXCJdKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vblRvZ2dsZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RhYmxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlRHJvcGRvd24uQ29udHJvbGxlZENvbXBvbmVudCwge1xuICAgICAgZHJvcDogZHJvcCxcbiAgICAgIHNob3c6IHNob3csXG4gICAgICBhbGlnbkVuZDogYWxpZ25SaWdodCxcbiAgICAgIG9uVG9nZ2xlOiB0aGlzLmhhbmRsZVRvZ2dsZSxcbiAgICAgIGl0ZW1TZWxlY3RvcjogXCIuXCIgKyBic1ByZWZpeCArIFwiLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZClcIlxuICAgIH0sIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZHJvcGRvd25Qcm9wcyA9IF9yZWYucHJvcHM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywgZHJvcGRvd25Qcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBzaG93ICYmICdzaG93JywgKCFkcm9wIHx8IGRyb3AgPT09ICdkb3duJykgJiYgYnNQcmVmaXgsIGRyb3AgPT09ICd1cCcgJiYgJ2Ryb3B1cCcsIGRyb3AgPT09ICdyaWdodCcgJiYgJ2Ryb3ByaWdodCcsIGRyb3AgPT09ICdsZWZ0JyAmJiAnZHJvcGxlZnQnKVxuICAgICAgfSkpO1xuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBVbmNvbnRyb2xsZWREcm9wZG93biA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChCYXNlRHJvcGRvd24uZGVmZXJDb250cm9sVG8oRHJvcGRvd24pLCAnZHJvcGRvd24nKTtcbnZhciBEZWNvcmF0ZWREcm9wZG93biA9IG1hcENvbnRleHRUb1Byb3BzKFNlbGVjdGFibGVDb250ZXh0LCBmdW5jdGlvbiAob25TZWxlY3QsIHByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgb25TZWxlY3Q6IGNoYWluKHByb3BzLm9uU2VsZWN0LCBvblNlbGVjdClcbiAgfTtcbn0sIFVuY29udHJvbGxlZERyb3Bkb3duKTtcbkRlY29yYXRlZERyb3Bkb3duLlRvZ2dsZSA9IERyb3Bkb3duVG9nZ2xlO1xuRGVjb3JhdGVkRHJvcGRvd24uTWVudSA9IERyb3Bkb3duTWVudTtcbkRlY29yYXRlZERyb3Bkb3duLkl0ZW0gPSBEcm9wZG93bkl0ZW07XG5EZWNvcmF0ZWREcm9wZG93bi5IZWFkZXIgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2Ryb3Bkb3duLWhlYWRlcicsIHtcbiAgZGVmYXVsdFByb3BzOiB7XG4gICAgcm9sZTogJ2hlYWRpbmcnXG4gIH1cbn0pO1xuRGVjb3JhdGVkRHJvcGRvd24uRGl2aWRlciA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnZHJvcGRvd24tZGl2aWRlcicsIHtcbiAgZGVmYXVsdFByb3BzOiB7XG4gICAgcm9sZTogJ3NlcGFyYXRvcidcbiAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWREcm9wZG93bjsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcblxuLyoqXG4gKiBBIGNvbnZlbmllbmNlIGNvbXBvbmVudCBmb3Igc2ltcGxlIG9yIGdlbmVyYWwgdXNlIGRyb3Bkb3ducy4gUmVuZGVycyBhIGBCdXR0b25gIHRvZ2dsZSBhbmQgYWxsIGBjaGlsZHJlbmBcbiAqIGFyZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGRlZmF1bHQgYERyb3Bkb3duLk1lbnVgLlxuICpcbiAqIF9BbGwgdW5rbm93biBwcm9wcyBhcmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGBEcm9wZG93bmAgY29tcG9uZW50Ll8gT25seVxuICogdGhlIEJ1dHRvbiBgdmFyaWFudGAsIGBzaXplYCBhbmQgYGJzUHJlZml4YCBwcm9wcyBhcmUgcGFzc2VkIHRvIHRoZSB0b2dnbGUsXG4gKiBhbG9uZyB3aXRoIG1lbnUgcmVsYXRlZCBwcm9wcyBhcmUgcGFzc2VkIHRvIHRoZSBgRHJvcGRvd24uTWVudWBcbiAqL1xudmFyIERyb3Bkb3duQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyb3Bkb3duQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bkJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd25CdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQgPSBfdGhpcyRwcm9wcy5yb290Q2xvc2VFdmVudCxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBtZW51Um9sZSA9IF90aGlzJHByb3BzLm1lbnVSb2xlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZixcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1widGl0bGVcIiwgXCJjaGlsZHJlblwiLCBcImJzUHJlZml4XCIsIFwicm9vdENsb3NlRXZlbnRcIiwgXCJ2YXJpYW50XCIsIFwic2l6ZVwiLCBcIm1lbnVSb2xlXCIsIFwiZGlzYWJsZWRcIiwgXCJocmVmXCIsIFwiaWRcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24sIHByb3BzLCBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLlRvZ2dsZSwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIHNpemU6IHNpemUsXG4gICAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgY2hpbGRCc1ByZWZpeDogYnNQcmVmaXhcbiAgICB9LCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uTWVudSwge1xuICAgICAgcm9sZTogbWVudVJvbGUsXG4gICAgICByb290Q2xvc2VFdmVudDogcm9vdENsb3NlRXZlbnRcbiAgICB9LCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bkJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25CdXR0b247IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0cmFuc2Zvcm1Db250ZXh0IGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvdHJhbnNmb3JtQ29udGV4dCc7XG52YXIgRm9ybUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgY29udHJvbElkOiB1bmRlZmluZWRcbn0pO1xuRm9ybUNvbnRleHQuVHJhbnNmb3JtID0gdHJhbnNmb3JtQ29udGV4dChGb3JtQ29udGV4dCk7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcblxuZnVuY3Rpb24gRm9ybUdyb3VwKF9yZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgY29udHJvbElkID0gX3JlZi5jb250cm9sSWQsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImlubmVyUmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250cm9sSWRcIiwgXCJhc1wiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgY29udHJvbElkOiBjb250cm9sSWRcbiAgICB9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICB9KSwgY2hpbGRyZW4pKTtcbn1cblxuRm9ybUdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtR3JvdXAsICdmb3JtLWdyb3VwJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgRmVlZGJhY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRmVlZGJhY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZlZWRiYWNrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGZWVkYmFjay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJjbGFzc05hbWVcIiwgXCJ0eXBlXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB0eXBlICYmIHR5cGUgKyBcIi1mZWVkYmFja1wiKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRmVlZGJhY2s7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZlZWRiYWNrLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ3ZhbGlkJyxcbiAgYXM6ICdkaXYnXG59O1xuZXhwb3J0IGRlZmF1bHQgRmVlZGJhY2s7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgbWFwQ29udGV4dFRvUHJvcHMgZnJvbSAncmVhY3QtY29udGV4dC10b29sYm94L2xpYi9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgRmVlZGJhY2sgZnJvbSAnLi9GZWVkYmFjayc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdpbnB1dCdcbn07XG5cbnZhciBGb3JtQ29udHJvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGb3JtQ29udHJvbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2woKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1Db250cm9sLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlLFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wcy5pbnB1dFJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBpc1ZhbGlkID0gX3RoaXMkcHJvcHMuaXNWYWxpZCxcbiAgICAgICAgaXNJbnZhbGlkID0gX3RoaXMkcHJvcHMuaXNJbnZhbGlkLFxuICAgICAgICBwbGFpbnRleHQgPSBfdGhpcyRwcm9wcy5wbGFpbnRleHQsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHMucmVhZE9ubHksXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInR5cGVcIiwgXCJzaXplXCIsIFwiaWRcIiwgXCJpbnB1dFJlZlwiLCBcImNsYXNzTmFtZVwiLCBcImlzVmFsaWRcIiwgXCJpc0ludmFsaWRcIiwgXCJwbGFpbnRleHRcIiwgXCJyZWFkT25seVwiLCBcImFzXCJdKTtcblxuICAgIHZhciBjbGFzc2VzO1xuXG4gICAgaWYgKHBsYWludGV4dCkge1xuICAgICAgdmFyIF9jbGFzc2VzO1xuXG4gICAgICBjbGFzc2VzID0gKF9jbGFzc2VzID0ge30sIF9jbGFzc2VzW2JzUHJlZml4ICsgXCItcGxhaW50ZXh0XCJdID0gdHJ1ZSwgX2NsYXNzZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB2YXIgX2NsYXNzZXMyO1xuXG4gICAgICBjbGFzc2VzID0gKF9jbGFzc2VzMiA9IHt9LCBfY2xhc3NlczJbYnNQcmVmaXggKyBcIi1maWxlXCJdID0gdHJ1ZSwgX2NsYXNzZXMyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9jbGFzc2VzMztcblxuICAgICAgY2xhc3NlcyA9IChfY2xhc3NlczMgPSB7fSwgX2NsYXNzZXMzW2JzUHJlZml4XSA9IHRydWUsIF9jbGFzc2VzM1tic1ByZWZpeCArIFwiLVwiICsgc2l6ZV0gPSBzaXplLCBfY2xhc3NlczMpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgaWQ6IGlkLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMsIGlzVmFsaWQgJiYgXCJpcy12YWxpZFwiLCBpc0ludmFsaWQgJiYgXCJpcy1pbnZhbGlkXCIpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGb3JtQ29udHJvbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRm9ybUNvbnRyb2wuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgbWFwQ29udGV4dCA9IGZ1bmN0aW9uIG1hcENvbnRleHQoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIGNvbnRyb2xJZCA9IF9yZWYuY29udHJvbElkO1xuICB2YXIgaWQgPSBfcmVmMi5pZDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjb250cm9sSWQgPT0gbnVsbCB8fCAhaWQsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Rm9ybUNvbnRyb2w+YCB3aGVuIGBpZGAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGlkOiBpZCB8fCBjb250cm9sSWRcbiAgfTtcbn07XG5cbnZhciBEZWNvcmF0ZWRGb3JtQ29udHJvbCA9IG1hcENvbnRleHRUb1Byb3BzKEZvcm1Db250ZXh0LCBtYXBDb250ZXh0LCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRm9ybUNvbnRyb2wsIHtcbiAgcHJlZml4OiAnZm9ybS1jb250cm9sJyxcbiAgZm9yd2FyZFJlZkFzOiAnaW5wdXRSZWYnXG59KSk7XG5EZWNvcmF0ZWRGb3JtQ29udHJvbC5GZWVkYmFjayA9IEZlZWRiYWNrO1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkRm9ybUNvbnRyb2w7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiAnY2hlY2tib3gnXG59O1xuXG5mdW5jdGlvbiBGb3JtQ2hlY2tJbnB1dChfcmVmKSB7XG4gIHZhciBpZCA9IF9yZWYuaWQsXG4gICAgICBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGlzVmFsaWQgPSBfcmVmLmlzVmFsaWQsXG4gICAgICBpc0ludmFsaWQgPSBfcmVmLmlzSW52YWxpZCxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIGlzU3RhdGljID0gX3JlZi5pc1N0YXRpYyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaWRcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImlzVmFsaWRcIiwgXCJpc0ludmFsaWRcIiwgXCJpbm5lclJlZlwiLCBcImlzU3RhdGljXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIGNvbnRyb2xJZCA9IF9yZWYyLmNvbnRyb2xJZCxcbiAgICAgICAgY3VzdG9tID0gX3JlZjIuY3VzdG9tO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgaWQ6IGlkIHx8IGNvbnRyb2xJZCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsICFjdXN0b20gJiYgYnNQcmVmaXgsIGN1c3RvbSAmJiAnY3VzdG9tLWNvbnRyb2wtaW5wdXQnLCBpc1ZhbGlkICYmICdpcy12YWxpZCcsIGlzSW52YWxpZCAmJiAnaXMtaW52YWxpZCcsIGlzU3RhdGljICYmICdwb3NpdGlvbi1zdGF0aWMnKVxuICAgIH0pKTtcbiAgfSk7XG59XG5cbkZvcm1DaGVja0lucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtQ2hlY2tJbnB1dCwgJ2Zvcm0tY2hlY2staW5wdXQnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdjaGVja2JveCdcbn07XG5cbmZ1bmN0aW9uIEZvcm1DaGVja0xhYmVsKF9yZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgaHRtbEZvciA9IF9yZWYuaHRtbEZvcixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJpbm5lclJlZlwiLCBcImh0bWxGb3JcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgY29udHJvbElkID0gX3JlZjIuY29udHJvbElkLFxuICAgICAgICBjdXN0b20gPSBfcmVmMi5jdXN0b207XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogaW5uZXJSZWYsXG4gICAgICBodG1sRm9yOiBodG1sRm9yIHx8IGNvbnRyb2xJZCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsICFjdXN0b20gJiYgYnNQcmVmaXgsIGN1c3RvbSAmJiAnY3VzdG9tLWNvbnRyb2wtbGFiZWwnKVxuICAgIH0pKTtcbiAgfSk7XG59XG5cbkZvcm1DaGVja0xhYmVsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtQ2hlY2tMYWJlbCwgJ2Zvcm0tY2hlY2stbGFiZWwnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IEZlZWRiYWNrIGZyb20gJy4vRmVlZGJhY2snO1xuaW1wb3J0IEZvcm1DaGVja0lucHV0IGZyb20gJy4vRm9ybUNoZWNrSW5wdXQnO1xuaW1wb3J0IEZvcm1DaGVja0xhYmVsIGZyb20gJy4vRm9ybUNoZWNrTGFiZWwnO1xuXG52YXIgRm9ybUNoZWNrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEZvcm1DaGVjaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybUNoZWNrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGb3JtQ2hlY2sucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgaW5saW5lID0gX3RoaXMkcHJvcHMuaW5saW5lLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICBpc1ZhbGlkID0gX3RoaXMkcHJvcHMuaXNWYWxpZCxcbiAgICAgICAgaXNJbnZhbGlkID0gX3RoaXMkcHJvcHMuaXNJbnZhbGlkLFxuICAgICAgICBmZWVkYmFjayA9IF90aGlzJHByb3BzLmZlZWRiYWNrLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlLFxuICAgICAgICBsYWJlbCA9IF90aGlzJHByb3BzLmxhYmVsLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjdXN0b20gPSBfdGhpcyRwcm9wcy5jdXN0b20sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImlkXCIsIFwiYnNQcmVmaXhcIiwgXCJpbmxpbmVcIiwgXCJkaXNhYmxlZFwiLCBcImlzVmFsaWRcIiwgXCJpc0ludmFsaWRcIiwgXCJmZWVkYmFja1wiLCBcImlucHV0UmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJ0aXRsZVwiLCBcInR5cGVcIiwgXCJsYWJlbFwiLCBcImNoaWxkcmVuXCIsIFwiY3VzdG9tXCJdKTtcblxuICAgIHZhciBoYXNMYWJlbCA9IGxhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09IGZhbHNlICYmICFjaGlsZHJlbjtcbiAgICB2YXIgaW5wdXQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1DaGVja0lucHV0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICAgIGlzSW52YWxpZDogaXNJbnZhbGlkLFxuICAgICAgaXNTdGF0aWM6ICFoYXNMYWJlbCxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgIH0pKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udGV4dC5UcmFuc2Zvcm0sIHtcbiAgICAgIG1hcFRvVmFsdWU6IGZ1bmN0aW9uIG1hcFRvVmFsdWUoX3JlZikge1xuICAgICAgICB2YXIgY29udHJvbElkID0gX3JlZi5jb250cm9sSWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udHJvbElkOiBpZCB8fCBjb250cm9sSWQsXG4gICAgICAgICAgY3VzdG9tOiBjdXN0b21cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsICFjdXN0b20gJiYgYnNQcmVmaXgsIGN1c3RvbSAmJiBcImN1c3RvbS1jb250cm9sIGN1c3RvbS1cIiArIHR5cGUsIGlubGluZSAmJiAoY3VzdG9tID8gJ2N1c3RvbS1jb250cm9sJyA6IGJzUHJlZml4KSArIFwiLWlubGluZVwiKVxuICAgIH0sIGNoaWxkcmVuIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGlucHV0LCBoYXNMYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1DaGVja0xhYmVsLCB7XG4gICAgICB0aXRsZTogdGl0bGVcbiAgICB9LCBsYWJlbCksIChpc1ZhbGlkIHx8IGlzSW52YWxpZCkgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChGZWVkYmFjaywge1xuICAgICAgdHlwZTogaXNWYWxpZCA/ICd2YWxpZCcgOiAnaW52YWxpZCdcbiAgICB9LCBmZWVkYmFjaykpKSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1DaGVjaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRm9ybUNoZWNrLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ2NoZWNrYm94JyxcbiAgaW5saW5lOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBpc1ZhbGlkOiBmYWxzZSxcbiAgaXNJbnZhbGlkOiBmYWxzZSxcbiAgdGl0bGU6ICcnXG59O1xudmFyIERlY29yYXRlZEZvcm1DaGVjayA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtQ2hlY2ssIHtcbiAgZm9yd2FyZFJlZkFzOiAnaW5wdXRSZWYnLFxuICBwcmVmaXg6ICdmb3JtLWNoZWNrJ1xufSk7XG5EZWNvcmF0ZWRGb3JtQ2hlY2suSW5wdXQgPSBGb3JtQ2hlY2tJbnB1dDtcbkRlY29yYXRlZEZvcm1DaGVjay5MYWJlbCA9IEZvcm1DaGVja0xhYmVsO1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkRm9ybUNoZWNrOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBtYXBDb250ZXh0VG9Qcm9wcyBmcm9tICdyZWFjdC1jb250ZXh0LXRvb2xib3gvbGliL21hcENvbnRleHRUb1Byb3BzJztcbmltcG9ydCBDb2wgZnJvbSAnLi9Db2wnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbHVtbjogZmFsc2UsXG4gIHNyT25seTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIEZvcm1MYWJlbChfcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjb2x1bW4gPSBfcmVmLmNvbHVtbixcbiAgICAgIHNyT25seSA9IF9yZWYuc3JPbmx5LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY29sdW1uXCIsIFwic3JPbmx5XCIsIFwiY2xhc3NOYW1lXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBzck9ubHkgJiYgJ3NyLW9ubHknLCBjb2x1bW4gJiYgJ2NvbC1mb3JtLWxhYmVsJyk7XG4gIGlmIChjb2x1bW4pIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgIGFzOiBcImxhYmVsXCJcbiAgfSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbGFiZWwtaGFzLWZvciwganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbFxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufVxuXG5Gb3JtTGFiZWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgbWFwQ29udGV4dCA9IGZ1bmN0aW9uIG1hcENvbnRleHQoX3JlZjIsIF9yZWYzKSB7XG4gIHZhciBjb250cm9sSWQgPSBfcmVmMi5jb250cm9sSWQ7XG4gIHZhciBodG1sRm9yID0gX3JlZjMuaHRtbEZvcjtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjb250cm9sSWQgPT0gbnVsbCB8fCAhaHRtbEZvciwgJ2Bjb250cm9sSWRgIGlzIGlnbm9yZWQgb24gYDxGb3JtTGFiZWw+YCB3aGVuIGBodG1sRm9yYCBpcyBzcGVjaWZpZWQuJykgOiB2b2lkIDA7XG4gIHJldHVybiB7XG4gICAgaHRtbEZvcjogaHRtbEZvciB8fCBjb250cm9sSWRcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENvbnRleHRUb1Byb3BzKEZvcm1Db250ZXh0LCBtYXBDb250ZXh0LCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRm9ybUxhYmVsLCAnZm9ybS1sYWJlbCcpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnc21hbGwnXG59O1xuXG5mdW5jdGlvbiBGb3JtVGV4dChfcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIENvbXBvbmVudCA9IF9yZWYuYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiaW5uZXJSZWZcIiwgXCJhc1wiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICB9KSk7XG59XG5cbkZvcm1UZXh0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtVGV4dCwgJ2Zvcm0tdGV4dCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJy4vRm9ybUdyb3VwJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtQ2hlY2sgZnJvbSAnLi9Gb3JtQ2hlY2snO1xuaW1wb3J0IEZvcm1MYWJlbCBmcm9tICcuL0Zvcm1MYWJlbCc7XG5pbXBvcnQgRm9ybVRleHQgZnJvbSAnLi9Gb3JtVGV4dCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbmxpbmU6IGZhbHNlLFxuICBhczogJ2Zvcm0nXG59O1xuXG5mdW5jdGlvbiBGb3JtKF9yZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGlubGluZSA9IF9yZWYuaW5saW5lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICB2YWxpZGF0ZWQgPSBfcmVmLnZhbGlkYXRlZCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYuYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiaW5saW5lXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW5uZXJSZWZcIiwgXCJ2YWxpZGF0ZWRcIiwgXCJhc1wiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHZhbGlkYXRlZCAmJiAnd2FzLXZhbGlkYXRlZCcsIGlubGluZSAmJiBic1ByZWZpeCArIFwiLWlubGluZVwiKVxuICB9KSk7XG59XG5cbkZvcm0uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIERlY29yYXRlZEZvcm0gPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRm9ybSwgJ2Zvcm0nKTtcbkRlY29yYXRlZEZvcm0uUm93ID0gY3JlYXRlV2l0aEJzUHJlZml4KCdmb3JtLXJvdycpO1xuRGVjb3JhdGVkRm9ybS5Hcm91cCA9IEZvcm1Hcm91cDtcbkRlY29yYXRlZEZvcm0uQ29udHJvbCA9IEZvcm1Db250cm9sO1xuRGVjb3JhdGVkRm9ybS5DaGVjayA9IEZvcm1DaGVjaztcbkRlY29yYXRlZEZvcm0uTGFiZWwgPSBGb3JtTGFiZWw7XG5EZWNvcmF0ZWRGb3JtLlRleHQgPSBGb3JtVGV4dDtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZEZvcm07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIENvbnRhaW5lciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDb250YWluZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29udGFpbmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGZsdWlkID0gX3RoaXMkcHJvcHMuZmx1aWQsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiZmx1aWRcIiwgXCJhc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgZmx1aWQgPyBic1ByZWZpeCArIFwiLWZsdWlkXCIgOiBic1ByZWZpeClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRhaW5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICBmbHVpZDogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ29udGFpbmVyLCAnY29udGFpbmVyJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIEltYWdlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEltYWdlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbWFnZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW1hZ2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBmbHVpZCA9IF90aGlzJHByb3BzLmZsdWlkLFxuICAgICAgICByb3VuZGVkID0gX3RoaXMkcHJvcHMucm91bmRlZCxcbiAgICAgICAgcm91bmRlZENpcmNsZSA9IF90aGlzJHByb3BzLnJvdW5kZWRDaXJjbGUsXG4gICAgICAgIHRodW1ibmFpbCA9IF90aGlzJHByb3BzLnRodW1ibmFpbCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJmbHVpZFwiLCBcInJvdW5kZWRcIiwgXCJyb3VuZGVkQ2lyY2xlXCIsIFwidGh1bWJuYWlsXCJdKTtcblxuICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhmbHVpZCAmJiBic1ByZWZpeCArIFwiLWZsdWlkXCIsIHJvdW5kZWQgJiYgXCJyb3VuZGVkXCIsIHJvdW5kZWRDaXJjbGUgJiYgXCJyb3VuZGVkLWNpcmNsZVwiLCB0aHVtYm5haWwgJiYgYnNQcmVmaXggKyBcIi10aHVtYm5haWxcIik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW1hZ2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkltYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgZmx1aWQ6IGZhbHNlLFxuICByb3VuZGVkOiBmYWxzZSxcbiAgcm91bmRlZENpcmNsZTogZmFsc2UsXG4gIHRodW1ibmFpbDogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoSW1hZ2UsICdpbWcnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi9JbWFnZSc7XG5cbnZhciBGaWd1cmVJbWFnZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGaWd1cmVJbWFnZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmlndXJlSW1hZ2UoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZpZ3VyZUltYWdlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEltYWdlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsICdmaWd1cmUtaW1nJylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZpZ3VyZUltYWdlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5GaWd1cmVJbWFnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGZsdWlkOiB0cnVlXG59O1xuZXhwb3J0IGRlZmF1bHQgRmlndXJlSW1hZ2U7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIEZpZ3VyZUNhcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRmlndXJlQ2FwdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmlndXJlQ2FwdGlvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRmlndXJlQ2FwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhc1wiLCBcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZpZ3VyZUNhcHRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZpZ3VyZUNhcHRpb24uZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2ZpZ2NhcHRpb24nXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZpZ3VyZUNhcHRpb24sICdmaWd1cmUtY2FwdGlvbicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRmlndXJlSW1hZ2UgZnJvbSAnLi9GaWd1cmVJbWFnZSc7XG5pbXBvcnQgRmlndXJlQ2FwdGlvbiBmcm9tICcuL0ZpZ3VyZUNhcHRpb24nO1xuXG52YXIgRmlndXJlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEZpZ3VyZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmlndXJlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGaWd1cmUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGaWd1cmU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZpZ3VyZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZmlndXJlJ1xufTtcbnZhciBEZWNvcmF0ZWRGaWd1cmUgPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRmlndXJlLCAnZmlndXJlJyk7XG5EZWNvcmF0ZWRGaWd1cmUuSW1hZ2UgPSBGaWd1cmVJbWFnZTtcbkRlY29yYXRlZEZpZ3VyZS5DYXB0aW9uID0gRmlndXJlQ2FwdGlvbjtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZEZpZ3VyZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG4vKipcbiAqXG4gKiBAcHJvcGVydHkge0lucHV0R3JvdXBBcHBlbmR9IEFwcGVuZFxuICogQHByb3BlcnR5IHtJbnB1dEdyb3VwUHJlcGVuZH0gUHJlcGVuZFxuICogQHByb3BlcnR5IHtJbnB1dEdyb3VwVGV4dH0gVGV4dFxuICogQHByb3BlcnR5IHtJbnB1dEdyb3VwUmFkaW99IFJhZGlvXG4gKiBAcHJvcGVydHkge0lucHV0R3JvdXBDaGVja2JveH0gQ2hlY2tib3hcbiAqL1xuXG52YXIgSW5wdXRHcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShJbnB1dEdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbnB1dEdyb3VwKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbnB1dEdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInNpemVcIiwgXCJjbGFzc05hbWVcIiwgXCJhc1wiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBJbnB1dEdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5JbnB1dEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnXG59O1xudmFyIElucHV0R3JvdXBBcHBlbmQgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2lucHV0LWdyb3VwLWFwcGVuZCcpO1xudmFyIElucHV0R3JvdXBQcmVwZW5kID0gY3JlYXRlV2l0aEJzUHJlZml4KCdpbnB1dC1ncm91cC1wcmVwZW5kJyk7XG52YXIgSW5wdXRHcm91cFRleHQgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2lucHV0LWdyb3VwLXRleHQnLCB7XG4gIENvbXBvbmVudDogJ3NwYW4nXG59KTtcblxudmFyIElucHV0R3JvdXBDaGVja2JveCA9IGZ1bmN0aW9uIElucHV0R3JvdXBDaGVja2JveChwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEdyb3VwVGV4dCwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHtcbiAgICB0eXBlOiBcImNoZWNrYm94XCJcbiAgfSwgcHJvcHMpKSk7XG59O1xuXG52YXIgSW5wdXRHcm91cFJhZGlvID0gZnVuY3Rpb24gSW5wdXRHcm91cFJhZGlvKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0R3JvdXBUZXh0LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgX2V4dGVuZHMoe1xuICAgIHR5cGU6IFwicmFkaW9cIlxuICB9LCBwcm9wcykpKTtcbn07XG5cbnZhciBEZWNvcmF0ZWRJbnB1dEdyb3VwID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KElucHV0R3JvdXAsICdpbnB1dC1ncm91cCcpO1xuRGVjb3JhdGVkSW5wdXRHcm91cC5UZXh0ID0gSW5wdXRHcm91cFRleHQ7XG5EZWNvcmF0ZWRJbnB1dEdyb3VwLlJhZGlvID0gSW5wdXRHcm91cFJhZGlvO1xuRGVjb3JhdGVkSW5wdXRHcm91cC5DaGVja2JveCA9IElucHV0R3JvdXBDaGVja2JveDtcbkRlY29yYXRlZElucHV0R3JvdXAuQXBwZW5kID0gSW5wdXRHcm91cEFwcGVuZDtcbkRlY29yYXRlZElucHV0R3JvdXAuUHJlcGVuZCA9IElucHV0R3JvdXBQcmVwZW5kO1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkSW5wdXRHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICBmbHVpZDogZmFsc2Vcbn07XG5cbnZhciBKdW1ib3Ryb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSnVtYm90cm9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBKdW1ib3Ryb24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEp1bWJvdHJvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzZXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBmbHVpZCA9IF90aGlzJHByb3BzLmZsdWlkLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJhc1wiLCBcImNsYXNzTmFtZVwiLCBcImZsdWlkXCIsIFwiYnNQcmVmaXhcIl0pO1xuXG4gICAgdmFyIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7fSwgX2NsYXNzZXNbYnNQcmVmaXhdID0gdHJ1ZSwgX2NsYXNzZXNbYnNQcmVmaXggKyBcIi1mbHVpZFwiXSA9IGZsdWlkLCBfY2xhc3Nlcyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGNsYXNzZXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBKdW1ib3Ryb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkp1bWJvdHJvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoSnVtYm90cm9uLCAnanVtYm90cm9uJyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBUYWJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFRhYkNvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBxc2EgZnJvbSAnZG9tLWhlbHBlcnMvcXVlcnkvcXVlcnlTZWxlY3RvckFsbCc7XG5pbXBvcnQgbWFwQ29udGV4dFRvUHJvcHMgZnJvbSAncmVhY3QtY29udGV4dC10b29sYm94L2xpYi9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQsIHsgbWFrZUV2ZW50S2V5IH0gZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5pbXBvcnQgTmF2Q29udGV4dCBmcm9tICcuL05hdkNvbnRleHQnO1xuaW1wb3J0IFRhYkNvbnRleHQgZnJvbSAnLi9UYWJDb250ZXh0JztcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbnZhciBBYnN0cmFjdE5hdiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShBYnN0cmFjdE5hdiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWJzdHJhY3ROYXYoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3QgPSBmdW5jdGlvbiAoa2V5LCBldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgICBwYXJlbnRPblNlbGVjdCA9IF90aGlzJHByb3BzLnBhcmVudE9uU2VsZWN0O1xuICAgICAgaWYgKGtleSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAob25TZWxlY3QpIG9uU2VsZWN0KGtleSwgZXZlbnQpO1xuICAgICAgaWYgKHBhcmVudE9uU2VsZWN0KSBwYXJlbnRPblNlbGVjdChrZXksIGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uS2V5RG93biA9IF90aGlzLnByb3BzLm9uS2V5RG93bjtcbiAgICAgIGlmIChvbktleURvd24pIG9uS2V5RG93bihldmVudCk7XG4gICAgICB2YXIgbmV4dEFjdGl2ZUNoaWxkO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICBuZXh0QWN0aXZlQ2hpbGQgPSBfdGhpcy5nZXROZXh0QWN0aXZlQ2hpbGQoLTEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIG5leHRBY3RpdmVDaGlsZCA9IF90aGlzLmdldE5leHRBY3RpdmVDaGlsZCgxKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXh0QWN0aXZlQ2hpbGQpIHJldHVybjtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLmhhbmRsZVNlbGVjdChuZXh0QWN0aXZlQ2hpbGQuZGF0YXNldC5yYkV2ZW50S2V5LCBldmVudCk7XG5cbiAgICAgIF90aGlzLl9uZWVkc1JlZm9jdXMgPSB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5hdHRhY2hSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5saXN0Tm9kZSA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBuYXZDb250ZXh0OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBBYnN0cmFjdE5hdi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZikge1xuICAgIHZhciBhY3RpdmVLZXkgPSBfcmVmLmFjdGl2ZUtleSxcbiAgICAgICAgZ2V0Q29udHJvbGxlZElkID0gX3JlZi5nZXRDb250cm9sbGVkSWQsXG4gICAgICAgIGdldENvbnRyb2xsZXJJZCA9IF9yZWYuZ2V0Q29udHJvbGxlcklkLFxuICAgICAgICByb2xlID0gX3JlZi5yb2xlO1xuICAgIHJldHVybiB7XG4gICAgICBuYXZDb250ZXh0OiB7XG4gICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIC8vIHVzZWQgYnkgTmF2TGluayB0byBkZXRlcm1pbmUgaXQncyByb2xlXG4gICAgICAgIGFjdGl2ZUtleTogbWFrZUV2ZW50S2V5KGFjdGl2ZUtleSksXG4gICAgICAgIGdldENvbnRyb2xsZWRJZDogZ2V0Q29udHJvbGxlZElkIHx8IG5vb3AsXG4gICAgICAgIGdldENvbnRyb2xsZXJJZDogZ2V0Q29udHJvbGxlcklkIHx8IG5vb3BcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBBYnN0cmFjdE5hdi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuX25lZWRzUmVmb2N1cyB8fCAhdGhpcy5saXN0Tm9kZSkgcmV0dXJuO1xuICAgIHZhciBhY3RpdmVDaGlsZCA9IHRoaXMubGlzdE5vZGUucXVlcnlTZWxlY3RvcignW2RhdGEtcmItZXZlbnQta2V5XS5hY3RpdmUnKTtcbiAgICBpZiAoYWN0aXZlQ2hpbGQpIGFjdGl2ZUNoaWxkLmZvY3VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldE5leHRBY3RpdmVDaGlsZCA9IGZ1bmN0aW9uIGdldE5leHRBY3RpdmVDaGlsZChvZmZzZXQpIHtcbiAgICBpZiAoIXRoaXMubGlzdE5vZGUpIHJldHVybiBudWxsO1xuICAgIHZhciBpdGVtcyA9IHFzYSh0aGlzLmxpc3ROb2RlLCAnW2RhdGEtcmItZXZlbnQta2V5XTpub3QoLmRpc2FibGVkKScpO1xuICAgIHZhciBhY3RpdmVDaGlsZCA9IHRoaXMubGlzdE5vZGUucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpO1xuICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoYWN0aXZlQ2hpbGQpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBudWxsO1xuICAgIHZhciBuZXh0SW5kZXggPSBpbmRleCArIG9mZnNldDtcbiAgICBpZiAobmV4dEluZGV4ID49IGl0ZW1zLmxlbmd0aCkgbmV4dEluZGV4ID0gMDtcbiAgICBpZiAobmV4dEluZGV4IDwgMCkgbmV4dEluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gaXRlbXNbbmV4dEluZGV4XTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wczIuYXMsXG4gICAgICAgIF8gPSBfdGhpcyRwcm9wczIub25TZWxlY3QsXG4gICAgICAgIF8wID0gX3RoaXMkcHJvcHMyLnBhcmVudE9uU2VsZWN0LFxuICAgICAgICBfMSA9IF90aGlzJHByb3BzMi5nZXRDb250cm9sbGVkSWQsXG4gICAgICAgIF8yID0gX3RoaXMkcHJvcHMyLmdldENvbnRyb2xsZXJJZCxcbiAgICAgICAgXzMgPSBfdGhpcyRwcm9wczIuYWN0aXZlS2V5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYXNcIiwgXCJvblNlbGVjdFwiLCBcInBhcmVudE9uU2VsZWN0XCIsIFwiZ2V0Q29udHJvbGxlZElkXCIsIFwiZ2V0Q29udHJvbGxlcklkXCIsIFwiYWN0aXZlS2V5XCJdKTtcblxuICAgIGlmIChwcm9wcy5yb2xlID09PSAndGFibGlzdCcpIHtcbiAgICAgIHByb3BzLm9uS2V5RG93biA9IHRoaXMuaGFuZGxlS2V5RG93bjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RhYmxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChOYXZDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5uYXZDb250ZXh0XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICByZWY6IHRoaXMuYXR0YWNoUmVmXG4gICAgfSkpKSk7XG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0TmF2O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5BYnN0cmFjdE5hdi5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAndWwnXG59O1xuZXhwb3J0IGRlZmF1bHQgbWFwQ29udGV4dFRvUHJvcHMoW1NlbGVjdGFibGVDb250ZXh0LCBUYWJDb250ZXh0XSwgZnVuY3Rpb24gKHBhcmVudE9uU2VsZWN0LCB0YWJDb250ZXh0LCBfcmVmMikge1xuICB2YXIgcm9sZSA9IF9yZWYyLnJvbGU7XG4gIGlmICghdGFiQ29udGV4dCkgcmV0dXJuIHtcbiAgICBwYXJlbnRPblNlbGVjdDogcGFyZW50T25TZWxlY3RcbiAgfTtcbiAgdmFyIGFjdGl2ZUtleSA9IHRhYkNvbnRleHQuYWN0aXZlS2V5LFxuICAgICAgZ2V0Q29udHJvbGxlcklkID0gdGFiQ29udGV4dC5nZXRDb250cm9sbGVySWQsXG4gICAgICBnZXRDb250cm9sbGVkSWQgPSB0YWJDb250ZXh0LmdldENvbnRyb2xsZWRJZDtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICBwYXJlbnRPblNlbGVjdDogcGFyZW50T25TZWxlY3QsXG4gICAgcm9sZTogcm9sZSB8fCAndGFibGlzdCcsXG4gICAgLy8gcGFzcyB0aGVzZSB0d28gdGhyb3VnaCB0byBhdm9pZCBoYXZpbmcgdG8gbGlzdGVuIHRvXG4gICAgLy8gYm90aCBUYWIgYW5kIE5hdiBjb250ZXh0cyBpbiBOYXZMaW5rXG4gICAgZ2V0Q29udHJvbGxlcklkOiBnZXRDb250cm9sbGVySWQsXG4gICAgZ2V0Q29udHJvbGxlZElkOiBnZXRDb250cm9sbGVkSWRcbiAgfTtcbn0sIEFic3RyYWN0TmF2KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTmF2Q29udGV4dCBmcm9tICcuL05hdkNvbnRleHQnO1xuaW1wb3J0IFNlbGVjdGFibGVDb250ZXh0LCB7IG1ha2VFdmVudEtleSB9IGZyb20gJy4vU2VsZWN0YWJsZUNvbnRleHQnO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG52YXIgQWJzdHJhY3ROYXZJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEFic3RyYWN0TmF2SXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWJzdHJhY3ROYXZJdGVtKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBYnN0cmFjdE5hdkl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzLnRhYkluZGV4LFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwidGFiSW5kZXhcIiwgXCJldmVudEtleVwiLCBcIm9uU2VsZWN0XCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIG5hdktleSA9IG1ha2VFdmVudEtleShldmVudEtleSwgcHJvcHMuaHJlZik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChwYXJlbnRPblNlbGVjdCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2Q29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKG5hdkNvbnRleHQpIHtcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gYWN0aXZlO1xuXG4gICAgICAgIGlmIChuYXZDb250ZXh0KSB7XG4gICAgICAgICAgaWYgKCFwcm9wcy5yb2xlICYmIG5hdkNvbnRleHQucm9sZSA9PT0gJ3RhYmxpc3QnKSBwcm9wcy5yb2xlID0gJ3RhYic7XG4gICAgICAgICAgcHJvcHNbJ2RhdGEtcmItZXZlbnQta2V5J10gPSBuYXZLZXk7XG4gICAgICAgICAgcHJvcHMuaWQgPSBuYXZDb250ZXh0LmdldENvbnRyb2xsZXJJZChuYXZLZXkpO1xuICAgICAgICAgIHByb3BzWydhcmlhLWNvbnRyb2xzJ10gPSBuYXZDb250ZXh0LmdldENvbnRyb2xsZWRJZChuYXZLZXkpO1xuICAgICAgICAgIGlzQWN0aXZlID0gYWN0aXZlID09IG51bGwgJiYgbmF2S2V5ICE9IG51bGwgPyBuYXZDb250ZXh0LmFjdGl2ZUtleSA9PT0gbmF2S2V5IDogYWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLnJvbGUgPT09ICd0YWInKSB7XG4gICAgICAgICAgcHJvcHMudGFiSW5kZXggPSBpc0FjdGl2ZSA/IHRhYkluZGV4IDogLTE7XG4gICAgICAgICAgcHJvcHNbJ2FyaWEtc2VsZWN0ZWQnXSA9IGlzQWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBpc0FjdGl2ZSAmJiAnYWN0aXZlJyksXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhlKTtcbiAgICAgICAgICAgIGlmIChuYXZLZXkgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG9uU2VsZWN0KSBvblNlbGVjdChuYXZLZXksIGUpO1xuICAgICAgICAgICAgaWYgKHBhcmVudE9uU2VsZWN0KSBwYXJlbnRPblNlbGVjdChuYXZLZXksIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0TmF2SXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQWJzdHJhY3ROYXZJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0TmF2SXRlbTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWJzdHJhY3ROYXZJdGVtIGZyb20gJy4vQWJzdHJhY3ROYXZJdGVtJztcbmltcG9ydCB7IG1ha2VFdmVudEtleSB9IGZyb20gJy4vU2VsZWN0YWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIExpc3RHcm91cEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlzdEdyb3VwSXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdEdyb3VwSXRlbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkO1xuXG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwSXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczIuYnNQcmVmaXgsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzMi5hY3RpdmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMyLnZhcmlhbnQsXG4gICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzMi5hY3Rpb24sXG4gICAgICAgIGFzID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzMi5ldmVudEtleSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJzUHJlZml4XCIsIFwiYWN0aXZlXCIsIFwiZGlzYWJsZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJ2YXJpYW50XCIsIFwiYWN0aW9uXCIsIFwiYXNcIiwgXCJldmVudEtleVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBYnN0cmFjdE5hdkl0ZW0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgZXZlbnRLZXk6IG1ha2VFdmVudEtleShldmVudEtleSwgcHJvcHMuaHJlZikgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAsXG4gICAgICBhczogYXMgfHwgKGFjdGlvbiA/IHByb3BzLmhyZWYgPyAnYScgOiAnYnV0dG9uJyA6ICdkaXYnKSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgYWN0aXZlICYmICdhY3RpdmUnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCB2YXJpYW50ICYmIGJzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBhY3Rpb24gJiYgYnNQcmVmaXggKyBcIi1hY3Rpb25cIilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cEl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3RHcm91cEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICB2YXJpYW50OiBudWxsLFxuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTGlzdEdyb3VwSXRlbSwgJ2xpc3QtZ3JvdXAtaXRlbScpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEFic3RyYWN0TmF2IGZyb20gJy4vQWJzdHJhY3ROYXYnO1xuaW1wb3J0IExpc3RHcm91cEl0ZW0gZnJvbSAnLi9MaXN0R3JvdXBJdGVtJztcblxudmFyIExpc3RHcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaXN0R3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3RHcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiLCBcImJzUHJlZml4XCIsIFwidmFyaWFudFwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBYnN0cmFjdE5hdiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGlzdEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICB2YXJpYW50OiBudWxsXG59O1xudmFyIERlY29yYXRlZExpc3RHcm91cCA9IHVuY29udHJvbGxhYmxlKGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChMaXN0R3JvdXAsICdsaXN0LWdyb3VwJyksIHtcbiAgYWN0aXZlS2V5OiAnb25TZWxlY3QnXG59KTtcbkRlY29yYXRlZExpc3RHcm91cC5JdGVtID0gTGlzdEdyb3VwSXRlbTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZExpc3RHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5cbnZhciBNZWRpYSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZWRpYSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVkaWEoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWE7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWRNZWRpYSA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNZWRpYSwgJ21lZGlhJyk7XG5EZWNvcmF0ZWRNZWRpYS5Cb2R5ID0gY3JlYXRlV2l0aEJzUHJlZml4KCdtZWRpYS1ib2R5Jyk7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRNZWRpYTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgTW9kYWxCb2R5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsQm9keSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxCb2R5KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbEJvZHkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEJvZHk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsQm9keS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNb2RhbEJvZHksICdtb2RhbC1ib2R5Jyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIE1vZGFsRGlhbG9nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsRGlhbG9nLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbERpYWxvZygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxEaWFsb2cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjZW50ZXJlZCA9IF90aGlzJHByb3BzLmNlbnRlcmVkLFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJjZW50ZXJlZFwiLCBcInNpemVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgYnNDbGFzcyA9IGJzUHJlZml4ICsgXCItZGlhbG9nXCI7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNDbGFzcywgY2xhc3NOYW1lLCBzaXplICYmIGJzUHJlZml4ICsgXCItXCIgKyBzaXplLCBjZW50ZXJlZCAmJiBic0NsYXNzICsgXCItY2VudGVyZWRcIilcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNQcmVmaXggKyBcIi1jb250ZW50XCIpXG4gICAgfSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxEaWFsb2c7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNb2RhbERpYWxvZywgJ21vZGFsJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIE1vZGFsRm9vdGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsRm9vdGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEZvb3RlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxGb290ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEZvb3Rlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxGb290ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTW9kYWxGb290ZXIsICdtb2RhbC1mb290ZXInKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIE1vZGFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZSgpIHt9XG59KTtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgQ2xvc2VCdXR0b24gZnJvbSAnLi9DbG9zZUJ1dHRvbic7XG5pbXBvcnQgTW9kYWxDb250ZXh0IGZyb20gJy4vTW9kYWxDb250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNsb3NlTGFiZWw6ICdDbG9zZScsXG4gIGNsb3NlQnV0dG9uOiBmYWxzZVxufTtcblxudmFyIE1vZGFsSGVhZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEhlYWRlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxIZWFkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF90aGlzJHByb3BzLmNsb3NlTGFiZWwsXG4gICAgICAgIGNsb3NlQnV0dG9uID0gX3RoaXMkcHJvcHMuY2xvc2VCdXR0b24sXG4gICAgICAgIG9uSGlkZSA9IF90aGlzJHByb3BzLm9uSGlkZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsb3NlTGFiZWxcIiwgXCJjbG9zZUJ1dHRvblwiLCBcIm9uSGlkZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICAgIH0pLCBjaGlsZHJlbiwgY2xvc2VCdXR0b24gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgICAgICBsYWJlbDogY2xvc2VMYWJlbCxcbiAgICAgICAgb25DbGljazogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNvbnRleHQgJiYgY29udGV4dC5vbkhpZGUsIG9uSGlkZSlcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxIZWFkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsSGVhZGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNb2RhbEhlYWRlciwgJ21vZGFsLWhlYWRlcicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkaXZXaXRoQ2xhc3NOYW1lIGZyb20gJy4vdXRpbHMvZGl2V2l0aENsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIERpdlN0eWxlZEFzSDQgPSBkaXZXaXRoQ2xhc3NOYW1lKCdoNCcpO1xuXG52YXIgTW9kYWxUaXRsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbFRpdGxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbFRpdGxlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbFRpdGxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFzXCIsIFwiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxUaXRsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxUaXRsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBEaXZTdHlsZWRBc0g0XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE1vZGFsVGl0bGUsICdtb2RhbC10aXRsZScpOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHFzYSBmcm9tICdkb20taGVscGVycy9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsJztcbmltcG9ydCBjc3MgZnJvbSAnZG9tLWhlbHBlcnMvc3R5bGUnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplJztcbmltcG9ydCBNb2RhbE1hbmFnZXIgZnJvbSAncmVhY3Qtb3ZlcmxheXMvTW9kYWxNYW5hZ2VyJztcbnZhciBTZWxlY3RvciA9IHtcbiAgRklYRURfQ09OVEVOVDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLFxuICBTVElDS1lfQ09OVEVOVDogJy5zdGlja3ktdG9wJyxcbiAgTkFWQkFSX1RPR0dMRVI6ICcubmF2YmFyLXRvZ2dsZXInXG59O1xuXG52YXIgQm9vdHN0cmFwTW9kYWxNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTW9kYWxNYW5hZ2VyKSB7XG4gIF9pbmhlcml0c0xvb3NlKEJvb3RzdHJhcE1vZGFsTWFuYWdlciwgX01vZGFsTWFuYWdlcik7XG5cbiAgZnVuY3Rpb24gQm9vdHN0cmFwTW9kYWxNYW5hZ2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9Nb2RhbE1hbmFnZXIuY2FsbC5hcHBseShfTW9kYWxNYW5hZ2VyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuYWRqdXN0QW5kU3RvcmUgPSBmdW5jdGlvbiAocHJvcCwgZWxlbWVudCwgYWRqdXN0KSB7XG4gICAgICB2YXIgYWN0dWFsID0gZWxlbWVudC5zdHlsZVtwcm9wXTtcbiAgICAgIGVsZW1lbnQuZGF0YXNldFtwcm9wXSA9IGFjdHVhbDtcbiAgICAgIGNzcyhlbGVtZW50LCBwcm9wLCBwYXJzZUZsb2F0KGNzcyhlbGVtZW50LCBwcm9wKSkgKyBhZGp1c3QgKyBcInB4XCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZXN0b3JlID0gZnVuY3Rpb24gKHByb3AsIGVsZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuZGF0YXNldFtwcm9wXTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZGF0YXNldFtwcm9wXTtcbiAgICAgICAgY3NzKGVsZW1lbnQsIHByb3AsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJvb3RzdHJhcE1vZGFsTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldENvbnRhaW5lclN0eWxlID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoY29udGFpbmVyU3RhdGUsIGNvbnRhaW5lcikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX01vZGFsTWFuYWdlci5wcm90b3R5cGUuc2V0Q29udGFpbmVyU3R5bGUuY2FsbCh0aGlzLCBjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKTtcblxuICAgIGlmICghY29udGFpbmVyU3RhdGUub3ZlcmZsb3dpbmcpIHJldHVybjtcbiAgICB2YXIgc2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5hZGp1c3RBbmRTdG9yZSgncGFkZGluZ1JpZ2h0JywgZWwsIHNpemUpO1xuICAgIH0pO1xuICAgIHFzYShjb250YWluZXIsIFNlbGVjdG9yLlNUSUNLWV9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5hZGp1c3RBbmRTdG9yZSgnbWFyZ2luZ1JpZ2h0JywgZWwsIC1zaXplKTtcbiAgICB9KTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpczIuYWRqdXN0QW5kU3RvcmUoJ21hcmdpbmdSaWdodCcsIGVsLCBzaXplKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlQ29udGFpbmVyU3R5bGUgPSBmdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBfTW9kYWxNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVDb250YWluZXJTdHlsZS5jYWxsKHRoaXMsIGNvbnRhaW5lclN0YXRlLCBjb250YWluZXIpO1xuXG4gICAgcXNhKGNvbnRhaW5lciwgU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpczMucmVzdG9yZSgncGFkZGluZ1JpZ2h0JywgZWwpO1xuICAgIH0pO1xuICAgIHFzYShjb250YWluZXIsIFNlbGVjdG9yLlNUSUNLWV9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzMy5yZXN0b3JlKCdtYXJnaW5nUmlnaHQnLCBlbCk7XG4gICAgfSk7XG4gICAgcXNhKGNvbnRhaW5lciwgU2VsZWN0b3IuTkFWQkFSX1RPR0dMRVIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gX3RoaXMzLnJlc3RvcmUoJ21hcmdpbmdSaWdodCcsIGVsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQm9vdHN0cmFwTW9kYWxNYW5hZ2VyO1xufShNb2RhbE1hbmFnZXIpO1xuXG5leHBvcnQgeyBCb290c3RyYXBNb2RhbE1hbmFnZXIgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICdkb20taGVscGVycy9ldmVudHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gJ2RvbS1oZWxwZXJzL3V0aWwvaW5ET00nO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmFzZU1vZGFsIGZyb20gJ3JlYWN0LW92ZXJsYXlzL01vZGFsJztcbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5pbXBvcnQgQm9keSBmcm9tICcuL01vZGFsQm9keSc7XG5pbXBvcnQgTW9kYWxEaWFsb2cgZnJvbSAnLi9Nb2RhbERpYWxvZyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vTW9kYWxGb290ZXInO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL01vZGFsSGVhZGVyJztcbmltcG9ydCBUaXRsZSBmcm9tICcuL01vZGFsVGl0bGUnO1xuaW1wb3J0IEJvb3RzdHJhcE1vZGFsTWFuYWdlciBmcm9tICcuL3V0aWxzL0Jvb3RzdHJhcE1vZGFsTWFuYWdlcic7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE1vZGFsQ29udGV4dCBmcm9tICcuL01vZGFsQ29udGV4dCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiBmYWxzZSxcbiAgYmFja2Ryb3A6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBhdXRvRm9jdXM6IHRydWUsXG4gIGVuZm9yY2VGb2N1czogdHJ1ZSxcbiAgcmVzdG9yZUZvY3VzOiB0cnVlLFxuICBhbmltYXRpb246IHRydWUsXG4gIGRpYWxvZ0FzOiBNb2RhbERpYWxvZyxcbiAgbWFuYWdlcjogbmV3IEJvb3RzdHJhcE1vZGFsTWFuYWdlcigpXG59O1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cblxuZnVuY3Rpb24gRGlhbG9nVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIEJhY2tkcm9wVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBwcm9wcyk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cblxudmFyIE1vZGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChfcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBfcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5zZXRNb2RhbFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLl9tb2RhbCA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRGlhbG9nTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwICYmIGUudGFyZ2V0ID09PSBfdGhpcy5fbW9kYWwuZGlhbG9nKSB7XG4gICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayB8fCBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25IaWRlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgICBfdGhpcy51cGRhdGVEaWFsb2dTdHlsZShub2RlKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkVudGVyLmFwcGx5KF90aGlzJHByb3BzLCBbbm9kZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMjtcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJpbmcpIChfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcykub25FbnRlcmluZy5hcHBseShfdGhpcyRwcm9wczIsIFtub2RlXS5jb25jYXQoYXJncykpOyAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuXG4gICAgICBldmVudHMub24od2luZG93LCAncmVzaXplJywgX3RoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczM7XG5cbiAgICAgIGlmIChub2RlKSBub2RlLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gUkhMIHJlbW92ZXMgaXQgc29tZXRpbWVzXG5cbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkgKF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzKS5vbkV4aXRlZC5hcHBseShfdGhpcyRwcm9wczMsIGFyZ3MpOyAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuXG4gICAgICBldmVudHMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnVwZGF0ZURpYWxvZ1N0eWxlKF90aGlzLl9tb2RhbC5kaWFsb2cpO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJCYWNrZHJvcCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHM0LmJzUHJlZml4LFxuICAgICAgICAgIGJhY2tkcm9wQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmJhY2tkcm9wQ2xhc3NOYW1lO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhic1ByZWZpeCArIFwiLWJhY2tkcm9wXCIsIGJhY2tkcm9wQ2xhc3NOYW1lKVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0eWxlOiB7fVxuICAgIH07XG4gICAgX3RoaXMubW9kYWxDb250ZXh0ID0ge1xuICAgICAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vbkhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gQ2xlYW4gdXAgdGhlIGxpc3RlbmVyIGlmIHdlIG5lZWQgdG8uXG4gICAgZXZlbnRzLm9mZih3aW5kb3csICdyZXNpemUnLCB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZURpYWxvZ1N0eWxlID0gZnVuY3Rpb24gdXBkYXRlRGlhbG9nU3R5bGUobm9kZSkge1xuICAgIGlmICghY2FuVXNlRE9NKSByZXR1cm47XG4gICAgdmFyIG1hbmFnZXIgPSB0aGlzLnByb3BzLm1hbmFnZXI7XG4gICAgdmFyIGNvbnRhaW5lcklzT3ZlcmZsb3dpbmcgPSBtYW5hZ2VyLmlzQ29udGFpbmVyT3ZlcmZsb3dpbmcodGhpcy5fbW9kYWwpO1xuICAgIHZhciBtb2RhbElzT3ZlcmZsb3dpbmcgPSBub2RlLnNjcm9sbEhlaWdodCA+IG93bmVyRG9jdW1lbnQobm9kZSkuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogY29udGFpbmVySXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gZ2V0U2Nyb2xsYmFyU2l6ZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICBwYWRkaW5nTGVmdDogIWNvbnRhaW5lcklzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gZ2V0U2Nyb2xsYmFyU2l6ZSgpIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczUuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNS5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHM1LnN0eWxlLFxuICAgICAgICBkaWFsb2dDbGFzc05hbWUgPSBfdGhpcyRwcm9wczUuZGlhbG9nQ2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNS5jaGlsZHJlbixcbiAgICAgICAgRGlhbG9nID0gX3RoaXMkcHJvcHM1LmRpYWxvZ0FzLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHM1LnNob3csXG4gICAgICAgIGFuaW1hdGlvbiA9IF90aGlzJHByb3BzNS5hbmltYXRpb24sXG4gICAgICAgIGJhY2tkcm9wID0gX3RoaXMkcHJvcHM1LmJhY2tkcm9wLFxuICAgICAgICBrZXlib2FyZCA9IF90aGlzJHByb3BzNS5rZXlib2FyZCxcbiAgICAgICAgb25Fc2NhcGVLZXlEb3duID0gX3RoaXMkcHJvcHM1Lm9uRXNjYXBlS2V5RG93bixcbiAgICAgICAgb25TaG93ID0gX3RoaXMkcHJvcHM1Lm9uU2hvdyxcbiAgICAgICAgb25IaWRlID0gX3RoaXMkcHJvcHM1Lm9uSGlkZSxcbiAgICAgICAgY29udGFpbmVyID0gX3RoaXMkcHJvcHM1LmNvbnRhaW5lcixcbiAgICAgICAgYXV0b0ZvY3VzID0gX3RoaXMkcHJvcHM1LmF1dG9Gb2N1cyxcbiAgICAgICAgZW5mb3JjZUZvY3VzID0gX3RoaXMkcHJvcHM1LmVuZm9yY2VGb2N1cyxcbiAgICAgICAgcmVzdG9yZUZvY3VzID0gX3RoaXMkcHJvcHM1LnJlc3RvcmVGb2N1cyxcbiAgICAgICAgb25FbnRlcmVkID0gX3RoaXMkcHJvcHM1Lm9uRW50ZXJlZCxcbiAgICAgICAgb25FeGl0ID0gX3RoaXMkcHJvcHM1Lm9uRXhpdCxcbiAgICAgICAgb25FeGl0aW5nID0gX3RoaXMkcHJvcHM1Lm9uRXhpdGluZyxcbiAgICAgICAgXyA9IF90aGlzJHByb3BzNS5vbkV4aXRlZCxcbiAgICAgICAgXzEgPSBfdGhpcyRwcm9wczUub25FbnRlcmluZyxcbiAgICAgICAgXzYgPSBfdGhpcyRwcm9wczUub25FbnRlcixcbiAgICAgICAgXzQgPSBfdGhpcyRwcm9wczUub25FbnRlcmluZyxcbiAgICAgICAgXzIgPSBfdGhpcyRwcm9wczUuYmFja2Ryb3BDbGFzc05hbWUsXG4gICAgICAgIF8zID0gX3RoaXMkcHJvcHM1LmJhY2tkcm9wU3R5bGUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHM1LCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiZGlhbG9nQ2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJkaWFsb2dBc1wiLCBcInNob3dcIiwgXCJhbmltYXRpb25cIiwgXCJiYWNrZHJvcFwiLCBcImtleWJvYXJkXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25TaG93XCIsIFwib25IaWRlXCIsIFwiY29udGFpbmVyXCIsIFwiYXV0b0ZvY3VzXCIsIFwiZW5mb3JjZUZvY3VzXCIsIFwicmVzdG9yZUZvY3VzXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJiYWNrZHJvcENsYXNzTmFtZVwiLCBcImJhY2tkcm9wU3R5bGVcIl0pO1xuXG4gICAgdmFyIGNsaWNrSGFuZGxlciA9IGJhY2tkcm9wID09PSB0cnVlID8gdGhpcy5oYW5kbGVDbGljayA6IG51bGw7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWxDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5tb2RhbENvbnRleHRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VNb2RhbCwge1xuICAgICAgc2hvdzogc2hvdyxcbiAgICAgIGJhY2tkcm9wOiBiYWNrZHJvcCxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAga2V5Ym9hcmQ6IGtleWJvYXJkLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgICBlbmZvcmNlRm9jdXM6IGVuZm9yY2VGb2N1cyxcbiAgICAgIHJlc3RvcmVGb2N1czogcmVzdG9yZUZvY3VzLFxuICAgICAgb25Fc2NhcGVLZXlEb3duOiBvbkVzY2FwZUtleURvd24sXG4gICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgIG9uSGlkZTogb25IaWRlLFxuICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgcmVmOiB0aGlzLnNldE1vZGFsUmVmLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZSwgdGhpcy5zdGF0ZS5zdHlsZSksXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCksXG4gICAgICBjb250YWluZXJDbGFzc05hbWU6IGJzUHJlZml4ICsgXCItb3BlblwiLFxuICAgICAgdHJhbnNpdGlvbjogYW5pbWF0aW9uID8gRGlhbG9nVHJhbnNpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgIGJhY2tkcm9wVHJhbnNpdGlvbjogYW5pbWF0aW9uID8gQmFja2Ryb3BUcmFuc2l0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgcmVuZGVyQmFja2Ryb3A6IHRoaXMucmVuZGVyQmFja2Ryb3AsXG4gICAgICBvbkNsaWNrOiBjbGlja0hhbmRsZXIsXG4gICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW91c2VVcCxcbiAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICBvbkVudGVyaW5nOiB0aGlzLmhhbmRsZUVudGVyaW5nLFxuICAgICAgb25FeGl0ZWQ6IHRoaXMuaGFuZGxlRXhpdGVkXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChEaWFsb2csIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlRGlhbG9nTW91c2VEb3duLFxuICAgICAgY2xhc3NOYW1lOiBkaWFsb2dDbGFzc05hbWVcbiAgICB9KSwgY2hpbGRyZW4pKSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgRGVjb3JhdGVkTW9kYWwgPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTW9kYWwsICdtb2RhbCcpO1xuRGVjb3JhdGVkTW9kYWwuQm9keSA9IEJvZHk7XG5EZWNvcmF0ZWRNb2RhbC5IZWFkZXIgPSBIZWFkZXI7XG5EZWNvcmF0ZWRNb2RhbC5UaXRsZSA9IFRpdGxlO1xuRGVjb3JhdGVkTW9kYWwuRm9vdGVyID0gRm9vdGVyO1xuRGVjb3JhdGVkTW9kYWwuRGlhbG9nID0gTW9kYWxEaWFsb2c7XG5EZWNvcmF0ZWRNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwO1xuRGVjb3JhdGVkTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZE1vZGFsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBOYXZJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdkl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdkl0ZW0oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdkl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImFzXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBOYXZJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE5hdkl0ZW0sICduYXYtaXRlbScpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IEFic3RyYWN0TmF2SXRlbSBmcm9tICcuL0Fic3RyYWN0TmF2SXRlbSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBhczogU2FmZUFuY2hvclxufTtcblxuZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGhyZWYgPSBfcmVmLmhyZWYsXG4gICAgICBldmVudEtleSA9IF9yZWYuZXZlbnRLZXksXG4gICAgICBvblNlbGVjdCA9IF9yZWYub25TZWxlY3QsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBhcyA9IF9yZWYuYXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiZGlzYWJsZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJocmVmXCIsIFwiZXZlbnRLZXlcIiwgXCJvblNlbGVjdFwiLCBcImlubmVyUmVmXCIsIFwiYXNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFic3RyYWN0TmF2SXRlbSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgaHJlZjogaHJlZixcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGV2ZW50S2V5OiBldmVudEtleSxcbiAgICBhczogYXMsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJylcbiAgfSkpO1xufVxuXG5OYXZMaW5rLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChOYXZMaW5rLCAnbmF2LWxpbmsnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBhbGwgZnJvbSAncHJvcC10eXBlcy1leHRyYS9saWIvYWxsJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWFwQ29udGV4dFRvUHJvcHMgZnJvbSAncmVhY3QtY29udGV4dC10b29sYm94L2xpYi9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBOYXZiYXJDb250ZXh0IGZyb20gJy4vTmF2YmFyQ29udGV4dCc7XG5pbXBvcnQgQ2FyZENvbnRleHQgZnJvbSAnLi9DYXJkQ29udGV4dCc7XG5pbXBvcnQgQWJzdHJhY3ROYXYgZnJvbSAnLi9BYnN0cmFjdE5hdic7XG5pbXBvcnQgTmF2SXRlbSBmcm9tICcuL05hdkl0ZW0nO1xuaW1wb3J0IE5hdkxpbmsgZnJvbSAnLi9OYXZMaW5rJztcblxudmFyIE5hdiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXYsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFzID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIG5hdmJhckJzUHJlZml4ID0gX3RoaXMkcHJvcHMubmF2YmFyQnNQcmVmaXgsXG4gICAgICAgIGNhcmRIZWFkZXJCc1ByZWZpeCA9IF90aGlzJHByb3BzLmNhcmRIZWFkZXJCc1ByZWZpeCxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIGZpbGwgPSBfdGhpcyRwcm9wcy5maWxsLFxuICAgICAgICBqdXN0aWZ5ID0gX3RoaXMkcHJvcHMuanVzdGlmeSxcbiAgICAgICAgbmF2YmFyID0gX3RoaXMkcHJvcHMubmF2YmFyLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGFjdGl2ZUtleSA9IF90aGlzJHByb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcIm5hdmJhckJzUHJlZml4XCIsIFwiY2FyZEhlYWRlckJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcImZpbGxcIiwgXCJqdXN0aWZ5XCIsIFwibmF2YmFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJhY3RpdmVLZXlcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWJzdHJhY3ROYXYsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBhcyxcbiAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgKF9jbGFzc05hbWVzID0ge30sIF9jbGFzc05hbWVzW2JzUHJlZml4XSA9ICFuYXZiYXIsIF9jbGFzc05hbWVzW25hdmJhckJzUHJlZml4ICsgXCItbmF2XCJdID0gbmF2YmFyLCBfY2xhc3NOYW1lc1tjYXJkSGVhZGVyQnNQcmVmaXggKyBcIi1cIiArIHZhcmlhbnRdID0gISFjYXJkSGVhZGVyQnNQcmVmaXgsIF9jbGFzc05hbWVzW2JzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50XSA9ICEhdmFyaWFudCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1maWxsXCJdID0gZmlsbCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1qdXN0aWZpZWRcIl0gPSBqdXN0aWZ5LCBfY2xhc3NOYW1lcykpXG4gICAgfSwgcHJvcHMpLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIE5hdjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2LmRlZmF1bHRQcm9wcyA9IHtcbiAganVzdGlmeTogZmFsc2UsXG4gIGZpbGw6IGZhbHNlLFxuICBhczogJ2Rpdidcbn07XG52YXIgVW5jb250cm9sbGVkTmF2ID0gdW5jb250cm9sbGFibGUoY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE5hdiwgJ25hdicpLCB7XG4gIGFjdGl2ZUtleTogJ29uU2VsZWN0J1xufSk7XG52YXIgRGVjb3JhdGVkTmF2ID0gbWFwQ29udGV4dFRvUHJvcHMoW05hdmJhckNvbnRleHQsIENhcmRDb250ZXh0XSwgZnVuY3Rpb24gKG5hdmJhckNvbnRleHQsIGNhcmRDb250ZXh0LCBfcmVmKSB7XG4gIHZhciBuYXZiYXIgPSBfcmVmLm5hdmJhcjtcbiAgaWYgKCFuYXZiYXJDb250ZXh0ICYmICFjYXJkQ29udGV4dCkgcmV0dXJuIHt9O1xuICBpZiAobmF2YmFyQ29udGV4dCkgcmV0dXJuIHtcbiAgICBuYXZiYXJCc1ByZWZpeDogbmF2YmFyQ29udGV4dC5ic1ByZWZpeCxcbiAgICBuYXZiYXI6IG5hdmJhciA9PSBudWxsID8gdHJ1ZSA6IG5hdmJhclxuICB9O1xuICByZXR1cm4ge1xuICAgIGNhcmRIZWFkZXJCc1ByZWZpeDogY2FyZENvbnRleHQuY2FyZEhlYWRlckJzUHJlZml4XG4gIH07XG59LCBVbmNvbnRyb2xsZWROYXYpO1xuRGVjb3JhdGVkTmF2Lkl0ZW0gPSBOYXZJdGVtO1xuRGVjb3JhdGVkTmF2LkxpbmsgPSBOYXZMaW5rO1xuRGVjb3JhdGVkTmF2Ll9OYXYgPSBOYXY7IC8vIGZvciBUZXN0aW5nIHVudGlsIGVuenltZSBpcyB3b3JraW5nIHdpdGggY29udGV4dFxuXG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWROYXY7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIE5hdmJhckJyYW5kID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdmJhckJyYW5kLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJCcmFuZCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2YmFyQnJhbmQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICAgIHZhciBDb21wb25lbnQgPSBhcyB8fCAocHJvcHMuaHJlZiA/ICdhJyA6ICdzcGFuJyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyQnJhbmQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChOYXZiYXJCcmFuZCwgJ25hdmJhci1icmFuZCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ29sbGFwc2UgZnJvbSAnLi9Db2xsYXBzZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdmJhckNvbnRleHQgZnJvbSAnLi9OYXZiYXJDb250ZXh0JztcblxudmFyIE5hdmJhckNvbGxhcHNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdmJhckNvbGxhcHNlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJDb2xsYXBzZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2YmFyQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJic1ByZWZpeFwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOYXZiYXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29sbGFwc2UsIF9leHRlbmRzKHtcbiAgICAgICAgaW46ICEhKGNvbnRleHQgJiYgY29udGV4dC5leHBhbmRlZClcbiAgICAgIH0sIHByb3BzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXhcbiAgICAgIH0sIGNoaWxkcmVuKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmJhckNvbGxhcHNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTmF2YmFyQ29sbGFwc2UsICduYXZiYXItY29sbGFwc2UnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdmJhckNvbnRleHQgZnJvbSAnLi9OYXZiYXJDb250ZXh0JztcblxudmFyIE5hdmJhclRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZiYXJUb2dnbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdmJhclRvZ2dsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBvbkNsaWNrID0gX3RoaXMucHJvcHMub25DbGljaztcbiAgICAgIHZhciBvblRvZ2dsZSA9IF90aGlzLm5hdmJhckNvbnRleHQub25Ub2dnbGU7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhlKTtcbiAgICAgIGlmIChvblRvZ2dsZSkgb25Ub2dnbGUoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdmJhclRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJsYWJlbFwiLCBcImFzXCJdKTtcblxuICAgIGlmIChDb21wb25lbnQgPT09ICdidXR0b24nKSB7XG4gICAgICBwcm9wcy50eXBlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIF90aGlzMi5uYXZiYXJDb250ZXh0ID0gY29udGV4dCB8fCB7fTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIG9uQ2xpY2s6IF90aGlzMi5oYW5kbGVDbGljayxcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgISEoY29udGV4dCAmJiBjb250ZXh0LmV4cGFuZGVkKSAmJiAnY29sbGFwc2VkJylcbiAgICAgIH0pLCBjaGlsZHJlbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1pY29uXCJcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZiYXJUb2dnbGUuZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogJ1RvZ2dsZSBuYXZpZ2F0aW9uJyxcbiAgYXM6ICdidXR0b24nXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE5hdmJhclRvZ2dsZSwgJ25hdmJhci10b2dnbGVyJyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuaW1wb3J0IE5hdmJhckJyYW5kIGZyb20gJy4vTmF2YmFyQnJhbmQnO1xuaW1wb3J0IE5hdmJhckNvbGxhcHNlIGZyb20gJy4vTmF2YmFyQ29sbGFwc2UnO1xuaW1wb3J0IE5hdmJhclRvZ2dsZSBmcm9tICcuL05hdmJhclRvZ2dsZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdmJhckNvbnRleHQgZnJvbSAnLi9OYXZiYXJDb250ZXh0JztcbmltcG9ydCBTZWxlY3RhYmxlQ29udGV4dCBmcm9tICcuL1NlbGVjdGFibGVDb250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnbmF2JyxcbiAgZXhwYW5kOiB0cnVlLFxuICB2YXJpYW50OiAnbGlnaHQnLFxuICBjb2xsYXBzZU9uU2VsZWN0OiBmYWxzZVxufTtcblxudmFyIE5hdmJhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZiYXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdmJhcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNvbGxhcHNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25Ub2dnbGUgPSBfdGhpcyRwcm9wcy5vblRvZ2dsZSxcbiAgICAgICAgICBleHBhbmRlZCA9IF90aGlzJHByb3BzLmV4cGFuZGVkLFxuICAgICAgICAgIGNvbGxhcHNlT25TZWxlY3QgPSBfdGhpcyRwcm9wcy5jb2xsYXBzZU9uU2VsZWN0LFxuICAgICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3Q7XG4gICAgICBpZiAob25TZWxlY3QpIG9uU2VsZWN0LmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKGNvbGxhcHNlT25TZWxlY3QgJiYgZXhwYW5kZWQpIHtcbiAgICAgICAgb25Ub2dnbGUoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25Ub2dnbGUgPSBfdGhpcyRwcm9wczIub25Ub2dnbGUsXG4gICAgICAgICAgZXhwYW5kZWQgPSBfdGhpcyRwcm9wczIuZXhwYW5kZWQ7XG4gICAgICBvblRvZ2dsZSghZXhwYW5kZWQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hdmJhckNvbnRleHQ6IHtcbiAgICAgICAgb25Ub2dnbGU6IF90aGlzLmhhbmRsZVRvZ2dsZVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTmF2YmFyLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgICBleHBhbmRlZCA9IF9yZWYuZXhwYW5kZWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hdmJhckNvbnRleHQ6IF9leHRlbmRzKHt9LCBwcmV2U3RhdGUubmF2YmFyQ29udGV4dCwge1xuICAgICAgICBic1ByZWZpeDogYnNQcmVmaXgsXG4gICAgICAgIGV4cGFuZGVkOiBleHBhbmRlZFxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBOYXZiYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMzLmJzUHJlZml4LFxuICAgICAgICBleHBhbmQgPSBfdGhpcyRwcm9wczMuZXhwYW5kLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMzLnZhcmlhbnQsXG4gICAgICAgIGJnID0gX3RoaXMkcHJvcHMzLmJnLFxuICAgICAgICBmaXhlZCA9IF90aGlzJHByb3BzMy5maXhlZCxcbiAgICAgICAgc3RpY2t5ID0gX3RoaXMkcHJvcHMzLnN0aWNreSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczMuY2hpbGRyZW4sXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzMy5hcyxcbiAgICAgICAgXzEgPSBfdGhpcyRwcm9wczMuZXhwYW5kZWQsXG4gICAgICAgIF8yID0gX3RoaXMkcHJvcHMzLm9uVG9nZ2xlLFxuICAgICAgICBfMyA9IF90aGlzJHByb3BzMy5vblNlbGVjdCxcbiAgICAgICAgXzQgPSBfdGhpcyRwcm9wczMuY29sbGFwc2VPblNlbGVjdCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczMsIFtcImJzUHJlZml4XCIsIFwiZXhwYW5kXCIsIFwidmFyaWFudFwiLCBcImJnXCIsIFwiZml4ZWRcIiwgXCJzdGlja3lcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImFzXCIsIFwiZXhwYW5kZWRcIiwgXCJvblRvZ2dsZVwiLCBcIm9uU2VsZWN0XCIsIFwiY29sbGFwc2VPblNlbGVjdFwiXSk7IC8vIHdpbGwgcmVzdWx0IGluIHNvbWUgZmFsc2UgcG9zaXRpdmVzIGJ1dCB0aGF0IHNlZW1zIGJldHRlclxuICAgIC8vIHRoYW4gZmFsc2UgbmVnYXRpdmVzLiBzdHJpY3QgYHVuZGVmaW5lZGAgY2hlY2sgYWxsb3dzIGV4cGxpY2l0XG4gICAgLy8gXCJudWxsaW5nXCIgb2YgdGhlIHJvbGUgaWYgdGhlIHVzZXIgcmVhbGx5IGRvZXNuJ3Qgd2FudCBvbmVcblxuXG4gICAgaWYgKHByb3BzLnJvbGUgPT09IHVuZGVmaW5lZCAmJiBDb21wb25lbnQgIT09ICduYXYnKSB7XG4gICAgICBwcm9wcy5yb2xlID0gJ25hdmlnYXRpb24nO1xuICAgIH1cblxuICAgIHZhciBleHBhbmRDbGFzcyA9IGJzUHJlZml4ICsgXCItZXhwYW5kXCI7XG4gICAgaWYgKHR5cGVvZiBleHBhbmQgPT09ICdzdHJpbmcnKSBleHBhbmRDbGFzcyA9IGV4cGFuZENsYXNzICsgXCItXCIgKyBleHBhbmQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUubmF2YmFyQ29udGV4dFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLmhhbmRsZUNvbGxhcHNlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGV4cGFuZCAmJiBleHBhbmRDbGFzcywgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgYmcgJiYgXCJiZy1cIiArIGJnLCBzdGlja3kgJiYgXCJzdGlja3ktXCIgKyBzdGlja3ksIGZpeGVkICYmIFwiZml4ZWQtXCIgKyBmaXhlZClcbiAgICB9KSwgY2hpbGRyZW4pKSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmJhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2YmFyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWROYXZiYXIgPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQodW5jb250cm9sbGFibGUoTmF2YmFyLCB7XG4gIGV4cGFuZGVkOiAnb25Ub2dnbGUnXG59KSwgJ25hdmJhcicpO1xuRGVjb3JhdGVkTmF2YmFyLkJyYW5kID0gTmF2YmFyQnJhbmQ7XG5EZWNvcmF0ZWROYXZiYXIuVG9nZ2xlID0gTmF2YmFyVG9nZ2xlO1xuRGVjb3JhdGVkTmF2YmFyLkNvbGxhcHNlID0gTmF2YmFyQ29sbGFwc2U7XG5EZWNvcmF0ZWROYXZiYXIuVGV4dCA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnbmF2YmFyLXRleHQnLCB7XG4gIENvbXBvbmVudDogJ3NwYW4nXG59KTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZE5hdmJhcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vRHJvcGRvd24nO1xuaW1wb3J0IE5hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcbmltcG9ydCBOYXZMaW5rIGZyb20gJy4vTmF2TGluayc7XG5cbnZhciBOYXZEcm9wZG93biA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2RHJvcGRvd24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdkRyb3Bkb3duLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3RoaXMkcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIG1lbnVSb2xlID0gX3RoaXMkcHJvcHMubWVudVJvbGUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaWRcIiwgXCJ0aXRsZVwiLCBcImNoaWxkcmVuXCIsIFwiYnNQcmVmaXhcIiwgXCJyb290Q2xvc2VFdmVudFwiLCBcIm1lbnVSb2xlXCIsIFwiZGlzYWJsZWRcIiwgXCJhY3RpdmVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYXM6IE5hdkl0ZW1cbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93bi5Ub2dnbGUsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGV2ZW50S2V5OiBudWxsLFxuICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBjaGlsZEJzUHJlZml4OiBic1ByZWZpeCxcbiAgICAgIGFzOiBOYXZMaW5rXG4gICAgfSwgdGl0bGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLk1lbnUsIHtcbiAgICAgIHJvbGU6IG1lbnVSb2xlLFxuICAgICAgcm9vdENsb3NlRXZlbnQ6IHJvb3RDbG9zZUV2ZW50XG4gICAgfSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTmF2RHJvcGRvd247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdkRyb3Bkb3duLkl0ZW0gPSBEcm9wZG93bi5JdGVtO1xuTmF2RHJvcGRvd24uRGl2aWRlciA9IERyb3Bkb3duLkRpdmlkZXI7XG5OYXZEcm9wZG93bi5IZWFkZXIgPSBEcm9wZG93bi5IZWFkZXI7XG5leHBvcnQgZGVmYXVsdCBOYXZEcm9wZG93bjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEJhc2VPdmVybGF5IGZyb20gJ3JlYWN0LW92ZXJsYXlzL092ZXJsYXknO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHRyYW5zaXRpb246IEZhZGUsXG4gIHJvb3RDbG9zZTogZmFsc2UsXG4gIHNob3c6IGZhbHNlLFxuICBwbGFjZW1lbnQ6ICd0b3AnXG59O1xuXG5mdW5jdGlvbiB3cmFwUmVmcyhwcm9wcywgYXJyb3dQcm9wcykge1xuICB2YXIgcmVmID0gcHJvcHMucmVmO1xuICB2YXIgYVJlZiA9IGFycm93UHJvcHMucmVmO1xuXG4gIHByb3BzLnJlZiA9IHJlZi5fX3dyYXBwZWQgfHwgKHJlZi5fX3dyYXBwZWQgPSBmdW5jdGlvbiAocikge1xuICAgIHJldHVybiByZWYoZmluZERPTU5vZGUocikpO1xuICB9KTtcblxuICBhcnJvd1Byb3BzLnJlZiA9IGFSZWYuX193cmFwcGVkIHx8IChhUmVmLl9fd3JhcHBlZCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgcmV0dXJuIGFSZWYoZmluZERPTU5vZGUocikpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT3ZlcmxheShfcmVmKSB7XG4gIHZhciBvdmVybGF5ID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHRyYW5zaXRpb24gPSBfcmVmLnRyYW5zaXRpb24sXG4gICAgICBvdXRlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiY2hpbGRyZW5cIiwgXCJ0cmFuc2l0aW9uXCJdKTtcblxuICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbiA9PT0gdHJ1ZSA/IEZhZGUgOiB0cmFuc2l0aW9uIHx8IG51bGw7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VPdmVybGF5LCBfZXh0ZW5kcyh7fSwgb3V0ZXJQcm9wcywge1xuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25cbiAgfSksIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBvdmVybGF5UHJvcHMgPSBfcmVmMi5wcm9wcyxcbiAgICAgICAgYXJyb3dQcm9wcyA9IF9yZWYyLmFycm93UHJvcHMsXG4gICAgICAgIHNob3cgPSBfcmVmMi5zaG93LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJwcm9wc1wiLCBcImFycm93UHJvcHNcIiwgXCJzaG93XCJdKTtcblxuICAgIHdyYXBSZWZzKG92ZXJsYXlQcm9wcywgYXJyb3dQcm9wcyk7XG4gICAgaWYgKHR5cGVvZiBvdmVybGF5ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gb3ZlcmxheShfZXh0ZW5kcyh7fSwgcHJvcHMsIG92ZXJsYXlQcm9wcywge1xuICAgICAgc2hvdzogc2hvdyxcbiAgICAgIGFycm93UHJvcHM6IGFycm93UHJvcHNcbiAgICB9KSk7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvdmVybGF5LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIG92ZXJsYXlQcm9wcywge1xuICAgICAgYXJyb3dQcm9wczogYXJyb3dQcm9wcyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhvdmVybGF5LnByb3BzLmNsYXNzTmFtZSwgIXRyYW5zaXRpb24gJiYgc2hvdyAmJiAnc2hvdycpLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBvdmVybGF5LnByb3BzLnN0eWxlLCBvdmVybGF5UHJvcHMuc3R5bGUpXG4gICAgfSkpO1xuICB9KTtcbn1cblxuT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBPdmVybGF5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjb250YWlucyBmcm9tICdkb20taGVscGVycy9xdWVyeS9jb250YWlucyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBPdmVybGF5IGZyb20gJy4vT3ZlcmxheSc7XG5cbnZhciBSZWZIb2xkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUmVmSG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWZIb2xkZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlZkhvbGRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gUmVmSG9sZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgbm9ybWFsaXplRGVsYXkgPSBmdW5jdGlvbiBub3JtYWxpemVEZWxheShkZWxheSkge1xuICByZXR1cm4gZGVsYXkgJiYgdHlwZW9mIGRlbGF5ID09PSAnb2JqZWN0JyA/IGRlbGF5IDoge1xuICAgIHNob3c6IGRlbGF5LFxuICAgIGhpZGU6IGRlbGF5XG4gIH07XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkZWZhdWx0T3ZlcmxheVNob3duOiBmYWxzZSxcbiAgdHJpZ2dlcjogWydob3ZlcicsICdmb2N1cyddXG59OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tbXVsdGktY29tcFxuXG52YXIgT3ZlcmxheVRyaWdnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQyKSB7XG4gIF9pbmhlcml0c0xvb3NlKE92ZXJsYXlUcmlnZ2VyLCBfUmVhY3QkQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheVRyaWdnZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQyLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5nZXRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoX3RoaXMudHJpZ2dlci5jdXJyZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5fdGltZW91dCk7XG4gICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9ICdzaG93JztcbiAgICAgIHZhciBkZWxheSA9IG5vcm1hbGl6ZURlbGF5KF90aGlzLnByb3BzLmRlbGF5KTtcblxuICAgICAgaWYgKCFkZWxheS5zaG93KSB7XG4gICAgICAgIF90aGlzLnNob3coKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5faG92ZXJTdGF0ZSA9PT0gJ3Nob3cnKSBfdGhpcy5zaG93KCk7XG4gICAgICB9LCBkZWxheS5zaG93KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5fdGltZW91dCk7XG4gICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9ICdoaWRlJztcbiAgICAgIHZhciBkZWxheSA9IG5vcm1hbGl6ZURlbGF5KF90aGlzLnByb3BzLmRlbGF5KTtcblxuICAgICAgaWYgKCFkZWxheS5oaWRlKSB7XG4gICAgICAgIF90aGlzLmhpZGUoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5faG92ZXJTdGF0ZSA9PT0gJ2hpZGUnKSBfdGhpcy5oaWRlKCk7XG4gICAgICB9LCBkZWxheS5oaWRlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJGdldENoaWxkUHJvcHMgPSBfdGhpcy5nZXRDaGlsZFByb3BzKCksXG4gICAgICAgICAgb25Gb2N1cyA9IF90aGlzJGdldENoaWxkUHJvcHMub25Gb2N1cztcblxuICAgICAgX3RoaXMuaGFuZGxlU2hvdyhlKTtcblxuICAgICAgaWYgKG9uRm9jdXMpIG9uRm9jdXMoZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJGdldENoaWxkUHJvcHMyID0gX3RoaXMuZ2V0Q2hpbGRQcm9wcygpLFxuICAgICAgICAgIG9uQmx1ciA9IF90aGlzJGdldENoaWxkUHJvcHMyLm9uQmx1cjtcblxuICAgICAgX3RoaXMuaGFuZGxlSGlkZShlKTtcblxuICAgICAgaWYgKG9uQmx1cikgb25CbHVyKGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2hpbGRQcm9wczMgPSBfdGhpcy5nZXRDaGlsZFByb3BzKCksXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJGdldENoaWxkUHJvcHMzLm9uQ2xpY2s7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zaG93KSBfdGhpcy5oaWRlKCk7ZWxzZSBfdGhpcy5zaG93KCk7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdmVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVTaG93LCBlLCAnZnJvbUVsZW1lbnQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVIaWRlLCBlLCAndG9FbGVtZW50Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLnRyaWdnZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3c6ICEhcHJvcHMuZGVmYXVsdFNob3dcbiAgICB9OyAvLyBXZSBhZGQgYXJpYS1kZXNjcmliZWRieSBpbiB0aGUgY2FzZSB3aGVyZSB0aGUgb3ZlcmxheSBpcyBhIHJvbGU9XCJ0b29sdGlwXCJcbiAgICAvLyBmb3Igb3RoZXIgY2FzZXMgZGVzY3JpYmVkYnkgaXNuJ3QgYXBwcm9wcmlhdGUgKGUuZy4gYSBwb3BvdmVyIHdpdGggaW5wdXRzKSBzbyB3ZSBkb24ndCBhZGQgaXQuXG5cbiAgICBfdGhpcy5hcmlhTW9kaWZpZXIgPSB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgb3JkZXI6IDkwMCxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihkYXRhKSB7XG4gICAgICAgIHZhciBwb3BwZXIgPSBkYXRhLmluc3RhbmNlLnBvcHBlcjtcblxuICAgICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuZ2V0VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5zaG93IHx8ICF0YXJnZXQpIHJldHVybiBkYXRhO1xuICAgICAgICB2YXIgcm9sZSA9IHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSB8fCAnJztcblxuICAgICAgICBpZiAocG9wcGVyLmlkICYmIHJvbGUudG9Mb3dlckNhc2UoKSA9PT0gJ3Rvb2x0aXAnKSB7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHBvcHBlci5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRDaGlsZFByb3BzID0gZnVuY3Rpb24gZ2V0Q2hpbGRQcm9wcygpIHtcbiAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKS5wcm9wcztcbiAgfTtcblxuICAvLyBTaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgbW91c2VFbnRlciBhbmQgbW91c2VMZWF2ZS5cbiAgLy8gUmVhY3QncyBidWlsdCB2ZXJzaW9uIGlzIGJyb2tlbjogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy80MjUxXG4gIC8vIGZvciBjYXNlcyB3aGVuIHRoZSB0cmlnZ2VyIGlzIGRpc2FibGVkIGFuZCBtb3VzZU91dC9PdmVyIGNhbiBjYXVzZSBmbGlja2VyXG4gIC8vIG1vdmluZyBmcm9tIG9uZSBjaGlsZCBlbGVtZW50IHRvIGFub3RoZXIuXG4gIF9wcm90bzIuaGFuZGxlTW91c2VPdmVyT3V0ID0gZnVuY3Rpb24gaGFuZGxlTW91c2VPdmVyT3V0KGhhbmRsZXIsIGUsIHJlbGF0ZWROYXRpdmUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgIHZhciByZWxhdGVkID0gZS5yZWxhdGVkVGFyZ2V0IHx8IGUubmF0aXZlRXZlbnRbcmVsYXRlZE5hdGl2ZV07XG5cbiAgICBpZiAoKCFyZWxhdGVkIHx8IHJlbGF0ZWQgIT09IHRhcmdldCkgJiYgIWNvbnRhaW5zKHRhcmdldCwgcmVsYXRlZCkpIHtcbiAgICAgIGhhbmRsZXIoZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIuaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzLnRyaWdnZXIsXG4gICAgICAgIG92ZXJsYXkgPSBfdGhpcyRwcm9wcy5vdmVybGF5LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfdGhpcyRwcm9wcyRwb3BwZXJDb24gPSBfdGhpcyRwcm9wcy5wb3BwZXJDb25maWcsXG4gICAgICAgIHBvcHBlckNvbmZpZyA9IF90aGlzJHByb3BzJHBvcHBlckNvbiA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRwb3BwZXJDb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcInRyaWdnZXJcIiwgXCJvdmVybGF5XCIsIFwiY2hpbGRyZW5cIiwgXCJwb3BwZXJDb25maWdcIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLmRlbGF5O1xuICAgIGRlbGV0ZSBwcm9wcy5kZWZhdWx0U2hvdztcbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICB2YXIgdHJpZ2dlclByb3BzID0ge307XG4gICAgdmFyIHRyaWdnZXJzID0gdHJpZ2dlciA9PSBudWxsID8gW10gOiBbXS5jb25jYXQodHJpZ2dlcik7XG5cbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignY2xpY2snKSAhPT0gLTEpIHtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkNsaWNrID0gdGhpcy5oYW5kbGVDbGljaztcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignZm9jdXMnKSAhPT0gLTEpIHtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkZvY3VzID0gdGhpcy5oYW5kbGVTaG93O1xuICAgICAgdHJpZ2dlclByb3BzLm9uQmx1ciA9IHRoaXMuaGFuZGxlSGlkZTtcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignaG92ZXInKSAhPT0gLTEpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHJpZ2dlcnMubGVuZ3RoID49IDEsICdbcmVhY3QtYm9vdHN0cmFwXSBTcGVjaWZ5aW5nIG9ubHkgdGhlIGBcImhvdmVyXCJgIHRyaWdnZXIgbGltaXRzIHRoZSAnICsgJ3Zpc2liaWxpdHkgb2YgdGhlIG92ZXJsYXkgdG8ganVzdCBtb3VzZSB1c2Vycy4gQ29uc2lkZXIgYWxzbyAnICsgJ2luY2x1ZGluZyB0aGUgYFwiZm9jdXNcImAgdHJpZ2dlciBzbyB0aGF0IHRvdWNoIGFuZCBrZXlib2FyZCBvbmx5ICcgKyAndXNlcnMgY2FuIHNlZSB0aGUgb3ZlcmxheSBhcyB3ZWxsLicpIDogdm9pZCAwO1xuICAgICAgdHJpZ2dlclByb3BzLm9uTW91c2VPdmVyID0gdGhpcy5oYW5kbGVNb3VzZU92ZXI7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Nb3VzZU91dCA9IHRoaXMuaGFuZGxlTW91c2VPdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmSG9sZGVyLCB7XG4gICAgICByZWY6IHRoaXMudHJpZ2dlclxuICAgIH0sIGNsb25lRWxlbWVudChjaGlsZCwgdHJpZ2dlclByb3BzKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoT3ZlcmxheSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBwb3BwZXJDb25maWc6IF9leHRlbmRzKHt9LCBwb3BwZXJDb25maWcsIHtcbiAgICAgICAgbW9kaWZpZXJzOiBfZXh0ZW5kcyh7fSwgcG9wcGVyQ29uZmlnLm1vZGlmaWVycywge1xuICAgICAgICAgIGFyaWFNb2RpZmllcjogdGhpcy5hcmlhTW9kaWZpZXJcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgc2hvdzogdGhpcy5zdGF0ZS5zaG93LFxuICAgICAgb25IaWRlOiB0aGlzLmhhbmRsZUhpZGUsXG4gICAgICB0YXJnZXQ6IHRoaXMuZ2V0VGFyZ2V0XG4gICAgfSksIG92ZXJsYXkpKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheVRyaWdnZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXlUcmlnZ2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IE92ZXJsYXlUcmlnZ2VyOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tbXVsdGktY29tcCAqL1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZTogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgYWN0aXZlTGFiZWw6ICcoY3VycmVudCknXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZUl0ZW0oX3JlZikge1xuICB2YXIgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGFjdGl2ZUxhYmVsID0gX3JlZi5hY3RpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYWN0aXZlXCIsIFwiZGlzYWJsZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImFjdGl2ZUxhYmVsXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHZhciBDb21wb25lbnQgPSBhY3RpdmUgfHwgZGlzYWJsZWQgPyAnc3BhbicgOiBTYWZlQW5jaG9yO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgJ3BhZ2UtaXRlbScsIHtcbiAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSlcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IFwicGFnZS1saW5rXCIsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIHByb3BzKSwgY2hpbGRyZW4sIGFjdGl2ZSAmJiBhY3RpdmVMYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICB9LCBhY3RpdmVMYWJlbCkpKTtcbn1cblBhZ2VJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uKG5hbWUsIGRlZmF1bHRWYWx1ZSwgbGFiZWwpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgaWYgKGxhYmVsID09PSB2b2lkIDApIHtcbiAgICBsYWJlbCA9IG5hbWU7XG4gIH1cblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoX2NsYXNzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pO1xuXG4gICAgICBkZWxldGUgcHJvcHMuYWN0aXZlO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZUl0ZW0sIHByb3BzLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgICAgIH0sIGNoaWxkcmVuIHx8IGRlZmF1bHRWYWx1ZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgICAgfSwgbGFiZWwpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBuYW1lLCBfdGVtcDtcbn1cblxuZXhwb3J0IHZhciBGaXJzdCA9IGNyZWF0ZUJ1dHRvbignRmlyc3QnLCBcIlxceEFCXCIpO1xuZXhwb3J0IHZhciBQcmV2ID0gY3JlYXRlQnV0dG9uKCdQcmV2JywgXCJcXHUyMDM5XCIsICdQcmV2aW91cycpO1xuZXhwb3J0IHZhciBFbGxpcHNpcyA9IGNyZWF0ZUJ1dHRvbignRWxsaXBzaXMnLCBcIlxcdTIwMjZcIiwgJ01vcmUnKTtcbmV4cG9ydCB2YXIgTmV4dCA9IGNyZWF0ZUJ1dHRvbignTmV4dCcsIFwiXFx1MjAzQVwiKTtcbmV4cG9ydCB2YXIgTGFzdCA9IGNyZWF0ZUJ1dHRvbignTGFzdCcsIFwiXFx4QkJcIik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBQYWdlSXRlbSwgeyBGaXJzdCwgUHJldiwgRWxsaXBzaXMsIE5leHQsIExhc3QgfSBmcm9tICcuL1BhZ2VJdGVtJztcbi8qKlxuICogQHByb3BlcnR5IHtQYWdlSXRlbX0gSXRlbVxuICogQHByb3BlcnR5IHtQYWdlSXRlbX0gRmlyc3RcbiAqIEBwcm9wZXJ0eSB7UGFnZUl0ZW19IFByZXZcbiAqIEBwcm9wZXJ0eSB7UGFnZUl0ZW19IEVsbGlwc2lzXG4gKiBAcHJvcGVydHkge1BhZ2VJdGVtfSBOZXh0XG4gKiBAcHJvcGVydHkge1BhZ2VJdGVtfSBMYXN0XG4gKi9cblxudmFyIFBhZ2luYXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGFnaW5hdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGFnaW5hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwic2l6ZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gUGFnaW5hdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIERlY29yYXRlZFBhZ2luYXRpb24gPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoUGFnaW5hdGlvbiwgJ3BhZ2luYXRpb24nKTtcbkRlY29yYXRlZFBhZ2luYXRpb24uRmlyc3QgPSBGaXJzdDtcbkRlY29yYXRlZFBhZ2luYXRpb24uUHJldiA9IFByZXY7XG5EZWNvcmF0ZWRQYWdpbmF0aW9uLkVsbGlwc2lzID0gRWxsaXBzaXM7XG5EZWNvcmF0ZWRQYWdpbmF0aW9uLkl0ZW0gPSBQYWdlSXRlbTtcbkRlY29yYXRlZFBhZ2luYXRpb24uTmV4dCA9IE5leHQ7XG5EZWNvcmF0ZWRQYWdpbmF0aW9uLkxhc3QgPSBMYXN0O1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkUGFnaW5hdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbmZ1bmN0aW9uIFBvcG92ZXIoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGFycm93UHJvcHMgPSBfcmVmLmFycm93UHJvcHMsXG4gICAgICBfID0gX3JlZi5zY2hlZHVsZVVwZGF0ZSxcbiAgICAgIF8xID0gX3JlZi5vdXRPZkJvdW5kYXJpZXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiaW5uZXJSZWZcIiwgXCJwbGFjZW1lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJhcnJvd1Byb3BzXCIsIFwic2NoZWR1bGVVcGRhdGVcIiwgXCJvdXRPZkJvdW5kYXJpZXNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcInRvb2x0aXBcIixcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBcIngtcGxhY2VtZW50XCI6IHBsYWNlbWVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgXCJicy1wb3BvdmVyLVwiICsgcGxhY2VtZW50KVxuICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogXCJhcnJvd1wiXG4gIH0sIGFycm93UHJvcHMpKSwgdGl0bGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLWhlYWRlciBoM1wiXG4gIH0sIHRpdGxlKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLWJvZHlcIlxuICB9LCBjaGlsZHJlbikpO1xufVxuXG5Qb3BvdmVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChQb3BvdmVyLCAncG9wb3ZlcicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL3V0aWxzL0VsZW1lbnRDaGlsZHJlbic7XG52YXIgUk9VTkRfUFJFQ0lTSU9OID0gMTAwMDtcbi8qKlxuICogVmFsaWRhdGUgdGhhdCBjaGlsZHJlbiwgaWYgYW55LCBhcmUgaW5zdGFuY2VzIG9mIGA8UHJvZ3Jlc3NCYXI+YC5cbiAqL1xuXG5mdW5jdGlvbiBvbmx5UHJvZ3Jlc3NCYXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXJyb3IgPSBudWxsO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGFyZSB0eXBlcyBpbiBhIHdheSB0aGF0IHdvcmtzIHdpdGggbGlicmFyaWVzIHRoYXQgcGF0Y2ggYW5kIHByb3h5XG4gICAgICogY29tcG9uZW50cyBsaWtlIHJlYWN0LWhvdC1sb2FkZXIuXG4gICAgICpcbiAgICAgKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dhZWFyb24vcmVhY3QtaG90LWxvYWRlciNjaGVja2luZy1lbGVtZW50LXR5cGVzXG4gICAgICovXG5cblxuICAgIHZhciBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChEZWNvcmF0ZWRQcm9ncmVzc0JhciwgbnVsbCk7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IGVsZW1lbnQudHlwZSkgcmV0dXJuO1xuICAgIHZhciBjaGlsZElkZW50aWZpZXIgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBjaGlsZC50eXBlLmRpc3BsYXlOYW1lIHx8IGNoaWxkLnR5cGUubmFtZSB8fCBjaGlsZC50eXBlIDogY2hpbGQ7XG4gICAgZXJyb3IgPSBuZXcgRXJyb3IoXCJDaGlsZHJlbiBvZiBcIiArIGNvbXBvbmVudE5hbWUgKyBcIiBjYW4gY29udGFpbiBvbmx5IFByb2dyZXNzQmFyIFwiICsgKFwiY29tcG9uZW50cy4gRm91bmQgXCIgKyBjaGlsZElkZW50aWZpZXIgKyBcIi5cIikpO1xuICB9KTtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBtaW46IDAsXG4gIG1heDogMTAwLFxuICBhbmltYXRlZDogZmFsc2UsXG4gIGlzQ2hpbGQ6IGZhbHNlLFxuICBzck9ubHk6IGZhbHNlLFxuICBzdHJpcGVkOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gZ2V0UGVyY2VudGFnZShub3csIG1pbiwgbWF4KSB7XG4gIHZhciBwZXJjZW50YWdlID0gKG5vdyAtIG1pbikgLyAobWF4IC0gbWluKSAqIDEwMDtcbiAgcmV0dXJuIE1hdGgucm91bmQocGVyY2VudGFnZSAqIFJPVU5EX1BSRUNJU0lPTikgLyBST1VORF9QUkVDSVNJT047XG59XG5cbnZhciBQcm9ncmVzc0JhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQcm9ncmVzc0JhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvZ3Jlc3NCYXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByb2dyZXNzQmFyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiByZW5kZXJQcm9ncmVzc0JhcihfcmVmKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgdmFyIG1pbiA9IF9yZWYubWluLFxuICAgICAgICBub3cgPSBfcmVmLm5vdyxcbiAgICAgICAgbWF4ID0gX3JlZi5tYXgsXG4gICAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgICAgc3JPbmx5ID0gX3JlZi5zck9ubHksXG4gICAgICAgIHN0cmlwZWQgPSBfcmVmLnN0cmlwZWQsXG4gICAgICAgIGFuaW1hdGVkID0gX3JlZi5hbmltYXRlZCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgICAgdmFyaWFudCA9IF9yZWYudmFyaWFudCxcbiAgICAgICAgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcIm1pblwiLCBcIm5vd1wiLCBcIm1heFwiLCBcImxhYmVsXCIsIFwic3JPbmx5XCIsIFwic3RyaXBlZFwiLCBcImFuaW1hdGVkXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJ2YXJpYW50XCIsIFwiYnNQcmVmaXhcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByb2xlOiBcInByb2dyZXNzYmFyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCArIFwiLWJhclwiLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2NsYXNzTmFtZXNbXCJiZy1cIiArIHZhcmlhbnRdID0gdmFyaWFudCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1iYXItYW5pbWF0ZWRcIl0gPSBhbmltYXRlZCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1iYXItc3RyaXBlZFwiXSA9IGFuaW1hdGVkIHx8IHN0cmlwZWQsIF9jbGFzc05hbWVzKSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICB3aWR0aDogZ2V0UGVyY2VudGFnZShub3csIG1pbiwgbWF4KSArIFwiJVwiXG4gICAgICB9LCBzdHlsZSksXG4gICAgICBcImFyaWEtdmFsdWVub3dcIjogbm93LFxuICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IG1pbixcbiAgICAgIFwiYXJpYS12YWx1ZW1heFwiOiBtYXhcbiAgICB9KSwgc3JPbmx5ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgIH0sIGxhYmVsKSA6IGxhYmVsKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzQ2hpbGQgPSBfdGhpcyRwcm9wcy5pc0NoaWxkLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJpc0NoaWxkXCJdKTtcblxuICAgIGlmIChpc0NoaWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9ncmVzc0Jhcihwcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIG1pbiA9IHByb3BzLm1pbixcbiAgICAgICAgbm93ID0gcHJvcHMubm93LFxuICAgICAgICBtYXggPSBwcm9wcy5tYXgsXG4gICAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICAgIHNyT25seSA9IHByb3BzLnNyT25seSxcbiAgICAgICAgc3RyaXBlZCA9IHByb3BzLnN0cmlwZWQsXG4gICAgICAgIGFuaW1hdGVkID0gcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgIGJzUHJlZml4ID0gcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJtaW5cIiwgXCJub3dcIiwgXCJtYXhcIiwgXCJsYWJlbFwiLCBcInNyT25seVwiLCBcInN0cmlwZWRcIiwgXCJhbmltYXRlZFwiLCBcImJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCB3cmFwcGVyUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pLCBjaGlsZHJlbiA/IG1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGlzQ2hpbGQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pIDogdGhpcy5yZW5kZXJQcm9ncmVzc0Jhcih7XG4gICAgICBtaW46IG1pbixcbiAgICAgIG5vdzogbm93LFxuICAgICAgbWF4OiBtYXgsXG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBzck9ubHk6IHNyT25seSxcbiAgICAgIHN0cmlwZWQ6IHN0cmlwZWQsXG4gICAgICBhbmltYXRlZDogYW5pbWF0ZWQsXG4gICAgICBic1ByZWZpeDogYnNQcmVmaXgsXG4gICAgICB2YXJpYW50OiB2YXJpYW50XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBQcm9ncmVzc0Jhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvZ3Jlc3NCYXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIERlY29yYXRlZFByb2dyZXNzQmFyID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFByb2dyZXNzQmFyLCAncHJvZ3Jlc3MnKTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZFByb2dyZXNzQmFyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhc3BlY3RSYXRpbzogJzFieTEnXG59O1xuXG52YXIgUmVzcG9uc2l2ZUVtYmVkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJlc3BvbnNpdmVFbWJlZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZUVtYmVkKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXNwb25zaXZlRW1iZWQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBhc3BlY3RSYXRpbyA9IF90aGlzJHByb3BzLmFzcGVjdFJhdGlvLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiYXNwZWN0UmF0aW9cIl0pO1xuXG4gICAgdmFyIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNQcmVmaXgsIGNsYXNzTmFtZSwgYXNwZWN0UmF0aW8gJiYgYnNQcmVmaXggKyBcIi1cIiArIGFzcGVjdFJhdGlvKVxuICAgIH0pLCBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjaGlsZC5wcm9wcy5jbGFzc05hbWUsIGJzUHJlZml4ICsgXCItaXRlbVwiKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZUVtYmVkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZXNwb25zaXZlRW1iZWQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFJlc3BvbnNpdmVFbWJlZCwgJ2VtYmVkLXJlc3BvbnNpdmUnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgUm93ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm93KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgbm9HdXR0ZXJzID0gX3RoaXMkcHJvcHMubm9HdXR0ZXJzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcIm5vR3V0dGVyc1wiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgbm9HdXR0ZXJzICYmICduby1ndXR0ZXJzJylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm93LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICBub0d1dHRlcnM6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFJvdywgJ3JvdycpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICcuL0J1dHRvbkdyb3VwJztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbi8qKlxuICogQGluaGVyaXRzIEJ1dHRvbiwgRHJvcGRvd25cbiAqL1xuXG52YXIgU3BsaXRCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3BsaXRCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNwbGl0QnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTcGxpdEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIHRvZ2dsZUxhYmVsID0gX3RoaXMkcHJvcHMudG9nZ2xlTGFiZWwsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrLFxuICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZixcbiAgICAgICAgdGFyZ2V0ID0gX3RoaXMkcHJvcHMudGFyZ2V0LFxuICAgICAgICBtZW51Um9sZSA9IF90aGlzJHByb3BzLm1lbnVSb2xlLFxuICAgICAgICByb290Q2xvc2VFdmVudCA9IF90aGlzJHByb3BzLnJvb3RDbG9zZUV2ZW50LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJpZFwiLCBcImJzUHJlZml4XCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIiwgXCJ0aXRsZVwiLCBcInRvZ2dsZUxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJvbkNsaWNrXCIsIFwiaHJlZlwiLCBcInRhcmdldFwiLCBcIm1lbnVSb2xlXCIsIFwicm9vdENsb3NlRXZlbnRcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYXM6IEJ1dHRvbkdyb3VwXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7XG4gICAgICBzaXplOiBzaXplLFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGJzUHJlZml4OiBic1ByZWZpeCxcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICB9LCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uVG9nZ2xlLCB7XG4gICAgICBzcGxpdDogdHJ1ZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHNpemU6IHNpemUsXG4gICAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgY2hpbGRCc1ByZWZpeDogYnNQcmVmaXhcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgdG9nZ2xlTGFiZWwpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93bi5NZW51LCB7XG4gICAgICByb2xlOiBtZW51Um9sZSxcbiAgICAgIHJvb3RDbG9zZUV2ZW50OiByb290Q2xvc2VFdmVudFxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFNwbGl0QnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TcGxpdEJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHRvZ2dsZUxhYmVsOiAnVG9nZ2xlIGRyb3Bkb3duJ1xufTtcbmV4cG9ydCBkZWZhdWx0IFNwbGl0QnV0dG9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCBUYWJDb250ZXh0IGZyb20gJy4vVGFiQ29udGV4dCc7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQgZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5cbnZhciBUYWJDb250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiQ29udGFpbmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJDb250YWluZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5nZXRDb250cm9sbGVkSWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMuZ2V0S2V5KGtleSwgJ3RhYnBhbmUnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0Q29udHJvbGxlcklkID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzLmdldEtleShrZXksICd0YWInKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB0YWJDb250ZXh0OiB7XG4gICAgICAgIG9uU2VsZWN0OiBfdGhpcy5wcm9wcy5vblNlbGVjdCxcbiAgICAgICAgYWN0aXZlS2V5OiBfdGhpcy5wcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIHRyYW5zaXRpb246IF90aGlzLnByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIG1vdW50T25FbnRlcjogX3RoaXMucHJvcHMubW91bnRPbkVudGVyLFxuICAgICAgICB1bm1vdW50T25FeGl0OiBfdGhpcy5wcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBnZXRDb250cm9sbGVkSWQ6IF90aGlzLmdldENvbnRyb2xsZWRJZCxcbiAgICAgICAgZ2V0Q29udHJvbGxlcklkOiBfdGhpcy5nZXRDb250cm9sbGVySWRcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRhYkNvbnRhaW5lci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIGFjdGl2ZUtleSA9IF9yZWYuYWN0aXZlS2V5LFxuICAgICAgICBtb3VudE9uRW50ZXIgPSBfcmVmLm1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdCA9IF9yZWYudW5tb3VudE9uRXhpdCxcbiAgICAgICAgdHJhbnNpdGlvbiA9IF9yZWYudHJhbnNpdGlvbjtcbiAgICByZXR1cm4ge1xuICAgICAgdGFiQ29udGV4dDogX2V4dGVuZHMoe30sIHByZXZTdGF0ZS50YWJDb250ZXh0LCB7XG4gICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdW5tb3VudE9uRXhpdCxcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBUYWJDb250YWluZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoa2V5LCB0eXBlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZ2VuZXJhdGVDaGlsZElkID0gX3RoaXMkcHJvcHMuZ2VuZXJhdGVDaGlsZElkLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkO1xuICAgIGlmIChnZW5lcmF0ZUNoaWxkSWQpIHJldHVybiBnZW5lcmF0ZUNoaWxkSWQoa2V5LCB0eXBlKTtcbiAgICByZXR1cm4gaWQgPyBpZCArIFwiLVwiICsgdHlwZSArIFwiLVwiICsga2V5IDogbnVsbDtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wczIub25TZWxlY3Q7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudGFiQ29udGV4dFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBvblNlbGVjdFxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYkNvbnRhaW5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoVGFiQ29udGFpbmVyLCB7XG4gIGFjdGl2ZUtleTogJ29uU2VsZWN0J1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIFRhYkNvbnRlbnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiQ29udGVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiQ29udGVudCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGFiQ29udGVudC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYkNvbnRlbnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYkNvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoVGFiQ29udGVudCwgJ3RhYi1jb250ZW50Jyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1hcENvbnRleHRUb1Byb3BzIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvbWFwQ29udGV4dFRvUHJvcHMnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBUYWJDb250ZXh0IGZyb20gJy4vVGFiQ29udGV4dCc7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQsIHsgbWFrZUV2ZW50S2V5IH0gZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5pbXBvcnQgRmFkZSBmcm9tICcuL0ZhZGUnO1xuXG52YXIgVGFiUGFuZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUYWJQYW5lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJQYW5lKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUYWJQYW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBvbkVudGVyID0gX3RoaXMkcHJvcHMub25FbnRlcixcbiAgICAgICAgb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIG9uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgb25FeGl0ID0gX3RoaXMkcHJvcHMub25FeGl0LFxuICAgICAgICBvbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIG9uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIG1vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdCA9IF90aGlzJHByb3BzLnVubW91bnRPbkV4aXQsXG4gICAgICAgIFRyYW5zaXRpb24gPSBfdGhpcyRwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBfdGhpcyRwcm9wcyRhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcyRhcyA9PT0gdm9pZCAwID8gJ2RpdicgOiBfdGhpcyRwcm9wcyRhcyxcbiAgICAgICAgXyA9IF90aGlzJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJtb3VudE9uRW50ZXJcIiwgXCJ1bm1vdW50T25FeGl0XCIsIFwidHJhbnNpdGlvblwiLCBcImFzXCIsIFwiZXZlbnRLZXlcIl0pO1xuXG4gICAgaWYgKCFhY3RpdmUgJiYgdW5tb3VudE9uRXhpdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHBhbmUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByb2xlOiBcInRhYnBhbmVsXCIsXG4gICAgICBcImFyaWEtaGlkZGVuXCI6ICFhY3RpdmUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwge1xuICAgICAgICBhY3RpdmU6IGFjdGl2ZVxuICAgICAgfSlcbiAgICB9KSk7XG4gICAgaWYgKFRyYW5zaXRpb24pIHBhbmUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIHtcbiAgICAgIGluOiBhY3RpdmUsXG4gICAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgICAgb25FeGl0OiBvbkV4aXQsXG4gICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZCxcbiAgICAgIG1vdW50T25FbnRlcjogbW91bnRPbkVudGVyLFxuICAgICAgdW5tb3VudE9uRXhpdDogbW91bnRPbkVudGVyXG4gICAgfSwgcGFuZSk7IC8vIFdlIHByb3ZpZGUgYW4gZW1wdHkgdGhlIFRhYkNvbnRleHQgc28gYDxOYXY+YHMgaW4gYDxUYWJQYW5lPmBzIGRvbid0XG4gICAgLy8gY29uZmxpY3Qgd2l0aCB0aGUgdG9wIGxldmVsIG9uZS5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBudWxsXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RhYmxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IG51bGxcbiAgICB9LCBwYW5lKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYlBhbmU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENvbnRleHRUb1Byb3BzKFRhYkNvbnRleHQsIGZ1bmN0aW9uIChjb250ZXh0LCBwcm9wcykge1xuICBpZiAoIWNvbnRleHQpIHJldHVybiBudWxsO1xuXG4gIHZhciBhY3RpdmVLZXkgPSBjb250ZXh0LmFjdGl2ZUtleSxcbiAgICAgIGdldENvbnRyb2xsZWRJZCA9IGNvbnRleHQuZ2V0Q29udHJvbGxlZElkLFxuICAgICAgZ2V0Q29udHJvbGxlcklkID0gY29udGV4dC5nZXRDb250cm9sbGVySWQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoY29udGV4dCwgW1wiYWN0aXZlS2V5XCIsIFwiZ2V0Q29udHJvbGxlZElkXCIsIFwiZ2V0Q29udHJvbGxlcklkXCJdKTtcblxuICB2YXIgc2hvdWxkVHJhbnNpdGlvbiA9IHByb3BzLnRyYW5zaXRpb24gIT09IGZhbHNlICYmIHJlc3QudHJhbnNpdGlvbiAhPT0gZmFsc2U7XG4gIHZhciBrZXkgPSBtYWtlRXZlbnRLZXkocHJvcHMuZXZlbnRLZXkpO1xuICByZXR1cm4ge1xuICAgIGFjdGl2ZTogcHJvcHMuYWN0aXZlID09IG51bGwgJiYga2V5ICE9IG51bGwgPyBtYWtlRXZlbnRLZXkoYWN0aXZlS2V5KSA9PT0ga2V5IDogcHJvcHMuYWN0aXZlLFxuICAgIGlkOiBnZXRDb250cm9sbGVkSWQocHJvcHMuZXZlbnRLZXkpLFxuICAgICdhcmlhLWxhYmVsbGVkYnknOiBnZXRDb250cm9sbGVySWQocHJvcHMuZXZlbnRLZXkpLFxuICAgIHRyYW5zaXRpb246IHNob3VsZFRyYW5zaXRpb24gJiYgKHByb3BzLnRyYW5zaXRpb24gfHwgcmVzdC50cmFuc2l0aW9uIHx8IEZhZGUpLFxuICAgIG1vdW50T25FbnRlcjogcHJvcHMubW91bnRPbkVudGVyICE9IG51bGwgPyBwcm9wcy5tb3VudE9uRW50ZXIgOiByZXN0Lm1vdW50T25FbnRlcixcbiAgICB1bm1vdW50T25FeGl0OiBwcm9wcy51bm1vdW50T25FeGl0ICE9IG51bGwgPyBwcm9wcy51bm1vdW50T25FeGl0IDogcmVzdC51bm1vdW50T25FeGl0XG4gIH07XG59LCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoVGFiUGFuZSwgJ3RhYi1wYW5lJykpOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUYWJDb250YWluZXIgZnJvbSAnLi9UYWJDb250YWluZXInO1xuaW1wb3J0IFRhYkNvbnRlbnQgZnJvbSAnLi9UYWJDb250ZW50JztcbmltcG9ydCBUYWJQYW5lIGZyb20gJy4vVGFiUGFuZSc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9yZXF1aXJlLXJlbmRlci1yZXR1cm4sIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG5cbnZhciBUYWIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0Qm9vdHN0cmFwOiBUaGUgYFRhYmAgY29tcG9uZW50IGlzIG5vdCBtZWFudCB0byBiZSByZW5kZXJlZCEgJyArIFwiSXQncyBhbiBhYnN0cmFjdCBjb21wb25lbnQgdGhhdCBpcyBvbmx5IHZhbGlkIGFzIGEgZGlyZWN0IENoaWxkIG9mIHRoZSBgVGFic2AgQ29tcG9uZW50LiBcIiArICdGb3IgY3VzdG9tIHRhYnMgY29tcG9uZW50cyB1c2UgVGFiUGFuZSBhbmQgVGFic0NvbnRhaW5lciBkaXJlY3RseScpO1xuICB9O1xuXG4gIHJldHVybiBUYWI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYi5Db250YWluZXIgPSBUYWJDb250YWluZXI7XG5UYWIuQ29udGVudCA9IFRhYkNvbnRlbnQ7XG5UYWIuUGFuZSA9IFRhYlBhbmU7XG5leHBvcnQgZGVmYXVsdCBUYWI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIFRhYmxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRhYmxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGFibGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHJpcGVkID0gX3RoaXMkcHJvcHMuc3RyaXBlZCxcbiAgICAgICAgYm9yZGVyZWQgPSBfdGhpcyRwcm9wcy5ib3JkZXJlZCxcbiAgICAgICAgaG92ZXIgPSBfdGhpcyRwcm9wcy5ob3ZlcixcbiAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wcy52YXJpYW50LFxuICAgICAgICByZXNwb25zaXZlID0gX3RoaXMkcHJvcHMucmVzcG9uc2l2ZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHJpcGVkXCIsIFwiYm9yZGVyZWRcIiwgXCJob3ZlclwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCIsIFwicmVzcG9uc2l2ZVwiXSk7XG5cbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMoYnNQcmVmaXgsIGNsYXNzTmFtZSwgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgc2l6ZSAmJiBic1ByZWZpeCArIFwiLVwiICsgc2l6ZSwgc3RyaXBlZCAmJiBic1ByZWZpeCArIFwiLXN0cmlwZWRcIiwgYm9yZGVyZWQgJiYgYnNQcmVmaXggKyBcIi1ib3JkZXJlZFwiLCBob3ZlciAmJiBic1ByZWZpeCArIFwiLWhvdmVyXCIpO1xuICAgIHZhciB0YWJsZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgIH0pKTtcblxuICAgIGlmIChyZXNwb25zaXZlKSB7XG4gICAgICB2YXIgcmVzcG9uc2l2ZUNsYXNzID0gYnNQcmVmaXggKyBcIi1yZXNwb25zaXZlXCI7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2l2ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzcG9uc2l2ZUNsYXNzID0gcmVzcG9uc2l2ZUNsYXNzICsgXCItXCIgKyByZXNwb25zaXZlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogcmVzcG9uc2l2ZUNsYXNzXG4gICAgICB9LCB0YWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlO1xuICB9O1xuXG4gIHJldHVybiBUYWJsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFRhYmxlLCAndGFibGUnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlcXVpcmVkRm9yQTExeSBmcm9tICdwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeSc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IE5hdiBmcm9tICcuL05hdic7XG5pbXBvcnQgTmF2TGluayBmcm9tICcuL05hdkxpbmsnO1xuaW1wb3J0IE5hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcbmltcG9ydCBVbmNvbnRyb2xsZWRUYWJDb250YWluZXIgZnJvbSAnLi9UYWJDb250YWluZXInO1xuaW1wb3J0IFRhYkNvbnRlbnQgZnJvbSAnLi9UYWJDb250ZW50JztcbmltcG9ydCBUYWJQYW5lIGZyb20gJy4vVGFiUGFuZSc7XG5pbXBvcnQgeyBmb3JFYWNoLCBtYXAgfSBmcm9tICcuL3V0aWxzL0VsZW1lbnRDaGlsZHJlbic7XG52YXIgVGFiQ29udGFpbmVyID0gVW5jb250cm9sbGVkVGFiQ29udGFpbmVyLkNvbnRyb2xsZWRDb21wb25lbnQ7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICB2YXJpYW50OiAndGFicycsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWN0aXZlS2V5KGNoaWxkcmVuKSB7XG4gIHZhciBkZWZhdWx0QWN0aXZlS2V5O1xuICBmb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoZGVmYXVsdEFjdGl2ZUtleSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0QWN0aXZlS2V5ID0gY2hpbGQucHJvcHMuZXZlbnRLZXk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlZmF1bHRBY3RpdmVLZXk7XG59XG5cbnZhciBUYWJzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRhYnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYnMoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYnMucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXJUYWIgPSBmdW5jdGlvbiByZW5kZXJUYWIoY2hpbGQpIHtcbiAgICB2YXIgX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMsXG4gICAgICAgIHRpdGxlID0gX2NoaWxkJHByb3BzLnRpdGxlLFxuICAgICAgICBldmVudEtleSA9IF9jaGlsZCRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgZGlzYWJsZWQgPSBfY2hpbGQkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHRhYkNsYXNzTmFtZSA9IF9jaGlsZCRwcm9wcy50YWJDbGFzc05hbWU7XG5cbiAgICBpZiAodGl0bGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2SXRlbSwge1xuICAgICAgYXM6IE5hdkxpbmssXG4gICAgICBldmVudEtleTogZXZlbnRLZXksXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWU6IHRhYkNsYXNzTmFtZVxuICAgIH0sIHRpdGxlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgIHRyYW5zaXRpb24gPSBfdGhpcyRwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBtb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIHVubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfdGhpcyRwcm9wcyRhY3RpdmVLZXkgPSBfdGhpcyRwcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIGFjdGl2ZUtleSA9IF90aGlzJHByb3BzJGFjdGl2ZUtleSA9PT0gdm9pZCAwID8gZ2V0RGVmYXVsdEFjdGl2ZUtleShjaGlsZHJlbikgOiBfdGhpcyRwcm9wcyRhY3RpdmVLZXksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImlkXCIsIFwib25TZWxlY3RcIiwgXCJ0cmFuc2l0aW9uXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImNoaWxkcmVuXCIsIFwiYWN0aXZlS2V5XCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYkNvbnRhaW5lciwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgYWN0aXZlS2V5OiBhY3RpdmVLZXksXG4gICAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgICAgbW91bnRPbkVudGVyOiBtb3VudE9uRW50ZXIsXG4gICAgICB1bm1vdW50T25FeGl0OiB1bm1vdW50T25FeGl0XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChOYXYsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcm9sZTogXCJ0YWJsaXN0XCIsXG4gICAgICBhczogXCJuYXZcIlxuICAgIH0pLCBtYXAoY2hpbGRyZW4sIHRoaXMucmVuZGVyVGFiKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiQ29udGVudCwgbnVsbCwgbWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZFByb3BzID0gX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzKTtcblxuICAgICAgZGVsZXRlIGNoaWxkUHJvcHMudGl0bGU7XG4gICAgICBkZWxldGUgY2hpbGRQcm9wcy5kaXNhYmxlZDtcbiAgICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRhYkNsYXNzTmFtZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYlBhbmUsIGNoaWxkUHJvcHMpO1xuICAgIH0pKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYnM7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYnMuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoVGFicywge1xuICBhY3RpdmVLZXk6ICdvblNlbGVjdCdcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIFRvZ2dsZUJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUb2dnbGVCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvZ2dsZUJ1dHRvbigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnSU5QVVQnKSBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnSU5QVVQnKSBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRvZ2dsZUJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBuYW1lID0gX3RoaXMkcHJvcHMubmFtZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGVja2VkID0gX3RoaXMkcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsXG4gICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMudmFsdWUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwibmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoZWNrZWRcIiwgXCJ0eXBlXCIsIFwib25DaGFuZ2VcIiwgXCJ2YWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiaW5wdXRSZWZcIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgICB2YXIgZm9jdXNlZCA9IHRoaXMuc3RhdGUuZm9jdXNlZDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiBpbm5lclJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGZvY3VzZWQgJiYgJ2ZvY3VzJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJyksXG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgYWN0aXZlOiAhIWNoZWNrZWQsXG4gICAgICBhczogXCJsYWJlbFwiXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICBhdXRvQ29tcGxldGU6IFwib2ZmXCIsXG4gICAgICBjaGVja2VkOiAhIWNoZWNrZWQsXG4gICAgICBkaXNhYmxlZDogISFkaXNhYmxlZCxcbiAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXMsXG4gICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSB8fCBub29wXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gVG9nZ2xlQnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRvZ2dsZUJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIGlubmVyUmVmOiByZWZcbiAgfSwgcHJvcHMpKTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IGNoYWluRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi91dGlscy9FbGVtZW50Q2hpbGRyZW4nO1xuaW1wb3J0IEJ1dHRvbkdyb3VwIGZyb20gJy4vQnV0dG9uR3JvdXAnO1xuaW1wb3J0IFRvZ2dsZUJ1dHRvbiBmcm9tICcuL1RvZ2dsZUJ1dHRvbic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiAncmFkaW8nXG59O1xuXG52YXIgVG9nZ2xlQnV0dG9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVG9nZ2xlQnV0dG9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvZ2dsZUJ1dHRvbkdyb3VwKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUb2dnbGVCdXR0b25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFZhbHVlcyA9IGZ1bmN0aW9uIGdldFZhbHVlcygpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gW10gOiBbXS5jb25jYXQodmFsdWUpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiBoYW5kbGVUb2dnbGUodmFsdWUsIGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2U7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG4gICAgdmFyIGlzQWN0aXZlID0gdmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMTtcblxuICAgIGlmICh0eXBlID09PSAncmFkaW8nKSB7XG4gICAgICBpZiAoIWlzQWN0aXZlKSBvbkNoYW5nZSh2YWx1ZSwgZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgb25DaGFuZ2UodmFsdWVzLmZpbHRlcihmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiAhPT0gdmFsdWU7XG4gICAgICB9KSwgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNoYW5nZSh2YWx1ZXMuY29uY2F0KFt2YWx1ZV0pLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMi50eXBlLFxuICAgICAgICBuYW1lID0gX3RoaXMkcHJvcHMyLm5hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJjaGlsZHJlblwiLCBcInR5cGVcIiwgXCJuYW1lXCJdKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vbkNoYW5nZTtcbiAgICBkZWxldGUgcHJvcHMudmFsdWU7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG4gICAgISh0eXBlICE9PSAncmFkaW8nIHx8ICEhbmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdBIGBuYW1lYCBpcyByZXF1aXJlZCB0byBncm91cCB0aGUgdG9nZ2xlIGJ1dHRvbnMgd2hlbiB0aGUgYHR5cGVgICcgKyAnaXMgc2V0IHRvIFwicmFkaW9cIicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25Hcm91cCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0b2dnbGU6IHRydWVcbiAgICB9KSwgbWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgICAgICB2YWx1ZSA9IF9jaGlsZCRwcm9wcy52YWx1ZSxcbiAgICAgICAgICBvbkNoYW5nZSA9IF9jaGlsZCRwcm9wcy5vbkNoYW5nZTtcblxuICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVRvZ2dsZSh2YWx1ZSwgZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIG5hbWU6IGNoaWxkLm5hbWUgfHwgbmFtZSxcbiAgICAgICAgY2hlY2tlZDogdmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMSxcbiAgICAgICAgb25DaGFuZ2U6IGNoYWluRnVuY3Rpb24ob25DaGFuZ2UsIGhhbmRsZXIpXG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFRvZ2dsZUJ1dHRvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ub2dnbGVCdXR0b25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgVW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAgPSB1bmNvbnRyb2xsYWJsZShUb2dnbGVCdXR0b25Hcm91cCwge1xuICB2YWx1ZTogJ29uQ2hhbmdlJ1xufSk7XG5VbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cC5CdXR0b24gPSBUb2dnbGVCdXR0b247XG5leHBvcnQgZGVmYXVsdCBVbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbmZ1bmN0aW9uIFRvb2x0aXAoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGFycm93UHJvcHMgPSBfcmVmLmFycm93UHJvcHMsXG4gICAgICBfID0gX3JlZi5zY2hlZHVsZVVwZGF0ZSxcbiAgICAgIF8xID0gX3JlZi5vdXRPZkJvdW5kYXJpZXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiaW5uZXJSZWZcIiwgXCJwbGFjZW1lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImNoaWxkcmVuXCIsIFwiYXJyb3dQcm9wc1wiLCBcInNjaGVkdWxlVXBkYXRlXCIsIFwib3V0T2ZCb3VuZGFyaWVzXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgcm9sZTogXCJ0b29sdGlwXCIsXG4gICAgXCJ4LXBsYWNlbWVudFwiOiBwbGFjZW1lbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIFwiYnMtdG9vbHRpcC1cIiArIHBsYWNlbWVudClcbiAgfSwgcHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IFwiYXJyb3dcIlxuICB9LCBhcnJvd1Byb3BzKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1pbm5lclwiXG4gIH0sIGNoaWxkcmVuKSk7XG59XG5cblRvb2x0aXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFRvb2x0aXAsICd0b29sdGlwJyk7IiwiaW1wb3J0IF9BbGVydCBmcm9tICcuL0FsZXJ0JztcbmV4cG9ydCB7IF9BbGVydCBhcyBBbGVydCB9O1xuaW1wb3J0IF9CYWRnZSBmcm9tICcuL0JhZGdlJztcbmV4cG9ydCB7IF9CYWRnZSBhcyBCYWRnZSB9O1xuaW1wb3J0IF9CcmVhZGNydW1iIGZyb20gJy4vQnJlYWRjcnVtYic7XG5leHBvcnQgeyBfQnJlYWRjcnVtYiBhcyBCcmVhZGNydW1iIH07XG5pbXBvcnQgX0JyZWFkY3J1bWJJdGVtIGZyb20gJy4vQnJlYWRjcnVtYkl0ZW0nO1xuZXhwb3J0IHsgX0JyZWFkY3J1bWJJdGVtIGFzIEJyZWFkY3J1bWJJdGVtIH07XG5pbXBvcnQgX0J1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5leHBvcnQgeyBfQnV0dG9uIGFzIEJ1dHRvbiB9O1xuaW1wb3J0IF9CdXR0b25Hcm91cCBmcm9tICcuL0J1dHRvbkdyb3VwJztcbmV4cG9ydCB7IF9CdXR0b25Hcm91cCBhcyBCdXR0b25Hcm91cCB9O1xuaW1wb3J0IF9CdXR0b25Ub29sYmFyIGZyb20gJy4vQnV0dG9uVG9vbGJhcic7XG5leHBvcnQgeyBfQnV0dG9uVG9vbGJhciBhcyBCdXR0b25Ub29sYmFyIH07XG5pbXBvcnQgX0NhcmQgZnJvbSAnLi9DYXJkJztcbmV4cG9ydCB7IF9DYXJkIGFzIENhcmQgfTtcbmltcG9ydCBfQ2FyZENvbHVtbnMgZnJvbSAnLi9DYXJkQ29sdW1ucyc7XG5leHBvcnQgeyBfQ2FyZENvbHVtbnMgYXMgQ2FyZENvbHVtbnMgfTtcbmltcG9ydCBfQ2FyZERlY2sgZnJvbSAnLi9DYXJkRGVjayc7XG5leHBvcnQgeyBfQ2FyZERlY2sgYXMgQ2FyZERlY2sgfTtcbmltcG9ydCBfQ2FyZEltZyBmcm9tICcuL0NhcmRJbWcnO1xuZXhwb3J0IHsgX0NhcmRJbWcgYXMgQ2FyZEltZyB9O1xuaW1wb3J0IF9DYXJkR3JvdXAgZnJvbSAnLi9DYXJkR3JvdXAnO1xuZXhwb3J0IHsgX0NhcmRHcm91cCBhcyBDYXJkR3JvdXAgfTtcbmltcG9ydCBfQ2Fyb3VzZWwgZnJvbSAnLi9DYXJvdXNlbCc7XG5leHBvcnQgeyBfQ2Fyb3VzZWwgYXMgQ2Fyb3VzZWwgfTtcbmltcG9ydCBfQ2Fyb3VzZWxJdGVtIGZyb20gJy4vQ2Fyb3VzZWxJdGVtJztcbmV4cG9ydCB7IF9DYXJvdXNlbEl0ZW0gYXMgQ2Fyb3VzZWxJdGVtIH07XG5pbXBvcnQgX0Nsb3NlQnV0dG9uIGZyb20gJy4vQ2xvc2VCdXR0b24nO1xuZXhwb3J0IHsgX0Nsb3NlQnV0dG9uIGFzIENsb3NlQnV0dG9uIH07XG5pbXBvcnQgX0NvbCBmcm9tICcuL0NvbCc7XG5leHBvcnQgeyBfQ29sIGFzIENvbCB9O1xuaW1wb3J0IF9Db2xsYXBzZSBmcm9tICcuL0NvbGxhcHNlJztcbmV4cG9ydCB7IF9Db2xsYXBzZSBhcyBDb2xsYXBzZSB9O1xuaW1wb3J0IF9Ecm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbmV4cG9ydCB7IF9Ecm9wZG93biBhcyBEcm9wZG93biB9O1xuaW1wb3J0IF9Ecm9wZG93bkJ1dHRvbiBmcm9tICcuL0Ryb3Bkb3duQnV0dG9uJztcbmV4cG9ydCB7IF9Ecm9wZG93bkJ1dHRvbiBhcyBEcm9wZG93bkJ1dHRvbiB9O1xuaW1wb3J0IF9GYWRlIGZyb20gJy4vRmFkZSc7XG5leHBvcnQgeyBfRmFkZSBhcyBGYWRlIH07XG5pbXBvcnQgX0Zvcm0gZnJvbSAnLi9Gb3JtJztcbmV4cG9ydCB7IF9Gb3JtIGFzIEZvcm0gfTtcbmltcG9ydCBfRm9ybUNvbnRyb2wgZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5leHBvcnQgeyBfRm9ybUNvbnRyb2wgYXMgRm9ybUNvbnRyb2wgfTtcbmltcG9ydCBfRm9ybUNoZWNrIGZyb20gJy4vRm9ybUNoZWNrJztcbmV4cG9ydCB7IF9Gb3JtQ2hlY2sgYXMgRm9ybUNoZWNrIH07XG5pbXBvcnQgX0Zvcm1Hcm91cCBmcm9tICcuL0Zvcm1Hcm91cCc7XG5leHBvcnQgeyBfRm9ybUdyb3VwIGFzIEZvcm1Hcm91cCB9O1xuaW1wb3J0IF9Gb3JtTGFiZWwgZnJvbSAnLi9Gb3JtTGFiZWwnO1xuZXhwb3J0IHsgX0Zvcm1MYWJlbCBhcyBGb3JtTGFiZWwgfTtcbmltcG9ydCBfRm9ybVRleHQgZnJvbSAnLi9Gb3JtVGV4dCc7XG5leHBvcnQgeyBfRm9ybVRleHQgYXMgRm9ybVRleHQgfTtcbmltcG9ydCBfQ29udGFpbmVyIGZyb20gJy4vQ29udGFpbmVyJztcbmV4cG9ydCB7IF9Db250YWluZXIgYXMgQ29udGFpbmVyIH07XG5pbXBvcnQgX0ltYWdlIGZyb20gJy4vSW1hZ2UnO1xuZXhwb3J0IHsgX0ltYWdlIGFzIEltYWdlIH07XG5pbXBvcnQgX0ZpZ3VyZSBmcm9tICcuL0ZpZ3VyZSc7XG5leHBvcnQgeyBfRmlndXJlIGFzIEZpZ3VyZSB9O1xuaW1wb3J0IF9JbnB1dEdyb3VwIGZyb20gJy4vSW5wdXRHcm91cCc7XG5leHBvcnQgeyBfSW5wdXRHcm91cCBhcyBJbnB1dEdyb3VwIH07XG5pbXBvcnQgX0p1bWJvdHJvbiBmcm9tICcuL0p1bWJvdHJvbic7XG5leHBvcnQgeyBfSnVtYm90cm9uIGFzIEp1bWJvdHJvbiB9O1xuaW1wb3J0IF9MaXN0R3JvdXAgZnJvbSAnLi9MaXN0R3JvdXAnO1xuZXhwb3J0IHsgX0xpc3RHcm91cCBhcyBMaXN0R3JvdXAgfTtcbmltcG9ydCBfTGlzdEdyb3VwSXRlbSBmcm9tICcuL0xpc3RHcm91cEl0ZW0nO1xuZXhwb3J0IHsgX0xpc3RHcm91cEl0ZW0gYXMgTGlzdEdyb3VwSXRlbSB9O1xuaW1wb3J0IF9NZWRpYSBmcm9tICcuL01lZGlhJztcbmV4cG9ydCB7IF9NZWRpYSBhcyBNZWRpYSB9O1xuaW1wb3J0IF9Nb2RhbCBmcm9tICcuL01vZGFsJztcbmV4cG9ydCB7IF9Nb2RhbCBhcyBNb2RhbCB9O1xuaW1wb3J0IF9Nb2RhbEJvZHkgZnJvbSAnLi9Nb2RhbEJvZHknO1xuZXhwb3J0IHsgX01vZGFsQm9keSBhcyBNb2RhbEJvZHkgfTtcbmltcG9ydCBfTW9kYWxEaWFsb2cgZnJvbSAnLi9Nb2RhbERpYWxvZyc7XG5leHBvcnQgeyBfTW9kYWxEaWFsb2cgYXMgTW9kYWxEaWFsb2cgfTtcbmltcG9ydCBfTW9kYWxGb290ZXIgZnJvbSAnLi9Nb2RhbEZvb3Rlcic7XG5leHBvcnQgeyBfTW9kYWxGb290ZXIgYXMgTW9kYWxGb290ZXIgfTtcbmltcG9ydCBfTW9kYWxUaXRsZSBmcm9tICcuL01vZGFsVGl0bGUnO1xuZXhwb3J0IHsgX01vZGFsVGl0bGUgYXMgTW9kYWxUaXRsZSB9O1xuaW1wb3J0IF9OYXYgZnJvbSAnLi9OYXYnO1xuZXhwb3J0IHsgX05hdiBhcyBOYXYgfTtcbmltcG9ydCBfTmF2YmFyIGZyb20gJy4vTmF2YmFyJztcbmV4cG9ydCB7IF9OYXZiYXIgYXMgTmF2YmFyIH07XG5pbXBvcnQgX05hdmJhckJyYW5kIGZyb20gJy4vTmF2YmFyQnJhbmQnO1xuZXhwb3J0IHsgX05hdmJhckJyYW5kIGFzIE5hdmJhckJyYW5kIH07XG5pbXBvcnQgX05hdkRyb3Bkb3duIGZyb20gJy4vTmF2RHJvcGRvd24nO1xuZXhwb3J0IHsgX05hdkRyb3Bkb3duIGFzIE5hdkRyb3Bkb3duIH07XG5pbXBvcnQgX05hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcbmV4cG9ydCB7IF9OYXZJdGVtIGFzIE5hdkl0ZW0gfTtcbmltcG9ydCBfT3ZlcmxheSBmcm9tICcuL092ZXJsYXknO1xuZXhwb3J0IHsgX092ZXJsYXkgYXMgT3ZlcmxheSB9O1xuaW1wb3J0IF9PdmVybGF5VHJpZ2dlciBmcm9tICcuL092ZXJsYXlUcmlnZ2VyJztcbmV4cG9ydCB7IF9PdmVybGF5VHJpZ2dlciBhcyBPdmVybGF5VHJpZ2dlciB9O1xuaW1wb3J0IF9QYWdlSXRlbSBmcm9tICcuL1BhZ2VJdGVtJztcbmV4cG9ydCB7IF9QYWdlSXRlbSBhcyBQYWdlSXRlbSB9O1xuaW1wb3J0IF9QYWdpbmF0aW9uIGZyb20gJy4vUGFnaW5hdGlvbic7XG5leHBvcnQgeyBfUGFnaW5hdGlvbiBhcyBQYWdpbmF0aW9uIH07XG5pbXBvcnQgX1BvcG92ZXIgZnJvbSAnLi9Qb3BvdmVyJztcbmV4cG9ydCB7IF9Qb3BvdmVyIGFzIFBvcG92ZXIgfTtcbmltcG9ydCBfUHJvZ3Jlc3NCYXIgZnJvbSAnLi9Qcm9ncmVzc0Jhcic7XG5leHBvcnQgeyBfUHJvZ3Jlc3NCYXIgYXMgUHJvZ3Jlc3NCYXIgfTtcbmltcG9ydCBfUmVzcG9uc2l2ZUVtYmVkIGZyb20gJy4vUmVzcG9uc2l2ZUVtYmVkJztcbmV4cG9ydCB7IF9SZXNwb25zaXZlRW1iZWQgYXMgUmVzcG9uc2l2ZUVtYmVkIH07XG5pbXBvcnQgX1JvdyBmcm9tICcuL1Jvdyc7XG5leHBvcnQgeyBfUm93IGFzIFJvdyB9O1xuaW1wb3J0IF9TYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5leHBvcnQgeyBfU2FmZUFuY2hvciBhcyBTYWZlQW5jaG9yIH07XG5pbXBvcnQgX1NwbGl0QnV0dG9uIGZyb20gJy4vU3BsaXRCdXR0b24nO1xuZXhwb3J0IHsgX1NwbGl0QnV0dG9uIGFzIFNwbGl0QnV0dG9uIH07XG5pbXBvcnQgX1RhYiBmcm9tICcuL1RhYic7XG5leHBvcnQgeyBfVGFiIGFzIFRhYiB9O1xuaW1wb3J0IF9UYWJDb250YWluZXIgZnJvbSAnLi9UYWJDb250YWluZXInO1xuZXhwb3J0IHsgX1RhYkNvbnRhaW5lciBhcyBUYWJDb250YWluZXIgfTtcbmltcG9ydCBfVGFiQ29udGVudCBmcm9tICcuL1RhYkNvbnRlbnQnO1xuZXhwb3J0IHsgX1RhYkNvbnRlbnQgYXMgVGFiQ29udGVudCB9O1xuaW1wb3J0IF9UYWJsZSBmcm9tICcuL1RhYmxlJztcbmV4cG9ydCB7IF9UYWJsZSBhcyBUYWJsZSB9O1xuaW1wb3J0IF9UYWJQYW5lIGZyb20gJy4vVGFiUGFuZSc7XG5leHBvcnQgeyBfVGFiUGFuZSBhcyBUYWJQYW5lIH07XG5pbXBvcnQgX1RhYnMgZnJvbSAnLi9UYWJzJztcbmV4cG9ydCB7IF9UYWJzIGFzIFRhYnMgfTtcbmltcG9ydCBfVGhlbWVQcm92aWRlciBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuZXhwb3J0IHsgX1RoZW1lUHJvdmlkZXIgYXMgVGhlbWVQcm92aWRlciB9O1xuaW1wb3J0IF9Ub2dnbGVCdXR0b24gZnJvbSAnLi9Ub2dnbGVCdXR0b24nO1xuZXhwb3J0IHsgX1RvZ2dsZUJ1dHRvbiBhcyBUb2dnbGVCdXR0b24gfTtcbmltcG9ydCBfVG9nZ2xlQnV0dG9uR3JvdXAgZnJvbSAnLi9Ub2dnbGVCdXR0b25Hcm91cCc7XG5leHBvcnQgeyBfVG9nZ2xlQnV0dG9uR3JvdXAgYXMgVG9nZ2xlQnV0dG9uR3JvdXAgfTtcbmltcG9ydCBfVG9vbHRpcCBmcm9tICcuL1Rvb2x0aXAnO1xuZXhwb3J0IHsgX1Rvb2x0aXAgYXMgVG9vbHRpcCB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZSBjb21wb25lbnRzLlxuICogSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3IgZXhhbXBsZSB3ZSBjYW5cbiAqIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMCB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHsoc3RhdGUpID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBBcyBub3RlZCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2Vzbid0IF9kb18gYW55dGhpbmcgYnkgaXRzZWxmIHRvIGl0cyBjaGlsZCBjb21wb25lbnQuXG4gKiBXaGF0IGl0IGRvZXMgZG8gaXMgdHJhY2sgdHJhbnNpdGlvbiBzdGF0ZXMgb3ZlciB0aW1lIHNvIHlvdSBjYW4gdXBkYXRlIHRoZVxuICogY29tcG9uZW50IChzdWNoIGFzIGJ5IGFkZGluZyBzdHlsZXMgb3IgY2xhc3Nlcykgd2hlbiBpdCBjaGFuZ2VzIHN0YXRlcy5cbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnQgYmVnaW5zIHRoZVxuICogXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb20gaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSxcbiAqIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlXG4gKiBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc3hcbiAqIHN0YXRlID0geyBpbjogZmFsc2UgfTtcbiAqXG4gKiB0b2dnbGVFbnRlclN0YXRlID0gKCkgPT4ge1xuICogICB0aGlzLnNldFN0YXRlKHsgaW46IHRydWUgfSk7XG4gKiB9XG4gKlxuICogcmVuZGVyKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17NTAwfSAvPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVudGVyU3RhdGV9PkNsaWNrIHRvIEVudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZSBhbmRcbiAqIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlcyB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbSBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICpcbiAqICMjIFRpbWluZ1xuICpcbiAqIFRpbWluZyBpcyBvZnRlbiB0aGUgdHJpY2tpZXN0IHBhcnQgb2YgYW5pbWF0aW9uLCBtaXN0YWtlcyBjYW4gcmVzdWx0IGluIHNsaWdodCBkZWxheXNcbiAqIHRoYXQgYXJlIGhhcmQgdG8gcGluIGRvd24uIEEgY29tbW9uIGV4YW1wbGUgaXMgd2hlbiB5b3Ugd2FudCB0byBhZGQgYW4gZXhpdCB0cmFuc2l0aW9uLFxuICogeW91IHNob3VsZCBzZXQgdGhlIGRlc2lyZWQgZmluYWwgc3R5bGVzIHdoZW4gdGhlIHN0YXRlIGlzIGAnZXhpdGluZydgLiBUaGF0J3Mgd2hlbiB0aGVcbiAqIHRyYW5zaXRpb24gdG8gdGhvc2Ugc3R5bGVzIHdpbGwgc3RhcnQgYW5kLCBpZiB5b3UgbWF0Y2hlZCB0aGUgYHRpbWVvdXRgIHByb3Agd2l0aCB0aGVcbiAqIENTUyBUcmFuc2l0aW9uIGR1cmF0aW9uLCBpdCB3aWxsIGVuZCBleGFjdGx5IHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiA+ICoqTm90ZSoqOiBGb3Igc2ltcGxlciB0cmFuc2l0aW9ucyB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBtaWdodCBiZSBlbm91Z2gsIGJ1dFxuICogPiB0YWtlIGludG8gYWNjb3VudCB0aGF0IGl0J3MgcGxhdGZvcm0tYWdub3N0aWMsIHdoaWxlIHRoZSBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiA+IFtmb3JjZXMgcmVmbG93c10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzUwMDczMDNlNzI5YTc0YmU2NmEyMWMzZTIyMDVlNDkxNjgyMTUyNGIvc3JjL0NTU1RyYW5zaXRpb24uanMjTDIwOC1MMjE1KVxuICogPiBpbiBvcmRlciB0byBtYWtlIG1vcmUgY29tcGxleCB0cmFuc2l0aW9ucyBtb3JlIHByZWRpY3RhYmxlLiBGb3IgZXhhbXBsZSwgZXZlbiB0aG91Z2hcbiAqID4gY2xhc3NlcyBgZXhhbXBsZS1lbnRlcmAgYW5kIGBleGFtcGxlLWVudGVyLWFjdGl2ZWAgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgb25lIGFmdGVyXG4gKiA+IGFub3RoZXIsIHlvdSBjYW4gc3RpbGwgdHJhbnNpdGlvbiBmcm9tIG9uZSB0byB0aGUgb3RoZXIgYmVjYXVzZSBvZiB0aGUgZm9yY2VkIHJlZmxvd1xuICogPiAocmVhZCBbdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pc3N1ZXMvMTU5I2lzc3VlY29tbWVudC0zMjI3NjExNzEpXG4gKiA+IGZvciBtb3JlIGluZm8pLiBUYWtlIHRoaXMgaW50byBhY2NvdW50IHdoZW4gY2hvb3NpbmcgYmV0d2VlbiBgVHJhbnNpdGlvbmAgYW5kXG4gKiA+IGBDU1NUcmFuc2l0aW9uYC5cbiAqL1xuXG5leHBvcnRzLkVYSVRJTkcgPSBFWElUSU5HO1xuXG52YXIgVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dC50cmFuc2l0aW9uR3JvdXA7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkdyb3VwOiBudWxsIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG5cbiAgICB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9OyAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cblxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjtcbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cCA/IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpOyAvLyBGSVhNRTogYXBwZWFyIHRpbWVvdXQ/XG5cblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5lbnRlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzXG4gICAqICgnZW50ZXJpbmcnLCAnZW50ZXJlZCcsICdleGl0aW5nJywgJ2V4aXRlZCcsICd1bm1vdW50ZWQnKSwgd2hpY2ggY2FuIGJlIHVzZWRcbiAgICogdG8gYXBwbHkgY29udGV4dCBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIHRpbWVvdXQ9ezE1MH0+XG4gICAqICAgeyhzdGF0dXMpID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0dXN9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZSBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLlxuICAgKiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdCBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlXG4gICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZXJlIGFyZSBubyBzcGVjaWZpYyBcImFwcGVhclwiIHN0YXRlcy4gYGFwcGVhcmAgb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgYGVudGVyYCB0cmFuc2l0aW9uLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMgbGlrZTogYHRpbWVvdXQ9ezUwMH1gLFxuICAgKiBvciBpbmRpdmlkdWFsbHkgbGlrZTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZSA6IHt9OztcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfYXNzaWduMi5kZWZhdWx0IHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdHJhbnNmb3JtQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvdHJhbnNmb3JtQ29udGV4dFwiKSk7XG5cbnZhciBGb3JtQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoe1xuICBjb250cm9sSWQ6IHVuZGVmaW5lZFxufSk7XG5cbkZvcm1Db250ZXh0LlRyYW5zZm9ybSA9ICgwLCBfdHJhbnNmb3JtQ29udGV4dC5kZWZhdWx0KShGb3JtQ29udGV4dCk7XG52YXIgX2RlZmF1bHQgPSBGb3JtQ29udGV4dDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsIFwiQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50XCIpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIik7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpbnZhcmlhbnQodG8gIT09IHVuZGVmaW5lZCwgJ1lvdSBtdXN0IHNwZWNpZnkgdGhlIFwidG9cIiBwcm9wZXJ0eScpO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgaGlzdG9yeS5sb2NhdGlvbikgOiB0bztcblxuICAgIHZhciBocmVmID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgTWVtb3J5Um91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi9MaW5rXCI7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInRvXCIsIFwiZXhhY3RcIiwgXCJzdHJpY3RcIiwgXCJsb2NhdGlvblwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwic3R5bGVcIiwgXCJpc0FjdGl2ZVwiLCBcImFyaWEtY3VycmVudFwiXSk7XG5cbiAgdmFyIHBhdGggPSAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodG8pKSA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87XG5cbiAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbihcIiBcIikgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGxcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBcImFyaWEtY3VycmVudFwiOiBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6IFwiYWN0aXZlXCIsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFwicGFnZVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Qcm9tcHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlR2VuZXJhdG9yID0gZnVuY3Rpb24gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKSB7XG4gIHZhciBjYWNoZUtleSA9IHBhdHRlcm47XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGNvbXBpbGVkR2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0dGVybik7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZEdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRHZW5lcmF0b3I7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdHRlcm4gYW5kIHBhcmFtZXRlcnMuXG4gKi9cbnZhciBnZW5lcmF0ZVBhdGggPSBmdW5jdGlvbiBnZW5lcmF0ZVBhdGgoKSB7XG4gIHZhciBwYXR0ZXJuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIi9cIjtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHBhdHRlcm4gPT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH1cbiAgdmFyIGdlbmVyYXRvciA9IGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybik7XG4gIHJldHVybiBnZW5lcmF0b3IocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGlmICh0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBwcmV2VG8gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuICAgIHZhciBuZXh0VG8gPSBjcmVhdGVMb2NhdGlvbih0aGlzLnByb3BzLnRvKTtcblxuICAgIGlmIChsb2NhdGlvbnNBcmVFcXVhbChwcmV2VG8sIG5leHRUbykpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdSdyZSBjdXJyZW50bHkgb246IFwiICsgKFwiXFxcIlwiICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXB1dGVUbyA9IGZ1bmN0aW9uIGNvbXB1dGVUbyhfcmVmKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIHRvID0gX3JlZi50bztcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSB7XG4gICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5wZXJmb3JtID0gZnVuY3Rpb24gcGVyZm9ybSgpIHtcbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICB2YXIgcHVzaCA9IHRoaXMucHJvcHMucHVzaDtcblxuICAgIHZhciB0byA9IHRoaXMuY29tcHV0ZVRvKHRoaXMucHJvcHMpO1xuXG4gICAgaWYgKHB1c2gpIHtcbiAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgfVxuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJQVVNIXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUkVQTEFDRVwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIi9cIlxufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTd2l0Y2ggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Td2l0Y2hcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvZ2VuZXJhdGVQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHtcbiAgICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiaW1wb3J0IF9Ccm93c2VyUm91dGVyIGZyb20gXCIuL0Jyb3dzZXJSb3V0ZXJcIjtcbmV4cG9ydCB7IF9Ccm93c2VyUm91dGVyIGFzIEJyb3dzZXJSb3V0ZXIgfTtcbmltcG9ydCBfSGFzaFJvdXRlciBmcm9tIFwiLi9IYXNoUm91dGVyXCI7XG5leHBvcnQgeyBfSGFzaFJvdXRlciBhcyBIYXNoUm91dGVyIH07XG5pbXBvcnQgX0xpbmsgZnJvbSBcIi4vTGlua1wiO1xuZXhwb3J0IHsgX0xpbmsgYXMgTGluayB9O1xuaW1wb3J0IF9NZW1vcnlSb3V0ZXIgZnJvbSBcIi4vTWVtb3J5Um91dGVyXCI7XG5leHBvcnQgeyBfTWVtb3J5Um91dGVyIGFzIE1lbW9yeVJvdXRlciB9O1xuaW1wb3J0IF9OYXZMaW5rIGZyb20gXCIuL05hdkxpbmtcIjtcbmV4cG9ydCB7IF9OYXZMaW5rIGFzIE5hdkxpbmsgfTtcbmltcG9ydCBfUHJvbXB0IGZyb20gXCIuL1Byb21wdFwiO1xuZXhwb3J0IHsgX1Byb21wdCBhcyBQcm9tcHQgfTtcbmltcG9ydCBfUmVkaXJlY3QgZnJvbSBcIi4vUmVkaXJlY3RcIjtcbmV4cG9ydCB7IF9SZWRpcmVjdCBhcyBSZWRpcmVjdCB9O1xuaW1wb3J0IF9Sb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuZXhwb3J0IHsgX1JvdXRlIGFzIFJvdXRlIH07XG5pbXBvcnQgX1JvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcbmV4cG9ydCB7IF9Sb3V0ZXIgYXMgUm91dGVyIH07XG5pbXBvcnQgX1N0YXRpY1JvdXRlciBmcm9tIFwiLi9TdGF0aWNSb3V0ZXJcIjtcbmV4cG9ydCB7IF9TdGF0aWNSb3V0ZXIgYXMgU3RhdGljUm91dGVyIH07XG5pbXBvcnQgX1N3aXRjaCBmcm9tIFwiLi9Td2l0Y2hcIjtcbmV4cG9ydCB7IF9Td2l0Y2ggYXMgU3dpdGNoIH07XG5pbXBvcnQgX2dlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcbmV4cG9ydCB7IF9nZW5lcmF0ZVBhdGggYXMgZ2VuZXJhdGVQYXRoIH07XG5pbXBvcnQgX21hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcbmV4cG9ydCB7IF9tYXRjaFBhdGggYXMgbWF0Y2hQYXRoIH07XG5pbXBvcnQgX3dpdGhSb3V0ZXIgZnJvbSBcIi4vd2l0aFJvdXRlclwiO1xuZXhwb3J0IHsgX3dpdGhSb3V0ZXIgYXMgd2l0aFJvdXRlciB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZm9yd2FyZFJlZjtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZm9yd2FyZFJlZihyZW5kZXJGbiwgX3JlZikge1xuICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgcHJvcFR5cGVzID0gX3JlZi5wcm9wVHlwZXMsXG4gICAgICBkZWZhdWx0UHJvcHMgPSBfcmVmLmRlZmF1bHRQcm9wcyxcbiAgICAgIF9yZWYkYWxsb3dGYWxsYmFjayA9IF9yZWYuYWxsb3dGYWxsYmFjayxcbiAgICAgIGFsbG93RmFsbGJhY2sgPSBfcmVmJGFsbG93RmFsbGJhY2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRhbGxvd0ZhbGxiYWNrO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHJldHVybiByZW5kZXJGbihwcm9wcywgcmVmKTtcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKHJlbmRlciwge1xuICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZVxuICB9KTtcbiAgaWYgKF9yZWFjdC5kZWZhdWx0LmZvcndhcmRSZWYgfHwgIWFsbG93RmFsbGJhY2spIHJldHVybiBPYmplY3QuYXNzaWduKF9yZWFjdC5kZWZhdWx0LmZvcndhcmRSZWYocmVuZGVyKSwge1xuICAgIHByb3BUeXBlczogcHJvcFR5cGVzLFxuICAgIGRlZmF1bHRQcm9wczogZGVmYXVsdFByb3BzXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gcmVuZGVyKHByb3BzLCBudWxsKTtcbiAgfSwge1xuICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICBwcm9wVHlwZXM6IHByb3BUeXBlcyxcbiAgICBkZWZhdWx0UHJvcHM6IGRlZmF1bHRQcm9wc1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsYmFyU2l6ZTtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5ET01cIikpO1xuXG52YXIgc2l6ZTtcblxuZnVuY3Rpb24gc2Nyb2xsYmFyU2l6ZShyZWNhbGMpIHtcbiAgaWYgKCFzaXplICYmIHNpemUgIT09IDAgfHwgcmVjYWxjKSB7XG4gICAgaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3aXRoQ29udGV4dENvbnN1bWVyIGZyb20gJ3JlYWN0L3V0aWxzL3dpdGhfY29udGV4dF9jb25zdW1lci5qc3gnO1xuaW1wb3J0ICogYXMgU2Vzc2lvbiBmcm9tICdyZWFjdC9zZXJ2aWNlcy9zZXNzaW9uLmpzJ1xuXG5jb25zdCBBdXRoZW50aWNhdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgand0OiBudWxsLFxuICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICBsb2dpbjogKCkgPT4ge30sXG4gIGxvZ291dDogKCkgPT4ge31cbn0pO1xuXG5jb25zdCBBdXRoZW50aWNhdGlvbkNvbnN1bWVyID0gQXV0aGVudGljYXRpb25Db250ZXh0LkNvbnN1bWVyO1xuXG5jbGFzcyBBdXRoZW50aWNhdGlvblByb3ZpZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCBqd3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkpXVFwiKTtcbiAgICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSAhIWp3dDtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBqd3QsXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgfTtcblxuICAgIHRoaXMubG9naW4gPSB0aGlzLmxvZ2luLmJpbmQodGhpcyk7XG4gICAgdGhpcy5sb2dvdXQgPSB0aGlzLmxvZ291dC5iaW5kKHRoaXMpO1xuICB9XG4gIFxuICBsb2dpbih7IGVtYWlsLCBwYXNzd29yZCB9KSB7XG4gICAgcmV0dXJuIFNlc3Npb25cbiAgICAgIC5jcmVhdGVTZXNzaW9uKGVtYWlsLCBwYXNzd29yZClcbiAgICAgIC50aGVuKCBqd3QgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBqd3Q6IGp3dCxcbiAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6ICEhand0LFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxuICBsb2dvdXQoKSB7XG4gICAgU2Vzc2lvbi5kZWxldGVTZXNzaW9uKCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBqd3Q6IG51bGwsXG4gICAgICAgICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGxvZ2luLCBsb2dvdXQgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBqd3QsIGlzQXV0aGVudGljYXRlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgcHJvdmlkZXJWYWx1ZXMgPSB7XG4gICAgICBqd3QsXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgICBsb2dpbixcbiAgICAgIGxvZ291dCxcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICA8QXV0aGVudGljYXRpb25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm92aWRlclZhbHVlc30+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvQXV0aGVudGljYXRpb25Db250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgd2l0aEF1dGhlbnRpY2F0aW9uID0gd2l0aENvbnRleHRDb25zdW1lcihBdXRoZW50aWNhdGlvbkNvbnN1bWVyKTtcblxuZXhwb3J0IHsgXG4gIEF1dGhlbnRpY2F0aW9uQ29uc3VtZXIsXG4gIEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIsXG4gIHdpdGhBdXRoZW50aWNhdGlvbixcbn0iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUwgRE9NIGFuZCBTVkcgRE9NIG1heSBoYXZlIGRpZmZlcmVudCBzdXBwb3J0IGxldmVscyxcbiAgLy8gc28gd2UgbmVlZCB0byBjaGVjayBvbiBjb250ZXh0IGluc3RlYWQgb2YgYSBkb2N1bWVudCByb290IGVsZW1lbnQuXG4gIHJldHVybiBfaW5ET00uZGVmYXVsdCA/IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgaWYgKGNvbnRleHQuY29udGFpbnMpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrKGNvbnRleHQsIG5vZGUpO1xuICAgIH1cbiAgfSA6IGZhbGxiYWNrO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZmFsbGJhY2soY29udGV4dCwgbm9kZSkge1xuICBpZiAobm9kZSkgZG8ge1xuICAgIGlmIChub2RlID09PSBjb250ZXh0KSByZXR1cm4gdHJ1ZTtcbiAgfSB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcGVydGllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcHJvcGVydGllc1wiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZVwiKSk7XG5cbmZ1bmN0aW9uIG9uRW5kKG5vZGUsIGhhbmRsZXIsIGR1cmF0aW9uKSB7XG4gIHZhciBmYWtlRXZlbnQgPSB7XG4gICAgdGFyZ2V0OiBub2RlLFxuICAgIGN1cnJlbnRUYXJnZXQ6IG5vZGVcbiAgfSxcbiAgICAgIGJhY2t1cDtcbiAgaWYgKCFfcHJvcGVydGllcy5kZWZhdWx0LmVuZCkgZHVyYXRpb24gPSAwO2Vsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIGR1cmF0aW9uID0gcGFyc2VEdXJhdGlvbihub2RlKSB8fCAwO1xuXG4gIGlmIChfcHJvcGVydGllcy5kZWZhdWx0LmVuZCkge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihfcHJvcGVydGllcy5kZWZhdWx0LmVuZCwgZG9uZSwgZmFsc2UpO1xuICAgIGJhY2t1cCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRvbmUoZmFrZUV2ZW50KTtcbiAgICB9LCAoZHVyYXRpb24gfHwgMTAwKSAqIDEuNSk7XG4gIH0gZWxzZSBzZXRUaW1lb3V0KGRvbmUuYmluZChudWxsLCBmYWtlRXZlbnQpLCAwKTtcblxuICBmdW5jdGlvbiBkb25lKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkgcmV0dXJuO1xuICAgIGNsZWFyVGltZW91dChiYWNrdXApO1xuICAgIGV2ZW50LnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKF9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kLCBkb25lKTtcbiAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gIH1cbn1cblxub25FbmQuX3BhcnNlRHVyYXRpb24gPSBwYXJzZUR1cmF0aW9uO1xudmFyIF9kZWZhdWx0ID0gb25FbmQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gcGFyc2VEdXJhdGlvbihub2RlKSB7XG4gIHZhciBzdHIgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsIF9wcm9wZXJ0aWVzLmRlZmF1bHQuZHVyYXRpb24pLFxuICAgICAgbXVsdCA9IHN0ci5pbmRleE9mKCdtcycpID09PSAtMSA/IDEwMDAgOiAxO1xuICByZXR1cm4gcGFyc2VGbG9hdChzdHIpICogbXVsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1JlcXVpcmVkRm9yQTExeTtcbmZ1bmN0aW9uIGlzUmVxdWlyZWRGb3JBMTF5KHZhbGlkYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lU2FmZSArICdgIGlzIHJlcXVpcmVkIHRvIG1ha2UgJyArICgnYCcgKyBjb21wb25lbnROYW1lU2FmZSArICdgIGFjY2Vzc2libGUgZm9yIHVzZXJzIG9mIGFzc2lzdGl2ZSAnKSArICd0ZWNobm9sb2dpZXMgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy4nKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiA1ID8gX2xlbiAtIDUgOiAwKSwgX2tleSA9IDU7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDVdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQoYXJncykpO1xuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBjYW1lbGl6ZTtcbnZhciBySHlwaGVuID0gLy0oLikvZztcblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShySHlwaGVuLCBmdW5jdGlvbiAoXywgY2hyKSB7XG4gICAgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblwiKSk7XG5cbmV4cG9ydHMub24gPSBfb24uZGVmYXVsdDtcblxudmFyIF9vZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29mZlwiKSk7XG5cbmV4cG9ydHMub2ZmID0gX29mZi5kZWZhdWx0O1xuXG52YXIgX2ZpbHRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZmlsdGVyXCIpKTtcblxuZXhwb3J0cy5maWx0ZXIgPSBfZmlsdGVyLmRlZmF1bHQ7XG5cbnZhciBfbGlzdGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9saXN0ZW5cIikpO1xuXG5leHBvcnRzLmxpc3RlbiA9IF9saXN0ZW4uZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgb246IF9vbi5kZWZhdWx0LFxuICBvZmY6IF9vZmYuZGVmYXVsdCxcbiAgZmlsdGVyOiBfZmlsdGVyLmRlZmF1bHQsXG4gIGxpc3RlbjogX2xpc3Rlbi5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiaW1wb3J0IHsgcmV0cmlldmVKV1QgfSBmcm9tIFwicmVhY3Qvc2VydmljZXMvc2Vzc2lvblwiO1xuXG5mdW5jdGlvbiBzZW5kQXBpUmVxdWVzdCh7IHVybCwgbWV0aG9kID0gXCJHRVRcIiwgcGFyYW1zID0gbnVsbCB9KSB7XG4gIGNvbnN0IGp3dCA9IHJldHJpZXZlSldUKCk7XG5cbiAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gIGhlYWRlcnMuYXBwZW5kKFwiQWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICBoZWFkZXJzLmFwcGVuZChcIkF1dGhvcml6YXRpb25cIiwgand0KTtcblxuICBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSkge1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9XG4gIGNvbnNvbGUubG9nKHByb2Nlc3MuZW52KTtcbiAgaWYgKHByb2Nlc3MuZW52LkVMRUNUUk9OKSB7XG4gICAgdXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMzBcIiArIHVybDtcbiAgICBjb25zb2xlLmxvZyhcImNvdWNvdVwiKTtcbiAgfVxuICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiBtZXRob2QsXG4gICAgaGVhZGVyczogaGVhZGVycyxcbiAgICBib2R5OiBwYXJhbXMgJiYgSlNPTi5zdHJpbmdpZnkocGFyYW1zKVxuICB9KS50aGVuKGhhbmRsZVJlc3BvbnNlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VuZEFwaVJlcXVlc3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgd2l0aENvbnRleHRDb25zdW1lciBmcm9tIFwicmVhY3QvdXRpbHMvd2l0aF9jb250ZXh0X2NvbnN1bWVyLmpzeFwiO1xuXG5jb25zdCBUaGVtZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgdGhlbWU6IFwiZGFya1wiLFxuICBzZXRUaGVtZUxpZ2h0OiAoKSA9PiB7fSxcbiAgc2V0VGhlbWVEYXJrOiAoKSA9PiB7fSxcbiAgdG9nZ2xlVGhlbWU6ICgpID0+IHt9LFxufSk7XG5cbmNvbnN0IFRoZW1lQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbmNsYXNzIFRoZW1lUHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0aGVtZTogXCJkYXJrXCJcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRUaGVtZSA9IHRoaXMuc2V0VGhlbWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRvZ2dsZVRoZW1lID0gdGhpcy50b2dnbGVUaGVtZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc2V0VGhlbWUodmFsdWUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRoZW1lOiB2YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgdG9nZ2xlVGhlbWUoKSB7XG4gICAgY29uc3QgeyB0aGVtZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHN3aXRjaCh0aGVtZSl7XG4gICAgICBjYXNlIFwiZGFya1wiOlxuICAgICAgICB0aGlzLnNldFRoZW1lKFwibGlnaHRcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGRlZmF1bHQ6XG4gICAgICBjYXNlIFwibGlnaHRcIjpcbiAgICAgICAgdGhpcy5zZXRUaGVtZShcImRhcmtcIik7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc2V0VGhlbWUsIHRvZ2dsZVRoZW1lIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgdGhlbWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHByb3ZpZGVyVmFsdWVzID0ge1xuICAgICAgdGhlbWUsXG4gICAgICBzZXRUaGVtZURhcms6ICgpID0+IHNldFRoZW1lKFwiZGFya1wiKSAsXG4gICAgICBzZXRUaGVtZUxpZ2h0OiAoKSA9PiBzZXRUaGVtZShcImxpZ2h0XCIpICxcbiAgICAgIHRvZ2dsZVRoZW1lLFxuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgIDxUaGVtZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3ZpZGVyVmFsdWVzfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9UaGVtZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCB3aXRoVGhlbWUgPSB3aXRoQ29udGV4dENvbnN1bWVyKFRoZW1lQ29uc3VtZXIpO1xuXG5leHBvcnQgeyBUaGVtZUNvbnN1bWVyLCBUaGVtZVByb3ZpZGVyLCB3aXRoVGhlbWUgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IGV4cG9ydHMudHJhbnNmb3JtID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciB0cmFuc2Zvcm0gPSAndHJhbnNmb3JtJztcbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xudmFyIHByZWZpeCwgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQ7XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSwgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uVGltaW5nLCB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmc7XG5leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbmV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5O1xudmFyIGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25UaW1pbmcsIGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmc7XG5leHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb247XG5leHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lO1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcGVydCA9IGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCk7XG5cbiAgcHJlZml4ID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnByZWZpeDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC50cmFuc2l0aW9uRW5kO1xuICBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5hbmltYXRpb25FbmQ7XG4gIGV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtID0gcHJlZml4ICsgXCItXCIgKyB0cmFuc2Zvcm07XG4gIGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1wcm9wZXJ0eVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLW5hbWVcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgZW5kOiB0cmFuc2l0aW9uRW5kLFxuICBwcm9wZXJ0eTogdHJhbnNpdGlvblByb3BlcnR5LFxuICB0aW1pbmc6IHRyYW5zaXRpb25UaW1pbmcsXG4gIGRlbGF5OiB0cmFuc2l0aW9uRGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICB2YXIgdmVuZG9yTWFwID0ge1xuICAgIE86IGZ1bmN0aW9uIE8oZSkge1xuICAgICAgcmV0dXJuIFwib1wiICsgZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgTW96OiBmdW5jdGlvbiBNb3ooZSkge1xuICAgICAgcmV0dXJuIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIFdlYmtpdDogZnVuY3Rpb24gV2Via2l0KGUpIHtcbiAgICAgIHJldHVybiBcIndlYmtpdFwiICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gXCJNU1wiICsgZTtcbiAgICB9XG4gIH07XG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcbiAgdmFyIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArIFwiVHJhbnNpdGlvblByb3BlcnR5XCIgaW4gc3R5bGUpIHtcbiAgICAgIHByZWZpeCA9IFwiLVwiICsgdmVuZG9yLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0cmFuc2l0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ1RyYW5zaXRpb25FbmQnKTtcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdBbmltYXRpb25FbmQnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdHJhbnNpdGlvbkVuZCAmJiAndHJhbnNpdGlvblByb3BlcnR5JyBpbiBzdHlsZSkgdHJhbnNpdGlvbkVuZCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgaWYgKCFhbmltYXRpb25FbmQgJiYgJ2FuaW1hdGlvbk5hbWUnIGluIHN0eWxlKSBhbmltYXRpb25FbmQgPSAnYW5pbWF0aW9uZW5kJztcbiAgc3R5bGUgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLFxuICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQsXG4gICAgcHJlZml4OiBwcmVmaXhcbiAgfTtcbn0iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBEcm9wZG93bkNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KHtcbiAgbWVudVJlZjogZnVuY3Rpb24gbWVudVJlZigpIHt9LFxuICB0b2dnbGVSZWY6IGZ1bmN0aW9uIHRvZ2dsZVJlZigpIHt9LFxuICBvblRvZ2dsZTogZnVuY3Rpb24gb25Ub2dnbGUoKSB7fSxcbiAgdG9nZ2xlTm9kZTogdW5kZWZpbmVkLFxuICBhbGlnbkVuZDogbnVsbCxcbiAgc2hvdzogbnVsbCxcbiAgZHJvcDogbnVsbFxufSk7XG5cbnZhciBfZGVmYXVsdCA9IERyb3Bkb3duQ29udGV4dDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIF9vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb25cIikpO1xuXG52YXIgX29mZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2ZmXCIpKTtcblxudmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSkge1xuICAgICgwLCBfb24uZGVmYXVsdCkobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgKDAsIF9vZmYuZGVmYXVsdCkobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBsaXN0ZW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwcm9wVmFsdWUpO1xuXG4gIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgUmVhY3RFbGVtZW50ICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Q29tcG9uZW50IG9yIGEgJykgKyAnRE9NRWxlbWVudC4gWW91IGNhbiB1c3VhbGx5IG9idGFpbiBhIFJlYWN0Q29tcG9uZW50IG9yIERPTUVsZW1lbnQgJyArICdmcm9tIGEgUmVhY3RFbGVtZW50IGJ5IGF0dGFjaGluZyBhIHJlZiB0byBpdC4nKTtcbiAgfVxuXG4gIGlmICgocHJvcFR5cGUgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wVmFsdWUucmVuZGVyICE9PSAnZnVuY3Rpb24nKSAmJiBwcm9wVmFsdWUubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Q29tcG9uZW50IG9yIGEgJykgKyAnRE9NRWxlbWVudC4nKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMi5kZWZhdWx0KSh2YWxpZGF0ZSk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbi8vIE1vc3RseSB0YWtlbiBmcm9tIFJlYWN0UHJvcFR5cGVzLlxuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWVTYWZlICsgJ2Agd2FzIG5vdCBzcGVjaWZpZWQgJyArICgnaW4gYCcgKyBjb21wb25lbnROYW1lU2FmZSArICdgLicpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNiA/IF9sZW4gLSA2IDogMCksIF9rZXkgPSA2OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA2XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGUuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lU2FmZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZVNhZmVdLmNvbmNhdChhcmdzKSk7XG4gIH1cblxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLm1ha2VFdmVudEtleSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIFNlbGVjdGFibGVDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dCgpO1xuXG52YXIgbWFrZUV2ZW50S2V5ID0gZnVuY3Rpb24gbWFrZUV2ZW50S2V5KGV2ZW50S2V5LCBocmVmKSB7XG4gIGlmIChldmVudEtleSAhPSBudWxsKSByZXR1cm4gU3RyaW5nKGV2ZW50S2V5KTtcbiAgcmV0dXJuIGhyZWYgfHwgbnVsbDtcbn07XG5cbmV4cG9ydHMubWFrZUV2ZW50S2V5ID0gbWFrZUV2ZW50S2V5O1xudmFyIF9kZWZhdWx0ID0gU2VsZWN0YWJsZUNvbnRleHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxuICogQm9vdHN0cmFwIHY0LjEuMyAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFRoZSBCb290c3RyYXAgQXV0aG9yc1xcbiAqIENvcHlyaWdodCAyMDExLTIwMTggVHdpdHRlciwgSW5jLlxcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXFxuICovXFxuOnJvb3Qge1xcbiAgLS1ibHVlOiAjMDA3YmZmO1xcbiAgLS1pbmRpZ286ICM2NjEwZjI7XFxuICAtLXB1cnBsZTogIzZmNDJjMTtcXG4gIC0tcGluazogI2U4M2U4YztcXG4gIC0tcmVkOiAjZGMzNTQ1O1xcbiAgLS1vcmFuZ2U6ICNmZDdlMTQ7XFxuICAtLXllbGxvdzogI2ZmYzEwNztcXG4gIC0tZ3JlZW46ICMyOGE3NDU7XFxuICAtLXRlYWw6ICMyMGM5OTc7XFxuICAtLWN5YW46ICMxN2EyYjg7XFxuICAtLXdoaXRlOiAjZmZmO1xcbiAgLS1ncmF5OiAjNmM3NTdkO1xcbiAgLS1ncmF5LWRhcms6ICMzNDNhNDA7XFxuICAtLXByaW1hcnk6ICMwMDdiZmY7XFxuICAtLXNlY29uZGFyeTogIzZjNzU3ZDtcXG4gIC0tc3VjY2VzczogIzI4YTc0NTtcXG4gIC0taW5mbzogIzE3YTJiODtcXG4gIC0td2FybmluZzogI2ZmYzEwNztcXG4gIC0tZGFuZ2VyOiAjZGMzNTQ1O1xcbiAgLS1saWdodDogI2Y4ZjlmYTtcXG4gIC0tZGFyazogIzM0M2E0MDtcXG4gIC0tYnJlYWtwb2ludC14czogMDtcXG4gIC0tYnJlYWtwb2ludC1zbTogNTc2cHg7XFxuICAtLWJyZWFrcG9pbnQtbWQ6IDc2OHB4O1xcbiAgLS1icmVha3BvaW50LWxnOiA5OTJweDtcXG4gIC0tYnJlYWtwb2ludC14bDogMTIwMHB4O1xcbiAgLS1mb250LWZhbWlseS1zYW5zLXNlcmlmOiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiLCBcXFwiTm90byBDb2xvciBFbW9qaVxcXCI7XFxuICAtLWZvbnQtZmFtaWx5LW1vbm9zcGFjZTogU0ZNb25vLVJlZ3VsYXIsIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcXFwiTGliZXJhdGlvbiBNb25vXFxcIiwgXFxcIkNvdXJpZXIgTmV3XFxcIiwgbW9ub3NwYWNlO1xcbn1cXG5cXG4qLFxcbio6OmJlZm9yZSxcXG4qOjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5odG1sIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XFxuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogc2Nyb2xsYmFyO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcbn1cXG5cXG5ALW1zLXZpZXdwb3J0IHtcXG4gIHdpZHRoOiBkZXZpY2Utd2lkdGg7XFxufVxcblxcbmFydGljbGUsIGFzaWRlLCBmaWdjYXB0aW9uLCBmaWd1cmUsIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1haW4sIG5hdiwgc2VjdGlvbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG5bdGFiaW5kZXg9XFxcIi0xXFxcIl06Zm9jdXMge1xcbiAgb3V0bGluZTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG5ociB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGhlaWdodDogMDtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxufVxcblxcbnAge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxufVxcblxcbmFiYnJbdGl0bGVdLFxcbmFiYnJbZGF0YS1vcmlnaW5hbC10aXRsZV0ge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcXG4gIGN1cnNvcjogaGVscDtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcblxcbmFkZHJlc3Mge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG5vbCxcXG51bCxcXG5kbCB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG59XFxuXFxub2wgb2wsXFxudWwgdWwsXFxub2wgdWwsXFxudWwgb2wge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuZHQge1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuZGQge1xcbiAgbWFyZ2luLWJvdHRvbTogLjVyZW07XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuYmxvY2txdW90ZSB7XFxuICBtYXJnaW46IDAgMCAxcmVtO1xcbn1cXG5cXG5kZm4ge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbn1cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XFxuXFxuc3ViLFxcbnN1cCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGxpbmUtaGVpZ2h0OiAwO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG5zdWIge1xcbiAgYm90dG9tOiAtLjI1ZW07XFxufVxcblxcbnN1cCB7XFxuICB0b3A6IC0uNWVtO1xcbn1cXG5cXG5hIHtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzO1xcbn1cXG5cXG5hOmhvdmVyIHtcXG4gIGNvbG9yOiAjMDA1NmIzO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbmE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG5hOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKTpob3ZlciwgYTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSk6Zm9jdXMge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbmE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pOmZvY3VzIHtcXG4gIG91dGxpbmU6IDA7XFxufVxcblxcbnByZSxcXG5jb2RlLFxcbmtiZCxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7XFxuICBmb250LXNpemU6IDFlbTtcXG59XFxuXFxucHJlIHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IHNjcm9sbGJhcjtcXG59XFxuXFxuZmlndXJlIHtcXG4gIG1hcmdpbjogMCAwIDFyZW07XFxufVxcblxcbmltZyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbn1cXG5cXG5zdmcge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbnRhYmxlIHtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcblxcbmNhcHRpb24ge1xcbiAgcGFkZGluZy10b3A6IDAuNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC43NXJlbTtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGNhcHRpb24tc2lkZTogYm90dG9tO1xcbn1cXG5cXG50aCB7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG5cXG5sYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxufVxcblxcbmJ1dHRvbiB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG5cXG5idXR0b246Zm9jdXMge1xcbiAgb3V0bGluZTogMXB4IGRvdHRlZDtcXG4gIG91dGxpbmU6IDVweCBhdXRvIC13ZWJraXQtZm9jdXMtcmluZy1jb2xvcjtcXG59XFxuXFxuaW5wdXQsXFxuYnV0dG9uLFxcbnNlbGVjdCxcXG5vcHRncm91cCxcXG50ZXh0YXJlYSB7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG5idXR0b24sXFxuaW5wdXQge1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbmJ1dHRvbixcXG5zZWxlY3Qge1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxufVxcblxcbmJ1dHRvbixcXG5odG1sIFt0eXBlPVxcXCJidXR0b25cXFwiXSxcXG5bdHlwZT1cXFwicmVzZXRcXFwiXSxcXG5bdHlwZT1cXFwic3VibWl0XFxcIl0ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XFxufVxcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVyIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdLFxcbmlucHV0W3R5cGU9XFxcInRpbWVcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJkYXRldGltZS1sb2NhbFxcXCJdLFxcbmlucHV0W3R5cGU9XFxcIm1vbnRoXFxcIl0ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBsaXN0Ym94O1xcbn1cXG5cXG50ZXh0YXJlYSB7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHJlc2l6ZTogdmVydGljYWw7XFxufVxcblxcbmZpZWxkc2V0IHtcXG4gIG1pbi13aWR0aDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbmxlZ2VuZCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbi1ib3R0b206IC41cmVtO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG59XFxuXFxucHJvZ3Jlc3Mge1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5bdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XFxuICBmb250OiBpbmhlcml0O1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XFxufVxcblxcbm91dHB1dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbnN1bW1hcnkge1xcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG50ZW1wbGF0ZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5baGlkZGVuXSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsXFxuLmgxLCAuaDIsIC5oMywgLmg0LCAuaDUsIC5oNiB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsaW5lLWhlaWdodDogMS4yO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbmgxLCAuaDEge1xcbiAgZm9udC1zaXplOiAyLjVyZW07XFxufVxcblxcbmgyLCAuaDIge1xcbiAgZm9udC1zaXplOiAycmVtO1xcbn1cXG5cXG5oMywgLmgzIHtcXG4gIGZvbnQtc2l6ZTogMS43NXJlbTtcXG59XFxuXFxuaDQsIC5oNCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuaDUsIC5oNSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcblxcbmg2LCAuaDYge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG5cXG4ubGVhZCB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBmb250LXdlaWdodDogMzAwO1xcbn1cXG5cXG4uZGlzcGxheS0xIHtcXG4gIGZvbnQtc2l6ZTogNnJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yO1xcbn1cXG5cXG4uZGlzcGxheS0yIHtcXG4gIGZvbnQtc2l6ZTogNS41cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxufVxcblxcbi5kaXNwbGF5LTMge1xcbiAgZm9udC1zaXplOiA0LjVyZW07XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuMjtcXG59XFxuXFxuLmRpc3BsYXktNCB7XFxuICBmb250LXNpemU6IDMuNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yO1xcbn1cXG5cXG5ociB7XFxuICBtYXJnaW4tdG9wOiAxcmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGJvcmRlcjogMDtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxufVxcblxcbnNtYWxsLFxcbi5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbm1hcmssXFxuLm1hcmsge1xcbiAgcGFkZGluZzogMC4yZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xcbn1cXG5cXG4ubGlzdC11bnN0eWxlZCB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4ubGlzdC1pbmxpbmUge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLmxpc3QtaW5saW5lLWl0ZW0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4ubGlzdC1pbmxpbmUtaXRlbTpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1yaWdodDogMC41cmVtO1xcbn1cXG5cXG4uaW5pdGlhbGlzbSB7XFxuICBmb250LXNpemU6IDkwJTtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxufVxcblxcbi5ibG9ja3F1b3RlIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcblxcbi5ibG9ja3F1b3RlLWZvb3RlciB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtc2l6ZTogODAlO1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5ibG9ja3F1b3RlLWZvb3Rlcjo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcMjAxNCAgIFxcXFxBMFxcXCI7XFxufVxcblxcbi5pbWctZmx1aWQge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4uaW1nLXRodW1ibmFpbCB7XFxuICBwYWRkaW5nOiAwLjI1cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTY7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4uZmlndXJlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmZpZ3VyZS1pbWcge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxufVxcblxcbi5maWd1cmUtY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDkwJTtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG5jb2RlIHtcXG4gIGZvbnQtc2l6ZTogODcuNSU7XFxuICBjb2xvcjogI2U4M2U4YztcXG4gIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XFxufVxcblxcbmEgPiBjb2RlIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG5rYmQge1xcbiAgcGFkZGluZzogMC4ycmVtIDAuNHJlbTtcXG4gIGZvbnQtc2l6ZTogODcuNSU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTI1Mjk7XFxuICBib3JkZXItcmFkaXVzOiAwLjJyZW07XFxufVxcblxcbmtiZCBrYmQge1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtc2l6ZTogMTAwJTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxufVxcblxcbnByZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtc2l6ZTogODcuNSU7XFxuICBjb2xvcjogIzIxMjUyOTtcXG59XFxuXFxucHJlIGNvZGUge1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB3b3JkLWJyZWFrOiBub3JtYWw7XFxufVxcblxcbi5wcmUtc2Nyb2xsYWJsZSB7XFxuICBtYXgtaGVpZ2h0OiAzNDBweDtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmctcmlnaHQ6IDE1cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiA1NDBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiA3MjBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiA5NjBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmNvbnRhaW5lciB7XFxuICAgIG1heC13aWR0aDogMTE0MHB4O1xcbiAgfVxcbn1cXG5cXG4uY29udGFpbmVyLWZsdWlkIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy1yaWdodDogMTVweDtcXG4gIHBhZGRpbmctbGVmdDogMTVweDtcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5cXG4ucm93IHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBtYXJnaW4tcmlnaHQ6IC0xNXB4O1xcbiAgbWFyZ2luLWxlZnQ6IC0xNXB4O1xcbn1cXG5cXG4ubm8tZ3V0dGVycyB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuLm5vLWd1dHRlcnMgPiAuY29sLFxcbi5uby1ndXR0ZXJzID4gW2NsYXNzKj1cXFwiY29sLVxcXCJdIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxufVxcblxcbi5jb2wtMSwgLmNvbC0yLCAuY29sLTMsIC5jb2wtNCwgLmNvbC01LCAuY29sLTYsIC5jb2wtNywgLmNvbC04LCAuY29sLTksIC5jb2wtMTAsIC5jb2wtMTEsIC5jb2wtMTIsIC5jb2wsXFxuLmNvbC1hdXRvLCAuY29sLXNtLTEsIC5jb2wtc20tMiwgLmNvbC1zbS0zLCAuY29sLXNtLTQsIC5jb2wtc20tNSwgLmNvbC1zbS02LCAuY29sLXNtLTcsIC5jb2wtc20tOCwgLmNvbC1zbS05LCAuY29sLXNtLTEwLCAuY29sLXNtLTExLCAuY29sLXNtLTEyLCAuY29sLXNtLFxcbi5jb2wtc20tYXV0bywgLmNvbC1tZC0xLCAuY29sLW1kLTIsIC5jb2wtbWQtMywgLmNvbC1tZC00LCAuY29sLW1kLTUsIC5jb2wtbWQtNiwgLmNvbC1tZC03LCAuY29sLW1kLTgsIC5jb2wtbWQtOSwgLmNvbC1tZC0xMCwgLmNvbC1tZC0xMSwgLmNvbC1tZC0xMiwgLmNvbC1tZCxcXG4uY29sLW1kLWF1dG8sIC5jb2wtbGctMSwgLmNvbC1sZy0yLCAuY29sLWxnLTMsIC5jb2wtbGctNCwgLmNvbC1sZy01LCAuY29sLWxnLTYsIC5jb2wtbGctNywgLmNvbC1sZy04LCAuY29sLWxnLTksIC5jb2wtbGctMTAsIC5jb2wtbGctMTEsIC5jb2wtbGctMTIsIC5jb2wtbGcsXFxuLmNvbC1sZy1hdXRvLCAuY29sLXhsLTEsIC5jb2wteGwtMiwgLmNvbC14bC0zLCAuY29sLXhsLTQsIC5jb2wteGwtNSwgLmNvbC14bC02LCAuY29sLXhsLTcsIC5jb2wteGwtOCwgLmNvbC14bC05LCAuY29sLXhsLTEwLCAuY29sLXhsLTExLCAuY29sLXhsLTEyLCAuY29sLXhsLFxcbi5jb2wteGwtYXV0byB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDE1cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XFxufVxcblxcbi5jb2wge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICBmbGV4LWJhc2lzOiAwO1xcbiAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxufVxcblxcbi5jb2wtYXV0byB7XFxuICAtbXMtZmxleDogMCAwIGF1dG87XFxuICBmbGV4OiAwIDAgYXV0bztcXG4gIHdpZHRoOiBhdXRvO1xcbiAgbWF4LXdpZHRoOiBub25lO1xcbn1cXG5cXG4uY29sLTEge1xcbiAgLW1zLWZsZXg6IDAgMCA4LjMzMzMzMyU7XFxuICBmbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgbWF4LXdpZHRoOiA4LjMzMzMzMyU7XFxufVxcblxcbi5jb2wtMiB7XFxuICAtbXMtZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICBmbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gIG1heC13aWR0aDogMTYuNjY2NjY3JTtcXG59XFxuXFxuLmNvbC0zIHtcXG4gIC1tcy1mbGV4OiAwIDAgMjUlO1xcbiAgZmxleDogMCAwIDI1JTtcXG4gIG1heC13aWR0aDogMjUlO1xcbn1cXG5cXG4uY29sLTQge1xcbiAgLW1zLWZsZXg6IDAgMCAzMy4zMzMzMzMlO1xcbiAgZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICBtYXgtd2lkdGg6IDMzLjMzMzMzMyU7XFxufVxcblxcbi5jb2wtNSB7XFxuICAtbXMtZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICBmbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gIG1heC13aWR0aDogNDEuNjY2NjY3JTtcXG59XFxuXFxuLmNvbC02IHtcXG4gIC1tcy1mbGV4OiAwIDAgNTAlO1xcbiAgZmxleDogMCAwIDUwJTtcXG4gIG1heC13aWR0aDogNTAlO1xcbn1cXG5cXG4uY29sLTcge1xcbiAgLW1zLWZsZXg6IDAgMCA1OC4zMzMzMzMlO1xcbiAgZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICBtYXgtd2lkdGg6IDU4LjMzMzMzMyU7XFxufVxcblxcbi5jb2wtOCB7XFxuICAtbXMtZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICBmbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gIG1heC13aWR0aDogNjYuNjY2NjY3JTtcXG59XFxuXFxuLmNvbC05IHtcXG4gIC1tcy1mbGV4OiAwIDAgNzUlO1xcbiAgZmxleDogMCAwIDc1JTtcXG4gIG1heC13aWR0aDogNzUlO1xcbn1cXG5cXG4uY29sLTEwIHtcXG4gIC1tcy1mbGV4OiAwIDAgODMuMzMzMzMzJTtcXG4gIGZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgbWF4LXdpZHRoOiA4My4zMzMzMzMlO1xcbn1cXG5cXG4uY29sLTExIHtcXG4gIC1tcy1mbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gIGZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgbWF4LXdpZHRoOiA5MS42NjY2NjclO1xcbn1cXG5cXG4uY29sLTEyIHtcXG4gIC1tcy1mbGV4OiAwIDAgMTAwJTtcXG4gIGZsZXg6IDAgMCAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ub3JkZXItZmlyc3Qge1xcbiAgLW1zLWZsZXgtb3JkZXI6IC0xO1xcbiAgb3JkZXI6IC0xO1xcbn1cXG5cXG4ub3JkZXItbGFzdCB7XFxuICAtbXMtZmxleC1vcmRlcjogMTM7XFxuICBvcmRlcjogMTM7XFxufVxcblxcbi5vcmRlci0wIHtcXG4gIC1tcy1mbGV4LW9yZGVyOiAwO1xcbiAgb3JkZXI6IDA7XFxufVxcblxcbi5vcmRlci0xIHtcXG4gIC1tcy1mbGV4LW9yZGVyOiAxO1xcbiAgb3JkZXI6IDE7XFxufVxcblxcbi5vcmRlci0yIHtcXG4gIC1tcy1mbGV4LW9yZGVyOiAyO1xcbiAgb3JkZXI6IDI7XFxufVxcblxcbi5vcmRlci0zIHtcXG4gIC1tcy1mbGV4LW9yZGVyOiAzO1xcbiAgb3JkZXI6IDM7XFxufVxcblxcbi5vcmRlci00IHtcXG4gIC1tcy1mbGV4LW9yZGVyOiA0O1xcbiAgb3JkZXI6IDQ7XFxufVxcblxcbi5vcmRlci01IHtcXG4gIC1tcy1mbGV4LW9yZGVyOiA1O1xcbiAgb3JkZXI6IDU7XFxufVxcblxcbi5vcmRlci02IHtcXG4gIC1tcy1mbGV4LW9yZGVyOiA2O1xcbiAgb3JkZXI6IDY7XFxufVxcblxcbi5vcmRlci03IHtcXG4gIC1tcy1mbGV4LW9yZGVyOiA3O1xcbiAgb3JkZXI6IDc7XFxufVxcblxcbi5vcmRlci04IHtcXG4gIC1tcy1mbGV4LW9yZGVyOiA4O1xcbiAgb3JkZXI6IDg7XFxufVxcblxcbi5vcmRlci05IHtcXG4gIC1tcy1mbGV4LW9yZGVyOiA5O1xcbiAgb3JkZXI6IDk7XFxufVxcblxcbi5vcmRlci0xMCB7XFxuICAtbXMtZmxleC1vcmRlcjogMTA7XFxuICBvcmRlcjogMTA7XFxufVxcblxcbi5vcmRlci0xMSB7XFxuICAtbXMtZmxleC1vcmRlcjogMTE7XFxuICBvcmRlcjogMTE7XFxufVxcblxcbi5vcmRlci0xMiB7XFxuICAtbXMtZmxleC1vcmRlcjogMTI7XFxuICBvcmRlcjogMTI7XFxufVxcblxcbi5vZmZzZXQtMSB7XFxuICBtYXJnaW4tbGVmdDogOC4zMzMzMzMlO1xcbn1cXG5cXG4ub2Zmc2V0LTIge1xcbiAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NyU7XFxufVxcblxcbi5vZmZzZXQtMyB7XFxuICBtYXJnaW4tbGVmdDogMjUlO1xcbn1cXG5cXG4ub2Zmc2V0LTQge1xcbiAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMyU7XFxufVxcblxcbi5vZmZzZXQtNSB7XFxuICBtYXJnaW4tbGVmdDogNDEuNjY2NjY3JTtcXG59XFxuXFxuLm9mZnNldC02IHtcXG4gIG1hcmdpbi1sZWZ0OiA1MCU7XFxufVxcblxcbi5vZmZzZXQtNyB7XFxuICBtYXJnaW4tbGVmdDogNTguMzMzMzMzJTtcXG59XFxuXFxuLm9mZnNldC04IHtcXG4gIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjclO1xcbn1cXG5cXG4ub2Zmc2V0LTkge1xcbiAgbWFyZ2luLWxlZnQ6IDc1JTtcXG59XFxuXFxuLm9mZnNldC0xMCB7XFxuICBtYXJnaW4tbGVmdDogODMuMzMzMzMzJTtcXG59XFxuXFxuLm9mZnNldC0xMSB7XFxuICBtYXJnaW4tbGVmdDogOTEuNjY2NjY3JTtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuY29sLXNtIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2wtc20tYXV0byB7XFxuICAgIC1tcy1mbGV4OiAwIDAgYXV0bztcXG4gICAgZmxleDogMCAwIGF1dG87XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBtYXgtd2lkdGg6IG5vbmU7XFxuICB9XFxuICAuY29sLXNtLTEge1xcbiAgICAtbXMtZmxleDogMCAwIDguMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDguMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA4LjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXNtLTIge1xcbiAgICAtbXMtZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCAxNi42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDE2LjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXNtLTMge1xcbiAgICAtbXMtZmxleDogMCAwIDI1JTtcXG4gICAgZmxleDogMCAwIDI1JTtcXG4gICAgbWF4LXdpZHRoOiAyNSU7XFxuICB9XFxuICAuY29sLXNtLTQge1xcbiAgICAtbXMtZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCAzMy4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDMzLjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXNtLTUge1xcbiAgICAtbXMtZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCA0MS42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDQxLjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXNtLTYge1xcbiAgICAtbXMtZmxleDogMCAwIDUwJTtcXG4gICAgZmxleDogMCAwIDUwJTtcXG4gICAgbWF4LXdpZHRoOiA1MCU7XFxuICB9XFxuICAuY29sLXNtLTcge1xcbiAgICAtbXMtZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA1OC4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDU4LjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXNtLTgge1xcbiAgICAtbXMtZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCA2Ni42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXNtLTkge1xcbiAgICAtbXMtZmxleDogMCAwIDc1JTtcXG4gICAgZmxleDogMCAwIDc1JTtcXG4gICAgbWF4LXdpZHRoOiA3NSU7XFxuICB9XFxuICAuY29sLXNtLTEwIHtcXG4gICAgLW1zLWZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgODMuMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC1zbS0xMSB7XFxuICAgIC1tcy1mbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDkxLjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogOTEuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtc20tMTIge1xcbiAgICAtbXMtZmxleDogMCAwIDEwMCU7XFxuICAgIGZsZXg6IDAgMCAxMDAlO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICB9XFxuICAub3JkZXItc20tZmlyc3Qge1xcbiAgICAtbXMtZmxleC1vcmRlcjogLTE7XFxuICAgIG9yZGVyOiAtMTtcXG4gIH1cXG4gIC5vcmRlci1zbS1sYXN0IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEzO1xcbiAgICBvcmRlcjogMTM7XFxuICB9XFxuICAub3JkZXItc20tMCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAwO1xcbiAgICBvcmRlcjogMDtcXG4gIH1cXG4gIC5vcmRlci1zbS0xIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbiAgLm9yZGVyLXNtLTIge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMjtcXG4gICAgb3JkZXI6IDI7XFxuICB9XFxuICAub3JkZXItc20tMyB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAzO1xcbiAgICBvcmRlcjogMztcXG4gIH1cXG4gIC5vcmRlci1zbS00IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDQ7XFxuICAgIG9yZGVyOiA0O1xcbiAgfVxcbiAgLm9yZGVyLXNtLTUge1xcbiAgICAtbXMtZmxleC1vcmRlcjogNTtcXG4gICAgb3JkZXI6IDU7XFxuICB9XFxuICAub3JkZXItc20tNiB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA2O1xcbiAgICBvcmRlcjogNjtcXG4gIH1cXG4gIC5vcmRlci1zbS03IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDc7XFxuICAgIG9yZGVyOiA3O1xcbiAgfVxcbiAgLm9yZGVyLXNtLTgge1xcbiAgICAtbXMtZmxleC1vcmRlcjogODtcXG4gICAgb3JkZXI6IDg7XFxuICB9XFxuICAub3JkZXItc20tOSB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA5O1xcbiAgICBvcmRlcjogOTtcXG4gIH1cXG4gIC5vcmRlci1zbS0xMCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMDtcXG4gICAgb3JkZXI6IDEwO1xcbiAgfVxcbiAgLm9yZGVyLXNtLTExIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDExO1xcbiAgICBvcmRlcjogMTE7XFxuICB9XFxuICAub3JkZXItc20tMTIge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMTI7XFxuICAgIG9yZGVyOiAxMjtcXG4gIH1cXG4gIC5vZmZzZXQtc20tMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwO1xcbiAgfVxcbiAgLm9mZnNldC1zbS0xIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtc20tMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC1zbS0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5vZmZzZXQtc20tNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1zbS01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcbiAgLm9mZnNldC1zbS03IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTgge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQtc20tOSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA3NSU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTEwIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTExIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDkxLjY2NjY2NyU7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLmNvbC1tZCB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAwO1xcbiAgICBmbGV4LWJhc2lzOiAwO1xcbiAgICAtbXMtZmxleC1wb3NpdGl2ZTogMTtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuY29sLW1kLWF1dG8ge1xcbiAgICAtbXMtZmxleDogMCAwIGF1dG87XFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgbWF4LXdpZHRoOiBub25lO1xcbiAgfVxcbiAgLmNvbC1tZC0xIHtcXG4gICAgLW1zLWZsZXg6IDAgMCA4LjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA4LjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC1tZC0yIHtcXG4gICAgLW1zLWZsZXg6IDAgMCAxNi42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiAxNi42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1tZC0zIHtcXG4gICAgLW1zLWZsZXg6IDAgMCAyNSU7XFxuICAgIGZsZXg6IDAgMCAyNSU7XFxuICAgIG1heC13aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbC1tZC00IHtcXG4gICAgLW1zLWZsZXg6IDAgMCAzMy4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC1tZC01IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA0MS42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1tZC02IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA1MCU7XFxuICAgIGZsZXg6IDAgMCA1MCU7XFxuICAgIG1heC13aWR0aDogNTAlO1xcbiAgfVxcbiAgLmNvbC1tZC03IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA1OC4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC1tZC04IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA2Ni42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA2Ni42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1tZC05IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA3NSU7XFxuICAgIGZsZXg6IDAgMCA3NSU7XFxuICAgIG1heC13aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbC1tZC0xMCB7XFxuICAgIC1tcy1mbGV4OiAwIDAgODMuMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbWQtMTEge1xcbiAgICAtbXMtZmxleDogMCAwIDkxLjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDkxLjY2NjY2NyU7XFxuICB9XFxuICAuY29sLW1kLTEyIHtcXG4gICAgLW1zLWZsZXg6IDAgMCAxMDAlO1xcbiAgICBmbGV4OiAwIDAgMTAwJTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLm9yZGVyLW1kLWZpcnN0IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IC0xO1xcbiAgICBvcmRlcjogLTE7XFxuICB9XFxuICAub3JkZXItbWQtbGFzdCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMztcXG4gICAgb3JkZXI6IDEzO1xcbiAgfVxcbiAgLm9yZGVyLW1kLTAge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMDtcXG4gICAgb3JkZXI6IDA7XFxuICB9XFxuICAub3JkZXItbWQtMSB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxO1xcbiAgICBvcmRlcjogMTtcXG4gIH1cXG4gIC5vcmRlci1tZC0yIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDI7XFxuICAgIG9yZGVyOiAyO1xcbiAgfVxcbiAgLm9yZGVyLW1kLTMge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMztcXG4gICAgb3JkZXI6IDM7XFxuICB9XFxuICAub3JkZXItbWQtNCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA0O1xcbiAgICBvcmRlcjogNDtcXG4gIH1cXG4gIC5vcmRlci1tZC01IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDU7XFxuICAgIG9yZGVyOiA1O1xcbiAgfVxcbiAgLm9yZGVyLW1kLTYge1xcbiAgICAtbXMtZmxleC1vcmRlcjogNjtcXG4gICAgb3JkZXI6IDY7XFxuICB9XFxuICAub3JkZXItbWQtNyB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA3O1xcbiAgICBvcmRlcjogNztcXG4gIH1cXG4gIC5vcmRlci1tZC04IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDg7XFxuICAgIG9yZGVyOiA4O1xcbiAgfVxcbiAgLm9yZGVyLW1kLTkge1xcbiAgICAtbXMtZmxleC1vcmRlcjogOTtcXG4gICAgb3JkZXI6IDk7XFxuICB9XFxuICAub3JkZXItbWQtMTAge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMTA7XFxuICAgIG9yZGVyOiAxMDtcXG4gIH1cXG4gIC5vcmRlci1tZC0xMSB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMTtcXG4gICAgb3JkZXI6IDExO1xcbiAgfVxcbiAgLm9yZGVyLW1kLTEyIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEyO1xcbiAgICBvcmRlcjogMTI7XFxuICB9XFxuICAub2Zmc2V0LW1kLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LW1kLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAub2Zmc2V0LW1kLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC1tZC02IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1tZC04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LW1kLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLm9mZnNldC1tZC0xMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1tZC0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjclO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5jb2wtbGcge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMDtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmNvbC1sZy1hdXRvIHtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIG1heC13aWR0aDogbm9uZTtcXG4gIH1cXG4gIC5jb2wtbGctMSB7XFxuICAgIC1tcy1mbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbGctMiB7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbGctMyB7XFxuICAgIC1tcy1mbGV4OiAwIDAgMjUlO1xcbiAgICBmbGV4OiAwIDAgMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2wtbGctNCB7XFxuICAgIC1tcy1mbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbGctNSB7XFxuICAgIC1tcy1mbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbGctNiB7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTAlO1xcbiAgICBmbGV4OiAwIDAgNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2wtbGctNyB7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogNTguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbGctOCB7XFxuICAgIC1tcy1mbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbGctOSB7XFxuICAgIC1tcy1mbGV4OiAwIDAgNzUlO1xcbiAgICBmbGV4OiAwIDAgNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2wtbGctMTAge1xcbiAgICAtbXMtZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDgzLjMzMzMzMyU7XFxuICB9XFxuICAuY29sLWxnLTExIHtcXG4gICAgLW1zLWZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1sZy0xMiB7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTAwJTtcXG4gICAgZmxleDogMCAwIDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5vcmRlci1sZy1maXJzdCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAtMTtcXG4gICAgb3JkZXI6IC0xO1xcbiAgfVxcbiAgLm9yZGVyLWxnLWxhc3Qge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMTM7XFxuICAgIG9yZGVyOiAxMztcXG4gIH1cXG4gIC5vcmRlci1sZy0wIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDA7XFxuICAgIG9yZGVyOiAwO1xcbiAgfVxcbiAgLm9yZGVyLWxnLTEge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMTtcXG4gICAgb3JkZXI6IDE7XFxuICB9XFxuICAub3JkZXItbGctMiB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAyO1xcbiAgICBvcmRlcjogMjtcXG4gIH1cXG4gIC5vcmRlci1sZy0zIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDM7XFxuICAgIG9yZGVyOiAzO1xcbiAgfVxcbiAgLm9yZGVyLWxnLTQge1xcbiAgICAtbXMtZmxleC1vcmRlcjogNDtcXG4gICAgb3JkZXI6IDQ7XFxuICB9XFxuICAub3JkZXItbGctNSB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA1O1xcbiAgICBvcmRlcjogNTtcXG4gIH1cXG4gIC5vcmRlci1sZy02IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDY7XFxuICAgIG9yZGVyOiA2O1xcbiAgfVxcbiAgLm9yZGVyLWxnLTcge1xcbiAgICAtbXMtZmxleC1vcmRlcjogNztcXG4gICAgb3JkZXI6IDc7XFxuICB9XFxuICAub3JkZXItbGctOCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA4O1xcbiAgICBvcmRlcjogODtcXG4gIH1cXG4gIC5vcmRlci1sZy05IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDk7XFxuICAgIG9yZGVyOiA5O1xcbiAgfVxcbiAgLm9yZGVyLWxnLTEwIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEwO1xcbiAgICBvcmRlcjogMTA7XFxuICB9XFxuICAub3JkZXItbGctMTEge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMTE7XFxuICAgIG9yZGVyOiAxMTtcXG4gIH1cXG4gIC5vcmRlci1sZy0xMiB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMjtcXG4gICAgb3JkZXI6IDEyO1xcbiAgfVxcbiAgLm9mZnNldC1sZy0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxuICB9XFxuICAub2Zmc2V0LWxnLTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1sZy0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LWxnLTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcbiAgLm9mZnNldC1sZy00IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LWxnLTUge1xcbiAgICBtYXJnaW4tbGVmdDogNDEuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctNiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAub2Zmc2V0LWxnLTcge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctOCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC1sZy05IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctMTAge1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY3JTtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmNvbC14bCB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAwO1xcbiAgICBmbGV4LWJhc2lzOiAwO1xcbiAgICAtbXMtZmxleC1wb3NpdGl2ZTogMTtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuY29sLXhsLWF1dG8ge1xcbiAgICAtbXMtZmxleDogMCAwIGF1dG87XFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgbWF4LXdpZHRoOiBub25lO1xcbiAgfVxcbiAgLmNvbC14bC0xIHtcXG4gICAgLW1zLWZsZXg6IDAgMCA4LjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA4LjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC14bC0yIHtcXG4gICAgLW1zLWZsZXg6IDAgMCAxNi42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiAxNi42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC14bC0zIHtcXG4gICAgLW1zLWZsZXg6IDAgMCAyNSU7XFxuICAgIGZsZXg6IDAgMCAyNSU7XFxuICAgIG1heC13aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbC14bC00IHtcXG4gICAgLW1zLWZsZXg6IDAgMCAzMy4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC14bC01IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA0MS42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC14bC02IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA1MCU7XFxuICAgIGZsZXg6IDAgMCA1MCU7XFxuICAgIG1heC13aWR0aDogNTAlO1xcbiAgfVxcbiAgLmNvbC14bC03IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA1OC4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC14bC04IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA2Ni42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA2Ni42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC14bC05IHtcXG4gICAgLW1zLWZsZXg6IDAgMCA3NSU7XFxuICAgIGZsZXg6IDAgMCA3NSU7XFxuICAgIG1heC13aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbC14bC0xMCB7XFxuICAgIC1tcy1mbGV4OiAwIDAgODMuMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wteGwtMTEge1xcbiAgICAtbXMtZmxleDogMCAwIDkxLjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDkxLjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXhsLTEyIHtcXG4gICAgLW1zLWZsZXg6IDAgMCAxMDAlO1xcbiAgICBmbGV4OiAwIDAgMTAwJTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLm9yZGVyLXhsLWZpcnN0IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IC0xO1xcbiAgICBvcmRlcjogLTE7XFxuICB9XFxuICAub3JkZXIteGwtbGFzdCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMztcXG4gICAgb3JkZXI6IDEzO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTAge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMDtcXG4gICAgb3JkZXI6IDA7XFxuICB9XFxuICAub3JkZXIteGwtMSB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxO1xcbiAgICBvcmRlcjogMTtcXG4gIH1cXG4gIC5vcmRlci14bC0yIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDI7XFxuICAgIG9yZGVyOiAyO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTMge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMztcXG4gICAgb3JkZXI6IDM7XFxuICB9XFxuICAub3JkZXIteGwtNCB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA0O1xcbiAgICBvcmRlcjogNDtcXG4gIH1cXG4gIC5vcmRlci14bC01IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDU7XFxuICAgIG9yZGVyOiA1O1xcbiAgfVxcbiAgLm9yZGVyLXhsLTYge1xcbiAgICAtbXMtZmxleC1vcmRlcjogNjtcXG4gICAgb3JkZXI6IDY7XFxuICB9XFxuICAub3JkZXIteGwtNyB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA3O1xcbiAgICBvcmRlcjogNztcXG4gIH1cXG4gIC5vcmRlci14bC04IHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDg7XFxuICAgIG9yZGVyOiA4O1xcbiAgfVxcbiAgLm9yZGVyLXhsLTkge1xcbiAgICAtbXMtZmxleC1vcmRlcjogOTtcXG4gICAgb3JkZXI6IDk7XFxuICB9XFxuICAub3JkZXIteGwtMTAge1xcbiAgICAtbXMtZmxleC1vcmRlcjogMTA7XFxuICAgIG9yZGVyOiAxMDtcXG4gIH1cXG4gIC5vcmRlci14bC0xMSB7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMTtcXG4gICAgb3JkZXI6IDExO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTEyIHtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEyO1xcbiAgICBvcmRlcjogMTI7XFxuICB9XFxuICAub2Zmc2V0LXhsLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG4gIC5vZmZzZXQteGwtMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LXhsLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAub2Zmc2V0LXhsLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC14bC02IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC14bC04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LXhsLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLm9mZnNldC14bC0xMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC14bC0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjclO1xcbiAgfVxcbn1cXG5cXG4udGFibGUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi50YWJsZSB0aCxcXG4udGFibGUgdGQge1xcbiAgcGFkZGluZzogMC43NXJlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RlZTJlNjtcXG59XFxuXFxuLnRhYmxlIHRoZWFkIHRoIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2RlZTJlNjtcXG59XFxuXFxuLnRhYmxlIHRib2R5ICsgdGJvZHkge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi50YWJsZSAudGFibGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLnRhYmxlLXNtIHRoLFxcbi50YWJsZS1zbSB0ZCB7XFxuICBwYWRkaW5nOiAwLjNyZW07XFxufVxcblxcbi50YWJsZS1ib3JkZXJlZCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGVlMmU2O1xcbn1cXG5cXG4udGFibGUtYm9yZGVyZWQgdGgsXFxuLnRhYmxlLWJvcmRlcmVkIHRkIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi50YWJsZS1ib3JkZXJlZCB0aGVhZCB0aCxcXG4udGFibGUtYm9yZGVyZWQgdGhlYWQgdGQge1xcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMnB4O1xcbn1cXG5cXG4udGFibGUtYm9yZGVybGVzcyB0aCxcXG4udGFibGUtYm9yZGVybGVzcyB0ZCxcXG4udGFibGUtYm9yZGVybGVzcyB0aGVhZCB0aCxcXG4udGFibGUtYm9yZGVybGVzcyB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuLnRhYmxlLXN0cmlwZWQgdGJvZHkgdHI6bnRoLW9mLXR5cGUob2RkKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDUpO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgdGJvZHkgdHI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcblxcbi50YWJsZS1wcmltYXJ5LFxcbi50YWJsZS1wcmltYXJ5ID4gdGgsXFxuLnRhYmxlLXByaW1hcnkgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjhkYWZmO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLXByaW1hcnk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlmY2RmZjtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1wcmltYXJ5OmhvdmVyID4gdGQsXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1wcmltYXJ5OmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlmY2RmZjtcXG59XFxuXFxuLnRhYmxlLXNlY29uZGFyeSxcXG4udGFibGUtc2Vjb25kYXJ5ID4gdGgsXFxuLnRhYmxlLXNlY29uZGFyeSA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNmQ4ZGI7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjOGNiY2Y7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVyID4gdGQsXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1zZWNvbmRhcnk6aG92ZXIgPiB0aCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzhjYmNmO1xcbn1cXG5cXG4udGFibGUtc3VjY2VzcyxcXG4udGFibGUtc3VjY2VzcyA+IHRoLFxcbi50YWJsZS1zdWNjZXNzID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2MzZTZjYjtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1zdWNjZXNzOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWRmYmI7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc3VjY2Vzczpob3ZlciA+IHRkLFxcbi50YWJsZS1ob3ZlciAudGFibGUtc3VjY2Vzczpob3ZlciA+IHRoIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWRmYmI7XFxufVxcblxcbi50YWJsZS1pbmZvLFxcbi50YWJsZS1pbmZvID4gdGgsXFxuLnRhYmxlLWluZm8gPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmVlNWViO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWluZm86aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FiZGRlNTtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyID4gdGQsXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FiZGRlNTtcXG59XFxuXFxuLnRhYmxlLXdhcm5pbmcsXFxuLnRhYmxlLXdhcm5pbmcgPiB0aCxcXG4udGFibGUtd2FybmluZyA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmVlYmE7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtd2FybmluZzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlOGExO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLXdhcm5pbmc6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLXdhcm5pbmc6aG92ZXIgPiB0aCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlOGExO1xcbn1cXG5cXG4udGFibGUtZGFuZ2VyLFxcbi50YWJsZS1kYW5nZXIgPiB0aCxcXG4udGFibGUtZGFuZ2VyID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1YzZjYjtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1kYW5nZXI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YxYjBiNztcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1kYW5nZXI6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLWRhbmdlcjpob3ZlciA+IHRoIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWIwYjc7XFxufVxcblxcbi50YWJsZS1saWdodCxcXG4udGFibGUtbGlnaHQgPiB0aCxcXG4udGFibGUtbGlnaHQgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmZGZlO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWxpZ2h0OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlY2VjZjY7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtbGlnaHQ6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLWxpZ2h0OmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWNmNjtcXG59XFxuXFxuLnRhYmxlLWRhcmssXFxuLnRhYmxlLWRhcmsgPiB0aCxcXG4udGFibGUtZGFyayA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjNmM4Y2E7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtZGFyazpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjliYmJlO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWRhcms6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLWRhcms6aG92ZXIgPiB0aCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjliYmJlO1xcbn1cXG5cXG4udGFibGUtYWN0aXZlLFxcbi50YWJsZS1hY3RpdmUgPiB0aCxcXG4udGFibGUtYWN0aXZlID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtYWN0aXZlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNzUpO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWFjdGl2ZTpob3ZlciA+IHRkLFxcbi50YWJsZS1ob3ZlciAudGFibGUtYWN0aXZlOmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcblxcbi50YWJsZSAudGhlYWQtZGFyayB0aCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTI1Mjk7XFxuICBib3JkZXItY29sb3I6ICMzMjM4M2U7XFxufVxcblxcbi50YWJsZSAudGhlYWQtbGlnaHQgdGgge1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyLWNvbG9yOiAjZGVlMmU2O1xcbn1cXG5cXG4udGFibGUtZGFyayB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTI1Mjk7XFxufVxcblxcbi50YWJsZS1kYXJrIHRoLFxcbi50YWJsZS1kYXJrIHRkLFxcbi50YWJsZS1kYXJrIHRoZWFkIHRoIHtcXG4gIGJvcmRlci1jb2xvcjogIzMyMzgzZTtcXG59XFxuXFxuLnRhYmxlLWRhcmsudGFibGUtYm9yZGVyZWQge1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4udGFibGUtZGFyay50YWJsZS1zdHJpcGVkIHRib2R5IHRyOm50aC1vZi10eXBlKG9kZCkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KTtcXG59XFxuXFxuLnRhYmxlLWRhcmsudGFibGUtaG92ZXIgdGJvZHkgdHI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA3NSk7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzUuOThweCkge1xcbiAgLnRhYmxlLXJlc3BvbnNpdmUtc20ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7XFxuICB9XFxuICAudGFibGUtcmVzcG9uc2l2ZS1zbSA+IC50YWJsZS1ib3JkZXJlZCB7XFxuICAgIGJvcmRlcjogMDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDc2Ny45OHB4KSB7XFxuICAudGFibGUtcmVzcG9uc2l2ZS1tZCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXG4gICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgICAtbXMtb3ZlcmZsb3ctc3R5bGU6IC1tcy1hdXRvaGlkaW5nLXNjcm9sbGJhcjtcXG4gIH1cXG4gIC50YWJsZS1yZXNwb25zaXZlLW1kID4gLnRhYmxlLWJvcmRlcmVkIHtcXG4gICAgYm9yZGVyOiAwO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogOTkxLjk4cHgpIHtcXG4gIC50YWJsZS1yZXNwb25zaXZlLWxnIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyO1xcbiAgfVxcbiAgLnRhYmxlLXJlc3BvbnNpdmUtbGcgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICBib3JkZXI6IDA7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTk5Ljk4cHgpIHtcXG4gIC50YWJsZS1yZXNwb25zaXZlLXhsIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyO1xcbiAgfVxcbiAgLnRhYmxlLXJlc3BvbnNpdmUteGwgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICBib3JkZXI6IDA7XFxuICB9XFxufVxcblxcbi50YWJsZS1yZXNwb25zaXZlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7XFxufVxcblxcbi50YWJsZS1yZXNwb25zaXZlID4gLnRhYmxlLWJvcmRlcmVkIHtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuLmZvcm0tY29udHJvbCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBjYWxjKDIuMjVyZW0gKyAycHgpO1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NlZDRkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5mb3JtLWNvbnRyb2wge1xcbiAgICB0cmFuc2l0aW9uOiBub25lO1xcbiAgfVxcbn1cXG5cXG4uZm9ybS1jb250cm9sOjotbXMtZXhwYW5kIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sOmZvY3VzIHtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcXG4gIG91dGxpbmU6IDA7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sOjotbW96LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmZvcm0tY29udHJvbDotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sOjpwbGFjZWhvbGRlciB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6ZGlzYWJsZWQsIC5mb3JtLWNvbnRyb2xbcmVhZG9ubHldIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG5zZWxlY3QuZm9ybS1jb250cm9sOmZvY3VzOjotbXMtdmFsdWUge1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sLWZpbGUsXFxuLmZvcm0tY29udHJvbC1yYW5nZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uY29sLWZvcm0tbGFiZWwge1xcbiAgcGFkZGluZy10b3A6IGNhbGMoMC4zNzVyZW0gKyAxcHgpO1xcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoMC4zNzVyZW0gKyAxcHgpO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbi5jb2wtZm9ybS1sYWJlbC1sZyB7XFxuICBwYWRkaW5nLXRvcDogY2FsYygwLjVyZW0gKyAxcHgpO1xcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoMC41cmVtICsgMXB4KTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbi5jb2wtZm9ybS1sYWJlbC1zbSB7XFxuICBwYWRkaW5nLXRvcDogY2FsYygwLjI1cmVtICsgMXB4KTtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuMjVyZW0gKyAxcHgpO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbi5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXRvcDogMC4zNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC4zNzVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXdpZHRoOiAxcHggMDtcXG59XFxuXFxuLmZvcm0tY29udHJvbC1wbGFpbnRleHQuZm9ybS1jb250cm9sLXNtLCAuZm9ybS1jb250cm9sLXBsYWludGV4dC5mb3JtLWNvbnRyb2wtbGcge1xcbiAgcGFkZGluZy1yaWdodDogMDtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuXFxuLmZvcm0tY29udHJvbC1zbSB7XFxuICBoZWlnaHQ6IGNhbGMoMS44MTI1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBib3JkZXItcmFkaXVzOiAwLjJyZW07XFxufVxcblxcbi5mb3JtLWNvbnRyb2wtbGcge1xcbiAgaGVpZ2h0OiBjYWxjKDIuODc1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuc2VsZWN0LmZvcm0tY29udHJvbFtzaXplXSwgc2VsZWN0LmZvcm0tY29udHJvbFttdWx0aXBsZV0ge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG50ZXh0YXJlYS5mb3JtLWNvbnRyb2wge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4uZm9ybS1ncm91cCB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG5cXG4uZm9ybS10ZXh0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogMC4yNXJlbTtcXG59XFxuXFxuLmZvcm0tcm93IHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBtYXJnaW4tcmlnaHQ6IC01cHg7XFxuICBtYXJnaW4tbGVmdDogLTVweDtcXG59XFxuXFxuLmZvcm0tcm93ID4gLmNvbCxcXG4uZm9ybS1yb3cgPiBbY2xhc3MqPVxcXCJjb2wtXFxcIl0ge1xcbiAgcGFkZGluZy1yaWdodDogNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XFxufVxcblxcbi5mb3JtLWNoZWNrIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZy1sZWZ0OiAxLjI1cmVtO1xcbn1cXG5cXG4uZm9ybS1jaGVjay1pbnB1dCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW4tdG9wOiAwLjNyZW07XFxuICBtYXJnaW4tbGVmdDogLTEuMjVyZW07XFxufVxcblxcbi5mb3JtLWNoZWNrLWlucHV0OmRpc2FibGVkIH4gLmZvcm0tY2hlY2stbGFiZWwge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5mb3JtLWNoZWNrLWxhYmVsIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5mb3JtLWNoZWNrLWlubGluZSB7XFxuICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjc1cmVtO1xcbn1cXG5cXG4uZm9ybS1jaGVjay1pbmxpbmUgLmZvcm0tY2hlY2staW5wdXQge1xcbiAgcG9zaXRpb246IHN0YXRpYztcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMzEyNXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4udmFsaWQtZmVlZGJhY2sge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luLXRvcDogMC4yNXJlbTtcXG4gIGZvbnQtc2l6ZTogODAlO1xcbiAgY29sb3I6ICMyOGE3NDU7XFxufVxcblxcbi52YWxpZC10b29sdGlwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTAwJTtcXG4gIHotaW5kZXg6IDU7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBtYXJnaW4tdG9wOiAuMXJlbTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDQwLCAxNjcsIDY5LCAwLjkpO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZCwgLmZvcm0tY29udHJvbC5pcy12YWxpZCwgLndhcy12YWxpZGF0ZWRcXG4uY3VzdG9tLXNlbGVjdDp2YWxpZCxcXG4uY3VzdG9tLXNlbGVjdC5pcy12YWxpZCB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWQ6Zm9jdXMsIC5mb3JtLWNvbnRyb2wuaXMtdmFsaWQ6Zm9jdXMsIC53YXMtdmFsaWRhdGVkXFxuLmN1c3RvbS1zZWxlY3Q6dmFsaWQ6Zm9jdXMsXFxuLmN1c3RvbS1zZWxlY3QuaXMtdmFsaWQ6Zm9jdXMge1xcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1O1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuMjUpO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOnZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLmZvcm0tY29udHJvbC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4uZm9ybS1jb250cm9sLmlzLXZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsIC53YXMtdmFsaWRhdGVkXFxuLmN1c3RvbS1zZWxlY3Q6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWRcXG4uY3VzdG9tLXNlbGVjdDp2YWxpZCB+IC52YWxpZC10b29sdGlwLFxcbi5jdXN0b20tc2VsZWN0LmlzLXZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi5jdXN0b20tc2VsZWN0LmlzLXZhbGlkIH4gLnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTp2YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sLWZpbGU6dmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLmZvcm0tY29udHJvbC1maWxlLmlzLXZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNvbnRyb2wtZmlsZS5pcy12YWxpZCB+IC52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDp2YWxpZCB+IC5mb3JtLWNoZWNrLWxhYmVsLCAuZm9ybS1jaGVjay1pbnB1dC5pcy12YWxpZCB+IC5mb3JtLWNoZWNrLWxhYmVsIHtcXG4gIGNvbG9yOiAjMjhhNzQ1O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDp2YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDp2YWxpZCB+IC52YWxpZC10b29sdGlwLCAuZm9ybS1jaGVjay1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4uZm9ybS1jaGVjay1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3MWRkOGE7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNGNlNTc7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZDpmb2N1cyB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxcHggI2ZmZiwgMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuMjUpO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDp2YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbDo6YWZ0ZXIsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkOmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuMjUpO1xcbn1cXG5cXG4uaW52YWxpZC1mZWVkYmFjayB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtO1xcbiAgZm9udC1zaXplOiA4MCU7XFxuICBjb2xvcjogI2RjMzU0NTtcXG59XFxuXFxuLmludmFsaWQtdG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcbiAgbWFyZ2luLXRvcDogLjFyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMjAsIDUzLCA2OSwgMC45KTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6aW52YWxpZCwgLmZvcm0tY29udHJvbC5pcy1pbnZhbGlkLCAud2FzLXZhbGlkYXRlZFxcbi5jdXN0b20tc2VsZWN0OmludmFsaWQsXFxuLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZCB7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6aW52YWxpZDpmb2N1cywgLmZvcm0tY29udHJvbC5pcy1pbnZhbGlkOmZvY3VzLCAud2FzLXZhbGlkYXRlZFxcbi5jdXN0b20tc2VsZWN0OmludmFsaWQ6Zm9jdXMsXFxuLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZDpmb2N1cyB7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyMjAsIDUzLCA2OSwgMC4yNSk7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6aW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsIC5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsIC53YXMtdmFsaWRhdGVkXFxuLmN1c3RvbS1zZWxlY3Q6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkXFxuLmN1c3RvbS1zZWxlY3Q6aW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsXFxuLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sLWZpbGU6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCwgLmZvcm0tY29udHJvbC1maWxlLmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4uZm9ybS1jb250cm9sLWZpbGUuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OmludmFsaWQgfiAuZm9ybS1jaGVjay1sYWJlbCwgLmZvcm0tY2hlY2staW5wdXQuaXMtaW52YWxpZCB+IC5mb3JtLWNoZWNrLWxhYmVsIHtcXG4gIGNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6aW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsIC5mb3JtLWNoZWNrLWlucHV0LmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4uZm9ybS1jaGVjay1pbnB1dC5pcy1pbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsIHtcXG4gIGNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmEyYTk7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U0NjA2ZDtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxcHggI2ZmZiwgMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuMjUpO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6aW52YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbCwgLmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6aW52YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbDo6YWZ0ZXIsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkIH4gLmN1c3RvbS1maWxlLWxhYmVsOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWZpbGUtbGFiZWwsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkOmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjI1KTtcXG59XFxuXFxuLmZvcm0taW5saW5lIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZm9ybS1pbmxpbmUgLmZvcm0tY2hlY2sge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmZvcm0taW5saW5lIGxhYmVsIHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmZvcm0tZ3JvdXAge1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IHdyYXA7XFxuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmZvcm0tY29udHJvbCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmZvcm0tY29udHJvbC1wbGFpbnRleHQge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmlucHV0LWdyb3VwLFxcbiAgLmZvcm0taW5saW5lIC5jdXN0b20tc2VsZWN0IHtcXG4gICAgd2lkdGg6IGF1dG87XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmZvcm0tY2hlY2sge1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIHBhZGRpbmctbGVmdDogMDtcXG4gIH1cXG4gIC5mb3JtLWlubGluZSAuZm9ybS1jaGVjay1pbnB1dCB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtO1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG4gIC5mb3JtLWlubGluZSAuY3VzdG9tLWNvbnRyb2wge1xcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgfVxcbiAgLmZvcm0taW5saW5lIC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICB9XFxufVxcblxcbi5idG4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbiAgdHJhbnNpdGlvbjogY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgLmJ0biB7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxuICB9XFxufVxcblxcbi5idG46aG92ZXIsIC5idG46Zm9jdXMge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uYnRuOmZvY3VzLCAuYnRuLmZvY3VzIHtcXG4gIG91dGxpbmU6IDA7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5idG4uZGlzYWJsZWQsIC5idG46ZGlzYWJsZWQge1xcbiAgb3BhY2l0eTogMC42NTtcXG59XFxuXFxuLmJ0bjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmEuYnRuLmRpc2FibGVkLFxcbmZpZWxkc2V0OmRpc2FibGVkIGEuYnRuIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uYnRuLXByaW1hcnkge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2OWQ5O1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA2MmNjO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6Zm9jdXMsIC5idG4tcHJpbWFyeS5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC41KTtcXG59XFxuXFxuLmJ0bi1wcmltYXJ5LmRpc2FibGVkLCAuYnRuLXByaW1hcnk6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1wcmltYXJ5LmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDYyY2M7XFxuICBib3JkZXItY29sb3I6ICMwMDVjYmY7XFxufVxcblxcbi5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjUpO1xcbn1cXG5cXG4uYnRuLXNlY29uZGFyeSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2Q7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tc2Vjb25kYXJ5OmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVhNjI2ODtcXG4gIGJvcmRlci1jb2xvcjogIzU0NWI2MjtcXG59XFxuXFxuLmJ0bi1zZWNvbmRhcnk6Zm9jdXMsIC5idG4tc2Vjb25kYXJ5LmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDEwOCwgMTE3LCAxMjUsIDAuNSk7XFxufVxcblxcbi5idG4tc2Vjb25kYXJ5LmRpc2FibGVkLCAuYnRuLXNlY29uZGFyeTpkaXNhYmxlZCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2Q7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1zZWNvbmRhcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0NWI2MjtcXG4gIGJvcmRlci1jb2xvcjogIzRlNTU1YjtcXG59XFxuXFxuLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMTA4LCAxMTcsIDEyNSwgMC41KTtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxODgzODtcXG4gIGJvcmRlci1jb2xvcjogIzFlN2UzNDtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzOmZvY3VzLCAuYnRuLXN1Y2Nlc3MuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuNSk7XFxufVxcblxcbi5idG4tc3VjY2Vzcy5kaXNhYmxlZCwgLmJ0bi1zdWNjZXNzOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tc3VjY2Vzcy5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWU3ZTM0O1xcbiAgYm9yZGVyLWNvbG9yOiAjMWM3NDMwO1xcbn1cXG5cXG4uYnRuLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSg0MCwgMTY3LCA2OSwgMC41KTtcXG59XFxuXFxuLmJ0bi1pbmZvIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcXG4gIGJvcmRlci1jb2xvcjogIzE3YTJiODtcXG59XFxuXFxuLmJ0bi1pbmZvOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzEzODQ5NjtcXG4gIGJvcmRlci1jb2xvcjogIzExN2E4YjtcXG59XFxuXFxuLmJ0bi1pbmZvOmZvY3VzLCAuYnRuLWluZm8uZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWluZm8uZGlzYWJsZWQsIC5idG4taW5mbzpkaXNhYmxlZCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjg7XFxuICBib3JkZXItY29sb3I6ICMxN2EyYjg7XFxufVxcblxcbi5idG4taW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4taW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuLnNob3cgPiAuYnRuLWluZm8uZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzExN2E4YjtcXG4gIGJvcmRlci1jb2xvcjogIzEwNzA3ZjtcXG59XFxuXFxuLmJ0bi1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4uc2hvdyA+IC5idG4taW5mby5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpO1xcbn1cXG5cXG4uYnRuLXdhcm5pbmcge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3O1xcbn1cXG5cXG4uYnRuLXdhcm5pbmc6aG92ZXIge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBhODAwO1xcbiAgYm9yZGVyLWNvbG9yOiAjZDM5ZTAwO1xcbn1cXG5cXG4uYnRuLXdhcm5pbmc6Zm9jdXMsIC5idG4td2FybmluZy5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNTUsIDE5MywgNywgMC41KTtcXG59XFxuXFxuLmJ0bi13YXJuaW5nLmRpc2FibGVkLCAuYnRuLXdhcm5pbmc6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3O1xcbn1cXG5cXG4uYnRuLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi13YXJuaW5nLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMzllMDA7XFxuICBib3JkZXItY29sb3I6ICNjNjk1MDA7XFxufVxcblxcbi5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDI1NSwgMTkzLCA3LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWRhbmdlciB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDU7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi5idG4tZGFuZ2VyOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2M4MjMzMztcXG4gIGJvcmRlci1jb2xvcjogI2JkMjEzMDtcXG59XFxuXFxuLmJ0bi1kYW5nZXI6Zm9jdXMsIC5idG4tZGFuZ2VyLmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWRhbmdlci5kaXNhYmxlZCwgLmJ0bi1kYW5nZXI6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4uYnRuLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tZGFuZ2VyLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZDIxMzA7XFxuICBib3JkZXItY29sb3I6ICNiMjFmMmQ7XFxufVxcblxcbi5idG4tZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWxpZ2h0IHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJ0bi1saWdodDpob3ZlciB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMmU2ZWE7XFxuICBib3JkZXItY29sb3I6ICNkYWUwZTU7XFxufVxcblxcbi5idG4tbGlnaHQ6Zm9jdXMsIC5idG4tbGlnaHQuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTtcXG59XFxuXFxuLmJ0bi1saWdodC5kaXNhYmxlZCwgLmJ0bi1saWdodDpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmE7XFxufVxcblxcbi5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tbGlnaHQuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTBlNTtcXG4gIGJvcmRlci1jb2xvcjogI2QzZDlkZjtcXG59XFxuXFxuLmJ0bi1saWdodDpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1saWdodC5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTtcXG59XFxuXFxuLmJ0bi1kYXJrIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJ0bi1kYXJrOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzMjcyYjtcXG4gIGJvcmRlci1jb2xvcjogIzFkMjEyNDtcXG59XFxuXFxuLmJ0bi1kYXJrOmZvY3VzLCAuYnRuLWRhcmsuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNTIsIDU4LCA2NCwgMC41KTtcXG59XFxuXFxuLmJ0bi1kYXJrLmRpc2FibGVkLCAuYnRuLWRhcms6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwO1xcbn1cXG5cXG4uYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1kYXJrLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDIxMjQ7XFxuICBib3JkZXItY29sb3I6ICMxNzFhMWQ7XFxufVxcblxcbi5idG4tZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLWRhcmsuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDUyLCA1OCwgNjQsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1wcmltYXJ5IHtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtcHJpbWFyeTpob3ZlciB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICBib3JkZXItY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5idG4tb3V0bGluZS1wcmltYXJ5OmZvY3VzLCAuYnRuLW91dGxpbmUtcHJpbWFyeS5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXByaW1hcnkuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1wcmltYXJ5OmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gIGJvcmRlci1jb2xvcjogIzAwN2JmZjtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtcHJpbWFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tb3V0bGluZS1zZWNvbmRhcnk6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xcbiAgYm9yZGVyLWNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc2Vjb25kYXJ5OmZvY3VzLCAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDEwOCwgMTE3LCAxMjUsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1zZWNvbmRhcnkuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xcbiAgYm9yZGVyLWNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgxMDgsIDExNywgMTI1LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2VzcyB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2Vzczpmb2N1cywgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1zdWNjZXNzLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtc3VjY2VzczpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxufVxcblxcbi5idG4tb3V0bGluZS1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mbyB7XFxuICBjb2xvcjogIzE3YTJiODtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogIzE3YTJiODtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWluZm86aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcbiAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mbzpmb2N1cywgLmJ0bi1vdXRsaW5lLWluZm8uZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mby5kaXNhYmxlZCwgLmJ0bi1vdXRsaW5lLWluZm86ZGlzYWJsZWQge1xcbiAgY29sb3I6ICMxN2EyYjg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtaW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtaW5mby5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcbiAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1pbmZvLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyMywgMTYyLCAxODQsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS13YXJuaW5nIHtcXG4gIGNvbG9yOiAjZmZjMTA3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtd2FybmluZzpob3ZlciB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XFxuICBib3JkZXItY29sb3I6ICNmZmMxMDc7XFxufVxcblxcbi5idG4tb3V0bGluZS13YXJuaW5nOmZvY3VzLCAuYnRuLW91dGxpbmUtd2FybmluZy5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNTUsIDE5MywgNywgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZGlzYWJsZWQsIC5idG4tb3V0bGluZS13YXJuaW5nOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZmZjMTA3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS13YXJuaW5nOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNztcXG4gIGJvcmRlci1jb2xvcjogI2ZmYzEwNztcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtd2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtd2FybmluZy5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjU1LCAxOTMsIDcsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXIge1xcbiAgY29sb3I6ICNkYzM1NDU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXI6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFuZ2VyOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFuZ2VyLmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFuZ2VyLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtZGFuZ2VyOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZGMzNTQ1O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhbmdlci5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1saWdodCB7XFxuICBjb2xvcjogI2Y4ZjlmYTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0OmhvdmVyIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0OmZvY3VzLCAuYnRuLW91dGxpbmUtbGlnaHQuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0LmRpc2FibGVkLCAuYnRuLW91dGxpbmUtbGlnaHQ6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmOGY5ZmE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1saWdodC5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbiAgYm9yZGVyLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLWxpZ2h0LmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNDgsIDI0OSwgMjUwLCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFyayB7XFxuICBjb2xvcjogIzM0M2E0MDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhcms6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFyazpmb2N1cywgLmJ0bi1vdXRsaW5lLWRhcmsuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNTIsIDU4LCA2NCwgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhcmsuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1kYXJrOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjMzQzYTQwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYXJrOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhcmsuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtZGFyay5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNTIsIDU4LCA2NCwgMC41KTtcXG59XFxuXFxuLmJ0bi1saW5rIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjb2xvcjogIzAwN2JmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uYnRuLWxpbms6aG92ZXIge1xcbiAgY29sb3I6ICMwMDU2YjM7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1saW5rOmZvY3VzLCAuYnRuLWxpbmsuZm9jdXMge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuXFxuLmJ0bi1saW5rOmRpc2FibGVkLCAuYnRuLWxpbmsuZGlzYWJsZWQge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLmJ0bi1sZywgLmJ0bi1ncm91cC1sZyA+IC5idG4ge1xcbiAgcGFkZGluZzogMC41cmVtIDFyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4uYnRuLXNtLCAuYnRuLWdyb3VwLXNtID4gLmJ0biB7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgYm9yZGVyLXJhZGl1czogMC4ycmVtO1xcbn1cXG5cXG4uYnRuLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5idG4tYmxvY2sgKyAuYnRuLWJsb2NrIHtcXG4gIG1hcmdpbi10b3A6IDAuNXJlbTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwic3VibWl0XFxcIl0uYnRuLWJsb2NrLFxcbmlucHV0W3R5cGU9XFxcInJlc2V0XFxcIl0uYnRuLWJsb2NrLFxcbmlucHV0W3R5cGU9XFxcImJ1dHRvblxcXCJdLmJ0bi1ibG9jayB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmZhZGUge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjE1cyBsaW5lYXI7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5mYWRlIHtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gIH1cXG59XFxuXFxuLmZhZGU6bm90KC5zaG93KSB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4uY29sbGFwc2U6bm90KC5zaG93KSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uY29sbGFwc2luZyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IDAuMzVzIGVhc2U7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5jb2xsYXBzaW5nIHtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gIH1cXG59XFxuXFxuLmRyb3B1cCxcXG4uZHJvcHJpZ2h0LFxcbi5kcm9wZG93bixcXG4uZHJvcGxlZnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1NWVtO1xcbiAgdmVydGljYWwtYWxpZ246IDAuMjU1ZW07XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGJvcmRlci10b3A6IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxuICBib3JkZXItbGVmdDogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uZHJvcGRvd24tbWVudSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwMCU7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTAwMDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1pbi13aWR0aDogMTByZW07XFxuICBwYWRkaW5nOiAwLjVyZW0gMDtcXG4gIG1hcmdpbjogMC4xMjVyZW0gMCAwO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjE1KTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXG4gIHJpZ2h0OiAwO1xcbiAgbGVmdDogYXV0bztcXG59XFxuXFxuLmRyb3B1cCAuZHJvcGRvd24tbWVudSB7XFxuICB0b3A6IGF1dG87XFxuICBib3R0b206IDEwMCU7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMC4xMjVyZW07XFxufVxcblxcbi5kcm9wdXAgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMC4yNTVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjI1NWVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItdG9wOiAwO1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLWxlZnQ6IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uZHJvcHVwIC5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi1tZW51IHtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiBhdXRvO1xcbiAgbGVmdDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tbGVmdDogMC4xMjVyZW07XFxufVxcblxcbi5kcm9wcmlnaHQgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMC4yNTVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjI1NWVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItdG9wOiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogMDtcXG4gIGJvcmRlci1ib3R0b206IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDAuM2VtIHNvbGlkO1xcbn1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAwO1xcbn1cXG5cXG4uZHJvcGxlZnQgLmRyb3Bkb3duLW1lbnUge1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDEwMCU7XFxuICBsZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1yaWdodDogMC4xMjVyZW07XFxufVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1NWVtO1xcbiAgdmVydGljYWwtYWxpZ246IDAuMjU1ZW07XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG59XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOjpiZWZvcmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjU1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4yNTVlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLXRvcDogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLWJvdHRvbTogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOmVtcHR5OjphZnRlciB7XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmJlZm9yZSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogMDtcXG59XFxuXFxuLmRyb3Bkb3duLW1lbnVbeC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSwgLmRyb3Bkb3duLW1lbnVbeC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdLCAuZHJvcGRvd24tbWVudVt4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdLCAuZHJvcGRvd24tbWVudVt4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSB7XFxuICByaWdodDogYXV0bztcXG4gIGJvdHRvbTogYXV0bztcXG59XFxuXFxuLmRyb3Bkb3duLWRpdmlkZXIge1xcbiAgaGVpZ2h0OiAwO1xcbiAgbWFyZ2luOiAwLjVyZW0gMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U5ZWNlZjtcXG59XFxuXFxuLmRyb3Bkb3duLWl0ZW0ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMS41cmVtO1xcbiAgY2xlYXI6IGJvdGg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uZHJvcGRvd24taXRlbTpob3ZlciwgLmRyb3Bkb3duLWl0ZW06Zm9jdXMge1xcbiAgY29sb3I6ICMxNjE4MWI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uZHJvcGRvd24taXRlbS5hY3RpdmUsIC5kcm9wZG93bi1pdGVtOmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5kcm9wZG93bi1pdGVtLmRpc2FibGVkLCAuZHJvcGRvd24taXRlbTpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uZHJvcGRvd24tbWVudS5zaG93IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZHJvcGRvd24taGVhZGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC41cmVtIDEuNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG5cXG4uZHJvcGRvd24taXRlbS10ZXh0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC4yNXJlbSAxLjVyZW07XFxuICBjb2xvcjogIzIxMjUyOTtcXG59XFxuXFxuLmJ0bi1ncm91cCxcXG4uYnRuLWdyb3VwLXZlcnRpY2FsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveDtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLmJ0bi1ncm91cCA+IC5idG4sXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLW1zLWZsZXg6IDAgMSBhdXRvO1xcbiAgZmxleDogMCAxIGF1dG87XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOmhvdmVyLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuOmhvdmVyIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOmZvY3VzLCAuYnRuLWdyb3VwID4gLmJ0bjphY3RpdmUsIC5idG4tZ3JvdXAgPiAuYnRuLmFjdGl2ZSxcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjpmb2N1cyxcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjphY3RpdmUsXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4uYWN0aXZlIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5idG4tZ3JvdXAgLmJ0biArIC5idG4sXFxuLmJ0bi1ncm91cCAuYnRuICsgLmJ0bi1ncm91cCxcXG4uYnRuLWdyb3VwIC5idG4tZ3JvdXAgKyAuYnRuLFxcbi5idG4tZ3JvdXAgLmJ0bi1ncm91cCArIC5idG4tZ3JvdXAsXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCAuYnRuICsgLmJ0bixcXG4uYnRuLWdyb3VwLXZlcnRpY2FsIC5idG4gKyAuYnRuLWdyb3VwLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgLmJ0bi1ncm91cCArIC5idG4sXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCAuYnRuLWdyb3VwICsgLmJ0bi1ncm91cCB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLmJ0bi10b29sYmFyIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICAtbXMtZmxleC1wYWNrOiBzdGFydDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLmJ0bi10b29sYmFyIC5pbnB1dC1ncm91cCB7XFxuICB3aWR0aDogYXV0bztcXG59XFxuXFxuLmJ0bi1ncm91cCA+IC5idG46Zmlyc3QtY2hpbGQge1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpLFxcbi5idG4tZ3JvdXAgPiAuYnRuLWdyb3VwOm5vdCg6bGFzdC1jaGlsZCkgPiAuYnRuIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOm5vdCg6Zmlyc3QtY2hpbGQpLFxcbi5idG4tZ3JvdXAgPiAuYnRuLWdyb3VwOm5vdCg6Zmlyc3QtY2hpbGQpID4gLmJ0biB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG59XFxuXFxuLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjU2MjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDAuNTYyNXJlbTtcXG59XFxuXFxuLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdDo6YWZ0ZXIsXFxuLmRyb3B1cCAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0OjphZnRlcixcXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGUtc3BsaXQ6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uZHJvcGxlZnQgLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdDo6YmVmb3JlIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuXFxuLmJ0bi1zbSArIC5kcm9wZG93bi10b2dnbGUtc3BsaXQsIC5idG4tZ3JvdXAtc20gPiAuYnRuICsgLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjM3NXJlbTtcXG4gIHBhZGRpbmctbGVmdDogMC4zNzVyZW07XFxufVxcblxcbi5idG4tbGcgKyAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0LCAuYnRuLWdyb3VwLWxnID4gLmJ0biArIC5kcm9wZG93bi10b2dnbGUtc3BsaXQge1xcbiAgcGFkZGluZy1yaWdodDogMC43NXJlbTtcXG4gIHBhZGRpbmctbGVmdDogMC43NXJlbTtcXG59XFxuXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCB7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4uYnRuLWdyb3VwLXZlcnRpY2FsIC5idG4sXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCAuYnRuLWdyb3VwIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0biArIC5idG4sXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4gKyAuYnRuLWdyb3VwLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuLWdyb3VwICsgLmJ0bixcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bi1ncm91cCArIC5idG4tZ3JvdXAge1xcbiAgbWFyZ2luLXRvcDogLTFweDtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjpub3QoOmxhc3QtY2hpbGQpOm5vdCguZHJvcGRvd24tdG9nZ2xlKSxcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bi1ncm91cDpub3QoOmxhc3QtY2hpbGQpID4gLmJ0biB7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxufVxcblxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuOm5vdCg6Zmlyc3QtY2hpbGQpLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuLWdyb3VwOm5vdCg6Zmlyc3QtY2hpbGQpID4gLmJ0biB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxufVxcblxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0bixcXG4uYnRuLWdyb3VwLXRvZ2dsZSA+IC5idG4tZ3JvdXAgPiAuYnRuIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0biBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdLFxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0biBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdLFxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0bi1ncm91cCA+IC5idG4gaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSxcXG4uYnRuLWdyb3VwLXRvZ2dsZSA+IC5idG4tZ3JvdXAgPiAuYnRuIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoO1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLW1zLWZsZXg6IDEgMSBhdXRvO1xcbiAgZmxleDogMSAxIGF1dG87XFxuICB3aWR0aDogMSU7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sICsgLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sICsgLmN1c3RvbS1zZWxlY3QsXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbCArIC5jdXN0b20tZmlsZSxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdCArIC5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1zZWxlY3QgKyAuY3VzdG9tLXNlbGVjdCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdCArIC5jdXN0b20tZmlsZSxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUgKyAuZm9ybS1jb250cm9sLFxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZSArIC5jdXN0b20tc2VsZWN0LFxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZSArIC5jdXN0b20tZmlsZSB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbDpmb2N1cyxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdDpmb2N1cyxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUgLmN1c3RvbS1maWxlLWlucHV0OmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsIHtcXG4gIHotaW5kZXg6IDM7XFxufVxcblxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZSAuY3VzdG9tLWZpbGUtaW5wdXQ6Zm9jdXMge1xcbiAgei1pbmRleDogNDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbDpub3QoOmxhc3QtY2hpbGQpLFxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tc2VsZWN0Om5vdCg6bGFzdC1jaGlsZCkge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbDpub3QoOmZpcnN0LWNoaWxkKSxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdDpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGU6bm90KDpsYXN0LWNoaWxkKSAuY3VzdG9tLWZpbGUtbGFiZWwsXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlOm5vdCg6bGFzdC1jaGlsZCkgLmN1c3RvbS1maWxlLWxhYmVsOjphZnRlciB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGU6bm90KDpmaXJzdC1jaGlsZCkgLmN1c3RvbS1maWxlLWxhYmVsIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCxcXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmlucHV0LWdyb3VwLXByZXBlbmQgLmJ0bixcXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIC5idG4ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMjtcXG59XFxuXFxuLmlucHV0LWdyb3VwLXByZXBlbmQgLmJ0biArIC5idG4sXFxuLmlucHV0LWdyb3VwLXByZXBlbmQgLmJ0biArIC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1wcmVwZW5kIC5pbnB1dC1ncm91cC10ZXh0ICsgLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLXByZXBlbmQgLmlucHV0LWdyb3VwLXRleHQgKyAuYnRuLFxcbi5pbnB1dC1ncm91cC1hcHBlbmQgLmJ0biArIC5idG4sXFxuLmlucHV0LWdyb3VwLWFwcGVuZCAuYnRuICsgLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLWFwcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCArIC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1hcHBlbmQgLmlucHV0LWdyb3VwLXRleHQgKyAuYnRuIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMXB4O1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCB7XFxuICBtYXJnaW4tcmlnaHQ6IC0xcHg7XFxufVxcblxcbi5pbnB1dC1ncm91cC1hcHBlbmQge1xcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7XFxufVxcblxcbi5pbnB1dC1ncm91cC10ZXh0IHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmlucHV0LWdyb3VwLXRleHQgaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSxcXG4uaW5wdXQtZ3JvdXAtdGV4dCBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdIHtcXG4gIG1hcmdpbi10b3A6IDA7XFxufVxcblxcbi5pbnB1dC1ncm91cC1sZyA+IC5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kID4gLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuYnRuLFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuYnRuIHtcXG4gIGhlaWdodDogY2FsYygyLjg3NXJlbSArIDJweCk7XFxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxufVxcblxcbi5pbnB1dC1ncm91cC1zbSA+IC5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtYXBwZW5kID4gLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuYnRuLFxcbi5pbnB1dC1ncm91cC1zbSA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuYnRuIHtcXG4gIGhlaWdodDogY2FsYygxLjgxMjVyZW0gKyAycHgpO1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMnJlbTtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuYnRuLFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kID4gLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZDpub3QoOmxhc3QtY2hpbGQpID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kOm5vdCg6bGFzdC1jaGlsZCkgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kOmxhc3QtY2hpbGQgPiAuYnRuOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpLFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1hcHBlbmQ6bGFzdC1jaGlsZCA+IC5pbnB1dC1ncm91cC10ZXh0Om5vdCg6bGFzdC1jaGlsZCkge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kOm5vdCg6Zmlyc3QtY2hpbGQpID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZDpub3QoOmZpcnN0LWNoaWxkKSA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kOmZpcnN0LWNoaWxkID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZDpmaXJzdC1jaGlsZCA+IC5pbnB1dC1ncm91cC10ZXh0Om5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uY3VzdG9tLWNvbnRyb2wge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtaW4taGVpZ2h0OiAxLjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDEuNXJlbTtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlubGluZSB7XFxuICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IC0xO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1pbnB1dDpmb2N1cyB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDFweCAjZmZmLCAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1pbnB1dDphY3RpdmUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiM2Q3ZmY7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWxhYmVsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMC4yNXJlbTtcXG4gIGxlZnQ6IC0xLjVyZW07XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGVlMmU2O1xcbn1cXG5cXG4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMC4yNXJlbTtcXG4gIGxlZnQ6IC0xLjVyZW07XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogNTAlIDUwJTtcXG59XFxuXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG59XFxuXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNFJTNDcGF0aCBmaWxsPSclMjNmZmYnIGQ9J002LjU2NC43NWwtMy41OSAzLjYxMi0xLjUzOC0xLjU1TDAgNC4yNiAyLjk3NCA3LjI1IDggMi4xOTN6Jy8lM0UlM0Mvc3ZnJTNFXFxcIik7XFxufVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmluZGV0ZXJtaW5hdGUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDppbmRldGVybWluYXRlIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNCclM0UlM0NwYXRoIHN0cm9rZT0nJTIzZmZmJyBkPSdNMCAyaDQnLyUzRSUzQy9zdmclM0VcXFwiKTtcXG59XFxuXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTIzLCAyNTUsIDAuNSk7XFxufVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkOmluZGV0ZXJtaW5hdGUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEyMywgMjU1LCAwLjUpO1xcbn1cXG5cXG4uY3VzdG9tLXJhZGlvIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG59XFxuXFxuLmN1c3RvbS1yYWRpbyAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5jdXN0b20tcmFkaW8gLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNFJTNDY2lyY2xlIHI9JzMnIGZpbGw9JyUyM2ZmZicvJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbn1cXG5cXG4uY3VzdG9tLXJhZGlvIC5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxMjMsIDI1NSwgMC41KTtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3Qge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGNhbGMoMi4yNXJlbSArIDJweCk7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAxLjc1cmVtIDAuMzc1cmVtIDAuNzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgYmFja2dyb3VuZDogI2ZmZiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNSclM0UlM0NwYXRoIGZpbGw9JyUyMzM0M2E0MCcgZD0nTTIgMEwwIDJoNHptMCA1TDAgM2g0eicvJTNFJTNDL3N2ZyUzRVxcXCIpIG5vLXJlcGVhdCByaWdodCAwLjc1cmVtIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogOHB4IDEwcHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi5jdXN0b20tc2VsZWN0OmZvY3VzIHtcXG4gIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcXG4gIG91dGxpbmU6IDA7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgxMjgsIDE4OSwgMjU1LCAwLjUpO1xcbn1cXG5cXG4uY3VzdG9tLXNlbGVjdDpmb2N1czo6LW1zLXZhbHVlIHtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3RbbXVsdGlwbGVdLCAuY3VzdG9tLXNlbGVjdFtzaXplXTpub3QoW3NpemU9XFxcIjFcXFwiXSkge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgcGFkZGluZy1yaWdodDogMC43NXJlbTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxufVxcblxcbi5jdXN0b20tc2VsZWN0OmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3Q6Oi1tcy1leHBhbmQge1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3Qtc20ge1xcbiAgaGVpZ2h0OiBjYWxjKDEuODEyNXJlbSArIDJweCk7XFxuICBwYWRkaW5nLXRvcDogMC4zNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC4zNzVyZW07XFxuICBmb250LXNpemU6IDc1JTtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3QtbGcge1xcbiAgaGVpZ2h0OiBjYWxjKDIuODc1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmctdG9wOiAwLjM3NXJlbTtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjM3NXJlbTtcXG4gIGZvbnQtc2l6ZTogMTI1JTtcXG59XFxuXFxuLmN1c3RvbS1maWxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBjYWxjKDIuMjVyZW0gKyAycHgpO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmN1c3RvbS1maWxlLWlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IDI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXG4gIG1hcmdpbjogMDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5jdXN0b20tZmlsZS1pbnB1dDpmb2N1cyB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICBib3JkZXItY29sb3I6ICM4MGJkZmY7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5jdXN0b20tZmlsZS1pbnB1dDpmb2N1cyB+IC5jdXN0b20tZmlsZS1sYWJlbDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjODBiZGZmO1xcbn1cXG5cXG4uY3VzdG9tLWZpbGUtaW5wdXQ6ZGlzYWJsZWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG59XFxuXFxuLmN1c3RvbS1maWxlLWlucHV0OmxhbmcoZW4pIH4gLmN1c3RvbS1maWxlLWxhYmVsOjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiQnJvd3NlXFxcIjtcXG59XFxuXFxuLmN1c3RvbS1maWxlLWxhYmVsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDE7XFxuICBoZWlnaHQ6IGNhbGMoMi4yNXJlbSArIDJweCk7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjZWQ0ZGE7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4uY3VzdG9tLWZpbGUtbGFiZWw6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgei1pbmRleDogMztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAyLjI1cmVtO1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIGNvbnRlbnQ6IFxcXCJCcm93c2VcXFwiO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2NlZDRkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDA7XFxufVxcblxcbi5jdXN0b20tcmFuZ2Uge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLmN1c3RvbS1yYW5nZTpmb2N1czo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICNmZmYsIDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcXG59XFxuXFxuLmN1c3RvbS1yYW5nZTpmb2N1czo6LW1vei1yYW5nZS10aHVtYiB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxcHggI2ZmZiwgMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuMjUpO1xcbn1cXG5cXG4uY3VzdG9tLXJhbmdlOmZvY3VzOjotbXMtdGh1bWIge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICNmZmYsIDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcXG59XFxuXFxuLmN1c3RvbS1yYW5nZTo6LW1vei1mb2N1cy1vdXRlciB7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgbWFyZ2luLXRvcDogLTAuMjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5jdXN0b20tcmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gIH1cXG59XFxuXFxuLmN1c3RvbS1yYW5nZTo6LXdlYmtpdC1zbGlkZXItdGh1bWI6YWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiM2Q3ZmY7XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNrIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAwLjVyZW07XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGVlMmU2O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWIge1xcbiAgd2lkdGg6IDFyZW07XFxuICBoZWlnaHQ6IDFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5jdXN0b20tcmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWIge1xcbiAgICB0cmFuc2l0aW9uOiBub25lO1xcbiAgfVxcbn1cXG5cXG4uY3VzdG9tLXJhbmdlOjotbW96LXJhbmdlLXRodW1iOmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjNkN2ZmO1xcbn1cXG5cXG4uY3VzdG9tLXJhbmdlOjotbW96LXJhbmdlLXRyYWNrIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAwLjVyZW07XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGVlMmU2O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Oi1tcy10aHVtYiB7XFxuICB3aWR0aDogMXJlbTtcXG4gIGhlaWdodDogMXJlbTtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMnJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAwLjJyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5jdXN0b20tcmFuZ2U6Oi1tcy10aHVtYiB7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxuICB9XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Oi1tcy10aHVtYjphY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IzZDdmZjtcXG59XFxuXFxuLmN1c3RvbS1yYW5nZTo6LW1zLXRyYWNrIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAwLjVyZW07XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItd2lkdGg6IDAuNXJlbTtcXG59XFxuXFxuLmN1c3RvbS1yYW5nZTo6LW1zLWZpbGwtbG93ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RlZTJlNjtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxufVxcblxcbi5jdXN0b20tcmFuZ2U6Oi1tcy1maWxsLXVwcGVyIHtcXG4gIG1hcmdpbi1yaWdodDogMTVweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZWUyZTY7XFxuICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbn1cXG5cXG4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSxcXG4uY3VzdG9tLWZpbGUtbGFiZWwsXFxuLmN1c3RvbS1zZWxlY3Qge1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuICAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSxcXG4gIC5jdXN0b20tZmlsZS1sYWJlbCxcXG4gIC5jdXN0b20tc2VsZWN0IHtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gIH1cXG59XFxuXFxuLm5hdiB7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC13cmFwOiB3cmFwO1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi5uYXYtbGluayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbn1cXG5cXG4ubmF2LWxpbms6aG92ZXIsIC5uYXYtbGluazpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5uYXYtbGluay5kaXNhYmxlZCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLm5hdi10YWJzIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGVlMmU2O1xcbn1cXG5cXG4ubmF2LXRhYnMgLm5hdi1pdGVtIHtcXG4gIG1hcmdpbi1ib3R0b206IC0xcHg7XFxufVxcblxcbi5uYXYtdGFicyAubmF2LWxpbmsge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5uYXYtdGFicyAubmF2LWxpbms6aG92ZXIsIC5uYXYtdGFicyAubmF2LWxpbms6Zm9jdXMge1xcbiAgYm9yZGVyLWNvbG9yOiAjZTllY2VmICNlOWVjZWYgI2RlZTJlNjtcXG59XFxuXFxuLm5hdi10YWJzIC5uYXYtbGluay5kaXNhYmxlZCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLm5hdi10YWJzIC5uYXYtbGluay5hY3RpdmUsXFxuLm5hdi10YWJzIC5uYXYtaXRlbS5zaG93IC5uYXYtbGluayB7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItY29sb3I6ICNkZWUyZTYgI2RlZTJlNiAjZmZmO1xcbn1cXG5cXG4ubmF2LXRhYnMgLmRyb3Bkb3duLW1lbnUge1xcbiAgbWFyZ2luLXRvcDogLTFweDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuXFxuLm5hdi1waWxscyAubmF2LWxpbmsge1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLm5hdi1waWxscyAubmF2LWxpbmsuYWN0aXZlLFxcbi5uYXYtcGlsbHMgLnNob3cgPiAubmF2LWxpbmsge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4ubmF2LWZpbGwgLm5hdi1pdGVtIHtcXG4gIC1tcy1mbGV4OiAxIDEgYXV0bztcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubmF2LWp1c3RpZmllZCAubmF2LWl0ZW0ge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICBmbGV4LWJhc2lzOiAwO1xcbiAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICBmbGV4LWdyb3c6IDE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi50YWItY29udGVudCA+IC50YWItcGFuZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4udGFiLWNvbnRlbnQgPiAuYWN0aXZlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ubmF2YmFyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcXG59XFxuXFxuLm5hdmJhciA+IC5jb250YWluZXIsXFxuLm5hdmJhciA+IC5jb250YWluZXItZmx1aWQge1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuLm5hdmJhci1icmFuZCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nLXRvcDogMC4zMTI1cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuMzEyNXJlbTtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLm5hdmJhci1icmFuZDpob3ZlciwgLm5hdmJhci1icmFuZDpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5uYXZiYXItbmF2IHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4ubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgcGFkZGluZy1yaWdodDogMDtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuXFxuLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgcG9zaXRpb246IHN0YXRpYztcXG4gIGZsb2F0OiBub25lO1xcbn1cXG5cXG4ubmF2YmFyLXRleHQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZy10b3A6IDAuNXJlbTtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjVyZW07XFxufVxcblxcbi5uYXZiYXItY29sbGFwc2Uge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDEwMCU7XFxuICBmbGV4LWJhc2lzOiAxMDAlO1xcbiAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICBmbGV4LWdyb3c6IDE7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLm5hdmJhci10b2dnbGVyIHtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC43NXJlbTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5uYXZiYXItdG9nZ2xlcjpob3ZlciwgLm5hdmJhci10b2dnbGVyOmZvY3VzIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLm5hdmJhci10b2dnbGVyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLm5hdmJhci10b2dnbGVyLWljb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEuNWVtO1xcbiAgaGVpZ2h0OiAxLjVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGJhY2tncm91bmQ6IG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyO1xcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCU7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzUuOThweCkge1xcbiAgLm5hdmJhci1leHBhbmQtc20gPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQtc20gPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLXNtIHtcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICAtbXMtZmxleC1wYWNrOiBzdGFydDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXYge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IG5vd3JhcDtcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLWNvbGxhcHNlIHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogYXV0bztcXG4gICAgZmxleC1iYXNpczogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItdG9nZ2xlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjcuOThweCkge1xcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLW1kIHtcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICAtbXMtZmxleC1wYWNrOiBzdGFydDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbWQgLm5hdmJhci1uYXYge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbWQgLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLW1kID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IG5vd3JhcDtcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLWNvbGxhcHNlIHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogYXV0bztcXG4gICAgZmxleC1iYXNpczogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItdG9nZ2xlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA5OTEuOThweCkge1xcbiAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLWxnIHtcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICAtbXMtZmxleC1wYWNrOiBzdGFydDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1uYXYge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLWxnID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLWxnID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IG5vd3JhcDtcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLWNvbGxhcHNlIHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogYXV0bztcXG4gICAgZmxleC1iYXNpczogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItdG9nZ2xlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTk5Ljk4cHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLXhsID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLXhsID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxuICAgIHBhZGRpbmctbGVmdDogMDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLm5hdmJhci1leHBhbmQteGwge1xcbiAgICAtbXMtZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdiB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogbm93cmFwO1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItY29sbGFwc2Uge1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiBhdXRvO1xcbiAgICBmbGV4LWJhc2lzOiBhdXRvO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci10b2dnbGVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG59XFxuXFxuLm5hdmJhci1leHBhbmQge1xcbiAgLW1zLWZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4ubmF2YmFyLWV4cGFuZCA+IC5jb250YWluZXIsXFxuLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxufVxcblxcbi5uYXZiYXItZXhwYW5kIC5uYXZiYXItbmF2IHtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4ubmF2YmFyLWV4cGFuZCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XFxufVxcblxcbi5uYXZiYXItZXhwYW5kID4gLmNvbnRhaW5lcixcXG4ubmF2YmFyLWV4cGFuZCA+IC5jb250YWluZXItZmx1aWQge1xcbiAgLW1zLWZsZXgtd3JhcDogbm93cmFwO1xcbiAgZmxleC13cmFwOiBub3dyYXA7XFxufVxcblxcbi5uYXZiYXItZXhwYW5kIC5uYXZiYXItY29sbGFwc2Uge1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiBhdXRvO1xcbiAgZmxleC1iYXNpczogYXV0bztcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgLm5hdmJhci10b2dnbGVyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci1icmFuZCB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xcbn1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQ6aG92ZXIsIC5uYXZiYXItbGlnaHQgLm5hdmJhci1icmFuZDpmb2N1cyB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xcbn1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbn1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5uYXYtbGluazpob3ZlciwgLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbms6Zm9jdXMge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWQge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zKTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAuc2hvdyA+IC5uYXYtbGluayxcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5hY3RpdmUgPiAubmF2LWxpbmssXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuc2hvdyxcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5uYXYtbGluay5hY3RpdmUge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLXRvZ2dsZXIge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG4gIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbn1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItdG9nZ2xlci1pY29uIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0Nzdmcgdmlld0JveD0nMCAwIDMwIDMwJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDcGF0aCBzdHJva2U9J3JnYmEoMCwgMCwgMCwgMC41KScgc3Ryb2tlLXdpZHRoPScyJyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1taXRlcmxpbWl0PScxMCcgZD0nTTQgN2gyMk00IDE1aDIyTTQgMjNoMjInLyUzRSUzQy9zdmclM0VcXFwiKTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLXRleHQge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLXRleHQgYSB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xcbn1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCBhOmhvdmVyLCAubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCBhOmZvY3VzIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSk7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1icmFuZDpob3ZlciwgLm5hdmJhci1kYXJrIC5uYXZiYXItYnJhbmQ6Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluazpob3ZlciwgLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluazpmb2N1cyB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KTtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluay5kaXNhYmxlZCB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5zaG93ID4gLm5hdi1saW5rLFxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAuYWN0aXZlID4gLm5hdi1saW5rLFxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbmsuc2hvdyxcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItdG9nZ2xlciB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLXRvZ2dsZXItaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHZpZXdCb3g9JzAgMCAzMCAzMCcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggc3Ryb2tlPSdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknIHN0cm9rZS13aWR0aD0nMicgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbWl0ZXJsaW1pdD0nMTAnIGQ9J000IDdoMjJNNCAxNWgyMk00IDIzaDIyJy8lM0UlM0Mvc3ZnJTNFXFxcIik7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLXRleHQge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCBhIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci10ZXh0IGE6aG92ZXIsIC5uYXZiYXItZGFyayAubmF2YmFyLXRleHQgYTpmb2N1cyB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLmNhcmQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgbWluLXdpZHRoOiAwO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY2xpcDogYm9yZGVyLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMjUpO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmNhcmQgPiBociB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuLmNhcmQgPiAubGlzdC1ncm91cDpmaXJzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmNhcmQgPiAubGlzdC1ncm91cDpsYXN0LWNoaWxkIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZCB7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5jYXJkLWJvZHkge1xcbiAgLW1zLWZsZXg6IDEgMSBhdXRvO1xcbiAgZmxleDogMSAxIGF1dG87XFxuICBwYWRkaW5nOiAxLjI1cmVtO1xcbn1cXG5cXG4uY2FyZC10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtO1xcbn1cXG5cXG4uY2FyZC1zdWJ0aXRsZSB7XFxuICBtYXJnaW4tdG9wOiAtMC4zNzVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5cXG4uY2FyZC10ZXh0Omxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmNhcmQtbGluazpob3ZlciB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5jYXJkLWxpbmsgKyAuY2FyZC1saW5rIHtcXG4gIG1hcmdpbi1sZWZ0OiAxLjI1cmVtO1xcbn1cXG5cXG4uY2FyZC1oZWFkZXIge1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wMyk7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyNSk7XFxufVxcblxcbi5jYXJkLWhlYWRlcjpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpIGNhbGMoMC4yNXJlbSAtIDFweCkgMCAwO1xcbn1cXG5cXG4uY2FyZC1oZWFkZXIgKyAubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci10b3A6IDA7XFxufVxcblxcbi5jYXJkLWZvb3RlciB7XFxuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDMpO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMjUpO1xcbn1cXG5cXG4uY2FyZC1mb290ZXI6bGFzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgY2FsYygwLjI1cmVtIC0gMXB4KSBjYWxjKDAuMjVyZW0gLSAxcHgpO1xcbn1cXG5cXG4uY2FyZC1oZWFkZXItdGFicyB7XFxuICBtYXJnaW4tcmlnaHQ6IC0wLjYyNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IC0wLjc1cmVtO1xcbiAgbWFyZ2luLWxlZnQ6IC0wLjYyNXJlbTtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcblxcbi5jYXJkLWhlYWRlci1waWxscyB7XFxuICBtYXJnaW4tcmlnaHQ6IC0wLjYyNXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAtMC42MjVyZW07XFxufVxcblxcbi5jYXJkLWltZy1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHBhZGRpbmc6IDEuMjVyZW07XFxufVxcblxcbi5jYXJkLWltZyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7XFxufVxcblxcbi5jYXJkLWltZy10b3Age1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7XFxufVxcblxcbi5jYXJkLWltZy1ib3R0b20ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7XFxufVxcblxcbi5jYXJkLWRlY2sge1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4uY2FyZC1kZWNrIC5jYXJkIHtcXG4gIG1hcmdpbi1ib3R0b206IDE1cHg7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmNhcmQtZGVjayB7XFxuICAgIC1tcy1mbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0xNXB4O1xcbiAgICBtYXJnaW4tbGVmdDogLTE1cHg7XFxuICB9XFxuICAuY2FyZC1kZWNrIC5jYXJkIHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIC1tcy1mbGV4OiAxIDAgMCU7XFxuICAgIGZsZXg6IDEgMCAwJTtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIG1hcmdpbi1yaWdodDogMTVweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgbWFyZ2luLWxlZnQ6IDE1cHg7XFxuICB9XFxufVxcblxcbi5jYXJkLWdyb3VwIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLmNhcmQtZ3JvdXAgPiAuY2FyZCB7XFxuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5jYXJkLWdyb3VwIHtcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IHdyYXA7XFxuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkIHtcXG4gICAgLW1zLWZsZXg6IDEgMCAwJTtcXG4gICAgZmxleDogMSAwIDAlO1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZCArIC5jYXJkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxuICAgIGJvcmRlci1sZWZ0OiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpmaXJzdC1jaGlsZCB7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6Zmlyc3QtY2hpbGQgLmNhcmQtaW1nLXRvcCxcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6Zmlyc3QtY2hpbGQgLmNhcmQtaGVhZGVyIHtcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmZpcnN0LWNoaWxkIC5jYXJkLWltZy1ib3R0b20sXFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmZpcnN0LWNoaWxkIC5jYXJkLWZvb3RlciB7XFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpsYXN0LWNoaWxkIHtcXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1pbWctdG9wLFxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpsYXN0LWNoaWxkIC5jYXJkLWhlYWRlciB7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmxhc3QtY2hpbGQgLmNhcmQtaW1nLWJvdHRvbSxcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1mb290ZXIge1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpvbmx5LWNoaWxkIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6b25seS1jaGlsZCAuY2FyZC1pbWctdG9wLFxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpvbmx5LWNoaWxkIC5jYXJkLWhlYWRlciB7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpvbmx5LWNoaWxkIC5jYXJkLWltZy1ib3R0b20sXFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOm9ubHktY2hpbGQgLmNhcmQtZm9vdGVyIHtcXG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCk6bm90KDpvbmx5LWNoaWxkKSB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCk6bm90KDpvbmx5LWNoaWxkKSAuY2FyZC1pbWctdG9wLFxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCg6b25seS1jaGlsZCkgLmNhcmQtaW1nLWJvdHRvbSxcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKTpub3QoOm9ubHktY2hpbGQpIC5jYXJkLWhlYWRlcixcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKTpub3QoOm9ubHktY2hpbGQpIC5jYXJkLWZvb3RlciB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICB9XFxufVxcblxcbi5jYXJkLWNvbHVtbnMgLmNhcmQge1xcbiAgbWFyZ2luLWJvdHRvbTogMC43NXJlbTtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuY2FyZC1jb2x1bW5zIHtcXG4gICAgLXdlYmtpdC1jb2x1bW4tY291bnQ6IDM7XFxuICAgIC1tb3otY29sdW1uLWNvdW50OiAzO1xcbiAgICBjb2x1bW4tY291bnQ6IDM7XFxuICAgIC13ZWJraXQtY29sdW1uLWdhcDogMS4yNXJlbTtcXG4gICAgLW1vei1jb2x1bW4tZ2FwOiAxLjI1cmVtO1xcbiAgICBjb2x1bW4tZ2FwOiAxLjI1cmVtO1xcbiAgICBvcnBoYW5zOiAxO1xcbiAgICB3aWRvd3M6IDE7XFxuICB9XFxuICAuY2FyZC1jb2x1bW5zIC5jYXJkIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG59XFxuXFxuLmFjY29yZGlvbiAuY2FyZDpub3QoOmZpcnN0LW9mLXR5cGUpOm5vdCg6bGFzdC1vZi10eXBlKSB7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG59XFxuXFxuLmFjY29yZGlvbiAuY2FyZDpub3QoOmZpcnN0LW9mLXR5cGUpIC5jYXJkLWhlYWRlcjpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG5cXG4uYWNjb3JkaW9uIC5jYXJkOmZpcnN0LW9mLXR5cGUge1xcbiAgYm9yZGVyLWJvdHRvbTogMDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG59XFxuXFxuLmFjY29yZGlvbiAuY2FyZDpsYXN0LW9mLXR5cGUge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uYnJlYWRjcnVtYiB7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC13cmFwOiB3cmFwO1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgcGFkZGluZzogMC43NXJlbSAxcmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmJyZWFkY3J1bWItaXRlbSArIC5icmVhZGNydW1iLWl0ZW0ge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XFxufVxcblxcbi5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOjpiZWZvcmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBjb250ZW50OiBcXFwiL1xcXCI7XFxufVxcblxcbi5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbi5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uYnJlYWRjcnVtYi1pdGVtLmFjdGl2ZSB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLnBhZ2luYXRpb24ge1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5wYWdlLWxpbmsge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAtMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XFxuICBjb2xvcjogIzAwN2JmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGVlMmU2O1xcbn1cXG5cXG4ucGFnZS1saW5rOmhvdmVyIHtcXG4gIHotaW5kZXg6IDI7XFxuICBjb2xvcjogIzAwNTZiMztcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXItY29sb3I6ICNkZWUyZTY7XFxufVxcblxcbi5wYWdlLWxpbms6Zm9jdXMge1xcbiAgei1pbmRleDogMjtcXG4gIG91dGxpbmU6IDA7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5wYWdlLWxpbms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLnBhZ2UtaXRlbS5hY3RpdmUgLnBhZ2UtbGluayB7XFxuICB6LWluZGV4OiAxO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4ucGFnZS1pdGVtLmRpc2FibGVkIC5wYWdlLWxpbmsge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIGN1cnNvcjogYXV0bztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItY29sb3I6ICNkZWUyZTY7XFxufVxcblxcbi5wYWdpbmF0aW9uLWxnIC5wYWdlLWxpbmsge1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjVyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4ucGFnaW5hdGlvbi1sZyAucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4zcmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4ucGFnaW5hdGlvbi1sZyAucGFnZS1pdGVtOmxhc3QtY2hpbGQgLnBhZ2UtbGluayB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4zcmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnBhZ2luYXRpb24tc20gLnBhZ2UtbGluayB7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4ucGFnaW5hdGlvbi1zbSAucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4ycmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4ycmVtO1xcbn1cXG5cXG4ucGFnaW5hdGlvbi1zbSAucGFnZS1pdGVtOmxhc3QtY2hpbGQgLnBhZ2UtbGluayB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4ycmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMnJlbTtcXG59XFxuXFxuLmJhZGdlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDAuMjVlbSAwLjRlbTtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5iYWRnZTplbXB0eSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYnRuIC5iYWRnZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IC0xcHg7XFxufVxcblxcbi5iYWRnZS1waWxsIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjZlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcmVtO1xcbn1cXG5cXG4uYmFkZ2UtcHJpbWFyeSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5iYWRnZS1wcmltYXJ5W2hyZWZdOmhvdmVyLCAuYmFkZ2UtcHJpbWFyeVtocmVmXTpmb2N1cyB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDYyY2M7XFxufVxcblxcbi5iYWRnZS1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG4uYmFkZ2Utc2Vjb25kYXJ5W2hyZWZdOmhvdmVyLCAuYmFkZ2Utc2Vjb25kYXJ5W2hyZWZdOmZvY3VzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0NWI2MjtcXG59XFxuXFxuLmJhZGdlLXN1Y2Nlc3Mge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xcbn1cXG5cXG4uYmFkZ2Utc3VjY2Vzc1tocmVmXTpob3ZlciwgLmJhZGdlLXN1Y2Nlc3NbaHJlZl06Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWU3ZTM0O1xcbn1cXG5cXG4uYmFkZ2UtaW5mbyB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjg7XFxufVxcblxcbi5iYWRnZS1pbmZvW2hyZWZdOmhvdmVyLCAuYmFkZ2UtaW5mb1tocmVmXTpmb2N1cyB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxMTdhOGI7XFxufVxcblxcbi5iYWRnZS13YXJuaW5nIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNztcXG59XFxuXFxuLmJhZGdlLXdhcm5pbmdbaHJlZl06aG92ZXIsIC5iYWRnZS13YXJuaW5nW2hyZWZdOmZvY3VzIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUwMDtcXG59XFxuXFxuLmJhZGdlLWRhbmdlciB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi5iYWRnZS1kYW5nZXJbaHJlZl06aG92ZXIsIC5iYWRnZS1kYW5nZXJbaHJlZl06Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmQyMTMwO1xcbn1cXG5cXG4uYmFkZ2UtbGlnaHQge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uYmFkZ2UtbGlnaHRbaHJlZl06aG92ZXIsIC5iYWRnZS1saWdodFtocmVmXTpmb2N1cyB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYWUwZTU7XFxufVxcblxcbi5iYWRnZS1kYXJrIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJhZGdlLWRhcmtbaHJlZl06aG92ZXIsIC5iYWRnZS1kYXJrW2hyZWZdOmZvY3VzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFkMjEyNDtcXG59XFxuXFxuLmp1bWJvdHJvbiB7XFxuICBwYWRkaW5nOiAycmVtIDFyZW07XFxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuanVtYm90cm9uIHtcXG4gICAgcGFkZGluZzogNHJlbSAycmVtO1xcbiAgfVxcbn1cXG5cXG4uanVtYm90cm9uLWZsdWlkIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG5cXG4uYWxlcnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmFsZXJ0LWhlYWRpbmcge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi5hbGVydC1saW5rIHtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxufVxcblxcbi5hbGVydC1kaXNtaXNzaWJsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiA0cmVtO1xcbn1cXG5cXG4uYWxlcnQtZGlzbWlzc2libGUgLmNsb3NlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi5hbGVydC1wcmltYXJ5IHtcXG4gIGNvbG9yOiAjMDA0MDg1O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjZTVmZjtcXG4gIGJvcmRlci1jb2xvcjogI2I4ZGFmZjtcXG59XFxuXFxuLmFsZXJ0LXByaW1hcnkgaHIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzlmY2RmZjtcXG59XFxuXFxuLmFsZXJ0LXByaW1hcnkgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICMwMDI3NTI7XFxufVxcblxcbi5hbGVydC1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICMzODNkNDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlM2U1O1xcbiAgYm9yZGVyLWNvbG9yOiAjZDZkOGRiO1xcbn1cXG5cXG4uYWxlcnQtc2Vjb25kYXJ5IGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNjOGNiY2Y7XFxufVxcblxcbi5hbGVydC1zZWNvbmRhcnkgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICMyMDIzMjY7XFxufVxcblxcbi5hbGVydC1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjMTU1NzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q0ZWRkYTtcXG4gIGJvcmRlci1jb2xvcjogI2MzZTZjYjtcXG59XFxuXFxuLmFsZXJ0LXN1Y2Nlc3MgaHIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2IxZGZiYjtcXG59XFxuXFxuLmFsZXJ0LXN1Y2Nlc3MgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICMwYjJlMTM7XFxufVxcblxcbi5hbGVydC1pbmZvIHtcXG4gIGNvbG9yOiAjMGM1NDYwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2QxZWNmMTtcXG4gIGJvcmRlci1jb2xvcjogI2JlZTVlYjtcXG59XFxuXFxuLmFsZXJ0LWluZm8gaHIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2FiZGRlNTtcXG59XFxuXFxuLmFsZXJ0LWluZm8gLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICMwNjJjMzM7XFxufVxcblxcbi5hbGVydC13YXJuaW5nIHtcXG4gIGNvbG9yOiAjODU2NDA0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjNjZDtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZWViYTtcXG59XFxuXFxuLmFsZXJ0LXdhcm5pbmcgaHIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZThhMTtcXG59XFxuXFxuLmFsZXJ0LXdhcm5pbmcgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICM1MzNmMDM7XFxufVxcblxcbi5hbGVydC1kYW5nZXIge1xcbiAgY29sb3I6ICM3MjFjMjQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhkN2RhO1xcbiAgYm9yZGVyLWNvbG9yOiAjZjVjNmNiO1xcbn1cXG5cXG4uYWxlcnQtZGFuZ2VyIGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNmMWIwYjc7XFxufVxcblxcbi5hbGVydC1kYW5nZXIgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICM0OTEyMTc7XFxufVxcblxcbi5hbGVydC1saWdodCB7XFxuICBjb2xvcjogIzgxODE4MjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZWZlZmU7XFxuICBib3JkZXItY29sb3I6ICNmZGZkZmU7XFxufVxcblxcbi5hbGVydC1saWdodCBociB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjZWNlY2Y2O1xcbn1cXG5cXG4uYWxlcnQtbGlnaHQgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICM2ODY4Njg7XFxufVxcblxcbi5hbGVydC1kYXJrIHtcXG4gIGNvbG9yOiAjMWIxZTIxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q2ZDhkOTtcXG4gIGJvcmRlci1jb2xvcjogI2M2YzhjYTtcXG59XFxuXFxuLmFsZXJ0LWRhcmsgaHIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2I5YmJiZTtcXG59XFxuXFxuLmFsZXJ0LWRhcmsgLmFsZXJ0LWxpbmsge1xcbiAgY29sb3I6ICMwNDA1MDU7XFxufVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBwcm9ncmVzcy1iYXItc3RyaXBlcyB7XFxuICBmcm9tIHtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMXJlbSAwO1xcbiAgfVxcbiAgdG8ge1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIDA7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgcHJvZ3Jlc3MtYmFyLXN0cmlwZXMge1xcbiAgZnJvbSB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDFyZW0gMDtcXG4gIH1cXG4gIHRvIHtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAwO1xcbiAgfVxcbn1cXG5cXG4ucHJvZ3Jlc3Mge1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4ucHJvZ3Jlc3MtYmFyIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gIHRyYW5zaXRpb246IHdpZHRoIDAuNnMgZWFzZTtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgLnByb2dyZXNzLWJhciB7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxuICB9XFxufVxcblxcbi5wcm9ncmVzcy1iYXItc3RyaXBlZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSkgMjUlLCB0cmFuc3BhcmVudCAyNSUsIHRyYW5zcGFyZW50IDUwJSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE1KSA1MCUsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSkgNzUlLCB0cmFuc3BhcmVudCA3NSUsIHRyYW5zcGFyZW50KTtcXG4gIGJhY2tncm91bmQtc2l6ZTogMXJlbSAxcmVtO1xcbn1cXG5cXG4ucHJvZ3Jlc3MtYmFyLWFuaW1hdGVkIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBwcm9ncmVzcy1iYXItc3RyaXBlcyAxcyBsaW5lYXIgaW5maW5pdGU7XFxuICBhbmltYXRpb246IHByb2dyZXNzLWJhci1zdHJpcGVzIDFzIGxpbmVhciBpbmZpbml0ZTtcXG59XFxuXFxuLm1lZGlhIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWFsaWduOiBzdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4ubWVkaWEtYm9keSB7XFxuICAtbXMtZmxleDogMTtcXG4gIGZsZXg6IDE7XFxufVxcblxcbi5saXN0LWdyb3VwIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLWFjdGlvbjphY3RpdmUge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogLTFweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTI1KTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbTpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtOmZvY3VzIHtcXG4gIHotaW5kZXg6IDE7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0uZGlzYWJsZWQsIC5saXN0LWdyb3VwLWl0ZW06ZGlzYWJsZWQge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLmFjdGl2ZSB7XFxuICB6LWluZGV4OiAyO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1mbHVzaCAubGlzdC1ncm91cC1pdGVtIHtcXG4gIGJvcmRlci1yaWdodDogMDtcXG4gIGJvcmRlci1sZWZ0OiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtZmx1c2g6Zmlyc3QtY2hpbGQgLmxpc3QtZ3JvdXAtaXRlbTpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItdG9wOiAwO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1mbHVzaDpsYXN0LWNoaWxkIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZCB7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXByaW1hcnkge1xcbiAgY29sb3I6ICMwMDQwODU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjhkYWZmO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1wcmltYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgY29sb3I6ICMwMDQwODU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOWZjZGZmO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA0MDg1O1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA0MDg1O1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXNlY29uZGFyeSB7XFxuICBjb2xvcjogIzM4M2Q0MTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNmQ4ZGI7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc2Vjb25kYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0tc2Vjb25kYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgY29sb3I6ICMzODNkNDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzhjYmNmO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXNlY29uZGFyeS5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzODNkNDE7XFxuICBib3JkZXItY29sb3I6ICMzODNkNDE7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc3VjY2VzcyB7XFxuICBjb2xvcjogIzE1NTcyNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjM2U2Y2I7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc3VjY2Vzcy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3MubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzE1NTcyNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWRmYmI7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc3VjY2Vzcy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxNTU3MjQ7XFxuICBib3JkZXItY29sb3I6ICMxNTU3MjQ7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0taW5mbyB7XFxuICBjb2xvcjogIzBjNTQ2MDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZWU1ZWI7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWluZm8ubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzBjNTQ2MDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhYmRkZTU7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwYzU0NjA7XFxuICBib3JkZXItY29sb3I6ICMwYzU0NjA7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0td2FybmluZyB7XFxuICBjb2xvcjogIzg1NjQwNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmVlYmE7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0td2FybmluZy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLXdhcm5pbmcubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzg1NjQwNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmU4YTE7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0td2FybmluZy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4NTY0MDQ7XFxuICBib3JkZXItY29sb3I6ICM4NTY0MDQ7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tZGFuZ2VyIHtcXG4gIGNvbG9yOiAjNzIxYzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1YzZjYjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYW5nZXIubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1kYW5nZXIubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzcyMWMyNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWIwYjc7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tZGFuZ2VyLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzcyMWMyNDtcXG4gIGJvcmRlci1jb2xvcjogIzcyMWMyNDtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1saWdodCB7XFxuICBjb2xvcjogIzgxODE4MjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGZkZmU7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tbGlnaHQubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1saWdodC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gIGNvbG9yOiAjODE4MTgyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWNmNjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1saWdodC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4MTgxODI7XFxuICBib3JkZXItY29sb3I6ICM4MTgxODI7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tZGFyayB7XFxuICBjb2xvcjogIzFiMWUyMTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjNmM4Y2E7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tZGFyay5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWRhcmsubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzFiMWUyMTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiOWJiYmU7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tZGFyay5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxYjFlMjE7XFxuICBib3JkZXItY29sb3I6ICMxYjFlMjE7XFxufVxcblxcbi5jbG9zZSB7XFxuICBmbG9hdDogcmlnaHQ7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZjtcXG4gIG9wYWNpdHk6IC41O1xcbn1cXG5cXG4uY2xvc2U6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uY2xvc2U6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6aG92ZXIsIC5jbG9zZTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTpmb2N1cyB7XFxuICBjb2xvcjogIzAwMDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIG9wYWNpdHk6IC43NTtcXG59XFxuXFxuYnV0dG9uLmNsb3NlIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuLm1vZGFsLW9wZW4ge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLm1vZGFsLW9wZW4gLm1vZGFsIHtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxufVxcblxcbi5tb2RhbCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDUwO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBvdXRsaW5lOiAwO1xcbn1cXG5cXG4ubW9kYWwtZGlhbG9nIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgbWFyZ2luOiAwLjVyZW07XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLm1vZGFsLmZhZGUgLm1vZGFsLWRpYWxvZyB7XFxuICB0cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0O1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZS1vdXQ7XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4zcyBlYXNlLW91dDtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTI1JSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMjUlKTtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgLm1vZGFsLmZhZGUgLm1vZGFsLWRpYWxvZyB7XFxuICAgIHRyYW5zaXRpb246IG5vbmU7XFxuICB9XFxufVxcblxcbi5tb2RhbC5zaG93IC5tb2RhbC1kaWFsb2cge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAwKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDApO1xcbn1cXG5cXG4ubW9kYWwtZGlhbG9nLWNlbnRlcmVkIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgbWluLWhlaWdodDogY2FsYygxMDAlIC0gKDAuNXJlbSAqIDIpKTtcXG59XFxuXFxuLm1vZGFsLWRpYWxvZy1jZW50ZXJlZDo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gKDAuNXJlbSAqIDIpKTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbn1cXG5cXG4ubW9kYWwtY29udGVudCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB3aWR0aDogMTAwJTtcXG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxuICBvdXRsaW5lOiAwO1xcbn1cXG5cXG4ubW9kYWwtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTA0MDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxufVxcblxcbi5tb2RhbC1iYWNrZHJvcC5mYWRlIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5tb2RhbC1iYWNrZHJvcC5zaG93IHtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLm1vZGFsLWhlYWRlciB7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVjZWY7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4zcmVtO1xcbn1cXG5cXG4ubW9kYWwtaGVhZGVyIC5jbG9zZSB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgbWFyZ2luOiAtMXJlbSAtMXJlbSAtMXJlbSBhdXRvO1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbi5tb2RhbC1ib2R5IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC1tcy1mbGV4OiAxIDEgYXV0bztcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgcGFkZGluZzogMXJlbTtcXG59XFxuXFxuLm1vZGFsLWZvb3RlciB7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LXBhY2s6IGVuZDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlOWVjZWY7XFxufVxcblxcbi5tb2RhbC1mb290ZXIgPiA6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWxlZnQ6IC4yNXJlbTtcXG59XFxuXFxuLm1vZGFsLWZvb3RlciA+IDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1yaWdodDogLjI1cmVtO1xcbn1cXG5cXG4ubW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAtOTk5OXB4O1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5tb2RhbC1kaWFsb2cge1xcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xcbiAgICBtYXJnaW46IDEuNzVyZW0gYXV0bztcXG4gIH1cXG4gIC5tb2RhbC1kaWFsb2ctY2VudGVyZWQge1xcbiAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMCUgLSAoMS43NXJlbSAqIDIpKTtcXG4gIH1cXG4gIC5tb2RhbC1kaWFsb2ctY2VudGVyZWQ6OmJlZm9yZSB7XFxuICAgIGhlaWdodDogY2FsYygxMDB2aCAtICgxLjc1cmVtICogMikpO1xcbiAgfVxcbiAgLm1vZGFsLXNtIHtcXG4gICAgbWF4LXdpZHRoOiAzMDBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAubW9kYWwtbGcge1xcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgfVxcbn1cXG5cXG4udG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDcwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHdvcmQtYnJlYWs6IG5vcm1hbDtcXG4gIHdvcmQtc3BhY2luZzogbm9ybWFsO1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIGxpbmUtYnJlYWs6IGF1dG87XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLnRvb2x0aXAuc2hvdyB7XFxuICBvcGFjaXR5OiAwLjk7XFxufVxcblxcbi50b29sdGlwIC5hcnJvdyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAwLjhyZW07XFxuICBoZWlnaHQ6IDAuNHJlbTtcXG59XFxuXFxuLnRvb2x0aXAgLmFycm93OjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG59XFxuXFxuLmJzLXRvb2x0aXAtdG9wLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0ge1xcbiAgcGFkZGluZzogMC40cmVtIDA7XFxufVxcblxcbi5icy10b29sdGlwLXRvcCAuYXJyb3csIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3cge1xcbiAgYm90dG9tOiAwO1xcbn1cXG5cXG4uYnMtdG9vbHRpcC10b3AgLmFycm93OjpiZWZvcmUsIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICB0b3A6IDA7XFxuICBib3JkZXItd2lkdGg6IDAuNHJlbSAwLjRyZW0gMDtcXG4gIGJvcmRlci10b3AtY29sb3I6ICMwMDA7XFxufVxcblxcbi5icy10b29sdGlwLXJpZ2h0LCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSB7XFxuICBwYWRkaW5nOiAwIDAuNHJlbTtcXG59XFxuXFxuLmJzLXRvb2x0aXAtcmlnaHQgLmFycm93LCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3cge1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAwLjRyZW07XFxuICBoZWlnaHQ6IDAuOHJlbTtcXG59XFxuXFxuLmJzLXRvb2x0aXAtcmlnaHQgLmFycm93OjpiZWZvcmUsIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gIHJpZ2h0OiAwO1xcbiAgYm9yZGVyLXdpZHRoOiAwLjRyZW0gMC40cmVtIDAuNHJlbSAwO1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjMDAwO1xcbn1cXG5cXG4uYnMtdG9vbHRpcC1ib3R0b20sIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSB7XFxuICBwYWRkaW5nOiAwLjRyZW0gMDtcXG59XFxuXFxuLmJzLXRvb2x0aXAtYm90dG9tIC5hcnJvdywgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdyB7XFxuICB0b3A6IDA7XFxufVxcblxcbi5icy10b29sdGlwLWJvdHRvbSAuYXJyb3c6OmJlZm9yZSwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gIGJvdHRvbTogMDtcXG4gIGJvcmRlci13aWR0aDogMCAwLjRyZW0gMC40cmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzAwMDtcXG59XFxuXFxuLmJzLXRvb2x0aXAtbGVmdCwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSB7XFxuICBwYWRkaW5nOiAwIDAuNHJlbTtcXG59XFxuXFxuLmJzLXRvb2x0aXAtbGVmdCAuYXJyb3csIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0gLmFycm93IHtcXG4gIHJpZ2h0OiAwO1xcbiAgd2lkdGg6IDAuNHJlbTtcXG4gIGhlaWdodDogMC44cmVtO1xcbn1cXG5cXG4uYnMtdG9vbHRpcC1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gIGxlZnQ6IDA7XFxuICBib3JkZXItd2lkdGg6IDAuNHJlbSAwIDAuNHJlbSAwLjRyZW07XFxuICBib3JkZXItbGVmdC1jb2xvcjogIzAwMDtcXG59XFxuXFxuLnRvb2x0aXAtaW5uZXIge1xcbiAgbWF4LXdpZHRoOiAyMDBweDtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLnBvcG92ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDEwNjA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1heC13aWR0aDogMjc2cHg7XFxuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHdvcmQtYnJlYWs6IG5vcm1hbDtcXG4gIHdvcmQtc3BhY2luZzogbm9ybWFsO1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIGxpbmUtYnJlYWs6IGF1dG87XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxufVxcblxcbi5wb3BvdmVyIC5hcnJvdyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAwLjVyZW07XFxuICBtYXJnaW46IDAgMC4zcmVtO1xcbn1cXG5cXG4ucG9wb3ZlciAuYXJyb3c6OmJlZm9yZSwgLnBvcG92ZXIgLmFycm93OjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxufVxcblxcbi5icy1wb3BvdmVyLXRvcCwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG59XFxuXFxuLmJzLXBvcG92ZXItdG9wIC5hcnJvdywgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdyB7XFxuICBib3R0b206IGNhbGMoKDAuNXJlbSArIDFweCkgKiAtMSk7XFxufVxcblxcbi5icy1wb3BvdmVyLXRvcCAuYXJyb3c6OmJlZm9yZSwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdzo6YmVmb3JlLFxcbi5icy1wb3BvdmVyLXRvcCAuYXJyb3c6OmFmdGVyLFxcbi5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIGJvcmRlci13aWR0aDogMC41cmVtIDAuNXJlbSAwO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci10b3AgLmFycm93OjpiZWZvcmUsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICBib3R0b206IDA7XFxuICBib3JkZXItdG9wLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbn1cXG5cXG5cXG4uYnMtcG9wb3Zlci10b3AgLmFycm93OjphZnRlcixcXG4uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjphZnRlciB7XFxuICBib3R0b206IDFweDtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNmZmY7XFxufVxcblxcbi5icy1wb3BvdmVyLXJpZ2h0LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSB7XFxuICBtYXJnaW4tbGVmdDogMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1yaWdodCAuYXJyb3csIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdyB7XFxuICBsZWZ0OiBjYWxjKCgwLjVyZW0gKyAxcHgpICogLTEpO1xcbiAgd2lkdGg6IDAuNXJlbTtcXG4gIGhlaWdodDogMXJlbTtcXG4gIG1hcmdpbjogMC4zcmVtIDA7XFxufVxcblxcbi5icy1wb3BvdmVyLXJpZ2h0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSxcXG4uYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmFmdGVyLFxcbi5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgYm9yZGVyLXdpZHRoOiAwLjVyZW0gMC41cmVtIDAuNXJlbSAwO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmJlZm9yZSwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0gLmFycm93OjpiZWZvcmUge1xcbiAgbGVmdDogMDtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG59XFxuXFxuXFxuLmJzLXBvcG92ZXItcmlnaHQgLmFycm93OjphZnRlcixcXG4uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIGxlZnQ6IDFweDtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0ge1xcbiAgbWFyZ2luLXRvcDogMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1ib3R0b20gLmFycm93LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93IHtcXG4gIHRvcDogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93OjpiZWZvcmUsXFxuLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YWZ0ZXIsXFxuLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgYm9yZGVyLXdpZHRoOiAwIDAuNXJlbSAwLjVyZW0gMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1ib3R0b20gLmFycm93OjpiZWZvcmUsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICB0b3A6IDA7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbn1cXG5cXG5cXG4uYnMtcG9wb3Zlci1ib3R0b20gLmFycm93OjphZnRlcixcXG4uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93OjphZnRlciB7XFxuICB0b3A6IDFweDtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7XFxufVxcblxcbi5icy1wb3BvdmVyLWJvdHRvbSAucG9wb3Zlci1oZWFkZXI6OmJlZm9yZSwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5wb3BvdmVyLWhlYWRlcjo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDUwJTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDFyZW07XFxuICBtYXJnaW4tbGVmdDogLTAuNXJlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmN2Y3Zjc7XFxufVxcblxcbi5icy1wb3BvdmVyLWxlZnQsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0ge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XFxufVxcblxcbi5icy1wb3BvdmVyLWxlZnQgLmFycm93LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdyB7XFxuICByaWdodDogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTtcXG4gIHdpZHRoOiAwLjVyZW07XFxuICBoZWlnaHQ6IDFyZW07XFxuICBtYXJnaW46IDAuM3JlbSAwO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlLFxcbi5icy1wb3BvdmVyLWxlZnQgLmFycm93OjphZnRlcixcXG4uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgYm9yZGVyLXdpZHRoOiAwLjVyZW0gMCAwLjVyZW0gMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gIHJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxufVxcblxcblxcbi5icy1wb3BvdmVyLWxlZnQgLmFycm93OjphZnRlcixcXG4uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgcmlnaHQ6IDFweDtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ucG9wb3Zlci1oZWFkZXIge1xcbiAgcGFkZGluZzogMC41cmVtIDAuNzVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmN2Y3O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYmViZWI7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiBjYWxjKDAuM3JlbSAtIDFweCk7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogY2FsYygwLjNyZW0gLSAxcHgpO1xcbn1cXG5cXG4ucG9wb3Zlci1oZWFkZXI6ZW1wdHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnBvcG92ZXItYm9keSB7XFxuICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbTtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbn1cXG5cXG4uY2Fyb3VzZWwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uY2Fyb3VzZWwtaW5uZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4uY2Fyb3VzZWwtaXRlbSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgLXdlYmtpdC1wZXJzcGVjdGl2ZTogMTAwMHB4O1xcbiAgcGVyc3BlY3RpdmU6IDEwMDBweDtcXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0uYWN0aXZlLFxcbi5jYXJvdXNlbC1pdGVtLW5leHQsXFxuLmNhcm91c2VsLWl0ZW0tcHJldiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuNnMgZWFzZTtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjZzIGVhc2U7XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC42cyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAwLjZzIGVhc2U7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5jYXJvdXNlbC1pdGVtLmFjdGl2ZSxcXG4gIC5jYXJvdXNlbC1pdGVtLW5leHQsXFxuICAuY2Fyb3VzZWwtaXRlbS1wcmV2IHtcXG4gICAgdHJhbnNpdGlvbjogbm9uZTtcXG4gIH1cXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0tbmV4dCxcXG4uY2Fyb3VzZWwtaXRlbS1wcmV2IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0tbmV4dC5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuLmNhcm91c2VsLWl0ZW0tcHJldi5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWl0ZW0tbmV4dC5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuICAuY2Fyb3VzZWwtaXRlbS1wcmV2LmNhcm91c2VsLWl0ZW0tcmlnaHQge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICB9XFxufVxcblxcbi5jYXJvdXNlbC1pdGVtLW5leHQsXFxuLmFjdGl2ZS5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWl0ZW0tbmV4dCxcXG4gIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1yaWdodCB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKTtcXG4gIH1cXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0tcHJldixcXG4uYWN0aXZlLmNhcm91c2VsLWl0ZW0tbGVmdCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWl0ZW0tcHJldixcXG4gIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0IHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XFxuICB9XFxufVxcblxcbi5jYXJvdXNlbC1mYWRlIC5jYXJvdXNlbC1pdGVtIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAuNnM7XFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBvcGFjaXR5O1xcbn1cXG5cXG4uY2Fyb3VzZWwtZmFkZSAuY2Fyb3VzZWwtaXRlbS5hY3RpdmUsXFxuLmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW0tbmV4dC5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuLmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW0tcHJldi5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0LFxcbi5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1yaWdodCB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWwtZmFkZSAuY2Fyb3VzZWwtaXRlbS1uZXh0LFxcbi5jYXJvdXNlbC1mYWRlIC5jYXJvdXNlbC1pdGVtLXByZXYsXFxuLmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW0uYWN0aXZlLFxcbi5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0LFxcbi5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1wcmV2IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW0tbmV4dCxcXG4gIC5jYXJvdXNlbC1mYWRlIC5jYXJvdXNlbC1pdGVtLXByZXYsXFxuICAuY2Fyb3VzZWwtZmFkZSAuY2Fyb3VzZWwtaXRlbS5hY3RpdmUsXFxuICAuY2Fyb3VzZWwtZmFkZSAuYWN0aXZlLmNhcm91c2VsLWl0ZW0tbGVmdCxcXG4gIC5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1wcmV2IHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgfVxcbn1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1wcmV2LFxcbi5jYXJvdXNlbC1jb250cm9sLW5leHQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiAxNSU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLmNhcm91c2VsLWNvbnRyb2wtcHJldjpob3ZlciwgLmNhcm91c2VsLWNvbnRyb2wtcHJldjpmb2N1cyxcXG4uY2Fyb3VzZWwtY29udHJvbC1uZXh0OmhvdmVyLFxcbi5jYXJvdXNlbC1jb250cm9sLW5leHQ6Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBvdXRsaW5lOiAwO1xcbiAgb3BhY2l0eTogLjk7XFxufVxcblxcbi5jYXJvdXNlbC1jb250cm9sLXByZXYge1xcbiAgbGVmdDogMDtcXG59XFxuXFxuLmNhcm91c2VsLWNvbnRyb2wtbmV4dCB7XFxuICByaWdodDogMDtcXG59XFxuXFxuLmNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uLFxcbi5jYXJvdXNlbC1jb250cm9sLW5leHQtaWNvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50IG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyO1xcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCU7XFxufVxcblxcbi5jYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nJTIzZmZmJyB2aWV3Qm94PScwIDAgOCA4JyUzRSUzQ3BhdGggZD0nTTUuMjUgMGwtNCA0IDQgNCAxLjUtMS41LTIuNS0yLjUgMi41LTIuNS0xLjUtMS41eicvJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbn1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24ge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGZpbGw9JyUyM2ZmZicgdmlld0JveD0nMCAwIDggOCclM0UlM0NwYXRoIGQ9J00yLjc1IDBsLTEuNSAxLjUgMi41IDIuNS0yLjUgMi41IDEuNSAxLjUgNC00LTQtNHonLyUzRSUzQy9zdmclM0VcXFwiKTtcXG59XFxuXFxuLmNhcm91c2VsLWluZGljYXRvcnMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDEwcHg7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTU7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIG1hcmdpbi1yaWdodDogMTUlO1xcbiAgbWFyZ2luLWxlZnQ6IDE1JTtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi5jYXJvdXNlbC1pbmRpY2F0b3JzIGxpIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC1tcy1mbGV4OiAwIDEgYXV0bztcXG4gIGZsZXg6IDAgMSBhdXRvO1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDNweDtcXG4gIG1hcmdpbi1yaWdodDogM3B4O1xcbiAgbWFyZ2luLWxlZnQ6IDNweDtcXG4gIHRleHQtaW5kZW50OiAtOTk5cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxufVxcblxcbi5jYXJvdXNlbC1pbmRpY2F0b3JzIGxpOjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAtMTBweDtcXG4gIGxlZnQ6IDA7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTBweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbn1cXG5cXG4uY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaTo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAtMTBweDtcXG4gIGxlZnQ6IDA7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTBweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbn1cXG5cXG4uY2Fyb3VzZWwtaW5kaWNhdG9ycyAuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcblxcbi5jYXJvdXNlbC1jYXB0aW9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxNSU7XFxuICBib3R0b206IDIwcHg7XFxuICBsZWZ0OiAxNSU7XFxuICB6LWluZGV4OiAxMDtcXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmFsaWduLWJhc2VsaW5lIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tdG9wIHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3AgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLW1pZGRsZSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1ib3R0b20ge1xcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tdGV4dC1ib3R0b20ge1xcbiAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi10ZXh0LXRvcCB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC10b3AgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZiAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmJnLXByaW1hcnk6aG92ZXIsIGEuYmctcHJpbWFyeTpmb2N1cyxcXG5idXR0b24uYmctcHJpbWFyeTpob3ZlcixcXG5idXR0b24uYmctcHJpbWFyeTpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2MmNjICFpbXBvcnRhbnQ7XFxufVxcblxcbi5iZy1zZWNvbmRhcnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZjNzU3ZCAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmJnLXNlY29uZGFyeTpob3ZlciwgYS5iZy1zZWNvbmRhcnk6Zm9jdXMsXFxuYnV0dG9uLmJnLXNlY29uZGFyeTpob3ZlcixcXG5idXR0b24uYmctc2Vjb25kYXJ5OmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NDViNjIgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLXN1Y2Nlc3Mge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmJnLXN1Y2Nlc3M6aG92ZXIsIGEuYmctc3VjY2Vzczpmb2N1cyxcXG5idXR0b24uYmctc3VjY2Vzczpob3ZlcixcXG5idXR0b24uYmctc3VjY2Vzczpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWU3ZTM0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5iZy1pbmZvIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDtcXG59XFxuXFxuYS5iZy1pbmZvOmhvdmVyLCBhLmJnLWluZm86Zm9jdXMsXFxuYnV0dG9uLmJnLWluZm86aG92ZXIsXFxuYnV0dG9uLmJnLWluZm86Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzExN2E4YiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctd2FybmluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctd2FybmluZzpob3ZlciwgYS5iZy13YXJuaW5nOmZvY3VzLFxcbmJ1dHRvbi5iZy13YXJuaW5nOmhvdmVyLFxcbmJ1dHRvbi5iZy13YXJuaW5nOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMzllMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLWRhbmdlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctZGFuZ2VyOmhvdmVyLCBhLmJnLWRhbmdlcjpmb2N1cyxcXG5idXR0b24uYmctZGFuZ2VyOmhvdmVyLFxcbmJ1dHRvbi5iZy1kYW5nZXI6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JkMjEzMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmJnLWxpZ2h0OmhvdmVyLCBhLmJnLWxpZ2h0OmZvY3VzLFxcbmJ1dHRvbi5iZy1saWdodDpob3ZlcixcXG5idXR0b24uYmctbGlnaHQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTBlNSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctZGFyazpob3ZlciwgYS5iZy1kYXJrOmZvY3VzLFxcbmJ1dHRvbi5iZy1kYXJrOmhvdmVyLFxcbmJ1dHRvbi5iZy1kYXJrOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDIxMjQgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLXdoaXRlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLXRyYW5zcGFyZW50IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXIge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXRvcCB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXJpZ2h0IHtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkZWUyZTYgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1ib3R0b20ge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZWUyZTYgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1sZWZ0IHtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLTAge1xcbiAgYm9yZGVyOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItdG9wLTAge1xcbiAgYm9yZGVyLXRvcDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXJpZ2h0LTAge1xcbiAgYm9yZGVyLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItYm90dG9tLTAge1xcbiAgYm9yZGVyLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLWxlZnQtMCB7XFxuICBib3JkZXItbGVmdDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXByaW1hcnkge1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItc2Vjb25kYXJ5IHtcXG4gIGJvcmRlci1jb2xvcjogIzZjNzU3ZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXN1Y2Nlc3Mge1xcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItaW5mbyB7XFxuICBib3JkZXItY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci13YXJuaW5nIHtcXG4gIGJvcmRlci1jb2xvcjogI2ZmYzEwNyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLWRhbmdlciB7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDUgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1saWdodCB7XFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmEgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1kYXJrIHtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXdoaXRlIHtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucm91bmRlZCB7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yb3VuZGVkLXRvcCB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucm91bmRlZC1yaWdodCB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnJvdW5kZWQtYm90dG9tIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yb3VuZGVkLWxlZnQge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucm91bmRlZC1jaXJjbGUge1xcbiAgYm9yZGVyLXJhZGl1czogNTAlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yb3VuZGVkLTAge1xcbiAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uY2xlYXJmaXg6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY2xlYXI6IGJvdGg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG59XFxuXFxuLmQtbm9uZSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLWlubGluZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmQtaW5saW5lLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZC1ibG9jayB7XFxuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZC10YWJsZSB7XFxuICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZC10YWJsZS1yb3cge1xcbiAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLXRhYmxlLWNlbGwge1xcbiAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZC1mbGV4IHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLWlubGluZS1mbGV4IHtcXG4gIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuZC1zbS1ub25lIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtc20taW5saW5lIHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1zbS1pbmxpbmUtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXNtLWJsb2NrIHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXNtLXRhYmxlIHtcXG4gICAgZGlzcGxheTogdGFibGUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXNtLXRhYmxlLXJvdyB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLXJvdyAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtc20tdGFibGUtY2VsbCB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGwgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXNtLWZsZXgge1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1zbS1pbmxpbmUtZmxleCB7XFxuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5kLW1kLW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1tZC1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLW1kLWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1tZC10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtZmxleCB7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLW1kLWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmQtbGctbm9uZSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLWxnLWlubGluZSB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbGctaW5saW5lLWJsb2NrIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1sZy1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1sZy10YWJsZSB7XFxuICAgIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1sZy10YWJsZS1yb3cge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1yb3cgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLWxnLXRhYmxlLWNlbGwge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1sZy1mbGV4IHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbGctaW5saW5lLWZsZXgge1xcbiAgICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmQteGwtbm9uZSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXhsLWlubGluZSB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQteGwtaW5saW5lLWJsb2NrIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC14bC1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC14bC10YWJsZSB7XFxuICAgIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC14bC10YWJsZS1yb3cge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1yb3cgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXhsLXRhYmxlLWNlbGwge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC14bC1mbGV4IHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQteGwtaW5saW5lLWZsZXgge1xcbiAgICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIHByaW50IHtcXG4gIC5kLXByaW50LW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1wcmludC1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXByaW50LWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1wcmludC10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtZmxleCB7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXByaW50LWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi5lbWJlZC1yZXNwb25zaXZlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLmVtYmVkLXJlc3BvbnNpdmU6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbn1cXG5cXG4uZW1iZWQtcmVzcG9uc2l2ZSAuZW1iZWQtcmVzcG9uc2l2ZS1pdGVtLFxcbi5lbWJlZC1yZXNwb25zaXZlIGlmcmFtZSxcXG4uZW1iZWQtcmVzcG9uc2l2ZSBlbWJlZCxcXG4uZW1iZWQtcmVzcG9uc2l2ZSBvYmplY3QsXFxuLmVtYmVkLXJlc3BvbnNpdmUgdmlkZW8ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uZW1iZWQtcmVzcG9uc2l2ZS0yMWJ5OTo6YmVmb3JlIHtcXG4gIHBhZGRpbmctdG9wOiA0Mi44NTcxNDMlO1xcbn1cXG5cXG4uZW1iZWQtcmVzcG9uc2l2ZS0xNmJ5OTo6YmVmb3JlIHtcXG4gIHBhZGRpbmctdG9wOiA1Ni4yNSU7XFxufVxcblxcbi5lbWJlZC1yZXNwb25zaXZlLTRieTM6OmJlZm9yZSB7XFxuICBwYWRkaW5nLXRvcDogNzUlO1xcbn1cXG5cXG4uZW1iZWQtcmVzcG9uc2l2ZS0xYnkxOjpiZWZvcmUge1xcbiAgcGFkZGluZy10b3A6IDEwMCU7XFxufVxcblxcbi5mbGV4LXJvdyB7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxleC1jb2x1bW4ge1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG59XFxuXFxuLmZsZXgtcm93LXJldmVyc2Uge1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbGV4LWNvbHVtbi1yZXZlcnNlIHtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxleC13cmFwIHtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gIGZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxleC1ub3dyYXAge1xcbiAgLW1zLWZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxuICBmbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxleC13cmFwLXJldmVyc2Uge1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxleC1maWxsIHtcXG4gIC1tcy1mbGV4OiAxIDEgYXV0byAhaW1wb3J0YW50O1xcbiAgZmxleDogMSAxIGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLmZsZXgtZ3Jvdy0wIHtcXG4gIC1tcy1mbGV4LXBvc2l0aXZlOiAwICFpbXBvcnRhbnQ7XFxuICBmbGV4LWdyb3c6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmZsZXgtZ3Jvdy0xIHtcXG4gIC1tcy1mbGV4LXBvc2l0aXZlOiAxICFpbXBvcnRhbnQ7XFxuICBmbGV4LWdyb3c6IDEgIWltcG9ydGFudDtcXG59XFxuXFxuLmZsZXgtc2hyaW5rLTAge1xcbiAgLW1zLWZsZXgtbmVnYXRpdmU6IDAgIWltcG9ydGFudDtcXG4gIGZsZXgtc2hyaW5rOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbGV4LXNocmluay0xIHtcXG4gIC1tcy1mbGV4LW5lZ2F0aXZlOiAxICFpbXBvcnRhbnQ7XFxuICBmbGV4LXNocmluazogMSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uanVzdGlmeS1jb250ZW50LXN0YXJ0IHtcXG4gIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmp1c3RpZnktY29udGVudC1lbmQge1xcbiAgLW1zLWZsZXgtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxufVxcblxcbi5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHtcXG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmp1c3RpZnktY29udGVudC1iZXR3ZWVuIHtcXG4gIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uanVzdGlmeS1jb250ZW50LWFyb3VuZCB7XFxuICAtbXMtZmxleC1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24taXRlbXMtc3RhcnQge1xcbiAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24taXRlbXMtZW5kIHtcXG4gIC1tcy1mbGV4LWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24taXRlbXMtY2VudGVyIHtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWl0ZW1zLWJhc2VsaW5lIHtcXG4gIC1tcy1mbGV4LWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgYWxpZ24taXRlbXM6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1pdGVtcy1zdHJldGNoIHtcXG4gIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tY29udGVudC1zdGFydCB7XFxuICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1jb250ZW50LWVuZCB7XFxuICAtbXMtZmxleC1saW5lLXBhY2s6IGVuZCAhaW1wb3J0YW50O1xcbiAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWNvbnRlbnQtY2VudGVyIHtcXG4gIC1tcy1mbGV4LWxpbmUtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWNvbnRlbnQtYmV0d2VlbiB7XFxuICAtbXMtZmxleC1saW5lLXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWNvbnRlbnQtYXJvdW5kIHtcXG4gIC1tcy1mbGV4LWxpbmUtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1jb250ZW50LXN0cmV0Y2gge1xcbiAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1zZWxmLWF1dG8ge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0byAhaW1wb3J0YW50O1xcbiAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tc2VsZi1zdGFydCB7XFxuICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tc2VsZi1lbmQge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tc2VsZi1jZW50ZXIge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLXNlbGYtYmFzZWxpbmUge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1zZWxmLXN0cmV0Y2gge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5mbGV4LXNtLXJvdyB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLWNvbHVtbiB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLXJvdy1yZXZlcnNlIHtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLWNvbHVtbi1yZXZlcnNlIHtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLXdyYXAge1xcbiAgICAtbXMtZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtc20tbm93cmFwIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1zbS13cmFwLXJldmVyc2Uge1xcbiAgICAtbXMtZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLWZpbGwge1xcbiAgICAtbXMtZmxleDogMSAxIGF1dG8gIWltcG9ydGFudDtcXG4gICAgZmxleDogMSAxIGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLWdyb3ctMCB7XFxuICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAwICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZ3JvdzogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtc20tZ3Jvdy0xIHtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDEgIWltcG9ydGFudDtcXG4gICAgZmxleC1ncm93OiAxICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1zbS1zaHJpbmstMCB7XFxuICAgIC1tcy1mbGV4LW5lZ2F0aXZlOiAwICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtc2hyaW5rOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1zbS1zaHJpbmstMSB7XFxuICAgIC1tcy1mbGV4LW5lZ2F0aXZlOiAxICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtc2hyaW5rOiAxICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LXNtLXN0YXJ0IHtcXG4gICAgLW1zLWZsZXgtcGFjazogc3RhcnQgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LXNtLWVuZCB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGVuZCAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LXNtLWNlbnRlciB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1iZXR3ZWVuIHtcXG4gICAgLW1zLWZsZXgtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtc20tYXJvdW5kIHtcXG4gICAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXNtLXN0YXJ0IHtcXG4gICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtc20tZW5kIHtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy1zbS1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy1zbS1iYXNlbGluZSB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy1zbS1zdHJldGNoIHtcXG4gICAgLW1zLWZsZXgtYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLXN0YXJ0IHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1zbS1lbmQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtc20tY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1zbS1iZXR3ZWVuIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLWFyb3VuZCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLXN0cmV0Y2gge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtc20tYXV0byB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG8gIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtc20tc3RhcnQge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1zbS1lbmQge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXNtLWNlbnRlciB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXNtLWJhc2VsaW5lIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXNtLXN0cmV0Y2gge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAuZmxleC1tZC1yb3cge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1jb2x1bW4ge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1yb3ctcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1jb2x1bW4tcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC13cmFwIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LW1kLW5vd3JhcCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbWQtd3JhcC1yZXZlcnNlIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1maWxsIHtcXG4gICAgLW1zLWZsZXg6IDEgMSBhdXRvICFpbXBvcnRhbnQ7XFxuICAgIGZsZXg6IDEgMSBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1ncm93LTAge1xcbiAgICAtbXMtZmxleC1wb3NpdGl2ZTogMCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWdyb3c6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LW1kLWdyb3ctMSB7XFxuICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZ3JvdzogMSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbWQtc2hyaW5rLTAge1xcbiAgICAtbXMtZmxleC1uZWdhdGl2ZTogMCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXNocmluazogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbWQtc2hyaW5rLTEge1xcbiAgICAtbXMtZmxleC1uZWdhdGl2ZTogMSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXNocmluazogMSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1lbmQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbWQtYmV0d2VlbiB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LW1kLWFyb3VuZCB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGRpc3RyaWJ1dGUgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy1tZC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLW1kLWVuZCB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbWQtY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbWQtYmFzZWxpbmUge1xcbiAgICAtbXMtZmxleC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbWQtc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1tZC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtZW5kIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LW1kLWNlbnRlciB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtYmV0d2VlbiB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1tZC1hcm91bmQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGRpc3RyaWJ1dGUgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1tZC1zdHJldGNoIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLW1kLWF1dG8ge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBhdXRvICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLW1kLXN0YXJ0IHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbWQtZW5kIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1tZC1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1tZC1iYXNlbGluZSB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1tZC1zdHJldGNoIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmZsZXgtbGctcm93IHtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctY29sdW1uIHtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctcm93LXJldmVyc2Uge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctY29sdW1uLXJldmVyc2Uge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctd3JhcCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1sZy1ub3dyYXAge1xcbiAgICAtbXMtZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LWxnLXdyYXAtcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctZmlsbCB7XFxuICAgIC1tcy1mbGV4OiAxIDEgYXV0byAhaW1wb3J0YW50O1xcbiAgICBmbGV4OiAxIDEgYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctZ3Jvdy0wIHtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDAgIWltcG9ydGFudDtcXG4gICAgZmxleC1ncm93OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1sZy1ncm93LTEge1xcbiAgICAtbXMtZmxleC1wb3NpdGl2ZTogMSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWdyb3c6IDEgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LWxnLXNocmluay0wIHtcXG4gICAgLW1zLWZsZXgtbmVnYXRpdmU6IDAgIWltcG9ydGFudDtcXG4gICAgZmxleC1zaHJpbms6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LWxnLXNocmluay0xIHtcXG4gICAgLW1zLWZsZXgtbmVnYXRpdmU6IDEgIWltcG9ydGFudDtcXG4gICAgZmxleC1zaHJpbms6IDEgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctc3RhcnQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctZW5kIHtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LWxnLWJldHdlZW4ge1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1hcm91bmQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbGctc3RhcnQge1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy1sZy1lbmQge1xcbiAgICAtbXMtZmxleC1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLWNlbnRlciB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLWJhc2VsaW5lIHtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLXN0cmV0Y2gge1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctc3RhcnQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LWxnLWVuZCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1sZy1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LWxnLWJldHdlZW4ge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctYXJvdW5kIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1sZy1hdXRvIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0byAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1sZy1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLWxnLWVuZCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbGctY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbGctYmFzZWxpbmUge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbGctc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZmxleC14bC1yb3cge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC1jb2x1bW4ge1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC1yb3ctcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC1jb2x1bW4tcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC13cmFwIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXhsLW5vd3JhcCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgteGwtd3JhcC1yZXZlcnNlIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC1maWxsIHtcXG4gICAgLW1zLWZsZXg6IDEgMSBhdXRvICFpbXBvcnRhbnQ7XFxuICAgIGZsZXg6IDEgMSBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC1ncm93LTAge1xcbiAgICAtbXMtZmxleC1wb3NpdGl2ZTogMCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWdyb3c6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXhsLWdyb3ctMSB7XFxuICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZ3JvdzogMSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgteGwtc2hyaW5rLTAge1xcbiAgICAtbXMtZmxleC1uZWdhdGl2ZTogMCAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXNocmluazogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgteGwtc2hyaW5rLTEge1xcbiAgICAtbXMtZmxleC1uZWdhdGl2ZTogMSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXNocmluazogMSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC14bC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC14bC1lbmQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC14bC1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtYmV0d2VlbiB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LXhsLWFyb3VuZCB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGRpc3RyaWJ1dGUgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy14bC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLWVuZCB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMteGwtY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMteGwtYmFzZWxpbmUge1xcbiAgICAtbXMtZmxleC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMteGwtc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC14bC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQteGwtZW5kIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXhsLWNlbnRlciB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQteGwtYmV0d2VlbiB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC14bC1hcm91bmQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGRpc3RyaWJ1dGUgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC14bC1zdHJldGNoIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXhsLWF1dG8ge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBhdXRvICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXhsLXN0YXJ0IHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYteGwtZW5kIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi14bC1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi14bC1iYXNlbGluZSB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi14bC1zdHJldGNoIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi5mbG9hdC1sZWZ0IHtcXG4gIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbG9hdC1yaWdodCB7XFxuICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDtcXG59XFxuXFxuLmZsb2F0LW5vbmUge1xcbiAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuZmxvYXQtc20tbGVmdCB7XFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxvYXQtc20tcmlnaHQge1xcbiAgICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC1zbS1ub25lIHtcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAuZmxvYXQtbWQtbGVmdCB7XFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxvYXQtbWQtcmlnaHQge1xcbiAgICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC1tZC1ub25lIHtcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAuZmxvYXQtbGctbGVmdCB7XFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxvYXQtbGctcmlnaHQge1xcbiAgICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC1sZy1ub25lIHtcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmZsb2F0LXhsLWxlZnQge1xcbiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsb2F0LXhsLXJpZ2h0IHtcXG4gICAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxvYXQteGwtbm9uZSB7XFxuICAgIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi5wb3NpdGlvbi1zdGF0aWMge1xcbiAgcG9zaXRpb246IHN0YXRpYyAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucG9zaXRpb24tcmVsYXRpdmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wb3NpdGlvbi1hYnNvbHV0ZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcXG59XFxuXFxuLnBvc2l0aW9uLWZpeGVkIHtcXG4gIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucG9zaXRpb24tc3RpY2t5IHtcXG4gIHBvc2l0aW9uOiAtd2Via2l0LXN0aWNreSAhaW1wb3J0YW50O1xcbiAgcG9zaXRpb246IHN0aWNreSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZml4ZWQtdG9wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDEwMzA7XFxufVxcblxcbi5maXhlZC1ib3R0b20ge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTAzMDtcXG59XFxuXFxuQHN1cHBvcnRzICgocG9zaXRpb246IC13ZWJraXQtc3RpY2t5KSBvciAocG9zaXRpb246IHN0aWNreSkpIHtcXG4gIC5zdGlja3ktdG9wIHtcXG4gICAgcG9zaXRpb246IC13ZWJraXQtc3RpY2t5O1xcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgICB0b3A6IDA7XFxuICAgIHotaW5kZXg6IDEwMjA7XFxuICB9XFxufVxcblxcbi5zci1vbmx5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi5zci1vbmx5LWZvY3VzYWJsZTphY3RpdmUsIC5zci1vbmx5LWZvY3VzYWJsZTpmb2N1cyB7XFxuICBwb3NpdGlvbjogc3RhdGljO1xcbiAgd2lkdGg6IGF1dG87XFxuICBoZWlnaHQ6IGF1dG87XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIGNsaXA6IGF1dG87XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbn1cXG5cXG4uc2hhZG93LXNtIHtcXG4gIGJveC1zaGFkb3c6IDAgMC4xMjVyZW0gMC4yNXJlbSByZ2JhKDAsIDAsIDAsIDAuMDc1KSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uc2hhZG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMC41cmVtIDFyZW0gcmdiYSgwLCAwLCAwLCAwLjE1KSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uc2hhZG93LWxnIHtcXG4gIGJveC1zaGFkb3c6IDAgMXJlbSAzcmVtIHJnYmEoMCwgMCwgMCwgMC4xNzUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5zaGFkb3ctbm9uZSB7XFxuICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi53LTI1IHtcXG4gIHdpZHRoOiAyNSUgIWltcG9ydGFudDtcXG59XFxuXFxuLnctNTAge1xcbiAgd2lkdGg6IDUwJSAhaW1wb3J0YW50O1xcbn1cXG5cXG4udy03NSB7XFxuICB3aWR0aDogNzUlICFpbXBvcnRhbnQ7XFxufVxcblxcbi53LTEwMCB7XFxuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xcbn1cXG5cXG4udy1hdXRvIHtcXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oLTI1IHtcXG4gIGhlaWdodDogMjUlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oLTUwIHtcXG4gIGhlaWdodDogNTAlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oLTc1IHtcXG4gIGhlaWdodDogNzUlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oLTEwMCB7XFxuICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLmgtYXV0byB7XFxuICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLm13LTEwMCB7XFxuICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLm1oLTEwMCB7XFxuICBtYXgtaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tLTAge1xcbiAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC0wLFxcbi5teS0wIHtcXG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLm1yLTAsXFxuLm14LTAge1xcbiAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYi0wLFxcbi5teS0wIHtcXG4gIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLTAsXFxuLm14LTAge1xcbiAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLm0tMSB7XFxuICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm10LTEsXFxuLm15LTEge1xcbiAgbWFyZ2luLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXItMSxcXG4ubXgtMSB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1iLTEsXFxuLm15LTEge1xcbiAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWwtMSxcXG4ubXgtMSB7XFxuICBtYXJnaW4tbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0yIHtcXG4gIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC0yLFxcbi5teS0yIHtcXG4gIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXItMixcXG4ubXgtMiB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMixcXG4ubXktMiB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLTIsXFxuLm14LTIge1xcbiAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0zIHtcXG4gIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtMyxcXG4ubXktMyB7XFxuICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci0zLFxcbi5teC0zIHtcXG4gIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMyxcXG4ubXktMyB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC0zLFxcbi5teC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tLTQge1xcbiAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm10LTQsXFxuLm15LTQge1xcbiAgbWFyZ2luLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci00LFxcbi5teC00IHtcXG4gIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYi00LFxcbi5teS00IHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWwtNCxcXG4ubXgtNCB7XFxuICBtYXJnaW4tbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tLTUge1xcbiAgbWFyZ2luOiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC01LFxcbi5teS01IHtcXG4gIG1hcmdpbi10b3A6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1yLTUsXFxuLm14LTUge1xcbiAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYi01LFxcbi5teS01IHtcXG4gIG1hcmdpbi1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLTUsXFxuLm14LTUge1xcbiAgbWFyZ2luLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnAtMCB7XFxuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wdC0wLFxcbi5weS0wIHtcXG4gIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci0wLFxcbi5weC0wIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnBiLTAsXFxuLnB5LTAge1xcbiAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnBsLTAsXFxuLnB4LTAge1xcbiAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wLTEge1xcbiAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtMSxcXG4ucHktMSB7XFxuICBwYWRkaW5nLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHItMSxcXG4ucHgtMSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wYi0xLFxcbi5weS0xIHtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC0xLFxcbi5weC0xIHtcXG4gIHBhZGRpbmctbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC0yIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtMixcXG4ucHktMiB7XFxuICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci0yLFxcbi5weC0yIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItMixcXG4ucHktMiB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC0yLFxcbi5weC0yIHtcXG4gIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wLTMge1xcbiAgcGFkZGluZzogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtMyxcXG4ucHktMyB7XFxuICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHItMyxcXG4ucHgtMyB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wYi0zLFxcbi5weS0zIHtcXG4gIHBhZGRpbmctYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC0zLFxcbi5weC0zIHtcXG4gIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC00IHtcXG4gIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtNCxcXG4ucHktNCB7XFxuICBwYWRkaW5nLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci00LFxcbi5weC00IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItNCxcXG4ucHktNCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC00LFxcbi5weC00IHtcXG4gIHBhZGRpbmctbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wLTUge1xcbiAgcGFkZGluZzogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtNSxcXG4ucHktNSB7XFxuICBwYWRkaW5nLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHItNSxcXG4ucHgtNSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wYi01LFxcbi5weS01IHtcXG4gIHBhZGRpbmctYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC01LFxcbi5weC01IHtcXG4gIHBhZGRpbmctbGVmdDogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS1hdXRvIHtcXG4gIG1hcmdpbjogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtYXV0byxcXG4ubXktYXV0byB7XFxuICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci1hdXRvLFxcbi5teC1hdXRvIHtcXG4gIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItYXV0byxcXG4ubXktYXV0byB7XFxuICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC1hdXRvLFxcbi5teC1hdXRvIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLm0tc20tMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLTAsXFxuICAubXktc20tMCB7XFxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS0wLFxcbiAgLm14LXNtLTAge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1zbS0wLFxcbiAgLm15LXNtLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tMCxcXG4gIC5teC1zbS0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXNtLTEge1xcbiAgICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1zbS0xLFxcbiAgLm15LXNtLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItc20tMSxcXG4gIC5teC1zbS0xIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItc20tMSxcXG4gIC5teS1zbS0xIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXNtLTEsXFxuICAubXgtc20tMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS1zbS0yIHtcXG4gICAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1zbS0yLFxcbiAgLm15LXNtLTIge1xcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS0yLFxcbiAgLm14LXNtLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXNtLTIsXFxuICAubXktc20tMiB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXNtLTIsXFxuICAubXgtc20tMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXNtLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1zbS0zLFxcbiAgLm15LXNtLTMge1xcbiAgICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItc20tMyxcXG4gIC5teC1zbS0zIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItc20tMyxcXG4gIC5teS1zbS0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXNtLTMsXFxuICAubXgtc20tMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS1zbS00IHtcXG4gICAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1zbS00LFxcbiAgLm15LXNtLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS00LFxcbiAgLm14LXNtLTQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXNtLTQsXFxuICAubXktc20tNCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXNtLTQsXFxuICAubXgtc20tNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXNtLTUge1xcbiAgICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1zbS01LFxcbiAgLm15LXNtLTUge1xcbiAgICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItc20tNSxcXG4gIC5teC1zbS01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItc20tNSxcXG4gIC5teS1zbS01IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXNtLTUsXFxuICAubXgtc20tNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1zbS0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXNtLTAsXFxuICAucHktc20tMCB7XFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItc20tMCxcXG4gIC5weC1zbS0wIHtcXG4gICAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXNtLTAsXFxuICAucHktc20tMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtc20tMCxcXG4gIC5weC1zbS0wIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1zbS0xIHtcXG4gICAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXNtLTEsXFxuICAucHktc20tMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItc20tMSxcXG4gIC5weC1zbS0xIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXNtLTEsXFxuICAucHktc20tMSB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtc20tMSxcXG4gIC5weC1zbS0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1zbS0yIHtcXG4gICAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtc20tMixcXG4gIC5weS1zbS0yIHtcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXNtLTIsXFxuICAucHgtc20tMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXNtLTIsXFxuICAucHktc20tMiB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1zbS0yLFxcbiAgLnB4LXNtLTIge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtc20tMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1zbS0zLFxcbiAgLnB5LXNtLTMge1xcbiAgICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXNtLTMsXFxuICAucHgtc20tMyB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1zbS0zLFxcbiAgLnB5LXNtLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXNtLTMsXFxuICAucHgtc20tMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtc20tNCB7XFxuICAgIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXNtLTQsXFxuICAucHktc20tNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1zbS00LFxcbiAgLnB4LXNtLTQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1zbS00LFxcbiAgLnB5LXNtLTQge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtc20tNCxcXG4gIC5weC1zbS00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXNtLTUge1xcbiAgICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtc20tNSxcXG4gIC5weS1zbS01IHtcXG4gICAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1zbS01LFxcbiAgLnB4LXNtLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItc20tNSxcXG4gIC5weS1zbS01IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1zbS01LFxcbiAgLnB4LXNtLTUge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXNtLWF1dG8ge1xcbiAgICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1zbS1hdXRvLFxcbiAgLm15LXNtLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItc20tYXV0byxcXG4gIC5teC1zbS1hdXRvIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItc20tYXV0byxcXG4gIC5teS1zbS1hdXRvIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXNtLWF1dG8sXFxuICAubXgtc20tYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLm0tbWQtMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLTAsXFxuICAubXktbWQtMCB7XFxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC0wLFxcbiAgLm14LW1kLTAge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1tZC0wLFxcbiAgLm15LW1kLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtMCxcXG4gIC5teC1tZC0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLW1kLTEge1xcbiAgICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1tZC0xLFxcbiAgLm15LW1kLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbWQtMSxcXG4gIC5teC1tZC0xIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbWQtMSxcXG4gIC5teS1tZC0xIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLW1kLTEsXFxuICAubXgtbWQtMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS1tZC0yIHtcXG4gICAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1tZC0yLFxcbiAgLm15LW1kLTIge1xcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC0yLFxcbiAgLm14LW1kLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLW1kLTIsXFxuICAubXktbWQtMiB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLW1kLTIsXFxuICAubXgtbWQtMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLW1kLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1tZC0zLFxcbiAgLm15LW1kLTMge1xcbiAgICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbWQtMyxcXG4gIC5teC1tZC0zIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbWQtMyxcXG4gIC5teS1tZC0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLW1kLTMsXFxuICAubXgtbWQtMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS1tZC00IHtcXG4gICAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1tZC00LFxcbiAgLm15LW1kLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC00LFxcbiAgLm14LW1kLTQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLW1kLTQsXFxuICAubXktbWQtNCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLW1kLTQsXFxuICAubXgtbWQtNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLW1kLTUge1xcbiAgICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1tZC01LFxcbiAgLm15LW1kLTUge1xcbiAgICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbWQtNSxcXG4gIC5teC1tZC01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbWQtNSxcXG4gIC5teS1tZC01IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLW1kLTUsXFxuICAubXgtbWQtNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1tZC0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LW1kLTAsXFxuICAucHktbWQtMCB7XFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbWQtMCxcXG4gIC5weC1tZC0wIHtcXG4gICAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLW1kLTAsXFxuICAucHktbWQtMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbWQtMCxcXG4gIC5weC1tZC0wIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1tZC0xIHtcXG4gICAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LW1kLTEsXFxuICAucHktbWQtMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbWQtMSxcXG4gIC5weC1tZC0xIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLW1kLTEsXFxuICAucHktbWQtMSB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbWQtMSxcXG4gIC5weC1tZC0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1tZC0yIHtcXG4gICAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbWQtMixcXG4gIC5weS1tZC0yIHtcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLW1kLTIsXFxuICAucHgtbWQtMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLW1kLTIsXFxuICAucHktbWQtMiB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1tZC0yLFxcbiAgLnB4LW1kLTIge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtbWQtMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1tZC0zLFxcbiAgLnB5LW1kLTMge1xcbiAgICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLW1kLTMsXFxuICAucHgtbWQtMyB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1tZC0zLFxcbiAgLnB5LW1kLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLW1kLTMsXFxuICAucHgtbWQtMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtbWQtNCB7XFxuICAgIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LW1kLTQsXFxuICAucHktbWQtNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1tZC00LFxcbiAgLnB4LW1kLTQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1tZC00LFxcbiAgLnB5LW1kLTQge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbWQtNCxcXG4gIC5weC1tZC00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLW1kLTUge1xcbiAgICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbWQtNSxcXG4gIC5weS1tZC01IHtcXG4gICAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1tZC01LFxcbiAgLnB4LW1kLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbWQtNSxcXG4gIC5weS1tZC01IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1tZC01LFxcbiAgLnB4LW1kLTUge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLW1kLWF1dG8ge1xcbiAgICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1tZC1hdXRvLFxcbiAgLm15LW1kLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbWQtYXV0byxcXG4gIC5teC1tZC1hdXRvIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbWQtYXV0byxcXG4gIC5teS1tZC1hdXRvIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLW1kLWF1dG8sXFxuICAubXgtbWQtYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLm0tbGctMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLTAsXFxuICAubXktbGctMCB7XFxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy0wLFxcbiAgLm14LWxnLTAge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1sZy0wLFxcbiAgLm15LWxnLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctMCxcXG4gIC5teC1sZy0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLWxnLTEge1xcbiAgICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1sZy0xLFxcbiAgLm15LWxnLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbGctMSxcXG4gIC5teC1sZy0xIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbGctMSxcXG4gIC5teS1sZy0xIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLWxnLTEsXFxuICAubXgtbGctMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS1sZy0yIHtcXG4gICAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1sZy0yLFxcbiAgLm15LWxnLTIge1xcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy0yLFxcbiAgLm14LWxnLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLWxnLTIsXFxuICAubXktbGctMiB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLWxnLTIsXFxuICAubXgtbGctMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLWxnLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1sZy0zLFxcbiAgLm15LWxnLTMge1xcbiAgICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbGctMyxcXG4gIC5teC1sZy0zIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbGctMyxcXG4gIC5teS1sZy0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLWxnLTMsXFxuICAubXgtbGctMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS1sZy00IHtcXG4gICAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1sZy00LFxcbiAgLm15LWxnLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy00LFxcbiAgLm14LWxnLTQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLWxnLTQsXFxuICAubXktbGctNCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLWxnLTQsXFxuICAubXgtbGctNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLWxnLTUge1xcbiAgICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1sZy01LFxcbiAgLm15LWxnLTUge1xcbiAgICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbGctNSxcXG4gIC5teC1sZy01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbGctNSxcXG4gIC5teS1sZy01IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLWxnLTUsXFxuICAubXgtbGctNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1sZy0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LWxnLTAsXFxuICAucHktbGctMCB7XFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbGctMCxcXG4gIC5weC1sZy0wIHtcXG4gICAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLWxnLTAsXFxuICAucHktbGctMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbGctMCxcXG4gIC5weC1sZy0wIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1sZy0xIHtcXG4gICAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LWxnLTEsXFxuICAucHktbGctMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbGctMSxcXG4gIC5weC1sZy0xIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLWxnLTEsXFxuICAucHktbGctMSB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbGctMSxcXG4gIC5weC1sZy0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1sZy0yIHtcXG4gICAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbGctMixcXG4gIC5weS1sZy0yIHtcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLWxnLTIsXFxuICAucHgtbGctMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLWxnLTIsXFxuICAucHktbGctMiB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1sZy0yLFxcbiAgLnB4LWxnLTIge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtbGctMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1sZy0zLFxcbiAgLnB5LWxnLTMge1xcbiAgICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLWxnLTMsXFxuICAucHgtbGctMyB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1sZy0zLFxcbiAgLnB5LWxnLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLWxnLTMsXFxuICAucHgtbGctMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtbGctNCB7XFxuICAgIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LWxnLTQsXFxuICAucHktbGctNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1sZy00LFxcbiAgLnB4LWxnLTQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1sZy00LFxcbiAgLnB5LWxnLTQge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbGctNCxcXG4gIC5weC1sZy00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLWxnLTUge1xcbiAgICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbGctNSxcXG4gIC5weS1sZy01IHtcXG4gICAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1sZy01LFxcbiAgLnB4LWxnLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbGctNSxcXG4gIC5weS1sZy01IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1sZy01LFxcbiAgLnB4LWxnLTUge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLWxnLWF1dG8ge1xcbiAgICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC1sZy1hdXRvLFxcbiAgLm15LWxnLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXItbGctYXV0byxcXG4gIC5teC1sZy1hdXRvIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbGctYXV0byxcXG4gIC5teS1sZy1hdXRvIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLWxnLWF1dG8sXFxuICAubXgtbGctYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIC5tLXhsLTAge1xcbiAgICBtYXJnaW46IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC0wLFxcbiAgLm15LXhsLTAge1xcbiAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtMCxcXG4gIC5teC14bC0wIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWIteGwtMCxcXG4gIC5teS14bC0wIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLTAsXFxuICAubXgteGwtMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS14bC0xIHtcXG4gICAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQteGwtMSxcXG4gIC5teS14bC0xIHtcXG4gICAgbWFyZ2luLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXhsLTEsXFxuICAubXgteGwtMSB7XFxuICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXhsLTEsXFxuICAubXkteGwtMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC14bC0xLFxcbiAgLm14LXhsLTEge1xcbiAgICBtYXJnaW4tbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0teGwtMiB7XFxuICAgIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQteGwtMixcXG4gIC5teS14bC0yIHtcXG4gICAgbWFyZ2luLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtMixcXG4gIC5teC14bC0yIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi14bC0yLFxcbiAgLm15LXhsLTIge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC14bC0yLFxcbiAgLm14LXhsLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS14bC0zIHtcXG4gICAgbWFyZ2luOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQteGwtMyxcXG4gIC5teS14bC0zIHtcXG4gICAgbWFyZ2luLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXhsLTMsXFxuICAubXgteGwtMyB7XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXhsLTMsXFxuICAubXkteGwtMyB7XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC14bC0zLFxcbiAgLm14LXhsLTMge1xcbiAgICBtYXJnaW4tbGVmdDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0teGwtNCB7XFxuICAgIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQteGwtNCxcXG4gIC5teS14bC00IHtcXG4gICAgbWFyZ2luLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtNCxcXG4gIC5teC14bC00IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi14bC00LFxcbiAgLm15LXhsLTQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC14bC00LFxcbiAgLm14LXhsLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS14bC01IHtcXG4gICAgbWFyZ2luOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQteGwtNSxcXG4gIC5teS14bC01IHtcXG4gICAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXhsLTUsXFxuICAubXgteGwtNSB7XFxuICAgIG1hcmdpbi1yaWdodDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXhsLTUsXFxuICAubXkteGwtNSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC14bC01LFxcbiAgLm14LXhsLTUge1xcbiAgICBtYXJnaW4tbGVmdDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAteGwtMCB7XFxuICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC14bC0wLFxcbiAgLnB5LXhsLTAge1xcbiAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXhsLTAsXFxuICAucHgteGwtMCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi14bC0wLFxcbiAgLnB5LXhsLTAge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXhsLTAsXFxuICAucHgteGwtMCB7XFxuICAgIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAteGwtMSB7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC14bC0xLFxcbiAgLnB5LXhsLTEge1xcbiAgICBwYWRkaW5nLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXhsLTEsXFxuICAucHgteGwtMSB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi14bC0xLFxcbiAgLnB5LXhsLTEge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXhsLTEsXFxuICAucHgteGwtMSB7XFxuICAgIHBhZGRpbmctbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAteGwtMiB7XFxuICAgIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXhsLTIsXFxuICAucHkteGwtMiB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci14bC0yLFxcbiAgLnB4LXhsLTIge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi14bC0yLFxcbiAgLnB5LXhsLTIge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwteGwtMixcXG4gIC5weC14bC0yIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXhsLTMge1xcbiAgICBwYWRkaW5nOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQteGwtMyxcXG4gIC5weS14bC0zIHtcXG4gICAgcGFkZGluZy10b3A6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci14bC0zLFxcbiAgLnB4LXhsLTMge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGIteGwtMyxcXG4gIC5weS14bC0zIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC14bC0zLFxcbiAgLnB4LXhsLTMge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXhsLTQge1xcbiAgICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC14bC00LFxcbiAgLnB5LXhsLTQge1xcbiAgICBwYWRkaW5nLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHIteGwtNCxcXG4gIC5weC14bC00IHtcXG4gICAgcGFkZGluZy1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGIteGwtNCxcXG4gIC5weS14bC00IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXhsLTQsXFxuICAucHgteGwtNCB7XFxuICAgIHBhZGRpbmctbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC14bC01IHtcXG4gICAgcGFkZGluZzogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXhsLTUsXFxuICAucHkteGwtNSB7XFxuICAgIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHIteGwtNSxcXG4gIC5weC14bC01IHtcXG4gICAgcGFkZGluZy1yaWdodDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXhsLTUsXFxuICAucHkteGwtNSB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwteGwtNSxcXG4gIC5weC14bC01IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS14bC1hdXRvIHtcXG4gICAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQteGwtYXV0byxcXG4gIC5teS14bC1hdXRvIHtcXG4gICAgbWFyZ2luLXRvcDogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXhsLWF1dG8sXFxuICAubXgteGwtYXV0byB7XFxuICAgIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXhsLWF1dG8sXFxuICAubXkteGwtYXV0byB7XFxuICAgIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC14bC1hdXRvLFxcbiAgLm14LXhsLWF1dG8ge1xcbiAgICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG4udGV4dC1tb25vc3BhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFNGTW9uby1SZWd1bGFyLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXFxcIkxpYmVyYXRpb24gTW9ub1xcXCIsIFxcXCJDb3VyaWVyIE5ld1xcXCIsIG1vbm9zcGFjZTtcXG59XFxuXFxuLnRleHQtanVzdGlmeSB7XFxuICB0ZXh0LWFsaWduOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LW5vd3JhcCB7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXRydW5jYXRlIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcblxcbi50ZXh0LWxlZnQge1xcbiAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1yaWdodCB7XFxuICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1jZW50ZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLnRleHQtc20tbGVmdCB7XFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC50ZXh0LXNtLXJpZ2h0IHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC50ZXh0LXNtLWNlbnRlciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC50ZXh0LW1kLWxlZnQge1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGV4dC1tZC1yaWdodCB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGV4dC1tZC1jZW50ZXIge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAudGV4dC1sZy1sZWZ0IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRleHQtbGctcmlnaHQge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRleHQtbGctY2VudGVyIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIC50ZXh0LXhsLWxlZnQge1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGV4dC14bC1yaWdodCB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGV4dC14bC1jZW50ZXIge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuLnRleHQtbG93ZXJjYXNlIHtcXG4gIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2UgIWltcG9ydGFudDtcXG59XFxuXFxuLnRleHQtdXBwZXJjYXNlIHtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2UgIWltcG9ydGFudDtcXG59XFxuXFxuLnRleHQtY2FwaXRhbGl6ZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZm9udC13ZWlnaHQtbGlnaHQge1xcbiAgZm9udC13ZWlnaHQ6IDMwMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZm9udC13ZWlnaHQtbm9ybWFsIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmZvbnQtd2VpZ2h0LWJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IDcwMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZm9udC1pdGFsaWMge1xcbiAgZm9udC1zdHlsZTogaXRhbGljICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXdoaXRlIHtcXG4gIGNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXByaW1hcnkge1xcbiAgY29sb3I6ICMwMDdiZmYgIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LXByaW1hcnk6aG92ZXIsIGEudGV4dC1wcmltYXJ5OmZvY3VzIHtcXG4gIGNvbG9yOiAjMDA2MmNjICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXNlY29uZGFyeSB7XFxuICBjb2xvcjogIzZjNzU3ZCAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLnRleHQtc2Vjb25kYXJ5OmhvdmVyLCBhLnRleHQtc2Vjb25kYXJ5OmZvY3VzIHtcXG4gIGNvbG9yOiAjNTQ1YjYyICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXN1Y2Nlc3Mge1xcbiAgY29sb3I6ICMyOGE3NDUgIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LXN1Y2Nlc3M6aG92ZXIsIGEudGV4dC1zdWNjZXNzOmZvY3VzIHtcXG4gIGNvbG9yOiAjMWU3ZTM0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWluZm8ge1xcbiAgY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LWluZm86aG92ZXIsIGEudGV4dC1pbmZvOmZvY3VzIHtcXG4gIGNvbG9yOiAjMTE3YThiICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXdhcm5pbmcge1xcbiAgY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LXdhcm5pbmc6aG92ZXIsIGEudGV4dC13YXJuaW5nOmZvY3VzIHtcXG4gIGNvbG9yOiAjZDM5ZTAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWRhbmdlciB7XFxuICBjb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLnRleHQtZGFuZ2VyOmhvdmVyLCBhLnRleHQtZGFuZ2VyOmZvY3VzIHtcXG4gIGNvbG9yOiAjYmQyMTMwICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWxpZ2h0IHtcXG4gIGNvbG9yOiAjZjhmOWZhICFpbXBvcnRhbnQ7XFxufVxcblxcbmEudGV4dC1saWdodDpob3ZlciwgYS50ZXh0LWxpZ2h0OmZvY3VzIHtcXG4gIGNvbG9yOiAjZGFlMGU1ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWRhcmsge1xcbiAgY29sb3I6ICMzNDNhNDAgIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LWRhcms6aG92ZXIsIGEudGV4dC1kYXJrOmZvY3VzIHtcXG4gIGNvbG9yOiAjMWQyMTI0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgY29sb3I6ICMyMTI1MjkgIWltcG9ydGFudDtcXG59XFxuXFxuLnRleHQtbXV0ZWQge1xcbiAgY29sb3I6ICM2Yzc1N2QgIWltcG9ydGFudDtcXG59XFxuXFxuLnRleHQtYmxhY2stNTAge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KSAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC13aGl0ZS01MCB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWhpZGUge1xcbiAgZm9udDogMC8wIGE7XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4udmlzaWJsZSB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pbnZpc2libGUge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSBwcmludCB7XFxuICAqLFxcbiAgKjo6YmVmb3JlLFxcbiAgKjo6YWZ0ZXIge1xcbiAgICB0ZXh0LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xcbiAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICBhOm5vdCguYnRuKSB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbiAgfVxcbiAgYWJiclt0aXRsZV06OmFmdGVyIHtcXG4gICAgY29udGVudDogXFxcIiAoXFxcIiBhdHRyKHRpdGxlKSBcXFwiKVxcXCI7XFxuICB9XFxuICBwcmUge1xcbiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIHByZSxcXG4gIGJsb2NrcXVvdGUge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYWRiNWJkO1xcbiAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7XFxuICB9XFxuICB0aGVhZCB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLWhlYWRlci1ncm91cDtcXG4gIH1cXG4gIHRyLFxcbiAgaW1nIHtcXG4gICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkO1xcbiAgfVxcbiAgcCxcXG4gIGgyLFxcbiAgaDMge1xcbiAgICBvcnBoYW5zOiAzO1xcbiAgICB3aWRvd3M6IDM7XFxuICB9XFxuICBoMixcXG4gIGgzIHtcXG4gICAgcGFnZS1icmVhay1hZnRlcjogYXZvaWQ7XFxuICB9XFxuICBAcGFnZSB7XFxuICAgIHNpemU6IGEzO1xcbiAgfVxcbiAgYm9keSB7XFxuICAgIG1pbi13aWR0aDogOTkycHggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5jb250YWluZXIge1xcbiAgICBtaW4td2lkdGg6IDk5MnB4ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubmF2YmFyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG4gIC5iYWRnZSB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxuICB9XFxuICAudGFibGUge1xcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGFibGUgdGQsXFxuICAudGFibGUgdGgge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGFibGUtYm9yZGVyZWQgdGgsXFxuICAudGFibGUtYm9yZGVyZWQgdGQge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGVlMmU2ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGFibGUtZGFyayB7XFxuICAgIGNvbG9yOiBpbmhlcml0O1xcbiAgfVxcbiAgLnRhYmxlLWRhcmsgdGgsXFxuICAudGFibGUtZGFyayB0ZCxcXG4gIC50YWJsZS1kYXJrIHRoZWFkIHRoLFxcbiAgLnRhYmxlLWRhcmsgdGJvZHkgKyB0Ym9keSB7XFxuICAgIGJvcmRlci1jb2xvcjogI2RlZTJlNjtcXG4gIH1cXG4gIC50YWJsZSAudGhlYWQtZGFyayB0aCB7XFxuICAgIGNvbG9yOiBpbmhlcml0O1xcbiAgICBib3JkZXItY29sb3I6ICNkZWUyZTY7XFxuICB9XFxufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW46IGF1dG87IH1cXG4gIGJvZHkgaDEge1xcbiAgICBjb2xvcjogZ3JlZW47IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwiY3JlYXRlLXJlYWN0LWNvbnRleHRcIjtcblxuZXhwb3J0IHZhciBNYW5hZ2VyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBnZXRSZWZlcmVuY2VSZWY6IHVuZGVmaW5lZCwgcmVmZXJlbmNlTm9kZTogdW5kZWZpbmVkIH0pO1xuXG52YXIgTWFuYWdlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNYW5hZ2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNYW5hZ2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYW5hZ2VyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5nZXRSZWZlcmVuY2VSZWYgPSBmdW5jdGlvbiAocmVmZXJlbmNlTm9kZSkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gX3JlZi5jb250ZXh0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRleHQ6IF9leHRlbmRzKHt9LCBjb250ZXh0LCB7IHJlZmVyZW5jZU5vZGU6IHJlZmVyZW5jZU5vZGUgfSlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgZ2V0UmVmZXJlbmNlUmVmOiBfdGhpcy5nZXRSZWZlcmVuY2VSZWYsXG4gICAgICAgIHJlZmVyZW5jZU5vZGU6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTWFuYWdlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgTWFuYWdlckNvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7IHZhbHVlOiB0aGlzLnN0YXRlLmNvbnRleHQgfSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNYW5hZ2VyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBNYW5hZ2VyOyIsIlxuXG4vKipcbiAqIFRha2VzIGFuIGFyZ3VtZW50IGFuZCBpZiBpdCdzIGFuIGFycmF5LCByZXR1cm5zIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSxcbiAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBhcmd1bWVudC4gVXNlZCBmb3IgUHJlYWN0IGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCB2YXIgdW53cmFwQXJyYXkgPSBmdW5jdGlvbiB1bndyYXBBcnJheShhcmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKSA/IGFyZ1swXSA6IGFyZztcbn07XG5cbi8qKlxuICogVGFrZXMgYSBtYXliZS11bmRlZmluZWQgZnVuY3Rpb24gYW5kIGFyYml0cmFyeSBhcmdzIGFuZCBpbnZva2VzIHRoZSBmdW5jdGlvblxuICogb25seSBpZiBpdCBpcyBkZWZpbmVkLlxuICovXG5leHBvcnQgdmFyIHNhZmVJbnZva2UgPSBmdW5jdGlvbiBzYWZlSW52b2tlKGZuKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUG9wcGVySlMgZnJvbSAncG9wcGVyLmpzJztcblxuaW1wb3J0IHsgTWFuYWdlckNvbnRleHQgfSBmcm9tICcuL01hbmFnZXInO1xuaW1wb3J0IHsgc2FmZUludm9rZSwgdW53cmFwQXJyYXkgfSBmcm9tICcuL3V0aWxzJztcblxudmFyIGluaXRpYWxTdHlsZSA9IHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgb3BhY2l0eTogMCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59O1xuXG52YXIgaW5pdGlhbEFycm93U3R5bGUgPSB7fTtcblxuZXhwb3J0IHZhciBJbm5lclBvcHBlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbm5lclBvcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5uZXJQb3BwZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbm5lclBvcHBlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICBwbGFjZW1lbnQ6IHVuZGVmaW5lZFxuICAgIH0sIF90aGlzLnBvcHBlck5vZGUgPSBudWxsLCBfdGhpcy5hcnJvd05vZGUgPSBudWxsLCBfdGhpcy5zZXRQb3BwZXJOb2RlID0gZnVuY3Rpb24gKHBvcHBlck5vZGUpIHtcbiAgICAgIGlmIChfdGhpcy5wb3BwZXJOb2RlID09PSBwb3BwZXJOb2RlKSByZXR1cm47XG5cbiAgICAgIHNhZmVJbnZva2UoX3RoaXMucHJvcHMuaW5uZXJSZWYsIHBvcHBlck5vZGUpO1xuICAgICAgX3RoaXMucG9wcGVyTm9kZSA9IHBvcHBlck5vZGU7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSwgX3RoaXMuc2V0QXJyb3dOb2RlID0gZnVuY3Rpb24gKGFycm93Tm9kZSkge1xuICAgICAgaWYgKF90aGlzLmFycm93Tm9kZSA9PT0gYXJyb3dOb2RlKSByZXR1cm47XG4gICAgICBfdGhpcy5hcnJvd05vZGUgPSBhcnJvd05vZGU7XG5cbiAgICAgIGlmICghX3RoaXMucG9wcGVySW5zdGFuY2UpIF90aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSwgX3RoaXMudXBkYXRlU3RhdGVNb2RpZmllciA9IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBvcmRlcjogOTAwLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKGRhdGEpIHtcbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgZGF0YTogZGF0YSwgcGxhY2VtZW50OiBwbGFjZW1lbnQgfSwgcGxhY2VtZW50ICE9PSBfdGhpcy5zdGF0ZS5wbGFjZW1lbnQgPyBfdGhpcy5zY2hlZHVsZVVwZGF0ZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZW1lbnQ6IF90aGlzLnByb3BzLnBsYWNlbWVudCxcbiAgICAgICAgZXZlbnRzRW5hYmxlZDogX3RoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCxcbiAgICAgICAgcG9zaXRpb25GaXhlZDogX3RoaXMucHJvcHMucG9zaXRpb25GaXhlZCxcbiAgICAgICAgbW9kaWZpZXJzOiBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMubW9kaWZpZXJzLCB7XG4gICAgICAgICAgYXJyb3c6IF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcy5tb2RpZmllcnMgJiYgX3RoaXMucHJvcHMubW9kaWZpZXJzLmFycm93LCB7XG4gICAgICAgICAgICBlbmFibGVkOiAhIV90aGlzLmFycm93Tm9kZSxcbiAgICAgICAgICAgIGVsZW1lbnQ6IF90aGlzLmFycm93Tm9kZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGFwcGx5U3R5bGU6IHsgZW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgICB1cGRhdGVTdGF0ZU1vZGlmaWVyOiBfdGhpcy51cGRhdGVTdGF0ZU1vZGlmaWVyXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0sIF90aGlzLmdldFBvcHBlclN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpcy5wb3BwZXJOb2RlIHx8ICFfdGhpcy5zdGF0ZS5kYXRhID8gaW5pdGlhbFN0eWxlIDogX2V4dGVuZHMoe1xuICAgICAgICBwb3NpdGlvbjogX3RoaXMuc3RhdGUuZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvblxuICAgICAgfSwgX3RoaXMuc3RhdGUuZGF0YS5zdHlsZXMpO1xuICAgIH0sIF90aGlzLmdldFBvcHBlclBsYWNlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuc3RhdGUuZGF0YSA/IHVuZGVmaW5lZCA6IF90aGlzLnN0YXRlLnBsYWNlbWVudDtcbiAgICB9LCBfdGhpcy5nZXRBcnJvd1N0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpcy5hcnJvd05vZGUgfHwgIV90aGlzLnN0YXRlLmRhdGEgPyBpbml0aWFsQXJyb3dTdHlsZSA6IF90aGlzLnN0YXRlLmRhdGEuYXJyb3dTdHlsZXM7XG4gICAgfSwgX3RoaXMuZ2V0T3V0T2ZCb3VuZGFyaWVzU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RhdGUuZGF0YSA/IF90aGlzLnN0YXRlLmRhdGEuaGlkZSA6IHVuZGVmaW5lZDtcbiAgICB9LCBfdGhpcy5kZXN0cm95UG9wcGVySW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnBvcHBlckluc3RhbmNlKSByZXR1cm47XG5cbiAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgICB9LCBfdGhpcy51cGRhdGVQb3BwZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICB2YXIgX3RoaXMyID0gX3RoaXMsXG4gICAgICAgICAgcG9wcGVyTm9kZSA9IF90aGlzMi5wb3BwZXJOb2RlO1xuICAgICAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBfdGhpcy5wcm9wcy5yZWZlcmVuY2VFbGVtZW50O1xuXG5cbiAgICAgIGlmICghcmVmZXJlbmNlRWxlbWVudCB8fCAhcG9wcGVyTm9kZSkgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5wb3BwZXJJbnN0YW5jZSA9IG5ldyBQb3BwZXJKUyhyZWZlcmVuY2VFbGVtZW50LCBwb3BwZXJOb2RlLCBfdGhpcy5nZXRPcHRpb25zKCkpO1xuICAgIH0sIF90aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBJbm5lclBvcHBlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgLy8gSWYgdGhlIFBvcHBlci5qcyBvcHRpb25zIGhhdmUgY2hhbmdlZCwgdXBkYXRlIHRoZSBpbnN0YW5jZSAoZGVzdHJveSArIGNyZWF0ZSlcbiAgICBpZiAodGhpcy5wcm9wcy5wbGFjZW1lbnQgIT09IHByZXZQcm9wcy5wbGFjZW1lbnQgfHwgdGhpcy5wcm9wcy5yZWZlcmVuY2VFbGVtZW50ICE9PSBwcmV2UHJvcHMucmVmZXJlbmNlRWxlbWVudCB8fCB0aGlzLnByb3BzLnBvc2l0aW9uRml4ZWQgIT09IHByZXZQcm9wcy5wb3NpdGlvbkZpeGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmV2ZW50c0VuYWJsZWQgIT09IHByZXZQcm9wcy5ldmVudHNFbmFibGVkICYmIHRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCA/IHRoaXMucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSA6IHRoaXMucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gQSBwbGFjZW1lbnQgZGlmZmVyZW5jZSBpbiBzdGF0ZSBtZWFucyBwb3BwZXIgZGV0ZXJtaW5lZCBhIG5ldyBwbGFjZW1lbnRcbiAgICAvLyBhcGFydCBmcm9tIHRoZSBwcm9wcyB2YWx1ZS4gQnkgdGhlIHRpbWUgdGhlIHBvcHBlciBlbGVtZW50IGlzIHJlbmRlcmVkIHdpdGhcbiAgICAvLyB0aGUgbmV3IHBvc2l0aW9uIFBvcHBlciBoYXMgYWxyZWFkeSBtZWFzdXJlZCBpdCwgaWYgdGhlIHBsYWNlIGNoYW5nZSB0cmlnZ2Vyc1xuICAgIC8vIGEgc2l6ZSBjaGFuZ2UgaXQgd2lsbCByZXN1bHQgaW4gYSBtaXNhbGlnbmVkIHBvcHBlci4gU28gd2Ugc2NoZWR1bGUgYW4gdXBkYXRlIHRvIGJlIHN1cmUuXG4gICAgaWYgKHByZXZTdGF0ZS5wbGFjZW1lbnQgIT09IHRoaXMuc3RhdGUucGxhY2VtZW50KSB7XG4gICAgICB0aGlzLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIElubmVyUG9wcGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGVzdHJveVBvcHBlckluc3RhbmNlKCk7XG4gIH07XG5cbiAgSW5uZXJQb3BwZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdW53cmFwQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikoe1xuICAgICAgcmVmOiB0aGlzLnNldFBvcHBlck5vZGUsXG4gICAgICBzdHlsZTogdGhpcy5nZXRQb3BwZXJTdHlsZSgpLFxuICAgICAgcGxhY2VtZW50OiB0aGlzLmdldFBvcHBlclBsYWNlbWVudCgpLFxuICAgICAgb3V0T2ZCb3VuZGFyaWVzOiB0aGlzLmdldE91dE9mQm91bmRhcmllc1N0YXRlKCksXG4gICAgICBzY2hlZHVsZVVwZGF0ZTogdGhpcy5zY2hlZHVsZVVwZGF0ZSxcbiAgICAgIGFycm93UHJvcHM6IHtcbiAgICAgICAgcmVmOiB0aGlzLnNldEFycm93Tm9kZSxcbiAgICAgICAgc3R5bGU6IHRoaXMuZ2V0QXJyb3dTdHlsZSgpXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIElubmVyUG9wcGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Jbm5lclBvcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG4gIHJlZmVyZW5jZUVsZW1lbnQ6IHVuZGVmaW5lZCxcbiAgcG9zaXRpb25GaXhlZDogZmFsc2Vcbn07XG52YXIgcGxhY2VtZW50cyA9IFBvcHBlckpTLnBsYWNlbWVudHM7XG5leHBvcnQgeyBwbGFjZW1lbnRzIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvcHBlcihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNYW5hZ2VyQ29udGV4dC5Db25zdW1lcixcbiAgICBudWxsLFxuICAgIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgcmVmZXJlbmNlTm9kZSA9IF9yZWYucmVmZXJlbmNlTm9kZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElubmVyUG9wcGVyLCBfZXh0ZW5kcyh7IHJlZmVyZW5jZUVsZW1lbnQ6IHJlZmVyZW5jZU5vZGUgfSwgcHJvcHMpKTtcbiAgICB9XG4gICk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IE1hbmFnZXJDb250ZXh0IH0gZnJvbSAnLi9NYW5hZ2VyJztcbmltcG9ydCB7IHNhZmVJbnZva2UsIHVud3JhcEFycmF5IH0gZnJvbSAnLi91dGlscyc7XG5cbnZhciBJbm5lclJlZmVyZW5jZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbm5lclJlZmVyZW5jZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5uZXJSZWZlcmVuY2UoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbm5lclJlZmVyZW5jZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMucmVmSGFuZGxlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBzYWZlSW52b2tlKF90aGlzLnByb3BzLmlubmVyUmVmLCBub2RlKTtcbiAgICAgIHNhZmVJbnZva2UoX3RoaXMucHJvcHMuZ2V0UmVmZXJlbmNlUmVmLCBub2RlKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIElubmVyUmVmZXJlbmNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmdldFJlZmVyZW5jZVJlZiwgJ2BSZWZlcmVuY2VgIHNob3VsZCBub3QgYmUgdXNlZCBvdXRzaWRlIG9mIGEgYE1hbmFnZXJgIGNvbXBvbmVudC4nKTtcbiAgICByZXR1cm4gdW53cmFwQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikoeyByZWY6IHRoaXMucmVmSGFuZGxlciB9KTtcbiAgfTtcblxuICByZXR1cm4gSW5uZXJSZWZlcmVuY2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlZmVyZW5jZShwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNYW5hZ2VyQ29udGV4dC5Db25zdW1lcixcbiAgICBudWxsLFxuICAgIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZ2V0UmVmZXJlbmNlUmVmID0gX3JlZi5nZXRSZWZlcmVuY2VSZWY7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbm5lclJlZmVyZW5jZSwgX2V4dGVuZHMoeyBnZXRSZWZlcmVuY2VSZWY6IGdldFJlZmVyZW5jZVJlZiB9LCBwcm9wcykpO1xuICAgIH1cbiAgKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdFBvcHBlciA9IHJlcXVpcmUoXCJyZWFjdC1wb3BwZXJcIik7XG5cbnZhciBfRHJvcGRvd25Db250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93bkNvbnRleHRcIikpO1xuXG52YXIgX1Jvb3RDbG9zZVdyYXBwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Jvb3RDbG9zZVdyYXBwZXJcIikpO1xuXG52YXIgX21hcENvbnRleHRUb1Byb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtY29udGV4dC10b29sYm94L2xpYi9tYXBDb250ZXh0VG9Qcm9wc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBEcm9wZG93bk1lbnUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJvcGRvd25NZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bk1lbnUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB0b2dnbGVJZDogbnVsbFxuICAgIH07XG4gICAgX3RoaXMucG9wcGVySXNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgX3RoaXMuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5vblRvZ2dsZSkgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5wcm9wcy5vblRvZ2dsZShmYWxzZSwgZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcm9wZG93bk1lbnUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IGZ1bmN0aW9uIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAgIC8vIElmLCB0byB0aGUgYmVzdCB3ZSBjYW4gdGVsbCwgdGhpcyB1cGRhdGUgd29uJ3QgcmVpbml0aWFsaXplIHBvcHBlcixcbiAgICAvLyBtYW51YWxseSBzY2hlZHVsZSBhbiB1cGRhdGVcbiAgICB2YXIgc2hvdWxkVXBkYXRlUG9wcGVyID0gIXByZXZQcm9wcy5zaG93ICYmIHRoaXMucHJvcHMuc2hvdyAmJiB0aGlzLnBvcHBlcklzSW5pdGlhbGl6ZWQgJiYgLy8gYSBuZXcgcmVmZXJlbmNlIG5vZGUgd2lsbCBhbHJlYWR5IHRyaWdnZXIgdGhpcyBpbnRlcm5hbGx5XG4gICAgcHJldlByb3BzLnRvZ2dsZU5vZGUgPT09IHRoaXMucHJvcHMudG9nZ2xlTm9kZTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNob3cgJiYgdGhpcy5wcm9wcy51c2VQb3BwZXIgJiYgIXRoaXMucG9wcGVySXNJbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5wb3BwZXJJc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISFzaG91bGRVcGRhdGVQb3BwZXI7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfLCBfXywgc2hvdWxkVXBkYXRlUG9wcGVyKSB7XG4gICAgaWYgKHNob3VsZFVwZGF0ZVBvcHBlciAmJiB0aGlzLnNjaGVkdWxlVXBkYXRlKSB7XG4gICAgICB0aGlzLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHMuc2hvdyxcbiAgICAgICAgZmxpcCA9IF90aGlzJHByb3BzLmZsaXAsXG4gICAgICAgIG1lbnVSZWYgPSBfdGhpcyRwcm9wcy5tZW51UmVmLFxuICAgICAgICBhbGlnbkVuZCA9IF90aGlzJHByb3BzLmFsaWduRW5kLFxuICAgICAgICBkcm9wID0gX3RoaXMkcHJvcHMuZHJvcCxcbiAgICAgICAgdXNlUG9wcGVyID0gX3RoaXMkcHJvcHMudXNlUG9wcGVyLFxuICAgICAgICB0b2dnbGVOb2RlID0gX3RoaXMkcHJvcHMudG9nZ2xlTm9kZSxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQgPSBfdGhpcyRwcm9wcy5yb290Q2xvc2VFdmVudCxcbiAgICAgICAgX3RoaXMkcHJvcHMkcG9wcGVyQ29uID0gX3RoaXMkcHJvcHMucG9wcGVyQ29uZmlnLFxuICAgICAgICBwb3BwZXJDb25maWcgPSBfdGhpcyRwcm9wcyRwb3BwZXJDb24gPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkcG9wcGVyQ29uO1xuICAgIHZhciBwbGFjZW1lbnQgPSBhbGlnbkVuZCA/ICdib3R0b20tZW5kJyA6ICdib3R0b20tc3RhcnQnO1xuICAgIGlmIChkcm9wID09PSAndXAnKSBwbGFjZW1lbnQgPSBhbGlnbkVuZCA/ICd0b3AtZW5kJyA6ICd0b3Atc3RhcnQnO1xuICAgIGlmIChkcm9wID09PSAncmlnaHQnKSBwbGFjZW1lbnQgPSBhbGlnbkVuZCA/ICdyaWdodC1lbmQnIDogJ3JpZ2h0LXN0YXJ0JztcbiAgICBpZiAoZHJvcCA9PT0gJ2xlZnQnKSBwbGFjZW1lbnQgPSBhbGlnbkVuZCA/ICdsZWZ0LWVuZCcgOiAnbGVmdC1zdGFydCc7XG4gICAgdmFyIG1lbnUgPSBudWxsO1xuICAgIHZhciBtZW51UHJvcHMgPSB7XG4gICAgICByZWY6IG1lbnVSZWYsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdG9nZ2xlTm9kZSAmJiB0b2dnbGVOb2RlLmlkXG4gICAgfTtcbiAgICB2YXIgY2hpbGRBcmdzID0ge1xuICAgICAgc2hvdzogc2hvdyxcbiAgICAgIGFsaWduRW5kOiBhbGlnbkVuZCxcbiAgICAgIGNsb3NlOiB0aGlzLmhhbmRsZUNsb3NlXG4gICAgfTtcblxuICAgIGlmICghdXNlUG9wcGVyKSB7XG4gICAgICBtZW51ID0gdGhpcy5wcm9wcy5jaGlsZHJlbihfZXh0ZW5kcyh7fSwgY2hpbGRBcmdzLCB7XG4gICAgICAgIHByb3BzOiBtZW51UHJvcHNcbiAgICAgIH0pKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucG9wcGVySXNJbml0aWFsaXplZCB8fCBzaG93KSB7XG4gICAgICAvLyBBZGQgaXQgdGhpcyB3YXksIHNvIGl0IGRvZXNuJ3Qgb3ZlcnJpZGUgc29tZW9uZXMgdXNhZ2VcbiAgICAgIC8vIHdpdGggcmVhY3QtcG9wcGVycyA8UmVmZXJlbmNlPlxuICAgICAgaWYgKHRvZ2dsZU5vZGUpIHBvcHBlckNvbmZpZy5yZWZlcmVuY2VFbGVtZW50ID0gdG9nZ2xlTm9kZTtcbiAgICAgIG1lbnUgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFBvcHBlci5Qb3BwZXIsIF9leHRlbmRzKHt9LCBwb3BwZXJDb25maWcsIHtcbiAgICAgICAgaW5uZXJSZWY6IG1lbnVSZWYsXG4gICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgICBldmVudHNFbmFibGVkOiAhIXNob3csXG4gICAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe1xuICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICEhZmxpcFxuICAgICAgICAgIH1cbiAgICAgICAgfSwgcG9wcGVyQ29uZmlnLm1vZGlmaWVycylcbiAgICAgIH0pLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcmVmID0gX3JlZi5yZWYsXG4gICAgICAgICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICAgICAgICBwb3BwZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJyZWZcIiwgXCJzdHlsZVwiXSk7XG5cbiAgICAgICAgX3RoaXMyLnNjaGVkdWxlVXBkYXRlID0gcG9wcGVyLnNjaGVkdWxlVXBkYXRlO1xuICAgICAgICByZXR1cm4gX3RoaXMyLnByb3BzLmNoaWxkcmVuKF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoaWxkQXJncywge1xuICAgICAgICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgbWVudVByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlZixcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtZW51ICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Jvb3RDbG9zZVdyYXBwZXIuZGVmYXVsdCwge1xuICAgICAgZGlzYWJsZWQ6ICFzaG93LFxuICAgICAgZXZlbnQ6IHJvb3RDbG9zZUV2ZW50LFxuICAgICAgb25Sb290Q2xvc2U6IHRoaXMuaGFuZGxlQ2xvc2VcbiAgICB9LCBtZW51KTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd25NZW51O1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bk1lbnUuZGlzcGxheU5hbWUgPSAnUmVhY3RPdmVybGF5c0Ryb3Bkb3duTWVudSc7XG5Ecm9wZG93bk1lbnUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSByZW5kZXIgcHJvcCB0aGF0IHJldHVybnMgYSBNZW51IGVsZW1lbnQuIFRoZSBgcHJvcHNgXG4gICAqIGFyZ3VtZW50IHNob3VsZCBzcHJlYWQgdGhyb3VnaCB0byAqKmEgY29tcG9uZW50IHRoYXQgY2FuIGFjY2VwdCBhIHJlZioqLlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb24gKHtcbiAgICogICBzaG93OiBib29sZWFuLFxuICAgKiAgIGFsaWduRW5kOiBib29sZWFuLFxuICAgKiAgIGNsb3NlOiAoP1N5bnRoZXRpY0V2ZW50KSA9PiB2b2lkLFxuICAgKiAgIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICAgKiAgIG91dE9mQm91bmRhcmllczogP2Jvb2xlYW4sXG4gICAqICAgc2NoZWR1bGVVcGRhdGU6ICgpID0+IHZvaWQsXG4gICAqICAgcHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIHN0eWxlOiB7IFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSxcbiAgICogICAgIGFyaWEtbGFiZWxsZWRieTogP3N0cmluZ1xuICAgKiAgIH0sXG4gICAqICAgYXJyb3dQcm9wczoge1xuICAgKiAgICAgcmVmOiAoP0hUTUxFbGVtZW50KSA9PiB2b2lkLFxuICAgKiAgICAgc3R5bGU6IHsgW3N0cmluZ106IHN0cmluZyB8IG51bWJlciB9LFxuICAgKiAgIH0sXG4gICAqIH0pID0+IFJlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIHZpc2libGUgc3RhdGUgb2YgdGhlIG1lbnUsIGdlbmVyYWxseSB0aGlzIGlzXG4gICAqIHByb3ZpZGVkIGJ5IHRoZSBwYXJlbnQgYERyb3Bkb3duYCBjb21wb25lbnQsXG4gICAqIGJ1dCBtYXkgYWxzbyBiZSBzcGVjaWZpZWQgYXMgYSBwcm9wIGRpcmVjdGx5LlxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsaWducyB0aGUgZHJvcGRvd24gbWVudSB0byB0aGUgJ2VuZCcgb2YgaXQncyBwbGFjZW1lbnQgcG9zaXRpb24uXG4gICAqIEdlbmVyYWxseSB0aGlzIGlzIHByb3ZpZGVkIGJ5IHRoZSBwYXJlbnQgYERyb3Bkb3duYCBjb21wb25lbnQsXG4gICAqIGJ1dCBtYXkgYWxzbyBiZSBzcGVjaWZpZWQgYXMgYSBwcm9wIGRpcmVjdGx5LlxuICAgKi9cbiAgYWxpZ25FbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBQb3BwZXIuanMgYGZsaXBgIG1vZGlmaWVyLCBhbGxvd2luZyB0aGUgRHJvcGRvd24gdG9cbiAgICogYXV0b21hdGljYWxseSBhZGp1c3QgaXQncyBwbGFjZW1lbnQgaW4gY2FzZSBvZiBvdmVybGFwIHdpdGggdGhlIHZpZXdwb3J0IG9yIHRvZ2dsZS5cbiAgICogUmVmZXIgdG8gdGhlIFtmbGlwIGRvY3NdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9wb3BwZXItZG9jdW1lbnRhdGlvbi5odG1sI21vZGlmaWVycy4uZmxpcC5lbmFibGVkKSBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBmbGlwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgdXNlUG9wcGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW3RydWUsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHBvcHBlciBvcHRpb25zIGFuZCBwcm9wcyBwYXNzZWQgZGlyZWN0bHkgdG8gcmVhY3QtcG9wcGVyJ3MgUG9wcGVyIGNvbXBvbmVudC5cbiAgICovXG4gIHBvcHBlckNvbmZpZzogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZXZlbnQgdXNlZCBieSBSb290Q2xvc2VXcmFwcGVyLlxuICAgKi9cbiAgcm9vdENsb3NlRXZlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqIEBwcml2YXRlICovXG4gIG9uVG9nZ2xlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKiogQHByaXZhdGUgKi9cbiAgbWVudVJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGRyb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHRvZ2dsZU5vZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnlcbn07XG5Ecm9wZG93bk1lbnUuZGVmYXVsdFByb3BzID0ge1xuICB1c2VQb3BwZXI6IHRydWVcbn07XG52YXIgRGVjb3JhdGVkRHJvcGRvd25NZW51ID0gKDAsIF9tYXBDb250ZXh0VG9Qcm9wcy5kZWZhdWx0KShfRHJvcGRvd25Db250ZXh0LmRlZmF1bHQsIGZ1bmN0aW9uIChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHNob3cgPSBfcmVmMi5zaG93LFxuICAgICAgYWxpZ25FbmQgPSBfcmVmMi5hbGlnbkVuZCxcbiAgICAgIHRvZ2dsZSA9IF9yZWYyLnRvZ2dsZSxcbiAgICAgIGRyb3AgPSBfcmVmMi5kcm9wLFxuICAgICAgbWVudVJlZiA9IF9yZWYyLm1lbnVSZWYsXG4gICAgICB0b2dnbGVOb2RlID0gX3JlZjIudG9nZ2xlTm9kZTtcbiAgcmV0dXJuIHtcbiAgICBkcm9wOiBkcm9wLFxuICAgIG1lbnVSZWY6IG1lbnVSZWYsXG4gICAgdG9nZ2xlTm9kZTogdG9nZ2xlTm9kZSxcbiAgICBvblRvZ2dsZTogdG9nZ2xlLFxuICAgIHNob3c6IHNob3cgPT0gbnVsbCA/IHByb3BzLnNob3cgOiBzaG93LFxuICAgIGFsaWduRW5kOiBhbGlnbkVuZCA9PSBudWxsID8gcHJvcHMuYWxpZ25FbmQgOiBhbGlnbkVuZFxuICB9O1xufSwgRHJvcGRvd25NZW51KTtcbnZhciBfZGVmYXVsdCA9IERlY29yYXRlZERyb3Bkb3duTWVudTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9Ecm9wZG93bkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duQ29udGV4dFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHJlbmRlciBwcm9wIHRoYXQgcmV0dXJucyBhIFRvZ2dsZSBlbGVtZW50LiBUaGUgYHByb3BzYFxuICAgKiBhcmd1bWVudCBzaG91bGQgc3ByZWFkIHRocm91Z2ggdG8gKiphIGNvbXBvbmVudCB0aGF0IGNhbiBhY2NlcHQgYSByZWYqKi4gVXNlXG4gICAqIHRoZSBgb25Ub2dnbGVgIGFyZ3VtZW50IHRvIHRvZ2dsZSB0aGUgbWVudSBvcGVuIG9yIGNsb3NlZFxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb24gKHtcbiAgICogICBzaG93OiBib29sZWFuLFxuICAgKiAgIHRvZ2dsZTogKHNob3c6IGJvb2xlYW4pID0+IHZvaWQsXG4gICAqICAgcHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIGFyaWEtaGFzcG9wdXA6IHRydWVcbiAgICogICAgIGFyaWEtZXhwYW5kZWQ6IGJvb2xlYW5cbiAgICogICB9LFxuICAgKiB9KSA9PiBSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWRcbn07XG5cbmZ1bmN0aW9uIERyb3Bkb3duVG9nZ2xlKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duQ29udGV4dC5kZWZhdWx0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgc2hvdyA9IF9yZWYyLnNob3csXG4gICAgICAgIHRvZ2dsZSA9IF9yZWYyLnRvZ2dsZSxcbiAgICAgICAgdG9nZ2xlUmVmID0gX3JlZjIudG9nZ2xlUmVmO1xuICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICBzaG93OiBzaG93LFxuICAgICAgdG9nZ2xlOiB0b2dnbGUsXG4gICAgICBwcm9wczoge1xuICAgICAgICByZWY6IHRvZ2dsZVJlZixcbiAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6ICEhc2hvd1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuRHJvcGRvd25Ub2dnbGUuZGlzcGxheU5hbWUgPSAnUmVhY3RPdmVybGF5c0Ryb3Bkb3duVG9nZ2xlJztcbkRyb3Bkb3duVG9nZ2xlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbnZhciBfZGVmYXVsdCA9IERyb3Bkb3duVG9nZ2xlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJhbnNmb3JtQ29udGV4dDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9mb3J3YXJkUmVmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9mb3J3YXJkUmVmXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdHJhbnNmb3JtQ29udGV4dChDb250ZXh0KSB7XG4gIHJldHVybiAoMCwgX2ZvcndhcmRSZWYuZGVmYXVsdCkoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzLm1hcFRvVmFsdWUoY29udGV4dClcbiAgICAgIH0sIHByb3BzLmNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfSwge1xuICAgIGRpc3BsYXlOYW1lOiAnQ29udGV4dFRyYW5zZm9ybWVyJ1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2NsYXNzXCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3N0eWxlXCIpKTtcblxudmFyIF9zY3JvbGxiYXJTaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplXCIpKTtcblxudmFyIF9pc092ZXJmbG93aW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9pc092ZXJmbG93aW5nXCIpKTtcblxudmFyIF9tYW5hZ2VBcmlhSGlkZGVuID0gcmVxdWlyZShcIi4vdXRpbHMvbWFuYWdlQXJpYUhpZGRlblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZmluZEluZGV4T2YoYXJyLCBjYikge1xuICB2YXIgaWR4ID0gLTE7XG4gIGFyci5zb21lKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgaWYgKGNiKGQsIGkpKSB7XG4gICAgICBpZHggPSBpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cbi8qKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICpcbiAqIEBpbnRlcm5hbCBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG5cbnZhciBNb2RhbE1hbmFnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBfcmVmJGhpZGVTaWJsaW5nTm9kZXMgPSBfcmVmLmhpZGVTaWJsaW5nTm9kZXMsXG4gICAgICAgIGhpZGVTaWJsaW5nTm9kZXMgPSBfcmVmJGhpZGVTaWJsaW5nTm9kZXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGhpZGVTaWJsaW5nTm9kZXMsXG4gICAgICAgIF9yZWYkaGFuZGxlQ29udGFpbmVyTyA9IF9yZWYuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3csXG4gICAgICAgIGhhbmRsZUNvbnRhaW5lck92ZXJmbG93ID0gX3JlZiRoYW5kbGVDb250YWluZXJPID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRoYW5kbGVDb250YWluZXJPO1xuXG4gICAgdGhpcy5oaWRlU2libGluZ05vZGVzID0gaGlkZVNpYmxpbmdOb2RlcztcbiAgICB0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93ID0gaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3c7XG4gICAgdGhpcy5tb2RhbHMgPSBbXTtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSBbXTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLnNjcm9sbGJhclNpemUgPSAoMCwgX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbE1hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pc0NvbnRhaW5lck92ZXJmbG93aW5nID0gZnVuY3Rpb24gaXNDb250YWluZXJPdmVyZmxvd2luZyhtb2RhbCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhW3RoaXMuY29udGFpbmVySW5kZXhGcm9tTW9kYWwobW9kYWwpXTtcbiAgICByZXR1cm4gZGF0YSAmJiBkYXRhLm92ZXJmbG93aW5nO1xuICB9O1xuXG4gIF9wcm90by5jb250YWluZXJJbmRleEZyb21Nb2RhbCA9IGZ1bmN0aW9uIGNvbnRhaW5lckluZGV4RnJvbU1vZGFsKG1vZGFsKSB7XG4gICAgcmV0dXJuIGZpbmRJbmRleE9mKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGQpIHtcbiAgICAgIHJldHVybiBkLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTE7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldENvbnRhaW5lclN0eWxlID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoY29udGFpbmVyU3RhdGUsIGNvbnRhaW5lcikge1xuICAgIHZhciBzdHlsZSA9IHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyAvLyB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIHRoZSBhY3R1YWwgYHN0eWxlYCBoZXJlXG4gICAgICAvLyBiZWNhc3VlIHdlIHdpbGwgb3ZlcnJpZGUgaXRcblxuICAgIH07XG4gICAgY29udGFpbmVyU3RhdGUuc3R5bGUgPSB7XG4gICAgICBvdmVyZmxvdzogY29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgICAgcGFkZGluZ1JpZ2h0OiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0XG4gICAgfTtcblxuICAgIGlmIChjb250YWluZXJTdGF0ZS5vdmVyZmxvd2luZykge1xuICAgICAgLy8gdXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nXG4gICAgICAvLyB0byBhZGQgb3VyIHNjcm9sbGJhciB3aWR0aFxuICAgICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQoKDAsIF9zdHlsZS5kZWZhdWx0KShjb250YWluZXIsICdwYWRkaW5nUmlnaHQnKSB8fCAwLCAxMCkgKyB0aGlzLnNjcm9sbGJhclNpemUgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgKDAsIF9zdHlsZS5kZWZhdWx0KShjb250YWluZXIsIHN0eWxlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlQ29udGFpbmVyU3R5bGUgPSBmdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgdmFyIHN0eWxlID0gY29udGFpbmVyU3RhdGUuc3R5bGU7XG4gICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgY29udGFpbmVyLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobW9kYWwsIGNvbnRhaW5lciwgY2xhc3NOYW1lKSB7XG4gICAgdmFyIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG4gICAgdmFyIGNvbnRhaW5lcklkeCA9IHRoaXMuY29udGFpbmVycy5pbmRleE9mKGNvbnRhaW5lcik7XG5cbiAgICBpZiAobW9kYWxJZHggIT09IC0xKSB7XG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuXG4gICAgbW9kYWxJZHggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7XG5cbiAgICBpZiAodGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAoMCwgX21hbmFnZUFyaWFIaWRkZW4uaGlkZVNpYmxpbmdzKShjb250YWluZXIsIG1vZGFsKTtcbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVySWR4ICE9PSAtMSkge1xuICAgICAgdGhpcy5kYXRhW2NvbnRhaW5lcklkeF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgbW9kYWxzOiBbbW9kYWxdLFxuICAgICAgLy9yaWdodCBub3cgb25seSB0aGUgZmlyc3QgbW9kYWwgb2YgYSBjb250YWluZXIgd2lsbCBoYXZlIGl0cyBjbGFzc2VzIGFwcGxpZWRcbiAgICAgIGNsYXNzZXM6IGNsYXNzTmFtZSA/IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pIDogW10sXG4gICAgICBvdmVyZmxvd2luZzogKDAsIF9pc092ZXJmbG93aW5nLmRlZmF1bHQpKGNvbnRhaW5lcilcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyU3R5bGUoZGF0YSwgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBkYXRhLmNsYXNzZXMuZm9yRWFjaChfY2xhc3MuZGVmYXVsdC5hZGRDbGFzcy5iaW5kKG51bGwsIGNvbnRhaW5lcikpO1xuICAgIHRoaXMuY29udGFpbmVycy5wdXNoKGNvbnRhaW5lcik7XG4gICAgdGhpcy5kYXRhLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIG1vZGFsSWR4O1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobW9kYWwpIHtcbiAgICB2YXIgbW9kYWxJZHggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgIGlmIChtb2RhbElkeCA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbmVySWR4ID0gdGhpcy5jb250YWluZXJJbmRleEZyb21Nb2RhbChtb2RhbCk7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGFbY29udGFpbmVySWR4XTtcbiAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lcklkeF07XG4gICAgZGF0YS5tb2RhbHMuc3BsaWNlKGRhdGEubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJZHgsIDEpOyAvLyBpZiB0aGF0IHdhcyB0aGUgbGFzdCBtb2RhbCBpbiBhIGNvbnRhaW5lcixcbiAgICAvLyBjbGVhbiB1cCB0aGUgY29udGFpbmVyXG5cbiAgICBpZiAoZGF0YS5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLmNsYXNzZXMuZm9yRWFjaChfY2xhc3MuZGVmYXVsdC5yZW1vdmVDbGFzcy5iaW5kKG51bGwsIGNvbnRhaW5lcikpO1xuXG4gICAgICBpZiAodGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgICB0aGlzLnJlbW92ZUNvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLnNob3dTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySWR4LCAxKTtcbiAgICAgIHRoaXMuZGF0YS5zcGxpY2UoY29udGFpbmVySWR4LCAxKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgLy9vdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgU1JcbiAgICAgIHZhciBfZGF0YSRtb2RhbHMgPSBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXSxcbiAgICAgICAgICBiYWNrZHJvcCA9IF9kYXRhJG1vZGFscy5iYWNrZHJvcCxcbiAgICAgICAgICBkaWFsb2cgPSBfZGF0YSRtb2RhbHMuZGlhbG9nO1xuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW4pKGZhbHNlLCBkaWFsb2cpO1xuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW4pKGZhbHNlLCBiYWNrZHJvcCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1RvcE1vZGFsID0gZnVuY3Rpb24gaXNUb3BNb2RhbChtb2RhbCkge1xuICAgIHJldHVybiAhIXRoaXMubW9kYWxzLmxlbmd0aCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsTWFuYWdlcjtcbn0oKTtcblxudmFyIF9kZWZhdWx0ID0gTW9kYWxNYW5hZ2VyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX21hdGNoZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9tYXRjaGVzXCIpKTtcblxudmFyIF9xdWVyeVNlbGVjdG9yQWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvcXVlcnlTZWxlY3RvckFsbFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3VuY29udHJvbGxhYmxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwidW5jb250cm9sbGFibGVcIikpO1xuXG52YXIgUG9wcGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0LXBvcHBlclwiKSk7XG5cbnZhciBfRHJvcGRvd25Db250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93bkNvbnRleHRcIikpO1xuXG52YXIgX0Ryb3Bkb3duTWVudSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRHJvcGRvd25NZW51XCIpKTtcblxudmFyIF9Ecm9wZG93blRvZ2dsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRHJvcGRvd25Ub2dnbGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHJlbmRlciBwcm9wIHRoYXQgcmV0dXJucyB0aGUgcm9vdCBkcm9wZG93biBlbGVtZW50LiBUaGUgYHByb3BzYFxuICAgKiBhcmd1bWVudCBzaG91bGQgc3ByZWFkIHRocm91Z2ggdG8gYW4gZWxlbWVudCBjb250YWluaW5nIF9ib3RoXyB0aGVcbiAgICogbWVudSBhbmQgdG9nZ2xlIGluIG9yZGVyIHRvIGhhbmRsZSBrZXlib2FyZCBldmVudHMgZm9yIGZvY3VzIG1hbmFnZW1lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbiAoe1xuICAgKiAgIHByb3BzOiB7XG4gICAqICAgICBvbktleURvd246IChTeW50aGV0aWNFdmVudCkgPT4gdm9pZCxcbiAgICogICB9LFxuICAgKiB9KSA9PiBSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGRpcmVjdGlvbiBhbmQgbG9jYXRpb24gb2YgdGhlIE1lbnUgaW4gcmVsYXRpb24gdG8gaXQncyBUb2dnbGUuXG4gICAqL1xuICBkcm9wOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd1cCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2Rvd24nXSksXG5cbiAgLyoqXG4gICAqIEEgY3NzIHNsZWN0b3Igc3RyaW5nIHRoYXQgd2lsbCByZXR1cm4gX19mb2N1c2FibGVfXyBtZW51IGl0ZW1zLlxuICAgKiBTZWxlY3RvcnMgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBtZW51IGNvbXBvbmVudDpcbiAgICogZS5nLiBgID4gbGk6bm90KCcuZGlzYWJsZWQnKWBcbiAgICovXG4gIGl0ZW1TZWxlY3RvcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBbGlnbiB0aGUgbWVudSB0byB0aGUgJ2VuZCcgc2lkZSBvZiB0aGUgcGxhY2VtZW50IHNpZGUgb2YgdGhlIERyb3Bkb3duIHRvZ2dsZS4gVGhlIGRlZmF1bHQgcGxhY2VtZW50IGlzIGB0b3Atc3RhcnRgIG9yIGBib3R0b20tc3RhcnRgLlxuICAgKi9cbiAgYWxpZ25FbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgRHJvcGRvd24gaXMgdmlzaWJsZS5cbiAgICpcbiAgICogQGNvbnRyb2xsYWJsZSBvblRvZ2dsZVxuICAgKi9cbiAgc2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgRHJvcGRvd24gd2lzaGVzIHRvIGNoYW5nZSB2aXNpYmlsaXR5LiBDYWxsZWQgd2l0aCB0aGUgcmVxdWVzdGVkXG4gICAqIGBzaG93YCB2YWx1ZSwgdGhlIERPTSBldmVudCwgYW5kIHRoZSBzb3VyY2UgdGhhdCBmaXJlZCBpdDogYCdjbGljaydgLGAna2V5ZG93bidgLGAncm9vdENsb3NlJ2AsIG9yIGAnc2VsZWN0J2AuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uKFxuICAgKiAgIGlzT3BlbjogYm9vbGVhbixcbiAgICogICBldmVudDogU3ludGhldGljRXZlbnQsXG4gICAqICk6IHZvaWRcbiAgICogYGBgXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgc2hvd1xuICAgKi9cbiAgb25Ub2dnbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgaXRlbVNlbGVjdG9yOiAnKiA+IConXG59O1xuLyoqXG4gKiBgRHJvcGRvd25gIGlzIHNldCBvZiBzdHJ1Y3R1cmFsIGNvbXBvbmVudHMgZm9yIGJ1aWxkaW5nLCBhY2Nlc3NpYmxlIGRyb3Bkb3duIG1lbnVzIHdpdGggY2xvc2Utb24tY2xpY2ssXG4gKiBrZXlib2FyZCBuYXZpZ2F0aW9uLCBhbmQgY29ycmVjdCBmb2N1cyBoYW5kbGluZy4gQXMgd2l0aCBhbGwgdGhlIHJlYWN0LW92ZXJsYXknc1xuICogY29tcG9uZW50cyBpdHMgQllPUyAoYnJpbmcgeW91ciBvd24gc3R5bGVzKS4gRHJvcGRvd24gaXMgcHJpbWFyaWx5XG4gKiBidWlsdCBmcm9tIHRocmVlIGJhc2UgY29tcG9uZW50cywgeW91IHNob3VsZCBjb21wb3NlIHRvIGJ1aWxkIHlvdXIgRHJvcGRvd25zLlxuICpcbiAqIC0gYERyb3Bkb3duYCwgd2hpY2ggd3JhcHMgdGhlIG1lbnUgYW5kIHRvZ2dsZSwgYW5kIGhhbmRsZXMga2V5Ym9hcmQgbmF2aWdhdGlvblxuICogLSBgRHJvcGRvd24uVG9nZ2xlYCBnZW5lcmFsbHkgYSBidXR0b24gdGhhdCB0cmlnZ2VycyB0aGUgbWVudSBvcGVuaW5nXG4gKiAtIGBEcm9wZG93bi5NZW51YCBUaGUgb3ZlcmxhaWQsIG1lbnUsIHBvc2l0aW9uZWQgdG8gdGhlIHRvZ2dsZSB3aXRoIFBvcHBlckpzXG4gKi9cblxudmFyIERyb3Bkb3duID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyb3Bkb3duLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBEcm9wZG93bi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIGRyb3AgPSBfcmVmLmRyb3AsXG4gICAgICAgIGFsaWduRW5kID0gX3JlZi5hbGlnbkVuZCxcbiAgICAgICAgc2hvdyA9IF9yZWYuc2hvdztcbiAgICB2YXIgbGFzdFNob3cgPSBwcmV2U3RhdGUuY29udGV4dC5zaG93O1xuICAgIHJldHVybiB7XG4gICAgICBsYXN0U2hvdzogbGFzdFNob3csXG4gICAgICBjb250ZXh0OiBfZXh0ZW5kcyh7fSwgcHJldlN0YXRlLmNvbnRleHQsIHtcbiAgICAgICAgZHJvcDogZHJvcCxcbiAgICAgICAgc2hvdzogc2hvdyxcbiAgICAgICAgYWxpZ25FbmQ6IGFsaWduRW5kXG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gRHJvcGRvd24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy50b2dnbGVPcGVuKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleSxcbiAgICAgICAgICB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICB2YXIgaXNJbnB1dCA9IC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodGFyZ2V0LnRhZ05hbWUpOyAvLyBTZWNvbmQgb25seSB0byBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi84Y2ZiZjY5MzNiOGEwMTQ2YWMzZmJjMzY5ZjE5ZTUyMGJkMWViZGFjL2pzL3NyYy9kcm9wZG93bi5qcyNMNDAwXG4gICAgICAvLyBpbiBpbnNjcnV0YWJpbGl0eVxuXG4gICAgICBpZiAoaXNJbnB1dCAmJiAoa2V5ID09PSAnICcgfHwga2V5ICE9PSAnRXNjYXBlJyAmJiBfdGhpcy5tZW51LmNvbnRhaW5zKHRhcmdldCkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBfdGhpcy5nZXROZXh0Rm9jdXNlZENoaWxkKHRhcmdldCwgLTEpO1xuXG4gICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0LmZvY3VzKSBuZXh0LmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBpZiAoIV90aGlzLnByb3BzLnNob3cpIHtcbiAgICAgICAgICAgIF90aGlzLnRvZ2dsZU9wZW4oZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX25leHQgPSBfdGhpcy5nZXROZXh0Rm9jdXNlZENoaWxkKHRhcmdldCwgMSk7XG5cbiAgICAgICAgICAgIGlmIChfbmV4dCAmJiBfbmV4dC5mb2N1cykgX25leHQuZm9jdXMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vblRvZ2dsZShmYWxzZSwgZXZlbnQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2ZvY3VzSW5Ecm9wZG93biA9IGZhbHNlO1xuICAgIF90aGlzLm1lbnUgPSBudWxsO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29udGV4dDoge1xuICAgICAgICBjbG9zZTogX3RoaXMuaGFuZGxlQ2xvc2UsXG4gICAgICAgIHRvZ2dsZTogX3RoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIG1lbnVSZWY6IGZ1bmN0aW9uIG1lbnVSZWYocikge1xuICAgICAgICAgIF90aGlzLm1lbnUgPSByO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVSZWY6IGZ1bmN0aW9uIHRvZ2dsZVJlZihyKSB7XG4gICAgICAgICAgdmFyIHRvZ2dsZU5vZGUgPSByICYmIF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHIpO1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IF9yZWYyLmNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBjb250ZXh0OiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICAgICAgICAgIHRvZ2dsZU5vZGU6IHRvZ2dsZU5vZGVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEcm9wZG93bi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgc2hvdyA9IHRoaXMucHJvcHMuc2hvdztcbiAgICB2YXIgcHJldk9wZW4gPSBwcmV2UHJvcHMuc2hvdztcblxuICAgIGlmIChzaG93ICYmICFwcmV2T3Blbikge1xuICAgICAgdGhpcy5tYXliZUZvY3VzRmlyc3QoKTtcbiAgICB9XG5cbiAgICBpZiAoIXNob3cgJiYgcHJldk9wZW4pIHtcbiAgICAgIC8vIGlmIGZvY3VzIGhhc24ndCBhbHJlYWR5IG1vdmVkIGZyb20gdGhlIG1lbnUgbGV0J3MgcmV0dXJuIGl0XG4gICAgICAvLyB0byB0aGUgdG9nZ2xlXG4gICAgICBpZiAodGhpcy5fZm9jdXNJbkRyb3Bkb3duKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzSW5Ecm9wZG93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXROZXh0Rm9jdXNlZENoaWxkID0gZnVuY3Rpb24gZ2V0TmV4dEZvY3VzZWRDaGlsZChjdXJyZW50LCBvZmZzZXQpIHtcbiAgICBpZiAoIXRoaXMubWVudSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIGl0ZW1TZWxlY3RvciA9IHRoaXMucHJvcHMuaXRlbVNlbGVjdG9yO1xuICAgIHZhciBpdGVtcyA9ICgwLCBfcXVlcnlTZWxlY3RvckFsbC5kZWZhdWx0KSh0aGlzLm1lbnUsIGl0ZW1TZWxlY3Rvcik7XG4gICAgdmFyIGluZGV4ID0gaXRlbXMuaW5kZXhPZihjdXJyZW50KSArIG9mZnNldDtcbiAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBpdGVtcy5sZW5ndGgpKTtcbiAgICByZXR1cm4gaXRlbXNbaW5kZXhdO1xuICB9O1xuXG4gIF9wcm90by5oYXNNZW51Um9sZSA9IGZ1bmN0aW9uIGhhc01lbnVSb2xlKCkge1xuICAgIHJldHVybiB0aGlzLm1lbnUgJiYgKDAsIF9tYXRjaGVzLmRlZmF1bHQpKHRoaXMubWVudSwgJ1tyb2xlPW1lbnVdJyk7XG4gIH07XG5cbiAgX3Byb3RvLmZvY3VzID0gZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgdmFyIHRvZ2dsZU5vZGUgPSB0aGlzLnN0YXRlLmNvbnRleHQudG9nZ2xlTm9kZTtcblxuICAgIGlmICh0b2dnbGVOb2RlICYmIHRvZ2dsZU5vZGUuZm9jdXMpIHtcbiAgICAgIHRvZ2dsZU5vZGUuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm1heWJlRm9jdXNGaXJzdCA9IGZ1bmN0aW9uIG1heWJlRm9jdXNGaXJzdCgpIHtcbiAgICBpZiAoIXRoaXMuaGFzTWVudVJvbGUoKSkgcmV0dXJuO1xuICAgIHZhciBpdGVtU2VsZWN0b3IgPSB0aGlzLnByb3BzLml0ZW1TZWxlY3RvcjtcbiAgICB2YXIgZmlyc3QgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkodGhpcy5tZW51LCBpdGVtU2VsZWN0b3IpWzBdO1xuICAgIGlmIChmaXJzdCAmJiBmaXJzdC5mb2N1cykgZmlyc3QuZm9jdXMoKTtcbiAgfTtcblxuICBfcHJvdG8udG9nZ2xlT3BlbiA9IGZ1bmN0aW9uIHRvZ2dsZU9wZW4oZXZlbnQpIHtcbiAgICB2YXIgc2hvdyA9ICF0aGlzLnByb3BzLnNob3c7XG4gICAgdGhpcy5wcm9wcy5vblRvZ2dsZShzaG93LCBldmVudCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7XG5cbiAgICBkZWxldGUgcHJvcHMub25Ub2dnbGU7XG5cbiAgICBpZiAodGhpcy5tZW51ICYmIHRoaXMuc3RhdGUubGFzdFNob3cgJiYgIXRoaXMucHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5fZm9jdXNJbkRyb3Bkb3duID0gdGhpcy5tZW51LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ecm9wZG93bkNvbnRleHQuZGVmYXVsdC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuY29udGV4dFxuICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUG9wcGVyLk1hbmFnZXIsIG51bGwsIGNoaWxkcmVuKHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duXG4gICAgICB9XG4gICAgfSkpKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd247XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duLmRpc3BsYXlOYW1lID0gJ1JlYWN0T3ZlcmxheXNEcm9wZG93bic7XG5Ecm9wZG93bi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5Ecm9wZG93bi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgVW5jb250cm9sbGVkRHJvcGRvd24gPSAoMCwgX3VuY29udHJvbGxhYmxlLmRlZmF1bHQpKERyb3Bkb3duLCB7XG4gIHNob3c6ICdvblRvZ2dsZSdcbn0pO1xuVW5jb250cm9sbGVkRHJvcGRvd24uTWVudSA9IF9Ecm9wZG93bk1lbnUuZGVmYXVsdDtcblVuY29udHJvbGxlZERyb3Bkb3duLlRvZ2dsZSA9IF9Ecm9wZG93blRvZ2dsZS5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0gVW5jb250cm9sbGVkRHJvcGRvd247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNC41XG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG52YXIgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgIHRpbWVvdXREdXJhdGlvbiA9IDE7XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LnJpZ2h0IC0gcmVzdWx0LmxlZnQ7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmJvdHRvbSAtIHJlc3VsdC50b3A7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20pO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQpICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICAvLyBBdm9pZCBibHVycnkgdGV4dCBieSB1c2luZyBmdWxsIHBpeGVsIGludGVnZXJzLlxuICAvLyBGb3IgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZywgdG9wL2JvdHRvbSBwcmVmZXJzIHJvdW5kZWRcbiAgLy8gdmFsdWVzLCB3aGlsZSBsZWZ0L3JpZ2h0IHByZWZlcnMgZmxvb3JlZCB2YWx1ZXMuXG4gIHZhciBvZmZzZXRzID0ge1xuICAgIGxlZnQ6IE1hdGguZmxvb3IocG9wcGVyLmxlZnQpLFxuICAgIHRvcDogTWF0aC5yb3VuZChwb3BwZXIudG9wKSxcbiAgICBib3R0b206IE1hdGgucm91bmQocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IE1hdGguZmxvb3IocG9wcGVyLnJpZ2h0KVxuICB9O1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IHdpdGhDb250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXIgPT4gKFxuICBXcmFwcGVkQ29tcG9uZW50ID0+IChcbiAgICBwcm9wcyA9PiAoXG4gICAgICA8Q29udGV4dENvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiA8V3JhcHBlZENvbXBvbmVudCB7Li4ucHJvcHN9IHsuLi5jb250ZXh0fSAvPn1cbiAgICAgIDwvQ29udGV4dENvbnN1bWVyPlxuICAgIClcbiAgKVxuKVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoQ29udGV4dENvbnN1bWVyO1xuIiwiaW1wb3J0IHNlbmRBcGlSZXF1ZXN0IGZyb20gXCJyZWFjdC91dGlscy9hcGlcIjtcblxuZnVuY3Rpb24gc3RvcmVKV1Qoand0KSB7XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KGp3dCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJKV1RcIiwgc2VyaWFsaXplZCk7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlSldUKCkge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkpXVFwiKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzZXJpYWxpemVkKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJKV1QoKSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJKV1RcIik7XG59XG5cbmNvbnN0IGNyZWF0ZVNlc3Npb24gPSAoZW1haWwsIHBhc3N3b3JkKSA9PiB7XG4gICAgcmV0dXJuIHNlbmRBcGlSZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBcIi9hcGkvc2Vzc2lvbnNcIixcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgY29uc3Qgand0ID0gZGF0YS5qd3Q7XG4gICAgICAgICAgICBzdG9yZUpXVChqd3QpO1xuICAgICAgICAgICAgcmV0dXJuIGp3dDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGp3dCA9IFwiRkFLRSBKV1RcIjtcbiAgICAgICAgICAgIHN0b3JlSldUKGp3dCk7XG4gICAgICAgICAgICByZXR1cm4gand0O1xuICAgICAgICB9KVxuXG59O1xuXG5jb25zdCBkZWxldGVTZXNzaW9uID0gKCkgPT4ge1xuICAgIGNsZWFySldUKCk7XG59O1xuXG5cblxuXG5leHBvcnQge1xuICAgIGNyZWF0ZVNlc3Npb24sXG4gICAgZGVsZXRlU2Vzc2lvbixcbiAgICByZXRyaWV2ZUpXVCxcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemVTdHlsZU5hbWU7XG5cbnZhciBfY2FtZWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NhbWVsaXplXCIpKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzJhZWI4YTJhNmJlYjAwNjE3YTQyMTdmN2Y4Mjg0OTI0ZmEyYWQ4MTkvc3JjL3ZlbmRvci9jb3JlL2NhbWVsaXplU3R5bGVOYW1lLmpzXG4gKi9cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuICgwLCBfY2FtZWxpemUuZGVmYXVsdCkoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfbGlzdGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3RlblwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbnZhciBlc2NhcGVLZXlDb2RlID0gMjc7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5mdW5jdGlvbiBpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG4vKipcbiAqIFRoZSBgPFJvb3RDbG9zZVdyYXBwZXIvPmAgY29tcG9uZW50IHJlZ2lzdGVycyB5b3VyIGNhbGxiYWNrIG9uIHRoZSBkb2N1bWVudFxuICogd2hlbiByZW5kZXJlZC4gUG93ZXJzIHRoZSBgPE92ZXJsYXkvPmAgY29tcG9uZW50LiBUaGlzIGlzIHVzZWQgYWNoaWV2ZSBtb2RhbFxuICogc3R5bGUgYmVoYXZpb3Igd2hlcmUgeW91ciBjYWxsYmFjayBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciB0cmllcyB0b1xuICogaW50ZXJhY3Qgd2l0aCB0aGUgcmVzdCBvZiB0aGUgZG9jdW1lbnQgb3IgaGl0cyB0aGUgYGVzY2Aga2V5LlxuICovXG5cblxudmFyIFJvb3RDbG9zZVdyYXBwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm9vdENsb3NlV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm9vdENsb3NlV3JhcHBlcihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfdGhpcy5wcm9wcy5ldmVudDtcbiAgICAgIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBVc2UgY2FwdHVyZSBmb3IgdGhpcyBsaXN0ZW5lciBzbyBpdCBmaXJlcyBiZWZvcmUgUmVhY3QncyBsaXN0ZW5lciwgdG9cbiAgICAgIC8vIGF2b2lkIGZhbHNlIHBvc2l0aXZlcyBpbiB0aGUgY29udGFpbnMoKSBjaGVjayBiZWxvdyBpZiB0aGUgdGFyZ2V0IERPTVxuICAgICAgLy8gZWxlbWVudCBpcyByZW1vdmVkIGluIHRoZSBSZWFjdCBtb3VzZSBjYWxsYmFjay5cblxuICAgICAgX3RoaXMucmVtb3ZlTW91c2VDYXB0dXJlTGlzdGVuZXIgPSAoMCwgX2xpc3Rlbi5kZWZhdWx0KShkb2MsIGV2ZW50LCBfdGhpcy5oYW5kbGVNb3VzZUNhcHR1cmUsIHRydWUpO1xuICAgICAgX3RoaXMucmVtb3ZlTW91c2VMaXN0ZW5lciA9ICgwLCBfbGlzdGVuLmRlZmF1bHQpKGRvYywgZXZlbnQsIF90aGlzLmhhbmRsZU1vdXNlKTtcbiAgICAgIF90aGlzLnJlbW92ZUtleXVwTGlzdGVuZXIgPSAoMCwgX2xpc3Rlbi5kZWZhdWx0KShkb2MsICdrZXl1cCcsIF90aGlzLmhhbmRsZUtleVVwKTtcblxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvYy5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMubW9iaWxlU2FmYXJpSGFja0xpc3RlbmVycyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuYm9keS5jaGlsZHJlbikubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiAoMCwgX2xpc3Rlbi5kZWZhdWx0KShlbCwgJ21vdXNlbW92ZScsIG5vb3ApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucmVtb3ZlTW91c2VDYXB0dXJlTGlzdGVuZXIpIF90aGlzLnJlbW92ZU1vdXNlQ2FwdHVyZUxpc3RlbmVyKCk7XG4gICAgICBpZiAoX3RoaXMucmVtb3ZlTW91c2VMaXN0ZW5lcikgX3RoaXMucmVtb3ZlTW91c2VMaXN0ZW5lcigpO1xuICAgICAgaWYgKF90aGlzLnJlbW92ZUtleXVwTGlzdGVuZXIpIF90aGlzLnJlbW92ZUtleXVwTGlzdGVuZXIoKTtcbiAgICAgIGlmIChfdGhpcy5tb2JpbGVTYWZhcmlIYWNrTGlzdGVuZXJzKSBfdGhpcy5tb2JpbGVTYWZhcmlIYWNrTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKHJlbW92ZSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VDYXB0dXJlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSA9IGlzTW9kaWZpZWRFdmVudChlKSB8fCAhaXNMZWZ0Q2xpY2tFdmVudChlKSB8fCAoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKSwgZS50YXJnZXQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSAmJiBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZShlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gZXNjYXBlS2V5Q29kZSAmJiBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZShlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucHJldmVudE1vdXNlUm9vdENsb3NlID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBwcmV2UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgIXByZXZQcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gUm9vdENsb3NlV3JhcHBlcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUm9vdENsb3NlV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdSb290Q2xvc2VXcmFwcGVyJztcblJvb3RDbG9zZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgY2xpY2sgb3IgbW91c2Vkb3duLiBBbHNvIHRyaWdnZXJzIHdoZW4gdXNlciBoaXRzIGBlc2NgLlxuICAgKi9cbiAgb25Sb290Q2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDaGlsZHJlbiB0byByZW5kZXIuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHRoZSBSb290Q2xvc2VXcmFwcGVyLCBwcmV2ZW50aW5nIGl0IGZyb20gdHJpZ2dlcmluZyBgb25Sb290Q2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDaG9vc2Ugd2hpY2ggZG9jdW1lbnQgbW91c2UgZXZlbnQgdG8gYmluZCB0by5cbiAgICovXG4gIGV2ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydjbGljaycsICdtb3VzZWRvd24nXSlcbn07XG5Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZXZlbnQ6ICdjbGljaydcbn07XG52YXIgX2RlZmF1bHQgPSBSb290Q2xvc2VXcmFwcGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb24gPSBmdW5jdGlvbiBvbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgIGUuY3VycmVudFRhcmdldCA9IG5vZGU7XG4gICAgICAgIGhhbmRsZXIuY2FsbChub2RlLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBvZmYgPSBmdW5jdGlvbiBvZmYoKSB7fTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIG9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlIHx8IGZhbHNlKTtcbiAgICB9O2Vsc2UgaWYgKGRvY3VtZW50LmF0dGFjaEV2ZW50KSByZXR1cm4gZnVuY3Rpb24gKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgfSgpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBvZmY7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmYXVsdChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgcmV0dXJuICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShjb21wb25lbnRPckVsZW1lbnQpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGVsZW1lbnRUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgUmVhY3RFbGVtZW50ICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLGV4cGVjdGVkIGFuIGVsZW1lbnQgdHlwZSAoYSBzdHJpbmcgJykgKyAnLCBjb21wb25lbnQgY2xhc3MsIG9yIGZ1bmN0aW9uIGNvbXBvbmVudCkuJyk7XG4gIH1cblxuICBpZiAoISgwLCBfcmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUpKHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nICcpICsgJywgY29tcG9uZW50IGNsYXNzLCBvciBmdW5jdGlvbiBjb21wb25lbnQpLicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGVsZW1lbnRUeXBlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9XYWl0Rm9yQ29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9XYWl0Rm9yQ29udGFpbmVyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UG9ydGFsLz5gIGNvbXBvbmVudCByZW5kZXJzIGl0cyBjaGlsZHJlbiBpbnRvIGEgbmV3IFwic3VidHJlZVwiIG91dHNpZGUgb2YgY3VycmVudCBjb21wb25lbnQgaGllcmFyY2h5LlxuICogWW91IGNhbiB0aGluayBvZiBpdCBhcyBhIGRlY2xhcmF0aXZlIGBhcHBlbmRDaGlsZCgpYCwgb3IgalF1ZXJ5J3MgYCQuZm4uYXBwZW5kVG8oKWAuXG4gKiBUaGUgY2hpbGRyZW4gb2YgYDxQb3J0YWwvPmAgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGBjb250YWluZXJgIHNwZWNpZmllZC5cbiAqL1xudmFyIFBvcnRhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUG9ydGFsLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbiA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1dhaXRGb3JDb250YWluZXIuZGVmYXVsdCwge1xuICAgICAgY29udGFpbmVyOiB0aGlzLnByb3BzLmNvbnRhaW5lcixcbiAgICAgIG9uQ29udGFpbmVyUmVzb2x2ZWQ6IHRoaXMucHJvcHMub25SZW5kZXJlZFxuICAgIH0sIGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAgIHJldHVybiBfcmVhY3REb20uZGVmYXVsdC5jcmVhdGVQb3J0YWwoX3RoaXMucHJvcHMuY2hpbGRyZW4sIGNvbnRhaW5lcik7XG4gICAgfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQb3J0YWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcnRhbC5kaXNwbGF5TmFtZSA9ICdQb3J0YWwnO1xuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBQb3J0YWwgY2hpbGRyZW5cbiAgICogYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19jb21wb25lbnRPckVsZW1lbnQuZGVmYXVsdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcbiAgb25SZW5kZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG52YXIgX2RlZmF1bHQgPSBQb3J0YWw7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50XCIpKTtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9vd25lckRvY3VtZW50XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfZ2V0Q29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9nZXRDb250YWluZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgUG9ydGFsIGNoaWxkcmVuXG4gICAqIGFwcGVuZGVkIHRvIGl0LlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50LmRlZmF1bHQsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG4gIG9uQ29udGFpbmVyUmVzb2x2ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59O1xuXG52YXIgV2FpdEZvckNvbnRhaW5lciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShXYWl0Rm9yQ29udGFpbmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBXYWl0Rm9yQ29udGFpbmVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIGlmICghX2luRE9NLmRlZmF1bHQpIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICB2YXIgY29udGFpbmVyID0gX3RoaXMucHJvcHMuY29udGFpbmVyO1xuICAgIGlmICh0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nKSBjb250YWluZXIgPSBjb250YWluZXIoKTtcblxuICAgIGlmIChjb250YWluZXIgJiYgIV9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKGNvbnRhaW5lcikpIHtcbiAgICAgIC8vIFRoZSBjb250YWluZXIgaXMgYSBSZWFjdCBjb21wb25lbnQgdGhhdCBoYXMgbm90IHlldCBiZWVuIHJlbmRlcmVkLlxuICAgICAgLy8gRG9uJ3Qgc2V0IHRoZSBjb250YWluZXIgbm9kZSB5ZXQuXG4gICAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyk7XG4gICAgfVxuXG4gICAgX3RoaXMuc2V0Q29udGFpbmVyKGNvbnRhaW5lcik7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gV2FpdEZvckNvbnRhaW5lci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5jb250YWluZXIgIT09IHRoaXMucHJvcHMuY29udGFpbmVyKSB7XG4gICAgICB0aGlzLnNldENvbnRhaW5lcihuZXh0UHJvcHMuY29udGFpbmVyKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLl9jb250YWluZXIpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKHRoaXMucHJvcHMuY29udGFpbmVyKTtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUodGhpcy5wcm9wcy5vbkNvbnRhaW5lclJlc29sdmVkKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMub25Db250YWluZXJSZXNvbHZlZCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNvbnRhaW5lclJlc29sdmVkKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLnNldENvbnRhaW5lciA9IGZ1bmN0aW9uIHNldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgICB0aGlzLl9jb250YWluZXIgPSAoMCwgX2dldENvbnRhaW5lci5kZWZhdWx0KShjb250YWluZXIsICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSgpLmJvZHkpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lciA/IHRoaXMucHJvcHMuY2hpbGRyZW4odGhpcy5fY29udGFpbmVyKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFdhaXRGb3JDb250YWluZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbldhaXRGb3JDb250YWluZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xudmFyIF9kZWZhdWx0ID0gV2FpdEZvckNvbnRhaW5lcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldENvbnRhaW5lcjtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIsIGRlZmF1bHRDb250YWluZXIpIHtcbiAgaWYgKGNvbnRhaW5lciA9PSBudWxsKSByZXR1cm4gZGVmYXVsdENvbnRhaW5lcjtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVXaXRoQnNQcmVmaXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeFwiKSk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBfRm9ybUdyb3VwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtR3JvdXBcIikpO1xuXG52YXIgX0Zvcm1Db250cm9sID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ29udHJvbFwiKSk7XG5cbnZhciBfRm9ybUNoZWNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ2hlY2tcIikpO1xuXG52YXIgX0Zvcm1MYWJlbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUxhYmVsXCIpKTtcblxudmFyIF9Gb3JtVGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybVRleHRcIikpO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbmxpbmU6IGZhbHNlLFxuICBhczogJ2Zvcm0nXG59O1xuXG5mdW5jdGlvbiBGb3JtKF9yZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGlubGluZSA9IF9yZWYuaW5saW5lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICB2YWxpZGF0ZWQgPSBfcmVmLnZhbGlkYXRlZCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYuYXMsXG4gICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJpbmxpbmVcIiwgXCJjbGFzc05hbWVcIiwgXCJpbm5lclJlZlwiLCBcInZhbGlkYXRlZFwiLCBcImFzXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIHJlZjogaW5uZXJSZWYsXG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCB2YWxpZGF0ZWQgJiYgJ3dhcy12YWxpZGF0ZWQnLCBpbmxpbmUgJiYgYnNQcmVmaXggKyBcIi1pbmxpbmVcIilcbiAgfSkpO1xufVxuXG5Gb3JtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWRGb3JtID0gKDAsIF9UaGVtZVByb3ZpZGVyLmNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCkoRm9ybSwgJ2Zvcm0nKTtcbkRlY29yYXRlZEZvcm0uUm93ID0gKDAsIF9jcmVhdGVXaXRoQnNQcmVmaXguZGVmYXVsdCkoJ2Zvcm0tcm93Jyk7XG5EZWNvcmF0ZWRGb3JtLkdyb3VwID0gX0Zvcm1Hcm91cC5kZWZhdWx0O1xuRGVjb3JhdGVkRm9ybS5Db250cm9sID0gX0Zvcm1Db250cm9sLmRlZmF1bHQ7XG5EZWNvcmF0ZWRGb3JtLkNoZWNrID0gX0Zvcm1DaGVjay5kZWZhdWx0O1xuRGVjb3JhdGVkRm9ybS5MYWJlbCA9IF9Gb3JtTGFiZWwuZGVmYXVsdDtcbkRlY29yYXRlZEZvcm0uVGV4dCA9IF9Gb3JtVGV4dC5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0gRGVjb3JhdGVkRm9ybTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9tYXBDb250ZXh0VG9Qcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvbWFwQ29udGV4dFRvUHJvcHNcIikpO1xuXG52YXIgX0ZlZWRiYWNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9GZWVkYmFja1wiKSk7XG5cbnZhciBfRm9ybUNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250ZXh0XCIpKTtcblxudmFyIF9UaGVtZVByb3ZpZGVyID0gcmVxdWlyZShcIi4vVGhlbWVQcm92aWRlclwiKTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdpbnB1dCdcbn07XG5cbnZhciBGb3JtQ29udHJvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGlzVmFsaWQgPSBfdGhpcyRwcm9wcy5pc1ZhbGlkLFxuICAgICAgICBpc0ludmFsaWQgPSBfdGhpcyRwcm9wcy5pc0ludmFsaWQsXG4gICAgICAgIHBsYWludGV4dCA9IF90aGlzJHByb3BzLnBsYWludGV4dCxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wcy5yZWFkT25seSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJ0eXBlXCIsIFwic2l6ZVwiLCBcImlkXCIsIFwiaW5wdXRSZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJpc1ZhbGlkXCIsIFwiaXNJbnZhbGlkXCIsIFwicGxhaW50ZXh0XCIsIFwicmVhZE9ubHlcIiwgXCJhc1wiXSk7XG4gICAgdmFyIGNsYXNzZXM7XG5cbiAgICBpZiAocGxhaW50ZXh0KSB7XG4gICAgICB2YXIgX2NsYXNzZXM7XG5cbiAgICAgIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7fSwgX2NsYXNzZXNbYnNQcmVmaXggKyBcIi1wbGFpbnRleHRcIl0gPSB0cnVlLCBfY2xhc3Nlcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZmlsZScpIHtcbiAgICAgIHZhciBfY2xhc3NlczI7XG5cbiAgICAgIGNsYXNzZXMgPSAoX2NsYXNzZXMyID0ge30sIF9jbGFzc2VzMltic1ByZWZpeCArIFwiLWZpbGVcIl0gPSB0cnVlLCBfY2xhc3NlczIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2NsYXNzZXMzO1xuXG4gICAgICBjbGFzc2VzID0gKF9jbGFzc2VzMyA9IHt9LCBfY2xhc3NlczNbYnNQcmVmaXhdID0gdHJ1ZSwgX2NsYXNzZXMzW2JzUHJlZml4ICsgXCItXCIgKyBzaXplXSA9IHNpemUsIF9jbGFzc2VzMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGNsYXNzZXMsIGlzVmFsaWQgJiYgXCJpcy12YWxpZFwiLCBpc0ludmFsaWQgJiYgXCJpcy1pbnZhbGlkXCIpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGb3JtQ29udHJvbDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRm9ybUNvbnRyb2wuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgbWFwQ29udGV4dCA9IGZ1bmN0aW9uIG1hcENvbnRleHQoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIGNvbnRyb2xJZCA9IF9yZWYuY29udHJvbElkO1xuICB2YXIgaWQgPSBfcmVmMi5pZDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbnRyb2xJZCA9PSBudWxsIHx8ICFpZCwgJ2Bjb250cm9sSWRgIGlzIGlnbm9yZWQgb24gYDxGb3JtQ29udHJvbD5gIHdoZW4gYGlkYCBpcyBzcGVjaWZpZWQuJykgOiB2b2lkIDA7XG4gIHJldHVybiB7XG4gICAgaWQ6IGlkIHx8IGNvbnRyb2xJZFxuICB9O1xufTtcblxudmFyIERlY29yYXRlZEZvcm1Db250cm9sID0gKDAsIF9tYXBDb250ZXh0VG9Qcm9wcy5kZWZhdWx0KShfRm9ybUNvbnRleHQuZGVmYXVsdCwgbWFwQ29udGV4dCwgKDAsIF9UaGVtZVByb3ZpZGVyLmNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCkoRm9ybUNvbnRyb2wsIHtcbiAgcHJlZml4OiAnZm9ybS1jb250cm9sJyxcbiAgZm9yd2FyZFJlZkFzOiAnaW5wdXRSZWYnXG59KSk7XG5EZWNvcmF0ZWRGb3JtQ29udHJvbC5GZWVkYmFjayA9IF9GZWVkYmFjay5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0gRGVjb3JhdGVkRm9ybUNvbnRyb2w7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIEZlZWRiYWNrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRmVlZGJhY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZlZWRiYWNrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGZWVkYmFjay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJhc1wiLCBcImNsYXNzTmFtZVwiLCBcInR5cGVcIl0pO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgdHlwZSAmJiB0eXBlICsgXCItZmVlZGJhY2tcIilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZlZWRiYWNrO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5GZWVkYmFjay5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICd2YWxpZCcsXG4gIGFzOiAnZGl2J1xufTtcbnZhciBfZGVmYXVsdCA9IEZlZWRiYWNrO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBfU2FmZUFuY2hvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSk7XG5cbnZhciBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wcy52YXJpYW50LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHMuYmxvY2ssXG4gICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlLFxuICAgICAgICBhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcInNpemVcIiwgXCJhY3RpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJibG9ja1wiLCBcInR5cGVcIiwgXCJhc1wiLCBcImlubmVyUmVmXCJdKTtcbiAgICB2YXIgY2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGJzUHJlZml4LCBhY3RpdmUgJiYgJ2FjdGl2ZScsIGJzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBibG9jayAmJiBic1ByZWZpeCArIFwiLWJsb2NrXCIsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUpO1xuXG4gICAgaWYgKHByb3BzLmhyZWYpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TYWZlQW5jaG9yLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICAgIGFzOiBhcyxcbiAgICAgICAgaW5uZXJSZWY6IGlubmVyUmVmLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLCBwcm9wcy5kaXNhYmxlZCAmJiAnZGlzYWJsZWQnKVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHZhciBDb21wb25lbnQgPSBhcyB8fCAnYnV0dG9uJztcbiAgICBpZiAoaW5uZXJSZWYpIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFyaWFudDogJ3ByaW1hcnknLFxuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHR5cGU6ICdidXR0b24nXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX1RoZW1lUHJvdmlkZXIuY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KShCdXR0b24sIHtcbiAgcHJlZml4OiAnYnRuJyxcbiAgZm9yd2FyZFJlZkFzOiAnaW5uZXJSZWYnXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdW5jb250cm9sbGFibGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1bmNvbnRyb2xsYWJsZVwiKSk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBfQWJzdHJhY3ROYXYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Fic3RyYWN0TmF2XCIpKTtcblxudmFyIF9MaXN0R3JvdXBJdGVtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0R3JvdXBJdGVtXCIpKTtcblxudmFyIExpc3RHcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKExpc3RHcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdEdyb3VwKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaXN0R3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudCxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcInZhcmlhbnRcIl0pO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9BYnN0cmFjdE5hdi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCBic1ByZWZpeCwgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuTGlzdEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICB2YXJpYW50OiBudWxsXG59O1xudmFyIERlY29yYXRlZExpc3RHcm91cCA9ICgwLCBfdW5jb250cm9sbGFibGUuZGVmYXVsdCkoKDAsIF9UaGVtZVByb3ZpZGVyLmNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCkoTGlzdEdyb3VwLCAnbGlzdC1ncm91cCcpLCB7XG4gIGFjdGl2ZUtleTogJ29uU2VsZWN0J1xufSk7XG5EZWNvcmF0ZWRMaXN0R3JvdXAuSXRlbSA9IF9MaXN0R3JvdXBJdGVtLmRlZmF1bHQ7XG52YXIgX2RlZmF1bHQgPSBEZWNvcmF0ZWRMaXN0R3JvdXA7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXdPYmogPSB7fTtcblxuICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xuXG4gICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuICAgIHJldHVybiBuZXdPYmo7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBOYXZDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcblxudmFyIF9kZWZhdWx0ID0gTmF2Q29udGV4dDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2V0U3RhdGljID0gcmVxdWlyZSgnLi9zZXRTdGF0aWMnKTtcblxudmFyIF9zZXRTdGF0aWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0U3RhdGljKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gc2V0RGlzcGxheU5hbWUoZGlzcGxheU5hbWUpIHtcbiAgcmV0dXJuICgwLCBfc2V0U3RhdGljMi5kZWZhdWx0KSgnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzZXREaXNwbGF5TmFtZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0RGlzcGxheU5hbWUgPSByZXF1aXJlKCcuL2dldERpc3BsYXlOYW1lJyk7XG5cbnZhciBfZ2V0RGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0RGlzcGxheU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgd3JhcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gd3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsIGhvY05hbWUpIHtcbiAgcmV0dXJuIGhvY05hbWUgKyAnKCcgKyAoMCwgX2dldERpc3BsYXlOYW1lMi5kZWZhdWx0KShCYXNlQ29tcG9uZW50KSArICcpJztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHdyYXBEaXNwbGF5TmFtZTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMpO1xuICAgIGdsb2JhbC5pbmRleCA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIHZhciBjYWxjdWxhdGVSZ2JhID0gZXhwb3J0cy5jYWxjdWxhdGVSZ2JhID0gZnVuY3Rpb24gY2FsY3VsYXRlUmdiYShjb2xvciwgb3BhY2l0eSkge1xuICAgIGlmIChjb2xvclswXSA9PT0gJyMnKSB7XG4gICAgICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICAgIH1cblxuICAgIGlmIChjb2xvci5sZW5ndGggPT09IDMpIHtcbiAgICAgIHZhciByZXMgPSAnJztcbiAgICAgIGNvbG9yLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJlcyArPSBjO1xuICAgICAgICByZXMgKz0gYztcbiAgICAgIH0pO1xuICAgICAgY29sb3IgPSByZXM7XG4gICAgfVxuXG4gICAgdmFyIHJnYlZhbHVlcyA9IGNvbG9yLm1hdGNoKC8uezJ9L2cpLm1hcChmdW5jdGlvbiAoaGV4KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICByZXR1cm4gJ3JnYmEoJyArIHJnYlZhbHVlcyArICcsICcgKyBvcGFjaXR5ICsgJyknO1xuICB9O1xufSk7IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9lbmQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2VuZFwiKSk7XG5cbmV4cG9ydHMuZW5kID0gX2VuZC5kZWZhdWx0O1xuXG52YXIgX3Byb3BlcnRpZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Byb3BlcnRpZXNcIikpO1xuXG5leHBvcnRzLnByb3BlcnRpZXMgPSBfcHJvcGVydGllcy5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBlbmQ6IF9lbmQuZGVmYXVsdCxcbiAgcHJvcGVydGllczogX3Byb3BlcnRpZXMuZGVmYXVsdFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltcGxlbWVudGF0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNvbnRleHQgfHwgX2ltcGxlbWVudGF0aW9uMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9hY3RpdmVFbGVtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudFwiKSk7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy91dGlsL2luRE9NXCIpKTtcblxudmFyIF9saXN0ZW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9ldmVudHMvbGlzdGVuXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnRcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9Nb2RhbE1hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsTWFuYWdlclwiKSk7XG5cbnZhciBfUG9ydGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Qb3J0YWxcIikpO1xuXG52YXIgX2dldENvbnRhaW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvZ2V0Q29udGFpbmVyXCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9vd25lckRvY3VtZW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbnZhciBtb2RhbE1hbmFnZXIgPSBuZXcgX01vZGFsTWFuYWdlci5kZWZhdWx0KCk7XG5cbmZ1bmN0aW9uIG9taXRQcm9wcyhwcm9wcywgcHJvcFR5cGVzKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcbiAga2V5cy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wVHlwZXMsIHByb3ApKSB7XG4gICAgICBuZXdQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdQcm9wcztcbn1cbi8qKlxuICogTG92ZSB0aGVtIG9yIGhhdGUgdGhlbSwgYDxNb2RhbCAvPmAgcHJvdmlkZXMgYSBzb2xpZCBmb3VuZGF0aW9uIGZvciBjcmVhdGluZyBkaWFsb2dzLCBsaWdodGJveGVzLCBvciB3aGF0ZXZlciBlbHNlLlxuICogVGhlIE1vZGFsIGNvbXBvbmVudCByZW5kZXJzIGl0cyBgY2hpbGRyZW5gIG5vZGUgaW4gZnJvbnQgb2YgYSBiYWNrZHJvcCBjb21wb25lbnQuXG4gKlxuICogVGhlIE1vZGFsIG9mZmVycyBhIGZldyBoZWxwZnVsIGZlYXR1cmVzIG92ZXIgdXNpbmcganVzdCBhIGA8UG9ydGFsLz5gIGNvbXBvbmVudCBhbmQgc29tZSBzdHlsZXM6XG4gKlxuICogLSBNYW5hZ2VzIGRpYWxvZyBzdGFja2luZyB3aGVuIG9uZS1hdC1hLXRpbWUganVzdCBpc24ndCBlbm91Z2guXG4gKiAtIENyZWF0ZXMgYSBiYWNrZHJvcCwgZm9yIGRpc2FibGluZyBpbnRlcmFjdGlvbiBiZWxvdyB0aGUgbW9kYWwuXG4gKiAtIEl0IHByb3Blcmx5IG1hbmFnZXMgZm9jdXM7IG1vdmluZyB0byB0aGUgbW9kYWwgY29udGVudCwgYW5kIGtlZXBpbmcgaXQgdGhlcmUgdW50aWwgdGhlIG1vZGFsIGlzIGNsb3NlZC5cbiAqIC0gSXQgZGlzYWJsZXMgc2Nyb2xsaW5nIG9mIHRoZSBwYWdlIGNvbnRlbnQgd2hpbGUgb3Blbi5cbiAqIC0gQWRkcyB0aGUgYXBwcm9wcmlhdGUgQVJJQSByb2xlcyBhcmUgYXV0b21hdGljYWxseS5cbiAqIC0gRWFzaWx5IHBsdWdnYWJsZSBhbmltYXRpb25zIHZpYSBhIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQuXG4gKlxuICogTm90ZSB0aGF0LCBpbiB0aGUgc2FtZSB3YXkgdGhlIGJhY2tkcm9wIGVsZW1lbnQgcHJldmVudHMgdXNlcnMgZnJvbSBjbGlja2luZyBvciBpbnRlcmFjdGluZ1xuICogd2l0aCB0aGUgcGFnZSBjb250ZW50IHVuZGVybmVhdGggdGhlIE1vZGFsLCBTY3JlZW4gcmVhZGVycyBhbHNvIG5lZWQgdG8gYmUgc2lnbmFsZWQgdG8gbm90IHRvXG4gKiBpbnRlcmFjdCB3aXRoIHBhZ2UgY29udGVudCB3aGlsZSB0aGUgTW9kYWwgaXMgb3Blbi4gVG8gZG8gdGhpcywgd2UgdXNlIGEgY29tbW9uIHRlY2huaXF1ZSBvZiBhcHBseWluZ1xuICogdGhlIGBhcmlhLWhpZGRlbj0ndHJ1ZSdgIGF0dHJpYnV0ZSB0byB0aGUgbm9uLU1vZGFsIGVsZW1lbnRzIGluIHRoZSBNb2RhbCBgY29udGFpbmVyYC4gVGhpcyBtZWFucyB0aGF0IGZvclxuICogYSBNb2RhbCB0byBiZSB0cnVseSBtb2RhbCwgaXQgc2hvdWxkIGhhdmUgYSBgY29udGFpbmVyYCB0aGF0IGlzIF9vdXRzaWRlXyB5b3VyIGFwcCdzXG4gKiBSZWFjdCBoaWVyYXJjaHkgKHN1Y2ggYXMgdGhlIGRlZmF1bHQ6IGRvY3VtZW50LmJvZHkpLlxuICovXG5cblxudmFyIE1vZGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGV4aXRlZDogIV90aGlzLnByb3BzLnNob3dcbiAgICB9O1xuXG4gICAgX3RoaXMub25Qb3J0YWxSZW5kZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblNob3cpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25TaG93KCk7XG4gICAgICB9IC8vIGF1dG9mb2N1cyBhZnRlciBvblNob3csIHRvIG5vdCB0cmlnZ2VyIGEgZm9jdXMgZXZlbnQgZm9yIHByZXZpb3VzXG4gICAgICAvLyBtb2RhbHMgYmVmb3JlIHRoaXMgb3duIGlzIHNob3duLlxuXG5cbiAgICAgIF90aGlzLmF1dG9Gb2N1cygpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vblNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgIHZhciBjb250YWluZXIgPSAoMCwgX2dldENvbnRhaW5lci5kZWZhdWx0KShfdGhpcy5wcm9wcy5jb250YWluZXIsIGRvYy5ib2R5KTtcblxuICAgICAgX3RoaXMucHJvcHMubWFuYWdlci5hZGQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIGNvbnRhaW5lciwgX3RoaXMucHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lKTtcblxuICAgICAgX3RoaXMucmVtb3ZlS2V5ZG93bkxpc3RlbmVyID0gKDAsIF9saXN0ZW4uZGVmYXVsdCkoZG9jLCAna2V5ZG93bicsIF90aGlzLmhhbmRsZURvY3VtZW50S2V5RG93bik7XG4gICAgICBfdGhpcy5yZW1vdmVGb2N1c0xpc3RlbmVyID0gKDAsIF9saXN0ZW4uZGVmYXVsdCkoZG9jLCAnZm9jdXMnLCBfdGhpcy5lbmZvcmNlRm9jdXMsIHRydWUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLnJlbW92ZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG5cbiAgICAgIF90aGlzLnJlbW92ZUtleWRvd25MaXN0ZW5lcigpO1xuXG4gICAgICBfdGhpcy5yZW1vdmVGb2N1c0xpc3RlbmVyKCk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5yZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgX3RoaXMucmVzdG9yZUxhc3RGb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zZXREaWFsb2dSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5kaWFsb2cgPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLnNldEJhY2tkcm9wUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuYmFja2Ryb3AgPSByZWYgJiYgX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUocmVmKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleGl0ZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vbkhpZGUoKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgICAoX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcykub25FeGl0ZWQuYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25CYWNrZHJvcENsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQmFja2Ryb3BDbGljayhlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLmJhY2tkcm9wID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uSGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmtleWJvYXJkICYmIGUua2V5Q29kZSA9PT0gMjcgJiYgX3RoaXMuaXNUb3BNb2RhbCgpKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVzY2FwZUtleURvd24pIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkVzY2FwZUtleURvd24oZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5wcm9wcy5vbkhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5lbmZvcmNlRm9jdXMgfHwgIV90aGlzLl9pc01vdW50ZWQgfHwgIV90aGlzLmlzVG9wTW9kYWwoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfYWN0aXZlRWxlbWVudC5kZWZhdWx0KSgoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpKTtcblxuICAgICAgaWYgKF90aGlzLmRpYWxvZyAmJiAhKDAsIF9jb250YWlucy5kZWZhdWx0KShfdGhpcy5kaWFsb2csIGN1cnJlbnRBY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBfdGhpcy5kaWFsb2cuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcmVuZGVyQmFja2Ryb3AgPSBfdGhpcyRwcm9wczIucmVuZGVyQmFja2Ryb3AsXG4gICAgICAgICAgVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzMi5iYWNrZHJvcFRyYW5zaXRpb247XG4gICAgICB2YXIgYmFja2Ryb3AgPSByZW5kZXJCYWNrZHJvcCh7XG4gICAgICAgIHJlZjogX3RoaXMuc2V0QmFja2Ryb3BSZWYsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2tcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgICBiYWNrZHJvcCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICBpbjogX3RoaXMucHJvcHMuc2hvd1xuICAgICAgICB9LCBiYWNrZHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiYWNrZHJvcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTW9kYWwuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc2hvdykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhpdGVkOiBmYWxzZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFuZXh0UHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGxldCBoYW5kbGVIaWRkZW4gdGFrZSBjYXJlIG9mIG1hcmtpbmcgZXhpdGVkLlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID0gZnVuY3Rpb24gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKF9pbkRPTS5kZWZhdWx0ICYmICFwcmV2UHJvcHMuc2hvdyAmJiB0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzID0gKDAsIF9hY3RpdmVFbGVtZW50LmRlZmF1bHQpKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMub25TaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB0aGlzLnByb3BzLnRyYW5zaXRpb247XG5cbiAgICBpZiAocHJldlByb3BzLnNob3cgJiYgIXRoaXMucHJvcHMuc2hvdyAmJiAhdHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGhhbmRsZUhpZGRlbiB3aWxsIGNhbGwgdGhpcy5cbiAgICAgIHRoaXMub25IaWRlKCk7XG4gICAgfSBlbHNlIGlmICghcHJldlByb3BzLnNob3cgJiYgdGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLm9uU2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvdyA9IF90aGlzJHByb3BzMy5zaG93LFxuICAgICAgICB0cmFuc2l0aW9uID0gX3RoaXMkcHJvcHMzLnRyYW5zaXRpb247XG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG5cbiAgICBpZiAoc2hvdyB8fCB0cmFuc2l0aW9uICYmICF0aGlzLnN0YXRlLmV4aXRlZCkge1xuICAgICAgdGhpcy5vbkhpZGUoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmF1dG9Gb2N1cyA9IGZ1bmN0aW9uIGF1dG9Gb2N1cygpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuYXV0b0ZvY3VzKSByZXR1cm47XG4gICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gKDAsIF9hY3RpdmVFbGVtZW50LmRlZmF1bHQpKCgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSh0aGlzKSk7XG5cbiAgICBpZiAodGhpcy5kaWFsb2cgJiYgISgwLCBfY29udGFpbnMuZGVmYXVsdCkodGhpcy5kaWFsb2csIGN1cnJlbnRBY3RpdmVFbGVtZW50KSkge1xuICAgICAgdGhpcy5sYXN0Rm9jdXMgPSBjdXJyZW50QWN0aXZlRWxlbWVudDtcbiAgICAgIHRoaXMuZGlhbG9nLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZXN0b3JlTGFzdEZvY3VzID0gZnVuY3Rpb24gcmVzdG9yZUxhc3RGb2N1cygpIHtcbiAgICAvLyBTdXBwb3J0OiA8PUlFMTEgZG9lc24ndCBzdXBwb3J0IGBmb2N1cygpYCBvbiBzdmcgZWxlbWVudHMgKFJCOiAjOTE3KVxuICAgIGlmICh0aGlzLmxhc3RGb2N1cyAmJiB0aGlzLmxhc3RGb2N1cy5mb2N1cykge1xuICAgICAgdGhpcy5sYXN0Rm9jdXMuZm9jdXMoKTtcbiAgICAgIHRoaXMubGFzdEZvY3VzID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzVG9wTW9kYWwgPSBmdW5jdGlvbiBpc1RvcE1vZGFsKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm1hbmFnZXIuaXNUb3BNb2RhbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHM0LnNob3csXG4gICAgICAgIGNvbnRhaW5lciA9IF90aGlzJHByb3BzNC5jb250YWluZXIsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuLFxuICAgICAgICByZW5kZXJEaWFsb2cgPSBfdGhpcyRwcm9wczQucmVuZGVyRGlhbG9nLFxuICAgICAgICBfdGhpcyRwcm9wczQkcm9sZSA9IF90aGlzJHByb3BzNC5yb2xlLFxuICAgICAgICByb2xlID0gX3RoaXMkcHJvcHM0JHJvbGUgPT09IHZvaWQgMCA/ICdkaWFsb2cnIDogX3RoaXMkcHJvcHM0JHJvbGUsXG4gICAgICAgIFRyYW5zaXRpb24gPSBfdGhpcyRwcm9wczQudHJhbnNpdGlvbixcbiAgICAgICAgYmFja2Ryb3AgPSBfdGhpcyRwcm9wczQuYmFja2Ryb3AsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNC5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHM0LnN0eWxlLFxuICAgICAgICBvbkV4aXQgPSBfdGhpcyRwcm9wczQub25FeGl0LFxuICAgICAgICBvbkV4aXRpbmcgPSBfdGhpcyRwcm9wczQub25FeGl0aW5nLFxuICAgICAgICBvbkVudGVyID0gX3RoaXMkcHJvcHM0Lm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfdGhpcyRwcm9wczQub25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkID0gX3RoaXMkcHJvcHM0Lm9uRW50ZXJlZCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczQsIFtcInNob3dcIiwgXCJjb250YWluZXJcIiwgXCJjaGlsZHJlblwiLCBcInJlbmRlckRpYWxvZ1wiLCBcInJvbGVcIiwgXCJ0cmFuc2l0aW9uXCIsIFwiYmFja2Ryb3BcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCJdKTtcblxuICAgIGlmICghKHNob3cgfHwgVHJhbnNpdGlvbiAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZGlhbG9nUHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICByb2xlOiByb2xlLFxuICAgICAgcmVmOiB0aGlzLnNldERpYWxvZ1JlZixcbiAgICAgIC8vIGFwcGFyZW50bHkgb25seSB3b3JrcyBvbiB0aGUgZGlhbG9nIHJvbGUgZWxlbWVudFxuICAgICAgJ2FyaWEtbW9kYWwnOiByb2xlID09PSAnZGlhbG9nJyA/IHRydWUgOiB1bmRlZmluZWRcbiAgICB9LCBvbWl0UHJvcHMocHJvcHMsIE1vZGFsLnByb3BUeXBlcyksIHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgdGFiSW5kZXg6ICctMSdcbiAgICB9KTtcblxuICAgIHZhciBkaWFsb2cgPSByZW5kZXJEaWFsb2cgPyByZW5kZXJEaWFsb2coZGlhbG9nUHJvcHMpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBkaWFsb2dQcm9wcywgX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICByb2xlOiAnZG9jdW1lbnQnXG4gICAgfSkpO1xuXG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIGRpYWxvZyA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIHVubW91bnRPbkV4aXQ6IHRydWUsXG4gICAgICAgIGluOiBzaG93LFxuICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgb25FeGl0aW5nOiBvbkV4aXRpbmcsXG4gICAgICAgIG9uRXhpdGVkOiB0aGlzLmhhbmRsZUhpZGRlbixcbiAgICAgICAgb25FbnRlcjogb25FbnRlcixcbiAgICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWRcbiAgICAgIH0sIGRpYWxvZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcnRhbC5kZWZhdWx0LCB7XG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG9uUmVuZGVyZWQ6IHRoaXMub25Qb3J0YWxSZW5kZXJlZFxuICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIGJhY2tkcm9wICYmIHRoaXMucmVuZGVyQmFja2Ryb3AoKSwgZGlhbG9nKSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Nb2RhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE1vZGFsXG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBOb2RlLCBDb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuIFRoZSBNb2RhbCBpcyBhcHBlbmRlZCB0byBpdCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKlxuICAgKiBGb3IgdGhlIHNha2Ugb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgdGhlIGNvbnRhaW5lciBzaG91bGQgdXN1YWxseSBiZSB0aGUgZG9jdW1lbnQgYm9keSwgc28gdGhhdCB0aGUgcmVzdCBvZiB0aGVcbiAgICogcGFnZSBjb250ZW50IGNhbiBiZSBwbGFjZWQgYmVoaW5kIGEgdmlydHVhbCBiYWNrZHJvcCBhcyB3ZWxsIGFzIGEgdmlzdWFsIG9uZS5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudC5kZWZhdWx0LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1vZGFsIGlzIG9wZW5pbmcuXG4gICAqL1xuICBvblNob3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gZWl0aGVyIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLCBvciB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgKlxuICAgKiBUaGUgYG9uSGlkZWAgY2FsbGJhY2sgb25seSBzaWduYWxzIGludGVudCBmcm9tIHRoZSBNb2RhbCxcbiAgICogeW91IG11c3QgYWN0dWFsbHkgc2V0IHRoZSBgc2hvd2AgcHJvcCB0byBgZmFsc2VgIGZvciB0aGUgTW9kYWwgdG8gY2xvc2UuXG4gICAqL1xuICBvbkhpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgYmFja2Ryb3AgY29tcG9uZW50LlxuICAgKi9cbiAgYmFja2Ryb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGF0aWMnXSldKSxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGRpYWxvZyBjb21wb25lbnQuIFVzZWZ1bCBmb3IgY3VzdG9tXG4gICAqIHJlbmRlcmluZy4gKipOb3RlOioqIHRoZSBjb21wb25lbnQgc2hvdWxkIG1ha2Ugc3VyZSB0byBhcHBseSB0aGUgcHJvdmlkZWQgcmVmLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgcmVuZGVyRGlhbG9nPXtwcm9wcyA9PiA8TXlEaWFsb2cgey4uLnByb3BzfSAvPn1cbiAgICogYGBgXG4gICAqL1xuICByZW5kZXJEaWFsb2c6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGJhY2tkcm9wIGNvbXBvbmVudC4gVXNlZnVsIGZvciBjdXN0b21cbiAgICogYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgcmVuZGVyQmFja2Ryb3A9e3Byb3BzID0+IDxNeUJhY2tkcm9wIHsuLi5wcm9wc30gLz59XG4gICAqIGBgYFxuICAgKi9cbiAgcmVuZGVyQmFja2Ryb3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGVzY2FwZSBrZXksIGlmIHNwZWNpZmllZCBpbiBga2V5Ym9hcmRgLCBpcyBwcmVzc2VkLlxuICAgKi9cbiAgb25Fc2NhcGVLZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCwgaWYgc3BlY2lmaWVkLCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBjc3MgY2xhc3Mgb3Igc2V0IG9mIGNsYXNzZXMgYXBwbGllZCB0byB0aGUgbW9kYWwgY29udGFpbmVyIHdoZW4gdGhlIG1vZGFsIGlzIG9wZW4sXG4gICAqIGFuZCByZW1vdmVkIHdoZW4gaXQgaXMgY2xvc2VkLlxuICAgKi9cbiAgY29udGFpbmVyQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgbW9kYWwgd2hlbiBlc2NhcGUga2V5IGlzIHByZXNzZWRcbiAgICovXG4gIGtleWJvYXJkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudCB1c2VkXG4gICAqIHRvIGNvbnRyb2wgYW5pbWF0aW9ucyBmb3IgdGhlIGRpYWxvZyBjb21wb25lbnQuXG4gICAqL1xuICB0cmFuc2l0aW9uOiBfZWxlbWVudFR5cGUuZGVmYXVsdCxcblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudCB1c2VkXG4gICAqIHRvIGNvbnRyb2wgYW5pbWF0aW9ucyBmb3IgdGhlIGJhY2tkcm9wIGNvbXBvbmVudHMuXG4gICAqL1xuICBiYWNrZHJvcFRyYW5zaXRpb246IF9lbGVtZW50VHlwZS5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuIFRoaXMgYWxzb1xuICAgKiB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgTW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgYXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGBmYWxzZWAgYXMgaXQgbWFrZXMgdGhlIE1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIE1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYGZhbHNlYCBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBlbmZvcmNlRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuXG4gICAqL1xuICByZXN0b3JlRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQSBNb2RhbE1hbmFnZXIgaW5zdGFuY2UgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuXG4gICAqIE1vZGFscy4gVXNlZnVsIHdoZW4gY3VzdG9taXppbmcgaG93IG1vZGFscyBpbnRlcmFjdCB3aXRoaW4gYSBjb250YWluZXJcbiAgICovXG4gIG1hbmFnZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbk1vZGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2hvdzogZmFsc2UsXG4gIHJvbGU6ICdkaWFsb2cnLFxuICBiYWNrZHJvcDogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIGF1dG9Gb2N1czogdHJ1ZSxcbiAgZW5mb3JjZUZvY3VzOiB0cnVlLFxuICByZXN0b3JlRm9jdXM6IHRydWUsXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge30sXG4gIG1hbmFnZXI6IG1vZGFsTWFuYWdlcixcbiAgcmVuZGVyQmFja2Ryb3A6IGZ1bmN0aW9uIHJlbmRlckJhY2tkcm9wKHByb3BzKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMpO1xuICB9XG59O1xuTW9kYWwuTWFuYWdlciA9IF9Nb2RhbE1hbmFnZXIuZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IE1vZGFsO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2VsZW1lbnRUeXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9Qb3J0YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BvcnRhbFwiKSk7XG5cbnZhciBfUm9vdENsb3NlV3JhcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUm9vdENsb3NlV3JhcHBlclwiKSk7XG5cbnZhciBfcmVhY3RQb3BwZXIgPSByZXF1aXJlKFwicmVhY3QtcG9wcGVyXCIpO1xuXG52YXIgX2ZvcndhcmRSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1jb250ZXh0LXRvb2xib3gvbGliL2ZvcndhcmRSZWZcIikpO1xuXG52YXIgX1dhaXRGb3JDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1dhaXRGb3JDb250YWluZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuLyoqXG4gKiBCdWlsdCBvbiB0b3Agb2YgYDxQb3NpdGlvbi8+YCBhbmQgYDxQb3J0YWwvPmAsIHRoZSBvdmVybGF5IGNvbXBvbmVudCBpc1xuICogZ3JlYXQgZm9yIGN1c3RvbSB0b29sdGlwIG92ZXJsYXlzLlxuICovXG52YXIgT3ZlcmxheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShPdmVybGF5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPdmVybGF5KHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVIaWRkZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGV4aXRlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uRXhpdGVkLmFwcGx5KF90aGlzJHByb3BzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGV4aXRlZDogIXByb3BzLnNob3dcbiAgICB9O1xuICAgIF90aGlzLm9uSGlkZGVuTGlzdGVuZXIgPSBfdGhpcy5oYW5kbGVIaWRkZW4uYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgX3RoaXMuX2xhc3RUYXJnZXQgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIE92ZXJsYXkuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc2hvdykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhpdGVkOiBmYWxzZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFuZXh0UHJvcHMudHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGxldCBoYW5kbGVIaWRkZW4gdGFrZSBjYXJlIG9mIG1hcmtpbmcgZXhpdGVkLlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBPdmVybGF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRhcmdldDogdGhpcy5nZXRUYXJnZXQoKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMgPT09IHByZXZQcm9wcykgcmV0dXJuO1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLmdldFRhcmdldCgpO1xuXG4gICAgaWYgKHRhcmdldCAhPT0gdGhpcy5zdGF0ZS50YXJnZXQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXMucHJvcHMudGFyZ2V0O1xuICAgIHRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgPyB0YXJnZXQoKSA6IHRhcmdldDtcbiAgICByZXR1cm4gdGFyZ2V0ICYmIF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRhcmdldCkgfHwgbnVsbDtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF8wID0gX3RoaXMkcHJvcHMyLnRhcmdldCxcbiAgICAgICAgY29udGFpbmVyID0gX3RoaXMkcHJvcHMyLmNvbnRhaW5lcixcbiAgICAgICAgY29udGFpbmVyUGFkZGluZyA9IF90aGlzJHByb3BzMi5jb250YWluZXJQYWRkaW5nLFxuICAgICAgICBwbGFjZW1lbnQgPSBfdGhpcyRwcm9wczIucGxhY2VtZW50LFxuICAgICAgICByb290Q2xvc2UgPSBfdGhpcyRwcm9wczIucm9vdENsb3NlLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgZmxpcCA9IF90aGlzJHByb3BzMi5mbGlwLFxuICAgICAgICBfdGhpcyRwcm9wczIkcG9wcGVyQ28gPSBfdGhpcyRwcm9wczIucG9wcGVyQ29uZmlnLFxuICAgICAgICBwb3BwZXJDb25maWcgPSBfdGhpcyRwcm9wczIkcG9wcGVyQ28gPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJHBvcHBlckNvLFxuICAgICAgICBUcmFuc2l0aW9uID0gX3RoaXMkcHJvcHMyLnRyYW5zaXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJ0YXJnZXRcIiwgXCJjb250YWluZXJcIiwgXCJjb250YWluZXJQYWRkaW5nXCIsIFwicGxhY2VtZW50XCIsIFwicm9vdENsb3NlXCIsIFwiY2hpbGRyZW5cIiwgXCJmbGlwXCIsIFwicG9wcGVyQ29uZmlnXCIsIFwidHJhbnNpdGlvblwiXSk7XG5cbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5zdGF0ZS50YXJnZXQ7IC8vIERvbid0IHVuLXJlbmRlciB0aGUgb3ZlcmxheSB3aGlsZSBpdCdzIHRyYW5zaXRpb25pbmcgb3V0LlxuXG4gICAgdmFyIG1vdW50T3ZlcmxheSA9IHByb3BzLnNob3cgfHwgVHJhbnNpdGlvbiAmJiAhdGhpcy5zdGF0ZS5leGl0ZWQ7XG5cbiAgICBpZiAoIW1vdW50T3ZlcmxheSkge1xuICAgICAgLy8gRG9uJ3QgYm90aGVyIHNob3dpbmcgYW55dGhpbmcgaWYgd2UgZG9uJ3QgaGF2ZSB0by5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuO1xuICAgIHZhciBfcG9wcGVyQ29uZmlnJG1vZGlmaWUgPSBwb3BwZXJDb25maWcubW9kaWZpZXJzLFxuICAgICAgICBtb2RpZmllcnMgPSBfcG9wcGVyQ29uZmlnJG1vZGlmaWUgPT09IHZvaWQgMCA/IHt9IDogX3BvcHBlckNvbmZpZyRtb2RpZmllO1xuXG4gICAgdmFyIHBvcHBlclByb3BzID0gX2V4dGVuZHMoe30sIHBvcHBlckNvbmZpZywge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICByZWZlcmVuY2VFbGVtZW50OiB0YXJnZXQsXG4gICAgICBlbmFibGVFdmVudHM6IHByb3BzLnNob3csXG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBtb2RpZmllcnMsIHtcbiAgICAgICAgcHJldmVudE92ZXJmbG93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGFkZGluZzogY29udGFpbmVyUGFkZGluZyB8fCA1XG4gICAgICAgIH0sIG1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3cpLFxuICAgICAgICBmbGlwOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZW5hYmxlZDogISFmbGlwXG4gICAgICAgIH0sIG1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3cpXG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFBvcHBlci5Qb3BwZXIsIHBvcHBlclByb3BzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGFycm93UHJvcHMgPSBfcmVmLmFycm93UHJvcHMsXG4gICAgICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgICAgIHJlZiA9IF9yZWYucmVmLFxuICAgICAgICAgIHBvcHBlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFycm93UHJvcHNcIiwgXCJzdHlsZVwiLCBcInJlZlwiXSk7XG5cbiAgICAgIF90aGlzMi5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgICAgIHZhciBpbm5lckNoaWxkID0gX3RoaXMyLnByb3BzLmNoaWxkcmVuKF9leHRlbmRzKHt9LCBwb3BwZXIsIHtcbiAgICAgICAgLy8gcG9wcGVyIGRvZXNuJ3Qgc2V0IHRoZSBpbml0aWFsIHBsYWNlbWVudFxuICAgICAgICBwbGFjZW1lbnQ6IHBvcHBlci5wbGFjZW1lbnQgfHwgcGxhY2VtZW50LFxuICAgICAgICBzaG93OiBwcm9wcy5zaG93LFxuICAgICAgICBhcnJvd1Byb3BzOiBhcnJvd1Byb3BzLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHJlZjogcmVmLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9XG4gICAgICB9KSk7XG5cbiAgICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICAgIHZhciBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICAgICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgICAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkO1xuICAgICAgICBpbm5lckNoaWxkID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgICAgICAgaW46IHByb3BzLnNob3csXG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgICAgIG9uRXhpdGVkOiBfdGhpczIub25IaWRkZW5MaXN0ZW5lcixcbiAgICAgICAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgICAgICAgIG9uRW50ZXJpbmc6IG9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWRcbiAgICAgICAgfSwgaW5uZXJDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbm5lckNoaWxkO1xuICAgIH0pO1xuXG4gICAgaWYgKHJvb3RDbG9zZSkge1xuICAgICAgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHQsIHtcbiAgICAgICAgb25Sb290Q2xvc2U6IHByb3BzLm9uSGlkZSxcbiAgICAgICAgZXZlbnQ6IHByb3BzLnJvb3RDbG9zZUV2ZW50XG4gICAgICB9LCBjaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcnRhbC5kZWZhdWx0LCB7XG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICAgIH0sIGNoaWxkKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuT3ZlcmxheS5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgX1BvcnRhbC5kZWZhdWx0LnByb3BUeXBlcywge1xuICAvKipcbiAgICogU2V0IHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBPdmVybGF5XG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKiogU3BlY2lmeSB3aGVyZSB0aGUgb3ZlcmxheSBlbGVtZW50IGlzIHBvc2l0aW9uZWQgaW4gcmVsYXRpb24gdG8gdGhlIHRhcmdldCBlbGVtZW50ICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKF9yZWFjdFBvcHBlci5wbGFjZW1lbnRzKSxcblxuICAvKipcbiAgICogQSByZW5kZXIgcHJvcCB0aGF0IHJldHVybnMgYW4gZWxlbWVudCB0byBvdmVybGF5IGFuZCBwb3NpdGlvbi4gU2VlXG4gICAqIHRoZSBbcmVhY3QtcG9wcGVyIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcmVhY3QtcG9wcGVyI2NoaWxkcmVuKSBmb3IgbW9yZSBpbmZvLlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb24gKHtcbiAgICogICBzaG93OiBib29sZWFuLFxuICAgKiAgIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICAgKiAgIG91dE9mQm91bmRhcmllczogP2Jvb2xlYW4sXG4gICAqICAgc2NoZWR1bGVVcGRhdGU6ICgpID0+IHZvaWQsXG4gICAqICAgcHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIHN0eWxlOiB7IFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSxcbiAgICogICAgIGFyaWEtbGFiZWxsZWRieTogP3N0cmluZ1xuICAgKiAgIH0sXG4gICAqICAgYXJyb3dQcm9wczoge1xuICAgKiAgICAgcmVmOiAoP0hUTUxFbGVtZW50KSA9PiB2b2lkLFxuICAgKiAgICAgc3R5bGU6IHsgW3N0cmluZ106IHN0cmluZyB8IG51bWJlciB9LFxuICAgKiAgIH0sXG4gICAqIH0pID0+IFJlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSBzZXQgb2YgcG9wcGVyIG9wdGlvbnMgYW5kIHByb3BzIHBhc3NlZCBkaXJlY3RseSB0byByZWFjdC1wb3BwZXIncyBQb3BwZXIgY29tcG9uZW50LlxuICAgKi9cbiAgcG9wcGVyQ29uZmlnOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgYG9uSGlkZWAgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogU3BlY2lmeSBldmVudCBmb3IgdG9nZ2xpbmcgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlRXZlbnQ6IF9Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHQucHJvcFR5cGVzLmV2ZW50LFxuXG4gIC8qKlxuICAgKiBBIENhbGxiYWNrIGZpcmVkIGJ5IHRoZSBPdmVybGF5IHdoZW4gaXQgd2lzaGVzIHRvIGJlIGhpZGRlbi5cbiAgICpcbiAgICogX19yZXF1aXJlZF9fIHdoZW4gYHJvb3RDbG9zZWAgaXMgYHRydWVgLlxuICAgKlxuICAgKiBAdHlwZSBmdW5jXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZShwcm9wcykge1xuICAgIHZhciBwcm9wVHlwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jO1xuXG4gICAgaWYgKHByb3BzLnJvb3RDbG9zZSkge1xuICAgICAgcHJvcFR5cGUgPSBwcm9wVHlwZS5pc1JlcXVpcmVkO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wVHlwZS5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cEAyLjAuMGAgYDxUcmFuc2l0aW9uLz5gIGNvbXBvbmVudFxuICAgKiB1c2VkIHRvIGFuaW1hdGUgdGhlIG92ZXJsYXkgYXMgaXQgY2hhbmdlcyB2aXNpYmlsaXR5LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogX2VsZW1lbnRUeXBlLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBpblxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBPdmVybGF5IHRyYW5zaXRpb25zIG91dFxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE92ZXJsYXkgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgT3ZlcmxheSBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59KTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9mb3J3YXJkUmVmLmRlZmF1bHQpKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9XYWl0Rm9yQ29udGFpbmVyLmRlZmF1bHQsIHtcbiAgICBjb250YWluZXI6IHByb3BzLmNvbnRhaW5lclxuICB9LCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoT3ZlcmxheSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyXG4gICAgfSkpO1xuICB9KTtcbn0sIHtcbiAgZGlzcGxheU5hbWU6ICd3aXRoQ29udGFpbmVyKE92ZXJsYXkpJ1xufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeSgpKSA6XG5cdFx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddID8gZGVmaW5lKGZhY3RvcnkoKSkgOlxuXHRcdFx0KHdpbmRvd1snc3R5bGlzUnVsZVNoZWV0J10gPSBmYWN0b3J5KCkpXG59KGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCdcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluc2VydFJ1bGUpIHtcblx0XHR2YXIgZGVsaW1pdGVyID0gJy8qfCovJ1xuXHRcdHZhciBuZWVkbGUgPSBkZWxpbWl0ZXIrJ30nXG5cblx0XHRmdW5jdGlvbiB0b1NoZWV0IChibG9jaykge1xuXHRcdFx0aWYgKGJsb2NrKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGluc2VydFJ1bGUoYmxvY2sgKyAnfScpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJ1bGVTaGVldCAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuXHRcdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRcdC8vIHByb3BlcnR5XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyBAaW1wb3J0XG5cdFx0XHRcdFx0aWYgKGRlcHRoID09PSAwICYmIGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gNjQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShjb250ZW50Kyc7JyksICcnXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gc2VsZWN0b3Jcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGlmIChucyA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgZGVsaW1pdGVyXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gYXQtcnVsZVxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0c3dpdGNoIChucykge1xuXHRcdFx0XHRcdFx0Ly8gQGZvbnQtZmFjZSwgQHBhZ2Vcblx0XHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0Y2FzZSAxMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKHNlbGVjdG9yc1swXStjb250ZW50KSwgJydcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIC0yOlxuXHRcdFx0XHRcdGNvbnRlbnQuc3BsaXQobmVlZGxlKS5mb3JFYWNoKHRvU2hlZXQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KSlcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gbXVybXVyaGFzaDIgdmlhIGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qcy9ibG9iL21hc3Rlci9tdXJtdXJoYXNoMl9nYy5qc1xuZnVuY3Rpb24gbXVybXVyaGFzaDJfMzJfZ2Moc3RyKSB7XG4gIHZhciBsID0gc3RyLmxlbmd0aCxcbiAgICAgIGggPSBsIF4gbCxcbiAgICAgIGkgPSAwLFxuICAgICAgaztcblxuICB3aGlsZSAobCA+PSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPSAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoayA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuICAgIGsgXj0gayA+Pj4gMjQ7XG4gICAgayA9IChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChrID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gICAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNikgXiBrO1xuICAgIGwgLT0gNDtcbiAgICArK2k7XG4gIH1cblxuICBzd2l0Y2ggKGwpIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPSAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoaCA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuICB9XG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gIGggXj0gaCA+Pj4gMTU7XG4gIHJldHVybiAoaCA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtdXJtdXJoYXNoMl8zMl9nYztcbiIsImZ1bmN0aW9uIHN0eWxpc19taW4gKFcpIHtcbiAgZnVuY3Rpb24gTShkLCBjLCBlLCBoLCBhKSB7XG4gICAgZm9yICh2YXIgbSA9IDAsIGIgPSAwLCB2ID0gMCwgbiA9IDAsIHEsIGcsIHggPSAwLCBLID0gMCwgaywgdSA9IGsgPSBxID0gMCwgbCA9IDAsIHIgPSAwLCBJID0gMCwgdCA9IDAsIEIgPSBlLmxlbmd0aCwgSiA9IEIgLSAxLCB5LCBmID0gJycsIHAgPSAnJywgRiA9ICcnLCBHID0gJycsIEM7IGwgPCBCOykge1xuICAgICAgZyA9IGUuY2hhckNvZGVBdChsKTtcbiAgICAgIGwgPT09IEogJiYgMCAhPT0gYiArIG4gKyB2ICsgbSAmJiAoMCAhPT0gYiAmJiAoZyA9IDQ3ID09PSBiID8gMTAgOiA0NyksIG4gPSB2ID0gbSA9IDAsIEIrKywgSisrKTtcblxuICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgaWYgKGwgPT09IEogJiYgKDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSksIDAgPCBmLnRyaW0oKS5sZW5ndGgpKSB7XG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZiArPSBlLmNoYXJBdChsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnID0gNTk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGYgPSBmLnRyaW0oKTtcbiAgICAgICAgICAgIHEgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBrID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytsOyBsIDwgQjspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICAgICAgay0tO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodSA9IGwgKyAxOyB1IDwgSjsgKyt1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jaGFyQ29kZUF0KHUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0MiA9PT0gZyAmJiA0MiA9PT0gZS5jaGFyQ29kZUF0KHUgLSAxKSAmJiBsICsgMiAhPT0gdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0NyA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBsKysgPCBKICYmIGUuY2hhckNvZGVBdChsKSAhPT0gZzspIHtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKDAgPT09IGspIGJyZWFrO1xuICAgICAgICAgICAgICBsKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGsgPSBlLnN1YnN0cmluZyh0LCBsKTtcbiAgICAgICAgICAgIDAgPT09IHEgJiYgKHEgPSAoZiA9IGYucmVwbGFjZShjYSwgJycpLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSk7XG4gICAgICAgICAgICAgICAgZyA9IGYuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgciA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByID0gTztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrID0gTShjLCByLCBrLCBnLCBhICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IGsubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBBICYmIChyID0gWChPLCBmLCBJKSwgQyA9IEgoMywgaywgciwgYywgRCwgeiwgdCwgZywgYSwgaCksIGYgPSByLmpvaW4oJycpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHQgPSAoayA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChnID0gMCwgayA9ICcnKSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPCB0KSBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGRhLCBlYSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShmYSwgJyQxICQyJyk7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgayA9IDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKCdAJyArIGssIDMpID8gJ0Atd2Via2l0LScgKyBrICsgJ0AnICsgayA6ICdAJyArIGs7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArIGssIDExMiA9PT0gaCAmJiAoayA9IChwICs9IGssICcnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGsgPSAnJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIFgoYywgZiwgSSksIGssIGgsIGEgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRiArPSBrO1xuICAgICAgICAgICAgayA9IEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZiA9ICgwIDwgciA/IGYucmVwbGFjZShOLCAnJykgOiBmKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoMSA8ICh0ID0gZi5sZW5ndGgpKSBzd2l0Y2ggKDAgPT09IHUgJiYgKHEgPSBmLmNoYXJDb2RlQXQoMCksIDQ1ID09PSBxIHx8IDk2IDwgcSAmJiAxMjMgPiBxKSAmJiAodCA9IChmID0gZi5yZXBsYWNlKCcgJywgJzonKSkubGVuZ3RoKSwgMCA8IEEgJiYgdm9pZCAwICE9PSAoQyA9IEgoMSwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpKSAmJiAwID09PSAodCA9IChmID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGYgPSAnXFx4MDBcXHgwMCcpLCBxID0gZi5jaGFyQ29kZUF0KDApLCBnID0gZi5jaGFyQ29kZUF0KDEpLCBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIGlmICgxMDUgPT09IGcgfHwgOTkgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgIEcgKz0gZiArIGUuY2hhckF0KGwpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgNTggIT09IGYuY2hhckNvZGVBdCh0IC0gMSkgJiYgKHAgKz0gUChmLCBxLCBnLCBmLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIDQ3ID09PSBiID8gYiA9IDAgOiAwID09PSAxICsgcSAmJiAxMDcgIT09IGggJiYgMCA8IGYubGVuZ3RoICYmIChyID0gMSwgZiArPSAnXFx4MDAnKTtcbiAgICAgICAgICAwIDwgQSAqIFkgJiYgSCgwLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCk7XG4gICAgICAgICAgeiA9IDE7XG4gICAgICAgICAgRCsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgICAgICB6Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB6Kys7XG4gICAgICAgICAgeSA9IGUuY2hhckF0KGwpO1xuXG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIG0gKyBiKSBzd2l0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICB5ID0gJyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAzMiAhPT0gZyAmJiAoeSA9ICcgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcMCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFxmJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXHYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIChyID0gSSA9IDEsIHkgPSAnXFxmJyArIHkpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0gKyBFICYmIDAgPCB1KSBzd2l0Y2ggKGwgLSB1KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB4ICYmIDU4ID09PSBlLmNoYXJDb2RlQXQobCAtIDMpICYmIChFID0geCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEsgJiYgKEUgPSBLKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmICh1ID0gbCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICYmIChyID0gMSwgeSArPSAnXFxyJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgMCA9PT0gYiAmJiAobiA9IG4gPT09IGcgPyAwIDogMCA9PT0gbiA/IGcgOiBuKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtKys7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkzOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbS0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIHYtLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0pIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcSkgc3dpdGNoICgyICogeCArIDMgKiBLKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDUzMzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHEgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2Kys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSArIHUgKyBrICYmIChrID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IG4gKyBtICsgdikpIHN3aXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIGcgKyAzICogZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBiID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IGwsIGIgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IGcgJiYgNDIgPT09IHggJiYgdCArIDIgIT09IGwgJiYgKDMzID09PSBlLmNoYXJDb2RlQXQodCArIDIpICYmIChwICs9IGUuc3Vic3RyaW5nKHQsIGwgKyAxKSksIHkgPSAnJywgYiA9IDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgMCA9PT0gYiAmJiAoZiArPSB5KTtcbiAgICAgIH1cblxuICAgICAgSyA9IHg7XG4gICAgICB4ID0gZztcbiAgICAgIGwrKztcbiAgICB9XG5cbiAgICB0ID0gcC5sZW5ndGg7XG5cbiAgICBpZiAoMCA8IHQpIHtcbiAgICAgIHIgPSBjO1xuICAgICAgaWYgKDAgPCBBICYmIChDID0gSCgyLCBwLCByLCBkLCBELCB6LCB0LCBoLCBhLCBoKSwgdm9pZCAwICE9PSBDICYmIDAgPT09IChwID0gQykubGVuZ3RoKSkgcmV0dXJuIEcgKyBwICsgRjtcbiAgICAgIHAgPSByLmpvaW4oJywnKSArICd7JyArIHAgKyAnfSc7XG5cbiAgICAgIGlmICgwICE9PSB3ICogRSkge1xuICAgICAgICAyICE9PSB3IHx8IEwocCwgMikgfHwgKEUgPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEUpIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoaGEsICc6LW1vei0kMScpICsgcDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTI6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKFEsICc6Oi13ZWJraXQtaW5wdXQtJDEnKSArIHAucmVwbGFjZShRLCAnOjotbW96LSQxJykgKyBwLnJlcGxhY2UoUSwgJzotbXMtaW5wdXQtJDEnKSArIHA7XG4gICAgICAgIH1cblxuICAgICAgICBFID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRyArIHAgKyBGO1xuICB9XG5cbiAgZnVuY3Rpb24gWChkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLnRyaW0oKS5zcGxpdChpYSk7XG4gICAgYyA9IGg7XG4gICAgdmFyIGEgPSBoLmxlbmd0aCxcbiAgICAgICAgbSA9IGQubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBiID0gMDtcblxuICAgICAgICBmb3IgKGQgPSAwID09PSBtID8gJycgOiBkWzBdICsgJyAnOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgY1tiXSA9IFooZCwgY1tiXSwgZSwgbSkudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciB2ID0gYiA9IDA7XG5cbiAgICAgICAgZm9yIChjID0gW107IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG07ICsrbikge1xuICAgICAgICAgICAgY1t2KytdID0gWihkW25dICsgJyAnLCBoW2JdLCBlLCBtKS50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFooZCwgYywgZSkge1xuICAgIHZhciBoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gaCAmJiAoaCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChoKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICByZXR1cm4gYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHJldHVybiBkLnRyaW0oKSArIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoMCA8IDEgKiBlICYmIDAgPCBjLmluZGV4T2YoJ1xcZicpKSByZXR1cm4gYy5yZXBsYWNlKEYsICg1OCA9PT0gZC5jaGFyQ29kZUF0KDApID8gJycgOiAnJDEnKSArIGQudHJpbSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZCArIGM7XG4gIH1cblxuICBmdW5jdGlvbiBQKGQsIGMsIGUsIGgpIHtcbiAgICB2YXIgYSA9IGQgKyAnOycsXG4gICAgICAgIG0gPSAyICogYyArIDMgKiBlICsgNCAqIGg7XG5cbiAgICBpZiAoOTQ0ID09PSBtKSB7XG4gICAgICBkID0gYS5pbmRleE9mKCc6JywgOSkgKyAxO1xuICAgICAgdmFyIGIgPSBhLnN1YnN0cmluZyhkLCBhLmxlbmd0aCAtIDEpLnRyaW0oKTtcbiAgICAgIGIgPSBhLnN1YnN0cmluZygwLCBkKS50cmltKCkgKyBiICsgJzsnO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKGIsIDEpID8gJy13ZWJraXQtJyArIGIgKyBiIDogYjtcbiAgICB9XG5cbiAgICBpZiAoMCA9PT0gdyB8fCAyID09PSB3ICYmICFMKGEsIDEpKSByZXR1cm4gYTtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAxMDE1OlxuICAgICAgICByZXR1cm4gOTcgPT09IGEuY2hhckNvZGVBdCgxMCkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NjM6XG4gICAgICAgIHJldHVybiAxMTAgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMTAwOTpcbiAgICAgICAgaWYgKDEwMCAhPT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5Njk6XG4gICAgICBjYXNlIDk0MjpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDE5OlxuICAgICAgY2FzZSA5ODM6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgODgzOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg4KSkgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcbiAgICAgICAgaWYgKDAgPCBhLmluZGV4T2YoJ2ltYWdlLXNldCgnLCAxMSkpIHJldHVybiBhLnJlcGxhY2UoamEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMjpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNCkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDUpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LScgKyBhLnJlcGxhY2UoJy1ncm93JywgJycpICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2dyb3cnLCAncG9zaXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMjM6XG4gICAgICAgIGlmICg5OSAhPT0gYS5jaGFyQ29kZUF0KDgpKSBicmVhaztcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKGEuaW5kZXhPZignOicsIDE1KSkucmVwbGFjZSgnZmxleC0nLCAnJykucmVwbGFjZSgnc3BhY2UtYmV0d2VlbicsICdqdXN0aWZ5Jyk7XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtcGFjaycgKyBiICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtcGFjaycgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDA1OlxuICAgICAgICByZXR1cm4ga2EudGVzdChhKSA/IGEucmVwbGFjZShhYSwgJzotd2Via2l0LScpICsgYS5yZXBsYWNlKGFhLCAnOi1tb3otJykgKyBhIDogYTtcblxuICAgICAgY2FzZSAxZTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBjID0gYi5pbmRleE9mKCctJykgKyAxO1xuXG4gICAgICAgIHN3aXRjaCAoYi5jaGFyQ29kZUF0KDApICsgYi5jaGFyQ29kZUF0KGMpKSB7XG4gICAgICAgICAgY2FzZSAyMjY6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0YicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIzMjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiLXJsJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAnbHInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoJ3N0aWNreScsIDkpKSBicmVhaztcblxuICAgICAgY2FzZSA5NzU6XG4gICAgICAgIGMgPSAoYSA9IGQpLmxlbmd0aCAtIDEwO1xuICAgICAgICBiID0gKDMzID09PSBhLmNoYXJDb2RlQXQoYykgPyBhLnN1YnN0cmluZygwLCBjKSA6IGEpLnN1YnN0cmluZyhkLmluZGV4T2YoJzonLCA3KSArIDEpLnRyaW0oKTtcblxuICAgICAgICBzd2l0Y2ggKG0gPSBiLmNoYXJDb2RlQXQoMCkgKyAoYi5jaGFyQ29kZUF0KDcpIHwgMCkpIHtcbiAgICAgICAgICBjYXNlIDIwMzpcbiAgICAgICAgICAgIGlmICgxMTEgPiBiLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjA3OlxuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgKDEwMiA8IG0gPyAnaW5saW5lLScgOiAnJykgKyAnYm94JykgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYS5yZXBsYWNlKGIsICctbXMtJyArIGIgKyAnYm94JykgKyAnOycgKyBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGEgKyAnOyc7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKCctaXRlbXMnLCAnJyksICctd2Via2l0LScgKyBhICsgJy13ZWJraXQtYm94LScgKyBiICsgJy1tcy1mbGV4LScgKyBiICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWl0ZW0tJyArIGEucmVwbGFjZShiYSwgJycpICsgYTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtbGluZS1wYWNrJyArIGEucmVwbGFjZSgnYWxpZ24tY29udGVudCcsICcnKS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3MzpcbiAgICAgIGNhc2UgOTg5OlxuICAgICAgICBpZiAoNDUgIT09IGEuY2hhckNvZGVBdCgzKSB8fCAxMjIgPT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMxOlxuICAgICAgY2FzZSA5NTM6XG4gICAgICAgIGlmICghMCA9PT0gbGEudGVzdChkKSkgcmV0dXJuIDExNSA9PT0gKGIgPSBkLnN1YnN0cmluZyhkLmluZGV4T2YoJzonKSArIDEpKS5jaGFyQ29kZUF0KDApID8gUChkLnJlcGxhY2UoJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgYywgZSwgaCkucmVwbGFjZSgnOmZpbGwtYXZhaWxhYmxlJywgJzpzdHJldGNoJykgOiBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgYS5yZXBsYWNlKGIsICctbW96LScgKyBiLnJlcGxhY2UoJ2ZpbGwtJywgJycpKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSAnLXdlYmtpdC0nICsgYSArICgxMDIgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctbXMtJyArIGEgOiAnJykgKyBhLCAyMTEgPT09IGUgKyBoICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKCd0cmFuc2Zvcm0nLCAxMCkpIHJldHVybiBhLnN1YnN0cmluZygwLCBhLmluZGV4T2YoJzsnLCAyNykgKyAxKS5yZXBsYWNlKG1hLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gTChkLCBjKSB7XG4gICAgdmFyIGUgPSBkLmluZGV4T2YoMSA9PT0gYyA/ICc6JyA6ICd7JyksXG4gICAgICAgIGggPSBkLnN1YnN0cmluZygwLCAzICE9PSBjID8gZSA6IDEwKTtcbiAgICBlID0gZC5zdWJzdHJpbmcoZSArIDEsIGQubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIFIoMiAhPT0gYyA/IGggOiBoLnJlcGxhY2UobmEsICckMScpLCBlLCBjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhKGQsIGMpIHtcbiAgICB2YXIgZSA9IFAoYywgYy5jaGFyQ29kZUF0KDApLCBjLmNoYXJDb2RlQXQoMSksIGMuY2hhckNvZGVBdCgyKSk7XG4gICAgcmV0dXJuIGUgIT09IGMgKyAnOycgPyBlLnJlcGxhY2Uob2EsICcgb3IgKCQxKScpLnN1YnN0cmluZyg0KSA6ICcoJyArIGMgKyAnKSc7XG4gIH1cblxuICBmdW5jdGlvbiBIKGQsIGMsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpIHtcbiAgICBmb3IgKHZhciBnID0gMCwgeCA9IGMsIHc7IGcgPCBBOyArK2cpIHtcbiAgICAgIHN3aXRjaCAodyA9IFNbZ10uY2FsbChCLCBkLCB4LCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSkge1xuICAgICAgICBjYXNlIHZvaWQgMDpcbiAgICAgICAgY2FzZSAhMTpcbiAgICAgICAgY2FzZSAhMDpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeCA9IHc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHggIT09IGMpIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gVChkKSB7XG4gICAgc3dpdGNoIChkKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgQSA9IFMubGVuZ3RoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN3aXRjaCAoZC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBGdW5jdGlvbjpcbiAgICAgICAgICAgIFNbQSsrXSA9IGQ7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICAgIFkgPSAhIWQgfCAwO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IGhhc2hTdHJpbmcgZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgU3R5bGlzIGZyb20gJ0BlbW90aW9uL3N0eWxpcyc7XG5pbXBvcnQgc3R5bGlzUnVsZVNoZWV0IGZyb20gJ3N0eWxpcy1ydWxlLXNoZWV0JztcblxudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmIGtleS5jaGFyQ29kZUF0KDEpICE9PSA0NSAmJiAvLyBjdXN0b20gcHJvcGVydGllc1xuICAhaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyhhdHRyfGNhbGN8Y291bnRlcnM/fHVybClcXCgvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnY291bnRlcicsICdvcGVuLXF1b3RlJywgJ2Nsb3NlLXF1b3RlJywgJ25vLW9wZW4tcXVvdGUnLCAnbm8tY2xvc2UtcXVvdGUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuXG4gIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgY29udGVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEgJiYgIWNvbnRlbnRWYWx1ZVBhdHRlcm4udGVzdCh2YWx1ZSkgJiYgKHZhbHVlLmNoYXJBdCgwKSAhPT0gdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpIHx8IHZhbHVlLmNoYXJBdCgwKSAhPT0gJ1wiJyAmJiB2YWx1ZS5jaGFyQXQoMCkgIT09IFwiJ1wiKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcbiAgfTtcbn1cblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Bhc3NpbmcgZnVuY3Rpb25zIHRvIGN4IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIEVtb3Rpb24uXFxuJyArICdQbGVhc2UgY2FsbCB0aGUgZnVuY3Rpb24gYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3guJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0b0FkZCA9IGNsYXNzbmFtZXMoW2FyZygpXSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG52YXIgaXNCcm93c2VyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLypcblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG4tICdwb2x5ZmlsbHMnIG9uIHNlcnZlciBzaWRlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ2dsYW1vci9saWIvc2hlZXQnXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KClcblxuc3R5bGVTaGVldC5pbmplY3QoKVxuLSAnaW5qZWN0cycgdGhlIHN0eWxlc2hlZXQgaW50byB0aGUgcGFnZSAob3IgaW50byBtZW1vcnkgaWYgb24gc2VydmVyKVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbi8vICRGbG93Rml4TWVcbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlU3R5bGVUYWcob3B0cykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0cy5rZXkgfHwgJycpO1xuXG4gIGlmIChvcHRzLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdHMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSkgLy8gJEZsb3dGaXhNZVxuICA7XG4gIChvcHRzLmNvbnRhaW5lciAhPT0gdW5kZWZpbmVkID8gb3B0cy5jb250YWluZXIgOiBkb2N1bWVudC5oZWFkKS5hcHBlbmRDaGlsZCh0YWcpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHRoaXMuaXNTcGVlZHkgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nOyAvLyB0aGUgYmlnIGRyYXdiYWNrIGhlcmUgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG5cbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5vcHRzID0gb3B0aW9ucztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5qZWN0ID0gZnVuY3Rpb24gaW5qZWN0KCkge1xuICAgIGlmICh0aGlzLmluamVjdGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscmVhZHkgaW5qZWN0ZWQhJyk7XG4gICAgfVxuXG4gICAgdGhpcy50YWdzWzBdID0gbWFrZVN0eWxlVGFnKHRoaXMub3B0cyk7XG4gICAgdGhpcy5pbmplY3RlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLnNwZWVkeSA9IGZ1bmN0aW9uIHNwZWVkeShib29sKSB7XG4gICAgaWYgKHRoaXMuY3RyICE9PSAwKSB7XG4gICAgICAvLyBjYW5ub3QgY2hhbmdlIHNwZWVkeSBtb2RlIGFmdGVyIGluc2VydGluZyBhbnkgcnVsZSB0byBzaGVldC4gRWl0aGVyIGNhbGwgc3BlZWR5KCR7Ym9vbH0pIGVhcmxpZXIgaW4geW91ciBhcHAsIG9yIGNhbGwgZmx1c2goKSBiZWZvcmUgc3BlZWR5KCR7Ym9vbH0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgY2hhbmdlIHNwZWVkeSBub3dcIik7XG4gICAgfVxuXG4gICAgdGhpcy5pc1NwZWVkeSA9ICEhYm9vbDtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUsIHNvdXJjZU1hcCkge1xuICAgIC8vIHRoaXMgaXMgdGhlIHVsdHJhZmFzdCB2ZXJzaW9uLCB3b3JrcyBhY3Jvc3MgYnJvd3NlcnNcbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdpbGxlZ2FsIHJ1bGUnLCBydWxlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF90YWcgPSBtYWtlU3R5bGVUYWcodGhpcy5vcHRzKTtcblxuICAgICAgdGhpcy50YWdzLnB1c2goX3RhZyk7XG5cbiAgICAgIF90YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSArIChzb3VyY2VNYXAgfHwgJycpKSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdHIrKztcblxuICAgIGlmICh0aGlzLmN0ciAlIDY1MDAwID09PSAwKSB7XG4gICAgICB0aGlzLnRhZ3MucHVzaChtYWtlU3R5bGVUYWcodGhpcy5vcHRzKSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7IC8vIHRvZG8gLSBsb29rIGZvciByZW1uYW50cyBpbiBkb2N1bWVudC5zdHlsZVNoZWV0c1xuXG4gICAgdGhpcy5pbmplY3RlZCA9IGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG5mdW5jdGlvbiBjcmVhdGVFbW90aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKGNvbnRleHQuX19TRUNSRVRfRU1PVElPTl9fICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY29udGV4dC5fX1NFQ1JFVF9FTU9USU9OX187XG4gIH1cblxuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSB8fCAnY3NzJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudDtcblxuICBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICBjdXJyZW50ICs9IHJ1bGU7XG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBzaGVldC5pbnNlcnQocnVsZSwgY3VycmVudFNvdXJjZU1hcCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGlvblBsdWdpbiA9IHN0eWxpc1J1bGVTaGVldChpbnNlcnRSdWxlKTtcbiAgdmFyIHN0eWxpc09wdGlvbnM7XG5cbiAgaWYgKG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXNPcHRpb25zID0ge1xuICAgICAgcHJlZml4OiBvcHRpb25zLnByZWZpeFxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGVzID0ge1xuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydGVkOiB7fSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBrZXk6IGtleVxuICB9O1xuICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldChvcHRpb25zKTtcblxuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgLy8g8J+agFxuICAgIHNoZWV0LmluamVjdCgpO1xuICB9XG5cbiAgdmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoc3R5bGlzT3B0aW9ucyk7XG4gIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKShpbnNlcnRpb25QbHVnaW4pO1xuICB2YXIgY3VycmVudFNvdXJjZU1hcCA9ICcnO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24oaW50ZXJwb2xhdGlvbiwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbikge1xuICAgIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IGludGVycG9sYXRpb24udG9TdHJpbmcoKTtcblxuICAgICAgICAgIGlmIChzZWxlY3RvciA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcyA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnRlcnBvbGF0aW5nIGZ1bmN0aW9ucyBpbiBjc3MgY2FsbHMgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgRW1vdGlvbi5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCB0aGlzID09PSB1bmRlZmluZWQgPyBpbnRlcnBvbGF0aW9uKCkgOiAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGludGVycG9sYXRpb24odGhpcy5tZXJnZWRQcm9wcywgdGhpcy5jb250ZXh0KSwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbik7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0LmNhbGwodGhpcywgaW50ZXJwb2xhdGlvbik7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciBjYWNoZWQgPSBjYWNoZXMucmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgICAgICAgcmV0dXJuIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24gPT09IGZhbHNlICYmIGNhY2hlZCAhPT0gdW5kZWZpbmVkID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbiAgICB9XG4gIH1cblxuICB2YXIgb2JqZWN0VG9TdHJpbmdDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChvYmopIHtcbiAgICBpZiAob2JqZWN0VG9TdHJpbmdDYWNoZS5oYXMob2JqKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nQ2FjaGUuZ2V0KG9iaik7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9ICcnO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGludGVycG9sYXRpb24pIHtcbiAgICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uLCBmYWxzZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAoY2FjaGVzLnJlZ2lzdGVyZWRbb2JqW2tleV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBrZXkgKyBcIntcIiArIGNhY2hlcy5yZWdpc3RlcmVkW29ialtrZXldXSArIFwifVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIG9ialtrZXldKSArIFwiO1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGJhYmVsLXBsdWdpbi1lbW90aW9uLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ialtrZXldKSAmJiB0eXBlb2Ygb2JqW2tleV1bMF0gPT09ICdzdHJpbmcnICYmIGNhY2hlcy5yZWdpc3RlcmVkW29ialtrZXldWzBdXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYmpba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBrZXkgKyBcIntcIiArIGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBvYmpba2V5XSwgZmFsc2UpICsgXCJ9XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG5cbiAgICBvYmplY3RUb1N0cmluZ0NhY2hlLnNldChvYmosIHN0cmluZyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuXG4gIHZhciBuYW1lO1xuICB2YXIgc3R5bGVzV2l0aExhYmVsO1xuICB2YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyo7L2c7XG5cbiAgdmFyIGNyZWF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzTmFtZShzdHlsZXMsIGlkZW50aWZpZXJOYW1lKSB7XG4gICAgcmV0dXJuIGhhc2hTdHJpbmcoc3R5bGVzICsgaWRlbnRpZmllck5hbWUpICsgaWRlbnRpZmllck5hbWU7XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgb2xkQ3JlYXRlQ2xhc3NOYW1lID0gY3JlYXRlQ2xhc3NOYW1lO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nVXJsUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xuXG4gICAgY3JlYXRlQ2xhc3NOYW1lID0gZnVuY3Rpb24gY3JlYXRlQ2xhc3NOYW1lKHN0eWxlcywgaWRlbnRpZmllck5hbWUpIHtcbiAgICAgIHJldHVybiBvbGRDcmVhdGVDbGFzc05hbWUoc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwcGluZ1VybFBhdHRlcm4sIGZ1bmN0aW9uIChzb3VyY2VNYXApIHtcbiAgICAgICAgY3VycmVudFNvdXJjZU1hcCA9IHNvdXJjZU1hcDtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSksIGlkZW50aWZpZXJOYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNyZWF0ZVN0eWxlcyA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlcyhzdHJpbmdzKSB7XG4gICAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICAgIHZhciBzdHlsZXMgPSAnJztcbiAgICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcblxuICAgIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBzdHJpbmdzLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaW50ZXJwb2xhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbiwgaSkge1xuICAgICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uLCBzdHlsZXMuY2hhckNvZGVBdChzdHlsZXMubGVuZ3RoIC0gMSkgPT09IDQ2IC8vIC5cbiAgICAgICk7XG5cbiAgICAgIGlmIChzdHJpbmdNb2RlID09PSB0cnVlICYmIHN0cmluZ3NbaSArIDFdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaSArIDFdO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHN0eWxlc1dpdGhMYWJlbCA9IHN0eWxlcztcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShsYWJlbFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCwgcDEpIHtcbiAgICAgIGlkZW50aWZpZXJOYW1lICs9IFwiLVwiICsgcDE7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gICAgbmFtZSA9IGNyZWF0ZUNsYXNzTmFtZShzdHlsZXMsIGlkZW50aWZpZXJOYW1lKTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG9sZFN0eWxpcyA9IHN0eWxpcztcblxuICAgIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzZWxlY3Rvciwgc3R5bGVzKSB7XG4gICAgICBvbGRTdHlsaXMoc2VsZWN0b3IsIHN0eWxlcyk7XG4gICAgICBjdXJyZW50U291cmNlTWFwID0gJyc7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydChzY29wZSwgc3R5bGVzKSB7XG4gICAgaWYgKGNhY2hlcy5pbnNlcnRlZFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50ID0gJyc7XG4gICAgICBzdHlsaXMoc2NvcGUsIHN0eWxlcyk7XG4gICAgICBjYWNoZXMuaW5zZXJ0ZWRbbmFtZV0gPSBjdXJyZW50O1xuICAgIH1cbiAgfVxuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHZhciBzZWxlY3RvciA9IGtleSArIFwiLVwiICsgbmFtZTtcblxuICAgIGlmIChjYWNoZXMucmVnaXN0ZXJlZFtzZWxlY3Rvcl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVzLnJlZ2lzdGVyZWRbc2VsZWN0b3JdID0gc3R5bGVzV2l0aExhYmVsO1xuICAgIH1cblxuICAgIGluc2VydChcIi5cIiArIHNlbGVjdG9yLCBzdHlsZXMpO1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfTtcblxuICB2YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICAgIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgYW5pbWF0aW9uID0gXCJhbmltYXRpb24tXCIgKyBuYW1lO1xuICAgIGluc2VydCgnJywgXCJAa2V5ZnJhbWVzIFwiICsgYW5pbWF0aW9uICsgXCJ7XCIgKyBzdHlsZXMgKyBcIn1cIik7XG4gICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgfTtcblxuICB2YXIgaW5qZWN0R2xvYmFsID0gZnVuY3Rpb24gaW5qZWN0R2xvYmFsKCkge1xuICAgIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpbnNlcnQoJycsIHN0eWxlcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gICAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICAgIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIGlmIChjYWNoZXMucmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlKGNsYXNzTmFtZSwgc291cmNlTWFwKSB7XG4gICAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gICAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMsIHNvdXJjZU1hcCk7XG4gIH1cblxuICBmdW5jdGlvbiBjeCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzTmFtZXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGNsYXNzTmFtZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2xhc3NuYW1lcyhjbGFzc05hbWVzKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoeWRyYXRlU2luZ2xlSWQoaWQpIHtcbiAgICBjYWNoZXMuaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUoaWRzKSB7XG4gICAgaWRzLmZvckVhY2goaHlkcmF0ZVNpbmdsZUlkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHNoZWV0LmZsdXNoKCk7XG4gICAgICBzaGVldC5pbmplY3QoKTtcbiAgICB9XG5cbiAgICBjYWNoZXMuaW5zZXJ0ZWQgPSB7fTtcbiAgICBjYWNoZXMucmVnaXN0ZXJlZCA9IHt9O1xuICB9XG5cbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHZhciBjaHVua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZW1vdGlvbi1cIiArIGtleSArIFwiXVwiKTtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGNodW5rcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHNoZWV0LnRhZ3NbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgc2hlZXQudGFnc1swXSk7IC8vICRGbG93Rml4TWVcblxuICAgICAgbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb24tXCIgKyBrZXkpLnNwbGl0KCcgJykuZm9yRWFjaChoeWRyYXRlU2luZ2xlSWQpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGVtb3Rpb24gPSB7XG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGUsXG4gICAgY3g6IGN4LFxuICAgIG1lcmdlOiBtZXJnZSxcbiAgICBnZXRSZWdpc3RlcmVkU3R5bGVzOiBnZXRSZWdpc3RlcmVkU3R5bGVzLFxuICAgIGluamVjdEdsb2JhbDogaW5qZWN0R2xvYmFsLFxuICAgIGtleWZyYW1lczoga2V5ZnJhbWVzLFxuICAgIGNzczogY3NzLFxuICAgIHNoZWV0OiBzaGVldCxcbiAgICBjYWNoZXM6IGNhY2hlc1xuICB9O1xuICBjb250ZXh0Ll9fU0VDUkVUX0VNT1RJT05fXyA9IGVtb3Rpb247XG4gIHJldHVybiBlbW90aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVFbW90aW9uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBSZWFjdE1haW4gZnJvbSBcIi4uL3JlYWN0L2NvbXBvbmVudHMvbWFpblwiO1xuXG5pbXBvcnQgJ2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAuY3NzJztcbmltcG9ydCBcIi4uL3N0eWxlL2FwcGxpY2F0aW9uLnNjc3NcIjtcblxuXG4vLyByZWFjdFxuY29uc3Qgcm9vdEVsZW0gPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJyNyb290Jyk7XG5jb25zdCByZWFjdE1haW5FbGVtID0gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdE1haW4sIHt9KTtcblJlYWN0RE9NLnJlbmRlcihyZWFjdE1haW5FbGVtLCByb290RWxlbSApO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LEI9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBhYShhLGIsZSxjLGQsZyxoLGYpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtlLGMsZCxnLGgsZl0sbT0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbbSsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKyllKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTthYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfXZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxGPXt9O1xuZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1GO3RoaXMudXBkYXRlcj1lfHxFfUcucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ry5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0QoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtHLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBIKCl7fUgucHJvdG90eXBlPUcucHJvdG90eXBlO2Z1bmN0aW9uIEkoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Rjt0aGlzLnVwZGF0ZXI9ZXx8RX12YXIgSj1JLnByb3RvdHlwZT1uZXcgSDtcbkouY29uc3RydWN0b3I9STtrKEosRy5wcm90b3R5cGUpO0ouaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEs9e2N1cnJlbnQ6bnVsbCxjdXJyZW50RGlzcGF0Y2hlcjpudWxsfSxMPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTT17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTihhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpTC5jYWxsKGIsYykmJiFNLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gYmEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsZSxjKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1UoZCxoKTtnKz1UKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGgrKyksZys9VChkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixlKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsZSl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gY2EoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZGEoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1iYShhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2UpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxjLGQpO1YoYSxkYSxiKTtTKGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixlKTtWKGEsY2EsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TyhhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RyxQdXJlQ29tcG9uZW50OkksY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkIsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6QSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnosY3JlYXRlRWxlbWVudDpOLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/RChcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO1xuaWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilMLmNhbGwoYixjKSYmIU0uaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1OLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tyx2ZXJzaW9uOlwiMTYuNi4zXCIsXG5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Syxhc3NpZ246a319O1gudW5zdGFibGVfQ29uY3VycmVudE1vZGU9eDtYLnVuc3RhYmxlX1Byb2ZpbGVyPXU7dmFyIFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksYmE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBrPVtjLGQsZSxmLGcsaF0sbD0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGtbbCsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp0KFwiMjI3XCIpO2Z1bmN0aW9uIGRhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGVhPSExLGZhPW51bGwsaGE9ITEsaWE9bnVsbCxqYT17b25FcnJvcjpmdW5jdGlvbihhKXtlYT0hMDtmYT1hfX07ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2VhPSExO2ZhPW51bGw7ZGEuYXBwbHkoamEsYXJndW1lbnRzKX1mdW5jdGlvbiBsYShhLGIsYyxkLGUsZixnLGgsayl7a2EuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGVhKXtpZihlYSl7dmFyIGw9ZmE7ZWE9ITE7ZmE9bnVsbH1lbHNlIHQoXCIxOThcIiksbD12b2lkIDA7aGF8fChoYT0hMCxpYT1sKX19dmFyIG1hPW51bGwsbmE9e307XG5mdW5jdGlvbiBvYSgpe2lmKG1hKWZvcih2YXIgYSBpbiBuYSl7dmFyIGI9bmFbYV0sYz1tYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOnQoXCI5NlwiLGEpO2lmKCFwYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp0KFwiOTdcIixhKTtwYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3FhLmhhc093blByb3BlcnR5KGgpP3QoXCI5OVwiLGgpOnZvaWQgMDtxYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZyYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocmEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp0KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcmEoYSxiLGMpe3NhW2FdP3QoXCIxMDBcIixhKTp2b2lkIDA7c2FbYV09Yjt0YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBwYT1bXSxxYT17fSxzYT17fSx0YT17fSx1YT1udWxsLHZhPW51bGwsd2E9bnVsbDtmdW5jdGlvbiB4YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9d2EoYyk7bGEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB5YShhLGIpe251bGw9PWI/dChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB6YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQWE9bnVsbDtmdW5jdGlvbiBCYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspeGEoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmeGEoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe21hP3QoXCIxMDFcIik6dm9pZCAwO21hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO29hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtuYS5oYXNPd25Qcm9wZXJ0eShjKSYmbmFbY109PT1kfHwobmFbY10/dChcIjEwMlwiLGMpOnZvaWQgMCxuYVtjXT1kLGI9ITApfWImJm9hKCl9fTtcbmZ1bmN0aW9uIERhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dWEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIEVhKGEpe251bGwhPT1hJiYoQWE9eWEoQWEsYSkpO2E9QWE7QWE9bnVsbDtpZihhJiYoemEoYSxCYSksQWE/dChcIjk1XCIpOnZvaWQgMCxoYSkpdGhyb3cgYT1pYSxoYT0hMSxpYT1udWxsLGE7fXZhciBGYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxHYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0ZhLEhhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRmE7ZnVuY3Rpb24gSWEoYSl7aWYoYVtHYV0pcmV0dXJuIGFbR2FdO2Zvcig7IWFbR2FdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbR2FdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSmEoYSl7YT1hW0dhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gS2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3QoXCIzM1wiKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gYVtIYV18fG51bGx9ZnVuY3Rpb24gTWEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBOYShhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gT2EoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1NYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTmEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylOYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBQYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFFhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUGEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUmEoYSl7emEoYSxPYSl9dmFyIFNhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gVGEoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVWE9e2FuaW1hdGlvbmVuZDpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlRhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVmE9e30sV2E9e307XG5TYSYmKFdhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFVhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFVhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFVhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFVhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWGEoYSl7aWYoVmFbYV0pcmV0dXJuIFZhW2FdO2lmKCFVYVthXSlyZXR1cm4gYTt2YXIgYj1VYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBXYSlyZXR1cm4gVmFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBZYT1YYShcImFuaW1hdGlvbmVuZFwiKSxaYT1YYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSwkYT1YYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVhhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxlYj1udWxsLGZiPW51bGw7XG5mdW5jdGlvbiBnYigpe2lmKGZiKXJldHVybiBmYjt2YXIgYSxiPWViLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGZiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gaGIoKXtyZXR1cm4hMH1mdW5jdGlvbiBpYigpe3JldHVybiExfVxuZnVuY3Rpb24gQShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/aGI6aWI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1pYjtyZXR1cm4gdGhpc31cbm4oQS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1oYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1oYn0saXNQZXJzaXN0ZW50OmliLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWliO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7QS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5BLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2piKGMpO3JldHVybiBjfTtqYihBKTtmdW5jdGlvbiBrYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBsYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6dChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBqYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1rYjthLnJlbGVhc2U9bGJ9dmFyIG1iPUEuZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj1BLmV4dGVuZCh7ZGF0YTpudWxsfSksb2I9WzksMTMsMjcsMzJdLHBiPVNhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxxYj1udWxsO1NhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihxYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHJiPVNhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhcWIsc2I9U2EmJighcGJ8fHFiJiY4PHFiJiYxMT49cWIpLHRiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHViPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHZiPSExO1xuZnVuY3Rpb24gd2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1vYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHhiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHliPSExO2Z1bmN0aW9uIHpiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB4YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dmI9ITA7cmV0dXJuIHRiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXRiJiZ2Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBBYihhLGIpe2lmKHliKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFwYiYmd2IoYSxiKT8oYT1nYigpLGZiPWViPWNiPW51bGwseWI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHNiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBCYj17ZXZlbnRUeXBlczp1YixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYocGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT11Yi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT11Yi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9dWIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHliP3diKGEsYykmJihlPXViLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9dWIuY29tcG9zaXRpb25TdGFydCk7ZT8oc2ImJlwia29cIiE9PWMubG9jYWxlJiYoeWJ8fGUhPT11Yi5jb21wb3NpdGlvblN0YXJ0P2U9PT11Yi5jb21wb3NpdGlvbkVuZCYmeWImJihmPWdiKCkpOihjYj1kLGViPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LHliPVxuITApKSxlPW1iLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXhiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxSYShlKSxmPWUpOmY9bnVsbDsoYT1yYj96YihhLGMpOkFiKGEsYykpPyhiPW5iLmdldFBvb2xlZCh1Yi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUmEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQ2I9bnVsbCxEYj1udWxsLEViPW51bGw7ZnVuY3Rpb24gSGIoYSl7aWYoYT12YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIENiP3QoXCIyODBcIik6dm9pZCAwO3ZhciBiPXVhKGEuc3RhdGVOb2RlKTtDYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEliKGEpe0RiP0ViP0ViLnB1c2goYSk6RWI9W2FdOkRiPWF9ZnVuY3Rpb24gSmIoKXtpZihEYil7dmFyIGE9RGIsYj1FYjtFYj1EYj1udWxsO0hiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylIYihiW2FdKX19XG5mdW5jdGlvbiBLYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIExiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIE1iKCl7fXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe2lmKE5iKXJldHVybiBhKGIpO05iPSEwO3RyeXtyZXR1cm4gS2IoYSxiKX1maW5hbGx5e2lmKE5iPSExLG51bGwhPT1EYnx8bnVsbCE9PUViKU1iKCksSmIoKX19dmFyIFBiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFFiKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhUGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gUmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIFNiKGEpe2lmKCFTYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBUYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWIoYSl7dmFyIGI9VGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYihhKSl9ZnVuY3Rpb24gV2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgWGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsWWI9L14oLiopW1xcXFxcXC9dLyxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmI9RD9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2M9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGM9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2M9RD9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6XG42MDExMyxpYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGpjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsa2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGxjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1rYyYmYVtrY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIG1jKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgZmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgYWM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGI6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGljOnJldHVybiBtYyhhLnR5cGUpO2Nhc2UgamM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBtYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDA6Y2FzZSAxOmNhc2UgNTpjYXNlIDg6Y2FzZSAxMzp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2UsZT1tYyhhLnR5cGUpO3ZhciBmPW51bGw7YyYmKGY9bWMoYy50eXBlKSk7Yz1lO2U9XCJcIjtkP2U9XCIgKGF0IFwiK2QuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitkLmxpbmVOdW1iZXIrXCIpXCI6ZiYmKGU9XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIik7Zj1cIlxcbiAgICBpbiBcIisoY3x8XCJVbmtub3duXCIpK2U7YnJlYWsgYTtkZWZhdWx0OmY9XCJcIn1iKz1mO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgb2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHBjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscWM9e30scmM9e307XG5mdW5jdGlvbiBzYyhhKXtpZihwYy5jYWxsKHJjLGEpKXJldHVybiEwO2lmKHBjLmNhbGwocWMsYSkpcmV0dXJuITE7aWYob2MudGVzdChhKSlyZXR1cm4gcmNbYV09ITA7cWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gdGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB1YyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHx0YyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEUoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBGPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0ZbYl09bmV3IEUoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciB2Yz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHhjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLFxueGMpO0ZbYl09bmV3IEUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLHhjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLHhjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Ri50YWJJbmRleD1uZXcgRShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT1GLmhhc093blByb3BlcnR5KGIpP0ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fCh1YyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/c2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHpjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBBYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz16YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIENjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmeWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIERjKGEsYil7Q2MoYSxiKTt2YXIgYz16YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9FYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZFYyhhLGIudHlwZSx6YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEZjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEVjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgR2M9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gSGMoYSxiLGMpe2E9QS5nZXRQb29sZWQoR2MuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtJYihjKTtSYShhKTtyZXR1cm4gYX12YXIgSmM9bnVsbCxLYz1udWxsO2Z1bmN0aW9uIExjKGEpe0VhKGEpfVxuZnVuY3Rpb24gTWMoYSl7dmFyIGI9S2EoYSk7aWYoV2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gTmMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgT2M9ITE7U2EmJihPYz1TYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBQYygpe0pjJiYoSmMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUWMpLEtjPUpjPW51bGwpfWZ1bmN0aW9uIFFjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZNYyhLYykmJihhPUhjKEtjLGEsUmIoYSkpLE9iKExjLGEpKX1mdW5jdGlvbiBSYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oUGMoKSxKYz1iLEtjPWMsSmMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUWMpKTpcImJsdXJcIj09PWEmJlBjKCl9ZnVuY3Rpb24gU2MoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gTWMoS2MpfVxuZnVuY3Rpb24gVGMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBNYyhiKX1mdW5jdGlvbiBVYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBNYyhiKX1cbnZhciBWYz17ZXZlbnRUeXBlczpHYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOk9jLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9LYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9TmM6UWIoZSk/T2M/Zj1VYzooZj1TYyxnPVJjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1UYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gSGMoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZFYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxXYz1BLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksWGM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gWWMoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1YY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFpjKCl7cmV0dXJuIFljfVxudmFyICRjPTAsYWQ9MCxiZD0hMSxjZD0hMSxkZD1XYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9JGM7JGM9YS5zY3JlZW5YO3JldHVybiBiZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KGJkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9YWQ7YWQ9YS5zY3JlZW5ZO3JldHVybiBjZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KGNkPSEwLDApfX0pLGVkPWRkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxmZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sZ2Q9e2V2ZW50VHlwZXM6ZmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SWEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxrPXZvaWQgMCxsPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPWRkLGg9ZmQubW91c2VMZWF2ZSxrPWZkLm1vdXNlRW50ZXIsbD1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWVkLGg9ZmQucG9pbnRlckxlYXZlLGs9ZmQucG9pbnRlckVudGVyLGw9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkthKGYpO2U9bnVsbD09Yj9lOkthKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWwrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChrLGIsYyxkKTtjLnR5cGU9bCtcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2w9MDtmb3IoZz1iO2c7Zz1NYShnKSlsKys7Zz0wO2ZvcihrPWU7aztrPU1hKGspKWcrKztmb3IoOzA8bC1nOyliPU1hKGIpLGwtLTtmb3IoOzA8Zy1sOyllPU1hKGUpLGctLTtmb3IoO2wtLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPU1hKGIpO2U9TWEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2w9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TWEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtsPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztmLnB1c2goZCk7ZD1NYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKVBhKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KVBhKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX0saGQ9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBpZChhLGIpe3JldHVybiBhPT09Yj8wIT09YXx8MCE9PWJ8fDEvYT09PTEvYjphIT09YSYmYiE9PWJ9XG5mdW5jdGlvbiBqZChhLGIpe2lmKGlkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighaGQuY2FsbChiLGNbZF0pfHwhaWQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBsZChhKXsyIT09a2QoYSk/dChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBtZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1rZChhKSwzPT09Yj90KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBsZChlKSxhO2lmKGc9PT1kKXJldHVybiBsZChlKSxiO2c9Zy5zaWJsaW5nfXQoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp0KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/dChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbmQoYSl7YT1tZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBvZD1BLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkscGQ9QS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxxZD1XYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIHJkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHNkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSx0ZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdWQ9V2MuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT90ZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx2ZD1kZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksd2Q9V2MuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmN9KSx4ZD1BLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx5ZD1kZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHpkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1lhLFwiYW5pbWF0aW9uRW5kXCJdLFtaYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbJGEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFthYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLEFkPXt9LEJkPXt9O2Z1bmN0aW9uIENkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07QWRbYV09YjtCZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITApfSk7emQuZm9yRWFjaChmdW5jdGlvbihhKXtDZChhLCExKX0pO1xudmFyIERkPXtldmVudFR5cGVzOkFkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPUJkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1CZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXJkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT11ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9cWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1kZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxudmQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT13ZDticmVhaztjYXNlIFlhOmNhc2UgWmE6Y2FzZSAkYTphPW9kO2JyZWFrO2Nhc2UgYWI6YT14ZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1XYzticmVhaztjYXNlIFwid2hlZWxcIjphPXlkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9cGQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1lZDticmVhaztkZWZhdWx0OmE9QX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1JhKGIpO3JldHVybiBifX0sRWQ9RGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuRmQ9W107ZnVuY3Rpb24gR2QoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SWEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9UmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8cGEubGVuZ3RoO2grKyl7dmFyIGs9cGFbaF07ayYmKGs9ay5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eWEoZyxrKSl9RWEoZyl9fXZhciBIZD0hMDtcbmZ1bmN0aW9uIEcoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/SWQ6SmQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBLZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShFZChhKT9JZDpKZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIElkKGEsYil7TGIoSmQsYSxiKX1cbmZ1bmN0aW9uIEpkKGEsYil7aWYoSGQpe3ZhciBjPVJiKGIpO2M9SWEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1rZChjKXx8KGM9bnVsbCk7aWYoRmQubGVuZ3RoKXt2YXIgZD1GZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtPYihHZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkZkLmxlbmd0aCYmRmQucHVzaChhKX19fXZhciBMZD17fSxNZD0wLE5kPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIE9kKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLE5kKXx8KGFbTmRdPU1kKyssTGRbYVtOZF1dPXt9KTtyZXR1cm4gTGRbYVtOZF1dfWZ1bmN0aW9uIFBkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBRZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBSZChhLGIpe3ZhciBjPVFkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVFkKGMpfX1mdW5jdGlvbiBTZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP1NkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIFRkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVBkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7YT1iLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0Vmlld31jYXRjaChjKXticmVha31iPVBkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIFVkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVmQ9U2EmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxXZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKCRkfHxudWxsPT1YZHx8WGQhPT1QZChjKSlyZXR1cm4gbnVsbDtjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFpkJiZqZChaZCxjKT9udWxsOihaZD1jLGE9QS5nZXRQb29sZWQoV2Quc2VsZWN0LFlkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9WGQsUmEoYSksYSl9XG52YXIgYmU9e2V2ZW50VHlwZXM6V2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9T2QoZSk7Zj10YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0thKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpWGQ9ZSxZZD1iLFpkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpaZD1ZZD1YZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjokZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dWE9TGE7dmE9SmE7d2E9S2E7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpEZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46Z2QsQ2hhbmdlRXZlbnRQbHVnaW46VmMsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpCYn0pO2Z1bmN0aW9uIGRlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gZWUoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gZmUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3pjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp0KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp6YyhjKX19XG5mdW5jdGlvbiBpZShhLGIpe3ZhciBjPXpjKGIudmFsdWUpLGQ9emMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIga2U9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGUoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGUoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmU9dm9pZCAwLG9lPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25lPW5lfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25lLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPW5lLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JlLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWVbYl09cWVbYV19KX0pO2Z1bmN0aW9uIHNlKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxZS5oYXNPd25Qcm9wZXJ0eShhKSYmcWVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2UoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWU9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZlKGEsYil7YiYmKHVlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD90KFwiMTM3XCIsYSxcIlwiKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP3QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6dChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/dChcIjYyXCIsXCJcIik6dm9pZCAwKX1cbmZ1bmN0aW9uIHdlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIHhlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPU9kKGEpO2I9dGFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOktkKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpLZChcImZvY3VzXCIsYSk7S2QoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOlNiKGUpJiZLZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1iYi5pbmRleE9mKGUpJiZHKGUsYSl9Y1tlXT0hMH19fWZ1bmN0aW9uIHllKCl7fXZhciB6ZT1udWxsLEFlPW51bGw7XG5mdW5jdGlvbiBCZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24gQ2UoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBEZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxFZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7XG5mdW5jdGlvbiBGZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEdlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBIZT1bXSxJZT0tMTtmdW5jdGlvbiBIKGEpezA+SWV8fChhLmN1cnJlbnQ9SGVbSWVdLEhlW0llXT1udWxsLEllLS0pfWZ1bmN0aW9uIEkoYSxiKXtJZSsrO0hlW0llXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEplPXt9LEo9e2N1cnJlbnQ6SmV9LEs9e2N1cnJlbnQ6ITF9LEtlPUplO1xuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBKZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gTWUoYSl7SChLLGEpO0goSixhKX1mdW5jdGlvbiBOZShhKXtIKEssYSk7SChKLGEpfVxuZnVuY3Rpb24gT2UoYSxiLGMpe0ouY3VycmVudCE9PUplP3QoXCIxNjhcIik6dm9pZCAwO0koSixiLGEpO0koSyxjLGEpfWZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOnQoXCIxMDhcIixtYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBRZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEplO0tlPUouY3VycmVudDtJKEosYixhKTtJKEssSy5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gUmUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOnQoXCIxNjlcIik7Yz8oYj1QZShhLGIsS2UpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixIKEssYSksSChKLGEpLEkoSixiLGEpKTpIKEssYSk7SShLLGMsYSl9dmFyIFNlPW51bGwsVGU9bnVsbDtmdW5jdGlvbiBVZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gVmUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7U2U9VWUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1RlPVVlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBXZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBNKGEsYixjLGQpe3JldHVybiBuZXcgV2UoYSxiLGMsZCl9XG5mdW5jdGlvbiBYZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFllKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBYZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1pYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBaZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPU0oYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uICRlKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlYZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm4gYWYoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYzpyZXR1cm4gYmYoYyxlfDMsZixiKTtjYXNlIGJjOnJldHVybiBiZihjLGV8MixmLGIpO2Nhc2UgY2M6cmV0dXJuIGE9TSgxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPU0oMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9aGMsYS50eXBlPWhjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpnPTEwO2JyZWFrIGE7Y2FzZSBlYzpnPTk7YnJlYWsgYTtjYXNlIGdjOmc9MTE7YnJlYWsgYTtjYXNlIGljOmc9XG4xNDticmVhayBhO2Nhc2UgamM6Zz0xNjtkPW51bGw7YnJlYWsgYX10KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9TShnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGFmKGEsYixjLGQpe2E9TSg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYmYoYSxiLGMsZCl7YT1NKDgsYSxkLGIpO2I9MD09PShiJjEpP2JjOmZjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gY2YoYSxiLGMpe2E9TSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBkZihhLGIsYyl7Yj1NKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGVmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtmZihiLGEpfVxuZnVuY3Rpb24gZ2YoYSxiKXthLmRpZEVycm9yPSExO3ZhciBjPWEubGF0ZXN0UGluZ2VkVGltZTswIT09YyYmYz49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTtjPWEuZWFybGllc3RQZW5kaW5nVGltZTt2YXIgZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7ZmYoYixhKX1cbmZ1bmN0aW9uIGhmKGEsYil7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2E9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yz5iJiYoYj1jKTthPmImJihiPWEpO3JldHVybiBifWZ1bmN0aW9uIGZmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9dmFyIGpmPSExO1xuZnVuY3Rpb24ga2YoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIGxmKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIG1mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIG5mKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIG9mKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1rZihhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1rZihhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1rZihjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9bGYoZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9bGYoZCkpO251bGw9PT1lfHxkPT09ZT9uZihkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KG5mKGQsYiksbmYoZSxiKSk6KG5mKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1rZihhLm1lbW9pemVkU3RhdGUpOnFmKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gcWYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9bGYoYikpO3JldHVybiBifVxuZnVuY3Rpb24gcmYoYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0yMDQ5fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2UgMjpqZj0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIHNmKGEsYixjLGQsZSl7amY9ITE7Yj1xZihhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxsPWY7bnVsbCE9PWs7KXt2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWssZj1sKSxoPG0mJihoPW0pKToobD1yZihhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSkpO2s9ay5uZXh0fW09bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgcT1rLmV4cGlyYXRpb25UaW1lO3E8ZT8obnVsbD09PW0mJihtPWssbnVsbD09PWcmJihmPWwpKSxoPHEmJihoPXEpKToobD1yZihhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSkpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9bCk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1sfVxuZnVuY3Rpb24gdGYoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO3VmKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDt1ZihiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gdWYoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gdmYoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpuYyhiKX19dmFyIHdmPXtjdXJyZW50Om51bGx9LHhmPW51bGwseWY9bnVsbCx6Zj1udWxsO2Z1bmN0aW9uIEFmKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0kod2YsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIEJmKGEpe3ZhciBiPXdmLmN1cnJlbnQ7SCh3ZixhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIENmKGEpe3hmPWE7emY9eWY9bnVsbDthLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9bnVsbH1cbmZ1bmN0aW9uIERmKGEsYil7aWYoemYhPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXpmPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O251bGw9PT15Zj8obnVsbD09PXhmP3QoXCIyOTNcIik6dm9pZCAwLHhmLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9eWY9Yik6eWY9eWYubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIEVmPXt9LE49e2N1cnJlbnQ6RWZ9LEZmPXtjdXJyZW50OkVmfSxHZj17Y3VycmVudDpFZn07ZnVuY3Rpb24gSGYoYSl7YT09PUVmP3QoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gSWYoYSxiKXtJKEdmLGIsYSk7SShGZixhLGEpO0koTixFZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9bWUoYixjKX1IKE4sYSk7SShOLGIsYSl9ZnVuY3Rpb24gSmYoYSl7SChOLGEpO0goRmYsYSk7SChHZixhKX1mdW5jdGlvbiBLZihhKXtIZihHZi5jdXJyZW50KTt2YXIgYj1IZihOLmN1cnJlbnQpO3ZhciBjPW1lKGIsYS50eXBlKTtiIT09YyYmKEkoRmYsYSxhKSxJKE4sYyxhKSl9ZnVuY3Rpb24gTGYoYSl7RmYuY3VycmVudD09PWEmJihIKE4sYSksSChGZixhKSl9XG5mdW5jdGlvbiBPKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifWZ1bmN0aW9uIE1mKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDp0aHJvdyBhLl9zdGF0dXM9MCxiPWEuX2N0b3IsYj1iKCksYi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KSxhLl9yZXN1bHQ9YixiO319dmFyIE5mPVhiLlJlYWN0Q3VycmVudE93bmVyLE9mPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gUGYoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgVWY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1RZigpO2Q9UmYoZCxhKTt2YXIgZT1tZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoKTtvZihhLGUpO1RmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVFmKCk7ZD1SZihkLGEpO3ZhciBlPW1mKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKCk7b2YoYSxlKTtUZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1RZigpO2M9UmYoYyxhKTt2YXIgZD1tZihjKTtkLnRhZz1cbjI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1NmKCk7b2YoYSxkKTtUZihhLGMpfX07ZnVuY3Rpb24gVmYoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hamQoYyxkKXx8IWpkKGUsZik6ITB9XG5mdW5jdGlvbiBXZihhLGIsYyl7dmFyIGQ9ITEsZT1KZTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1OZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChmKTooZT1MKGIpP0tlOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0xlKGEsZSk6SmUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1VZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBYZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmVWYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBZZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPU9mO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TmYuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQoZik6KGY9TChiKT9LZTpKLmN1cnJlbnQsZS5jb250ZXh0PUxlKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKHNmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihQZihhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZVZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihzZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIFpmPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiAkZihhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigxIT09Yy50YWc/dChcIjI4OVwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6dChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09T2YmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/dChcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOnQoXCIyOTBcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIGFnKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ0KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBiZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVplKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9Y2YoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPSRmKGEsYixjKSxkLnJldHVybj1hLGQ7ZD0kZShjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj0kZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWRmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxnKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPWFmKGMsYS5tb2RlLGQsZyksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1jZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYz0kZShiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj0kZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGI6cmV0dXJuIGI9ZGYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFpmKGIpfHxcbmxjKGIpKXJldHVybiBiPWFmKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO2FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFjP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYjpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihaZihjKXx8bGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO2FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYz9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihaZihkKXx8bGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO2FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxyPW51bGwsbT1nLHU9Zz0wLHA9bnVsbDtudWxsIT09bSYmdTxoLmxlbmd0aDt1Kyspe20uaW5kZXg+dT8ocD1tLG09bnVsbCk6cD1tLnNpYmxpbmc7dmFyIHY9eChlLG0saFt1XSxrKTtpZihudWxsPT09dil7bnVsbD09PW0mJihtPXApO2JyZWFrfWEmJlxubSYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHYsZyx1KTtudWxsPT09cj9sPXY6ci5zaWJsaW5nPXY7cj12O209cH1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKG09cShlLGhbdV0saykpZz1mKG0sZyx1KSxudWxsPT09cj9sPW06ci5zaWJsaW5nPW0scj1tO3JldHVybiBsfWZvcihtPWQoZSxtKTt1PGgubGVuZ3RoO3UrKylpZihwPXoobSxlLHUsaFt1XSxrKSlhJiZudWxsIT09cC5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1wLmtleT91OnAua2V5KSxnPWYocCxnLHUpLG51bGw9PT1yP2w9cDpyLnNpYmxpbmc9cCxyPXA7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBRKGUsZyxoLGspe3ZhciBsPWxjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3QoXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/dChcIjE1MVwiKTp2b2lkIDA7XG5mb3IodmFyIG09bD1udWxsLHI9Zyx1PWc9MCxwPW51bGwsdj1oLm5leHQoKTtudWxsIT09ciYmIXYuZG9uZTt1Kyssdj1oLm5leHQoKSl7ci5pbmRleD51PyhwPXIscj1udWxsKTpwPXIuc2libGluZzt2YXIgeT14KGUscix2LnZhbHVlLGspO2lmKG51bGw9PT15KXtyfHwocj1wKTticmVha31hJiZyJiZudWxsPT09eS5hbHRlcm5hdGUmJmIoZSxyKTtnPWYoeSxnLHUpO251bGw9PT1tP2w9eTptLnNpYmxpbmc9eTttPXk7cj1wfWlmKHYuZG9uZSlyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7IXYuZG9uZTt1Kyssdj1oLm5leHQoKSl2PXEoZSx2LnZhbHVlLGspLG51bGwhPT12JiYoZz1mKHYsZyx1KSxudWxsPT09bT9sPXY6bS5zaWJsaW5nPXYsbT12KTtyZXR1cm4gbH1mb3Iocj1kKGUscik7IXYuZG9uZTt1Kyssdj1oLm5leHQoKSl2PXoocixlLHUsdi52YWx1ZSxrKSxudWxsIT09diYmKGEmJm51bGwhPT12LmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PXYua2V5P3U6XG52LmtleSksZz1mKHYsZyx1KSxudWxsPT09bT9sPXY6bS5zaWJsaW5nPXYsbT12KTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PWFjOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWFjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj0kZihhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPVxuay5zaWJsaW5nfWYudHlwZT09PWFjPyhkPWFmKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD0kZShmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj0kZihhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGI6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1kZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cblwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9Y2YoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoWmYoZikpcmV0dXJuIEIoYSxkLGYsaCk7aWYobGMoZikpcmV0dXJuIFEoYSxkLGYsaCk7bCYmYWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDpoPWEudHlwZSx0KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgY2c9YmcoITApLGRnPWJnKCExKSxlZz1udWxsLGZnPW51bGwsZ2c9ITE7XG5mdW5jdGlvbiBoZyhhLGIpe3ZhciBjPU0oNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBpZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIGpnKGEpe2lmKGdnKXt2YXIgYj1mZztpZihiKXt2YXIgYz1iO2lmKCFpZyhhLGIpKXtiPUZlKGMpO2lmKCFifHwhaWcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7Z2c9ITE7ZWc9YTtyZXR1cm59aGcoZWcsYyl9ZWc9YTtmZz1HZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLGdnPSExLGVnPWF9fWZ1bmN0aW9uIGtnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hLnJldHVybjtlZz1hfWZ1bmN0aW9uIGxnKGEpe2lmKGEhPT1lZylyZXR1cm4hMTtpZighZ2cpcmV0dXJuIGtnKGEpLGdnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhQ2UoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWZnO2I7KWhnKGEsYiksYj1GZShiKTtrZyhhKTtmZz1lZz9GZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBtZygpe2ZnPWVnPW51bGw7Z2c9ITF9dmFyIG5nPVhiLlJlYWN0Q3VycmVudE93bmVyO1xuZnVuY3Rpb24gUChhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP2RnKGIsbnVsbCxjLGQpOmNnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIG9nKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtDZihiLGUpO2Q9YyhkLGYpO2IuZWZmZWN0VGFnfD0xO1AoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwZyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIVhlKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSlyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcscWcoYSxiLGcsZCxlLGYpO2E9JGUoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpqZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiByZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1aZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZTxmJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWY/cmcoYSxiLGYpOnNnKGEsYixjLGQsZil9ZnVuY3Rpb24gdGcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBzZyhhLGIsYyxkLGUpe3ZhciBmPUwoYyk/S2U6Si5jdXJyZW50O2Y9TGUoYixmKTtDZihiLGUpO2M9YyhkLGYpO2IuZWZmZWN0VGFnfD0xO1AoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO1FlKGIpfWVsc2UgZj0hMTtDZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksV2YoYixjLGQsZSksWWYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TmYuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQobCk6KGw9TChjKT9LZTpKLmN1cnJlbnQsbD1MZShiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmWGYoYixnLGQsbCk7amY9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2s9Zy5zdGF0ZT14O3ZhciB6PWIudXBkYXRlUXVldWU7bnVsbCE9PXomJihzZihiLHosZCxnLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8amY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoUGYoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPWpmfHxWZihiLGMsaCxkLHgsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpPKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPU5mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGwpOihsPUwoYyk/S2U6Si5jdXJyZW50LGw9TGUoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbihxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmWGYoYixnLGQsbCksamY9ITEsaz1iLm1lbW9pemVkU3RhdGUseD1nLnN0YXRlPWssej1iLnVwZGF0ZVF1ZXVlLG51bGwhPT16JiYoc2YoYix6LGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fGpmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKFBmKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT1qZnx8VmYoYixjLGgsZCxrLHgsbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gdmcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gdmcoYSxiLGMsZCxlLGYpe3RnKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZSZShiLGMsITEpLHJnKGEsYixmKTtkPWIuc3RhdGVOb2RlO25nLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPWNnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9Y2coYixudWxsLGgsZikpOlAoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmUmUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB3ZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P09lKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJk9lKGEsYi5jb250ZXh0LCExKTtJZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiB4ZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtudWxsPT09YT9nPyhnPWUuZmFsbGJhY2ssZT1hZihudWxsLGQsMCxudWxsKSwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9YWYoZyxkLGMsbnVsbCksZS5zaWJsaW5nPWQsYz1lLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1kZyhiLG51bGwsZS5jaGlsZHJlbixjKTpudWxsIT09YS5tZW1vaXplZFN0YXRlPyhkPWEuY2hpbGQsYT1kLnNpYmxpbmcsZz8oYz1lLmZhbGxiYWNrLGU9WmUoZCxkLnBlbmRpbmdQcm9wcywwKSwwPT09KGIubW9kZSYxKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9cbmIuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09ZC5jaGlsZCYmKGUuY2hpbGQ9ZykpLGQ9ZS5zaWJsaW5nPVplKGEsYyxhLmV4cGlyYXRpb25UaW1lKSxjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPWNnKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpKTooYT1hLmNoaWxkLGc/KGc9ZS5mYWxsYmFjayxlPWFmKG51bGwsZCwwLG51bGwpLGUuY2hpbGQ9YSwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9ZS5zaWJsaW5nPWFmKGcsZCxjLG51bGwpLGQuZWZmZWN0VGFnfD0yLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpkPWM9Y2coYixhLGUuY2hpbGRyZW4sYykpO2IubWVtb2l6ZWRTdGF0ZT1mO2IuY2hpbGQ9YztyZXR1cm4gZH1cbmZ1bmN0aW9uIHJnKGEsYixjKXtudWxsIT09YSYmKGIuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1hLmZpcnN0Q29udGV4dERlcGVuZGVuY3kpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD90KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9WmUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9WmUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24geWcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEmJmEubWVtb2l6ZWRQcm9wcz09PWIucGVuZGluZ1Byb3BzJiYhSy5jdXJyZW50JiZkPGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOndnKGIpO21nKCk7YnJlYWs7Y2FzZSA1OktmKGIpO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJlFlKGIpO2JyZWFrO2Nhc2UgNDpJZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6QWYoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIHhnKGEsYixjKTtiPXJnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiByZyhhLGIsYyl9Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi5lbGVtZW50VHlwZTtudWxsIT09XG5hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPUxlKGIsSi5jdXJyZW50KTtDZihiLGMpO2U9ZChhLGUpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtpZihMKGQpKXt2YXIgZj0hMDtRZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmUGYoYixkLGcsYSk7ZS51cGRhdGVyPVVmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7WWYoYixkLGEsYyk7Yj12ZyhudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxQKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtcbnJldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9TWYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1ZZShhKTtmPU8oYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9c2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz11ZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1vZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1wZyhudWxsLGIsYSxPKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dChcIjI4M1wiLGEpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TyhkLGUpLHNnKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpPKGQsZSksdWcoYSxiLGQsXG5lLGMpO2Nhc2UgMzp3ZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/dChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDtzZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKW1nKCksYj1yZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSlmZz1HZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlZz1iLGU9Z2c9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1kZyhiLG51bGwsZCxjKSk6KFAoYSxiLGQsYyksbWcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2YoYiksbnVsbD09PWEmJmpnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sQ2UoZCxlKT9nPW51bGw6bnVsbCE9PVxuZiYmQ2UoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksdGcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUChhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmamcoYiksbnVsbDtjYXNlIDEzOnJldHVybiB4ZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBJZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1jZyhiLG51bGwsZCxjKTpQKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TyhkLGUpLG9nKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBQKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUChhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBQKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtBZihiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9aD09PWYmJigwIT09aHx8MS9oPT09MS9mKXx8aCE9PWgmJmYhPT1mPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPXJnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe2g9Zy5maXJzdENvbnRleHREZXBlbmRlbmN5O2lmKG51bGwhPT1oKXtkb3tpZihoLmNvbnRleHQ9PT1kJiYwIT09KGgub2JzZXJ2ZWRCaXRzJmYpKXtpZigxPT09Zy50YWcpe3ZhciBrPW1mKGMpO2sudGFnPTI7b2YoZyxrKX1nLmV4cGlyYXRpb25UaW1lPFxuYyYmKGcuZXhwaXJhdGlvblRpbWU9Yyk7az1nLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtmb3IodmFyIGw9Zy5yZXR1cm47bnVsbCE9PWw7KXtrPWwuYWx0ZXJuYXRlO2lmKGwuY2hpbGRFeHBpcmF0aW9uVGltZTxjKWwuY2hpbGRFeHBpcmF0aW9uVGltZT1jLG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YyYmKGsuY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YylrLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO2w9bC5yZXR1cm59fWs9Zy5jaGlsZDtoPWgubmV4dH13aGlsZShudWxsIT09aCl9ZWxzZSBrPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1rKWsucmV0dXJuPWc7ZWxzZSBmb3Ioaz1nO251bGwhPT1rOyl7aWYoaz09PWIpe2s9bnVsbDticmVha31nPWsuc2libGluZztcbmlmKG51bGwhPT1nKXtnLnJldHVybj1rLnJldHVybjtrPWc7YnJlYWt9az1rLnJldHVybn1nPWt9fVAoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sQ2YoYixjKSxlPURmKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxQKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1PKGUudHlwZSxiLnBlbmRpbmdQcm9wcykscGcoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIHFnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpPKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxRZShiKSk6XG5hPSExLENmKGIsYyksV2YoYixkLGUsYyksWWYoYixkLGUsYyksdmcobnVsbCxiLGQsITAsYSxjKTtkZWZhdWx0OnQoXCIxNTZcIil9fWZ1bmN0aW9uIHpnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBBZz12b2lkIDAsQmc9dm9pZCAwLEZnPXZvaWQgMCxHZz12b2lkIDA7QWc9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0JnPWZ1bmN0aW9uKCl7fTtcbkZnPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtIZihOLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj1BYyhnLGYpO2Q9QWMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWVlKGcsZik7ZD1lZShnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWdlKGcsZik7ZD1nZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXllKX12ZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGs9ZltjXTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHNhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgbD1kW2NdO2s9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZsIT09ayYmKG51bGwhPWx8fG51bGwhPWspKWlmKFwic3R5bGVcIj09PWMpaWYoayl7Zm9yKGcgaW4gaykhay5oYXNPd25Qcm9wZXJ0eShnKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYma1tnXSE9PWxbZ10mJihofHxcbihoPXt9KSxoW2ddPWxbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmayE9PWwmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09Yz9rPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihzYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9bCYmeGUoZSxjKSxhfHxrPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGwpKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZ6ZyhiKX19O0dnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZ6ZyhiKX07XG5mdW5jdGlvbiBIZyhhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPW5jKGMpKTtudWxsIT09YyYmbWMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmbWMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gSWcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7SmcoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gS2coYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFRlJiZUZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYobnVsbCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtKZyhlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOklnKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtKZyhhLGYpfWJyZWFrO2Nhc2UgNTpJZyhhKTticmVhaztjYXNlIDQ6TGcoYSl9fVxuZnVuY3Rpb24gTWcoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBOZyhhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihNZyhiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihwZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8TWcoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXllKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gTGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/dChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKEtnKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZz8oZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGU9ITApOktnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIE9nKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tIYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQ2MoYyxkKTt3ZShhLGUpO2I9d2UoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RlKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vZShjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGUoYyxoKTp5YyhjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RGMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppZShjLFxuZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/ZmUoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZlKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PVFmKCkpKTtpZihudWxsIT09YSlhOmZvcihiPWM9YTs7KXtpZig1PT09XG5iLnRhZylhPWIuc3RhdGVOb2RlLGQ/YS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiOihhPWIuc3RhdGVOb2RlLGY9Yi5tZW1vaXplZFByb3BzLnN0eWxlLGY9dm9pZCAwIT09ZiYmbnVsbCE9PWYmJmYuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2YuZGlzcGxheTpudWxsLGEuc3R5bGUuZGlzcGxheT1zZShcImRpc3BsYXlcIixmKSk7ZWxzZSBpZig2PT09Yi50YWcpYi5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjpiLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWIudGFnJiZudWxsIT09Yi5tZW1vaXplZFN0YXRlKXthPWIuY2hpbGQuc2libGluZzthLnJldHVybj1iO2I9YTtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YylicmVhayBhO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1jKWJyZWFrIGE7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPVxuYi5yZXR1cm47Yj1iLnNpYmxpbmd9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OnQoXCIxNjNcIil9fWZ1bmN0aW9uIFBnKGEsYixjKXtjPW1mKGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FnKGQpO0hnKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmcoYSxiLGMpe2M9bWYoYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2c/U2c9bmV3IFNldChbdGhpc10pOlNnLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7SGcoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUZyhhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJk1lKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIEpmKGEpLE5lKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT90KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBMZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBKZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIEJmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgVWc9e3JlYWRDb250ZXh0OkRmfSxWZz1YYi5SZWFjdEN1cnJlbnRPd25lcixXZz0xMDczNzQxODIyLFhnPTAsWWc9ITEsUj1udWxsLFM9bnVsbCxUPTAsWmc9LTEsJGc9ITEsVT1udWxsLGFoPSExLGJoPW51bGwsY2g9bnVsbCxTZz1udWxsO2Z1bmN0aW9uIGRoKCl7aWYobnVsbCE9PVIpZm9yKHZhciBhPVIucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJk1lKGIpO2JyZWFrO2Nhc2UgMzpKZihiKTtOZShiKTticmVhaztjYXNlIDU6TGYoYik7YnJlYWs7Y2FzZSA0OkpmKGIpO2JyZWFrO2Nhc2UgMTA6QmYoYil9YT1hLnJldHVybn1TPW51bGw7VD0wO1pnPS0xOyRnPSExO1I9bnVsbH1mdW5jdGlvbiBTZigpe251bGwhPT1jaCYmKGJhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKGJoKSxjaCgpKX1cbmZ1bmN0aW9uIGVoKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtSPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VDt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJk1lKGIpO2JyZWFrO2Nhc2UgMzpKZihiKTtOZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClsZyhiKSxiLmVmZmVjdFRhZyY9LTM7QmcoYik7YnJlYWs7Y2FzZSA1OkxmKGIpO3ZhciBoPUhmKEdmLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSlGZyhlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGs9SGYoTi5jdXJyZW50KTtpZihsZyhiKSl7Zz1iO2U9Zy5zdGF0ZU5vZGU7dmFyIGw9Zy50eXBlLG09Zy5tZW1vaXplZFByb3BzLHE9aDtlW0dhXT1nO2VbSGFdPW07Zj12b2lkIDA7aD1sO3N3aXRjaChoKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkcoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGw9MDtsPGJiLmxlbmd0aDtsKyspRyhiYltsXSxlKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZSk7RyhcImxvYWRcIixlKTticmVhaztjYXNlIFwiZm9ybVwiOkcoXCJyZXNldFwiLGUpO0coXCJzdWJtaXRcIixlKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixlKTticmVhaztjYXNlIFwiaW5wdXRcIjpCYyhlLG0pO0coXCJpbnZhbGlkXCIsZSk7eGUocSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGUpO3hlKHEsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShlLG0pLEcoXCJpbnZhbGlkXCIsZSkseGUocSxcIm9uQ2hhbmdlXCIpfXZlKGgsbSk7bD1udWxsO2ZvcihmIGluIG0pbS5oYXNPd25Qcm9wZXJ0eShmKSYmKGs9bVtmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz9lLnRleHRDb250ZW50IT09ayYmKGw9W1wiY2hpbGRyZW5cIixrXSk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZlLnRleHRDb250ZW50IT09XCJcIitrJiYobD1bXCJjaGlsZHJlblwiLFwiXCIra10pOnNhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1rJiZ4ZShxLGYpKTtzd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6VmIoZSk7RmMoZSxtLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYihlKTtqZShlLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5vbkNsaWNrJiZcbihlLm9uY2xpY2s9eWUpfWY9bDtnLnVwZGF0ZVF1ZXVlPWY7Zz1udWxsIT09Zj8hMDohMTtnJiZ6ZyhiKX1lbHNle209YjtlPWY7cT1nO2w9OT09PWgubm9kZVR5cGU/aDpoLm93bmVyRG9jdW1lbnQ7az09PWtlLmh0bWwmJihrPWxlKGUpKTtrPT09a2UuaHRtbD9cInNjcmlwdFwiPT09ZT8oZT1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixsPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBxLmlzP2w9bC5jcmVhdGVFbGVtZW50KGUse2lzOnEuaXN9KToobD1sLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJnEubXVsdGlwbGUmJihsLm11bHRpcGxlPSEwKSk6bD1sLmNyZWF0ZUVsZW1lbnROUyhrLGUpO2U9bDtlW0dhXT1tO2VbSGFdPWc7QWcoZSxiLCExLCExKTtxPWU7bD1mO209Zzt2YXIgeD1oLHo9d2UobCxtKTtzd2l0Y2gobCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpHKFwibG9hZFwiLFxucSk7aD1tO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxiYi5sZW5ndGg7aCsrKUcoYmJbaF0scSk7aD1tO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixxKTtoPW07YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIscSk7RyhcImxvYWRcIixxKTtoPW07YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixxKTtHKFwic3VibWl0XCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLHEpO2g9bTticmVhaztjYXNlIFwiaW5wdXRcIjpCYyhxLG0pO2g9QWMocSxtKTtHKFwiaW52YWxpZFwiLHEpO3hlKHgsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1lZShxLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpxLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07aD1uKHt9LG0se3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIscSk7eGUoeCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKHEsXG5tKTtoPWdlKHEsbSk7RyhcImludmFsaWRcIixxKTt4ZSh4LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPW19dmUobCxoKTtrPXZvaWQgMDt2YXIgQj1sLFE9cSx2PWg7Zm9yKGsgaW4gdilpZih2Lmhhc093blByb3BlcnR5KGspKXt2YXIgcj12W2tdO1wic3R5bGVcIj09PWs/dGUoUSxyKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1rPyhyPXI/ci5fX2h0bWw6dm9pZCAwLG51bGwhPXImJm9lKFEscikpOlwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiByPyhcInRleHRhcmVhXCIhPT1CfHxcIlwiIT09cikmJnBlKFEscik6XCJudW1iZXJcIj09PXR5cGVvZiByJiZwZShRLFwiXCIrcik6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKHNhLmhhc093blByb3BlcnR5KGspP251bGwhPXImJnhlKHgsayk6bnVsbCE9ciYmeWMoUSxrLHIseikpfXN3aXRjaChsKXtjYXNlIFwiaW5wdXRcIjpWYihxKTtcbkZjKHEsbSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIocSk7amUocSxtKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9bS52YWx1ZSYmcS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIremMobS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpoPXE7aC5tdWx0aXBsZT0hIW0ubXVsdGlwbGU7cT1tLnZhbHVlO251bGwhPXE/ZmUoaCwhIW0ubXVsdGlwbGUscSwhMSk6bnVsbCE9bS5kZWZhdWx0VmFsdWUmJmZlKGgsISFtLm11bHRpcGxlLG0uZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihxLm9uY2xpY2s9eWUpfShnPUJlKGYsZykpJiZ6ZyhiKTtiLnN0YXRlTm9kZT1lfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgbnVsbD09PWIuc3RhdGVOb2RlP3QoXCIxNjZcIik6dm9pZCAwO2JyZWFrO2Nhc2UgNjplJiZudWxsIT1iLnN0YXRlTm9kZT9HZyhlLGIsZS5tZW1vaXplZFByb3BzLGcpOihcInN0cmluZ1wiIT09XG50eXBlb2YgZyYmKG51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTY2XCIpOnZvaWQgMCksZT1IZihHZi5jdXJyZW50KSxIZihOLmN1cnJlbnQpLGxnKGIpPyhnPWIsZj1nLnN0YXRlTm9kZSxlPWcubWVtb2l6ZWRQcm9wcyxmW0dhXT1nLChnPWYubm9kZVZhbHVlIT09ZSkmJnpnKGIpKTooZj1iLGc9KDk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShnKSxnW0dhXT1iLGYuc3RhdGVOb2RlPWcpKTticmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6Zz1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZjtSPWI7YnJlYWsgYX1nPW51bGwhPT1nO2Y9bnVsbCE9PWUmJm51bGwhPT1lLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJiFnJiZmJiYoZT1lLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihoPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWg/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9aCk6KGIuZmlyc3RFZmZlY3Q9XG5iLmxhc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpO2lmKGchPT1mfHwwPT09KGIuZWZmZWN0VGFnJjEpJiZnKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6SmYoYik7QmcoYik7YnJlYWs7Y2FzZSAxMDpCZihiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkwoYi50eXBlKSYmTWUoYik7YnJlYWs7ZGVmYXVsdDp0KFwiMTU2XCIpfVI9bnVsbH1iPWE7aWYoMT09PVR8fDEhPT1iLmNoaWxkRXhwaXJhdGlvblRpbWUpe2c9MDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOyllPWYuZXhwaXJhdGlvblRpbWUsaD1mLmNoaWxkRXhwaXJhdGlvblRpbWUsZT5nJiYoZz1lKSxoPmcmJihnPWgpLGY9Zi5zaWJsaW5nO2IuY2hpbGRFeHBpcmF0aW9uVGltZT1nfWlmKG51bGwhPT1SKXJldHVybiBSO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjEwMjQpJiYobnVsbD09PVxuYy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpfWVsc2V7YT1UZyhhLFQpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MTAyMyxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9MTAyNCl9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBmaChhKXt2YXIgYj15ZyhhLmFsdGVybmF0ZSxhLFQpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9ZWgoYSkpO1ZnLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGdoKGEsYil7WWc/dChcIjI0M1wiKTp2b2lkIDA7U2YoKTtZZz0hMDtWZy5jdXJyZW50RGlzcGF0Y2hlcj1VZzt2YXIgYz1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGMhPT1UfHxhIT09U3x8bnVsbD09PVIpZGgoKSxTPWEsVD1jLFI9WmUoUy5jdXJyZW50LG51bGwsVCksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1SJiYhaGgoKTspUj1maChSKTtlbHNlIGZvcig7bnVsbCE9PVI7KVI9ZmgoUil9Y2F0Y2goQil7aWYoemY9eWY9eGY9bnVsbCxudWxsPT09UilkPSEwLFFnKEIpO2Vsc2V7bnVsbD09PVI/dChcIjI3MVwiKTp2b2lkIDA7dmFyIGU9UixmPWUucmV0dXJuO2lmKG51bGw9PT1mKWQ9ITAsUWcoQik7ZWxzZXthOnt2YXIgZz1hLGg9ZixrPWUsbD1CO2Y9VDtrLmVmZmVjdFRhZ3w9MTAyNDtrLmZpcnN0RWZmZWN0PWsubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1sJiZcIm9iamVjdFwiPT09XG50eXBlb2YgbCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGwudGhlbil7dmFyIG09bDtsPWg7dmFyIHE9LTEseD0tMTtkb3tpZigxMz09PWwudGFnKXt2YXIgej1sLmFsdGVybmF0ZTtpZihudWxsIT09eiYmKHo9ei5tZW1vaXplZFN0YXRlLG51bGwhPT16KSl7eD0xMCooMTA3Mzc0MTgyMi16LnRpbWVkT3V0QXQpO2JyZWFrfXo9bC5wZW5kaW5nUHJvcHMubWF4RHVyYXRpb247aWYoXCJudW1iZXJcIj09PXR5cGVvZiB6KWlmKDA+PXopcT0wO2Vsc2UgaWYoLTE9PT1xfHx6PHEpcT16fWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9aDtkb3tpZih6PTEzPT09bC50YWcpej12b2lkIDA9PT1sLm1lbW9pemVkUHJvcHMuZmFsbGJhY2s/ITE6bnVsbD09PWwubWVtb2l6ZWRTdGF0ZTtpZih6KXtoPWloLmJpbmQobnVsbCxnLGwsaywwPT09KGwubW9kZSYxKT8xMDczNzQxODIzOmYpO20udGhlbihoLGgpO2lmKDA9PT0obC5tb2RlJjEpKXtsLmVmZmVjdFRhZ3w9NjQ7ay5lZmZlY3RUYWcmPS0xOTU3O1xuMT09PWsudGFnJiZudWxsPT09ay5hbHRlcm5hdGUmJihrLnRhZz0xNyk7ay5leHBpcmF0aW9uVGltZT1mO2JyZWFrIGF9LTE9PT1xP2c9MTA3Mzc0MTgyMzooLTE9PT14JiYoeD0xMCooMTA3Mzc0MTgyMi1oZihnLGYpKS01RTMpLGc9eCtxKTswPD1nJiZaZzxnJiYoWmc9Zyk7bC5lZmZlY3RUYWd8PTIwNDg7bC5leHBpcmF0aW9uVGltZT1mO2JyZWFrIGF9bD1sLnJldHVybn13aGlsZShudWxsIT09bCk7bD1FcnJvcigobWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK25jKGspKX0kZz0hMDtsPXZmKGwsayk7Zz1oO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOms9XG5sO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZXhwaXJhdGlvblRpbWU9ZjtmPVBnKGcsayxmKTtwZihnLGYpO2JyZWFrIGE7Y2FzZSAxOmlmKGs9bCxoPWcudHlwZSxtPWcuc3RhdGVOb2RlLDA9PT0oZy5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09bSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIG0uY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2d8fCFTZy5oYXMobSkpKSl7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5leHBpcmF0aW9uVGltZT1mO2Y9UmcoZyxrLGYpO3BmKGcsZik7YnJlYWsgYX19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyl9Uj1laChlKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO1lnPSExO3pmPXlmPXhmPVZnLmN1cnJlbnREaXNwYXRjaGVyPW51bGw7aWYoZClTPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtlbHNlIGlmKG51bGwhPT1SKWEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZXtkPWEuY3VycmVudC5hbHRlcm5hdGU7XG5udWxsPT09ZD90KFwiMjgxXCIpOnZvaWQgMDtTPW51bGw7aWYoJGcpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxjfHwwIT09ZiYmZjxjfHwwIT09ZyYmZzxjKXtnZihhLGMpO2poKGEsZCxjLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtjPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249YztiPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztqaChhLGQsYyxiLC0xKTtyZXR1cm59fWImJi0xIT09Wmc/KGdmKGEsYyksYj0xMCooMTA3Mzc0MTgyMi1oZihhLGMpKSxiPFpnJiYoWmc9YiksYj0xMCooMTA3Mzc0MTgyMi1RZigpKSxiPVpnLWIsamgoYSxkLGMsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9ZCl9fVxuZnVuY3Rpb24gSmcoYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2d8fCFTZy5oYXMoZCkpKXthPXZmKGIsYSk7YT1SZyhjLGEsMTA3Mzc0MTgyMyk7b2YoYyxhKTtUZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT12ZihiLGEpO2E9UGcoYyxhLDEwNzM3NDE4MjMpO29mKGMsYSk7VGYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPXZmKGIsYSksYz1QZyhhLGMsMTA3Mzc0MTgyMyksb2YoYSxjKSxUZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIFJmKGEsYil7MCE9PVhnP2E9WGc6WWc/YT1haD8xMDczNzQxODIzOlQ6Yi5tb2RlJjE/KGE9a2g/MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpOjEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSksbnVsbCE9PVMmJmE9PT1UJiYtLWEpOmE9MTA3Mzc0MTgyMztraCYmKDA9PT1saHx8YTxsaCkmJihsaD1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGloKGEsYixjLGQpe3ZhciBlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO3ZhciBmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtpZigwIT09ZSYmZDw9ZSYmZD49Zil7Zj1lPWQ7YS5kaWRFcnJvcj0hMTt2YXIgZz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWd8fGc+ZilhLmxhdGVzdFBpbmdlZFRpbWU9ZjtmZihmLGEpfWVsc2UgZT1RZigpLGU9UmYoZSxiKSxlZihhLGUpOzAhPT0oYi5tb2RlJjEpJiZhPT09UyYmVD09PWQmJihTPW51bGwpO21oKGIsZSk7MD09PShiLm1vZGUmMSkmJihtaChjLGUpLDE9PT1jLnRhZyYmbnVsbCE9PWMuc3RhdGVOb2RlJiYoYj1tZihlKSxiLnRhZz0yLG9mKGMsYikpKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJm5oKGEsYyl9XG5mdW5jdGlvbiBtaChhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gVGYoYSxiKXthPW1oKGEsYik7bnVsbCE9PWEmJighWWcmJjAhPT1UJiZiPlQmJmRoKCksZWYoYSxiKSxZZyYmIWFoJiZTPT09YXx8bmgoYSxhLmV4cGlyYXRpb25UaW1lKSxvaD5waCYmKG9oPTAsdChcIjE4NVwiKSkpfWZ1bmN0aW9uIHFoKGEsYixjLGQsZSl7dmFyIGY9WGc7WGc9MTA3Mzc0MTgyMzt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtYZz1mfX12YXIgcmg9bnVsbCxWPW51bGwsc2g9MCx0aD12b2lkIDAsVz0hMSx1aD1udWxsLFg9MCxsaD0wLHZoPSExLHdoPW51bGwsWj0hMSx4aD0hMSxraD0hMSx5aD1udWxsLHpoPWJhLnVuc3RhYmxlX25vdygpLEFoPTEwNzM3NDE4MjItKHpoLzEwfDApLEJoPUFoLHBoPTUwLG9oPTAsQ2g9bnVsbDtmdW5jdGlvbiBEaCgpe0FoPTEwNzM3NDE4MjItKChiYS51bnN0YWJsZV9ub3coKS16aCkvMTB8MCl9XG5mdW5jdGlvbiBFaChhLGIpe2lmKDAhPT1zaCl7aWYoYjxzaClyZXR1cm47bnVsbCE9PXRoJiZiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayh0aCl9c2g9YjthPWJhLnVuc3RhYmxlX25vdygpLXpoO3RoPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soRmgse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGpoKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxoaCgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT1EZShHaC5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBHaChhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO0RoKCk7Qmg9QWg7SGgoYSxjKX1mdW5jdGlvbiBRZigpe2lmKFcpcmV0dXJuIEJoO0loKCk7aWYoMD09PVh8fDE9PT1YKURoKCksQmg9QWg7cmV0dXJuIEJofVxuZnVuY3Rpb24gbmgoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1WPyhyaD1WPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVj1WLm5leHRTY2hlZHVsZWRSb290PWEsVi5uZXh0U2NoZWR1bGVkUm9vdD1yaCkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFo/eGgmJih1aD1hLFg9MTA3Mzc0MTgyMyxKaChhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9LaCgxMDczNzQxODIzLCExKTpFaChhLGIpKX1cbmZ1bmN0aW9uIEloKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVYpZm9yKHZhciBjPVYsZD1yaDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vj90KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7cmg9Vj1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09cmgpcmg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFYubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vil7Vj1jO1YubmV4dFNjaGVkdWxlZFJvb3Q9cmg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09VilicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fXVoPWI7WD1hfXZhciBMaD0hMTtmdW5jdGlvbiBoaCgpe3JldHVybiBMaD8hMDpiYS51bnN0YWJsZV9zaG91bGRZaWVsZCgpP0xoPSEwOiExfWZ1bmN0aW9uIEZoKCl7dHJ5e2lmKCFoaCgpJiZudWxsIT09cmgpe0RoKCk7dmFyIGE9cmg7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmQWg8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPUFoKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PXJoKX1LaCgwLCEwKX1maW5hbGx5e0xoPSExfX1cbmZ1bmN0aW9uIEtoKGEsYil7SWgoKTtpZihiKWZvcihEaCgpLEJoPUFoO251bGwhPT11aCYmMCE9PVgmJmE8PVgmJiEoTGgmJkFoPlgpOylKaCh1aCxYLEFoPlgpLEloKCksRGgoKSxCaD1BaDtlbHNlIGZvcig7bnVsbCE9PXVoJiYwIT09WCYmYTw9WDspSmgodWgsWCwhMSksSWgoKTtiJiYoc2g9MCx0aD1udWxsKTswIT09WCYmRWgodWgsWCk7b2g9MDtDaD1udWxsO2lmKG51bGwhPT15aClmb3IoYT15aCx5aD1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3ZofHwodmg9ITAsd2g9ZCl9fWlmKHZoKXRocm93IGE9d2gsd2g9bnVsbCx2aD0hMSxhO31mdW5jdGlvbiBIaChhLGIpe1c/dChcIjI1M1wiKTp2b2lkIDA7dWg9YTtYPWI7SmgoYSxiLCExKTtLaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIEpoKGEsYixjKXtXP3QoXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/TWgoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxFZShkKSksZ2goYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoaGgoKT9hLmZpbmlzaGVkV29yaz1kOk1oKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9NaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLEVlKGQpKSxnaChhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJk1oKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXloP3loPVtkXTp5aC5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PUNoP29oKys6KENoPWEsb2g9MCk7YWg9WWc9ITA7YS5jdXJyZW50PT09Yj90KFwiMTc3XCIpOnZvaWQgMDtjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3QoXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7ZD1iLmV4cGlyYXRpb25UaW1lO3ZhciBlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtkPWU+ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPVxuMCk6KGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU+ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5kJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP2VmKGEsZCk6ZDxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsZWYoYSxkKSk6ZD5lJiZlZihhLGQpKTtmZigwLGEpO1ZnLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3plPUhkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZSl2YXIgZj17c3RhcnQ6ZS5zZWxlY3Rpb25TdGFydCxcbmVuZDplLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntmPShmPWUub3duZXJEb2N1bWVudCkmJmYuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZz1mLmdldFNlbGVjdGlvbiYmZi5nZXRTZWxlY3Rpb24oKTtpZihnJiYwIT09Zy5yYW5nZUNvdW50KXtmPWcuYW5jaG9yTm9kZTt2YXIgaD1nLmFuY2hvck9mZnNldCxrPWcuZm9jdXNOb2RlO2c9Zy5mb2N1c09mZnNldDt0cnl7Zi5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKGRiKXtmPW51bGw7YnJlYWsgYX12YXIgbD0wLG09LTEscT0tMSx4PTAsej0wLEI9ZSxRPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdjs7KXtCIT09Znx8MCE9PWgmJjMhPT1CLm5vZGVUeXBlfHwobT1sK2gpO0IhPT1rfHwwIT09ZyYmMyE9PUIubm9kZVR5cGV8fChxPWwrZyk7Mz09PUIubm9kZVR5cGUmJihsKz1CLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odj1CLmZpcnN0Q2hpbGQpKWJyZWFrO1E9QjtCPXZ9Zm9yKDs7KXtpZihCPT09ZSlicmVhayBiO1E9PT1mJiZcbisreD09PWgmJihtPWwpO1E9PT1rJiYrK3o9PT1nJiYocT1sKTtpZihudWxsIT09KHY9Qi5uZXh0U2libGluZykpYnJlYWs7Qj1RO1E9Qi5wYXJlbnROb2RlfUI9dn1mPS0xPT09bXx8LTE9PT1xP251bGw6e3N0YXJ0Om0sZW5kOnF9fWVsc2UgZj1udWxsfWY9Znx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZj1udWxsO0FlPXtmb2N1c2VkRWxlbTplLHNlbGVjdGlvblJhbmdlOmZ9O0hkPSExO2ZvcihVPWQ7bnVsbCE9PVU7KXtlPSExO2Y9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7aWYoVS5lZmZlY3RUYWcmMjU2KWE6e3ZhciByPVUuYWx0ZXJuYXRlO2g9VTtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWsgYTtjYXNlIDE6aWYoaC5lZmZlY3RUYWcmMjU2JiZudWxsIT09cil7dmFyIHU9ci5tZW1vaXplZFByb3BzLHk9ci5tZW1vaXplZFN0YXRlLFk9aC5zdGF0ZU5vZGUsVGg9WS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShoLmVsZW1lbnRUeXBlPT09aC50eXBlP1xudTpPKGgudHlwZSx1KSx5KTtZLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPVRofWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OnQoXCIxNjNcIil9fVU9VS5uZXh0RWZmZWN0fX1jYXRjaChkYil7ZT0hMCxmPWRifWUmJihudWxsPT09VT90KFwiMTc4XCIpOnZvaWQgMCxKZyhVLGYpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1mb3IoVT1kO251bGwhPT1VOyl7cj0hMTt1PXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe3ZhciB3PVUuZWZmZWN0VGFnO3cmMTYmJnBlKFUuc3RhdGVOb2RlLFwiXCIpO2lmKHcmMTI4KXt2YXIgQz1VLmFsdGVybmF0ZTtpZihudWxsIT09Qyl7dmFyIHA9Qy5yZWY7bnVsbCE9PXAmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgcD9wKG51bGwpOnAuY3VycmVudD1udWxsKX19c3dpdGNoKHcmMTQpe2Nhc2UgMjpOZyhVKTtVLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2Ok5nKFUpO1UuZWZmZWN0VGFnJj1cbi0zO09nKFUuYWx0ZXJuYXRlLFUpO2JyZWFrO2Nhc2UgNDpPZyhVLmFsdGVybmF0ZSxVKTticmVhaztjYXNlIDg6eT1VLExnKHkpLHkucmV0dXJuPW51bGwseS5jaGlsZD1udWxsLHkuYWx0ZXJuYXRlJiYoeS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCx5LmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9VT1VLm5leHRFZmZlY3R9fWNhdGNoKGRiKXtyPSEwLHU9ZGJ9ciYmKG51bGw9PT1VP3QoXCIxNzhcIik6dm9pZCAwLEpnKFUsdSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfXA9QWU7Qz1UZCgpO3c9cC5mb2N1c2VkRWxlbTt1PXAuc2VsZWN0aW9uUmFuZ2U7aWYoQyE9PXcmJncmJncub3duZXJEb2N1bWVudCYmU2Qody5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx3KSl7bnVsbCE9PXUmJlVkKHcpJiYoQz11LnN0YXJ0LHA9dS5lbmQsdm9pZCAwPT09cCYmKHA9QyksXCJzZWxlY3Rpb25TdGFydFwiaW4gdz8ody5zZWxlY3Rpb25TdGFydD1DLHcuc2VsZWN0aW9uRW5kPU1hdGgubWluKHAsXG53LnZhbHVlLmxlbmd0aCkpOihwPShDPXcub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZDLmRlZmF1bHRWaWV3fHx3aW5kb3cscC5nZXRTZWxlY3Rpb24mJihwPXAuZ2V0U2VsZWN0aW9uKCkseT13LnRleHRDb250ZW50Lmxlbmd0aCxyPU1hdGgubWluKHUuc3RhcnQseSksdT12b2lkIDA9PT11LmVuZD9yOk1hdGgubWluKHUuZW5kLHkpLCFwLmV4dGVuZCYmcj51JiYoeT11LHU9cixyPXkpLHk9UmQodyxyKSxZPVJkKHcsdSkseSYmWSYmKDEhPT1wLnJhbmdlQ291bnR8fHAuYW5jaG9yTm9kZSE9PXkubm9kZXx8cC5hbmNob3JPZmZzZXQhPT15Lm9mZnNldHx8cC5mb2N1c05vZGUhPT1ZLm5vZGV8fHAuZm9jdXNPZmZzZXQhPT1ZLm9mZnNldCkmJihDPUMuY3JlYXRlUmFuZ2UoKSxDLnNldFN0YXJ0KHkubm9kZSx5Lm9mZnNldCkscC5yZW1vdmVBbGxSYW5nZXMoKSxyPnU/KHAuYWRkUmFuZ2UoQykscC5leHRlbmQoWS5ub2RlLFkub2Zmc2V0KSk6KEMuc2V0RW5kKFkubm9kZSxZLm9mZnNldCksXG5wLmFkZFJhbmdlKEMpKSkpKSk7Qz1bXTtmb3IocD13O3A9cC5wYXJlbnROb2RlOykxPT09cC5ub2RlVHlwZSYmQy5wdXNoKHtlbGVtZW50OnAsbGVmdDpwLnNjcm9sbExlZnQsdG9wOnAuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZm9jdXMmJncuZm9jdXMoKTtmb3Iodz0wO3c8Qy5sZW5ndGg7dysrKXA9Q1t3XSxwLmVsZW1lbnQuc2Nyb2xsTGVmdD1wLmxlZnQscC5lbGVtZW50LnNjcm9sbFRvcD1wLnRvcH1BZT1udWxsO0hkPSEhemU7emU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoVT1kO251bGwhPT1VOyl7ZD0hMTt3PXZvaWQgMDt0cnl7Zm9yKEM9YztudWxsIT09VTspe3ZhciBGYj1VLmVmZmVjdFRhZztpZihGYiYzNil7dmFyIEdiPVUuYWx0ZXJuYXRlO3A9VTtyPUM7c3dpdGNoKHAudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO2Nhc2UgMTp2YXIgd2M9cC5zdGF0ZU5vZGU7aWYocC5lZmZlY3RUYWcmNClpZihudWxsPT09R2Ipd2MuY29tcG9uZW50RGlkTW91bnQoKTtcbmVsc2V7dmFyIGNpPXAuZWxlbWVudFR5cGU9PT1wLnR5cGU/R2IubWVtb2l6ZWRQcm9wczpPKHAudHlwZSxHYi5tZW1vaXplZFByb3BzKTt3Yy5jb21wb25lbnREaWRVcGRhdGUoY2ksR2IubWVtb2l6ZWRTdGF0ZSx3Yy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIENnPXAudXBkYXRlUXVldWU7bnVsbCE9PUNnJiZ0ZihwLENnLHdjLHIpO2JyZWFrO2Nhc2UgMzp2YXIgRGc9cC51cGRhdGVRdWV1ZTtpZihudWxsIT09RGcpe3U9bnVsbDtpZihudWxsIT09cC5jaGlsZClzd2l0Y2gocC5jaGlsZC50YWcpe2Nhc2UgNTp1PXAuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTp1PXAuY2hpbGQuc3RhdGVOb2RlfXRmKHAsRGcsdSxyKX1icmVhaztjYXNlIDU6dmFyIGRpPXAuc3RhdGVOb2RlO251bGw9PT1HYiYmcC5lZmZlY3RUYWcmNCYmQmUocC50eXBlLHAubWVtb2l6ZWRQcm9wcykmJmRpLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztcbmNhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dChcIjE2M1wiKX19aWYoRmImMTI4KXt2YXIgSWM9VS5yZWY7aWYobnVsbCE9PUljKXt2YXIgRWc9VS5zdGF0ZU5vZGU7c3dpdGNoKFUudGFnKXtjYXNlIDU6dmFyIGNlPUVnO2JyZWFrO2RlZmF1bHQ6Y2U9RWd9XCJmdW5jdGlvblwiPT09dHlwZW9mIEljP0ljKGNlKTpJYy5jdXJyZW50PWNlfX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goZGIpe2Q9ITAsdz1kYn1kJiYobnVsbD09PVU/dChcIjE3OFwiKTp2b2lkIDAsSmcoVSx3KSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9WWc9YWg9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIFNlJiZTZShiLnN0YXRlTm9kZSk7RmI9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPWI+RmI/YjpGYjswPT09YiYmKFNnPW51bGwpO2EuZXhwaXJhdGlvblRpbWU9YjthLmZpbmlzaGVkV29yaz1udWxsfVxuZnVuY3Rpb24gUWcoYSl7bnVsbD09PXVoP3QoXCIyNDZcIik6dm9pZCAwO3VoLmV4cGlyYXRpb25UaW1lPTA7dmh8fCh2aD0hMCx3aD1hKX1mdW5jdGlvbiBOaChhLGIpe3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWj1jKXx8V3x8S2goMTA3Mzc0MTgyMywhMSl9fWZ1bmN0aW9uIE9oKGEsYil7aWYoWiYmIXhoKXt4aD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXt4aD0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gUGgoYSxiLGMpe2lmKGtoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PWxofHwoS2gobGgsITEpLGxoPTApO3ZhciBkPWtoLGU9WjtaPWtoPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7a2g9ZCwoWj1lKXx8V3x8S2goMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gUWgoYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOnsyPT09a2QoYykmJjE9PT1jLnRhZz92b2lkIDA6dChcIjE3MFwiKTt2YXIgZz1jO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmc9Zy5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGcudHlwZSkpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyk7dChcIjE3MVwiKTtnPXZvaWQgMH1pZigxPT09Yy50YWcpe3ZhciBoPWMudHlwZTtpZihMKGgpKXtjPVBlKGMsaCxnKTticmVhayBhfX1jPWd9ZWxzZSBjPUplO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPW1mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtcblNmKCk7b2YoZixlKTtUZihmLGQpO3JldHVybiBkfWZ1bmN0aW9uIFJoKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVFmKCk7ZT1SZihmLGUpO3JldHVybiBRaChhLGIsYyxlLGQpfWZ1bmN0aW9uIFNoKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gVWgoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkNiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RGMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUxhKGQpO2U/dm9pZCAwOnQoXCI5MFwiKTtXYihkKTtEYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBWaChhKXt2YXIgYj0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItUWYoKSs1MDApLzI1fDApKzEpO2I+PVdnJiYoYj1XZy0xKTt0aGlzLl9leHBpcmF0aW9uVGltZT1XZz1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9VmgucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6dChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IFdoO1FoKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcblZoLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcblZoLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp0KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7SGgoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07VmgucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIFdoKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9V2gucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbldoLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O1xuZnVuY3Rpb24gWGgoYSxiLGMpe2I9TSgzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5YaC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IFdoO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtSaChhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1hoLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBXaDthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7UmgobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtYaC5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgV2g7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO1JoKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5YaC5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVmgodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBZaChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9S2I9Tmg7TGI9UGg7TWI9ZnVuY3Rpb24oKXtXfHwwPT09bGh8fChLaChsaCwhMSksbGg9MCl9O1xuZnVuY3Rpb24gWmgoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBYaChhLCExLGIpfVxuZnVuY3Rpb24gJGgoYSxiLGMsZCxlKXtZaChjKT92b2lkIDA6dChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVNoKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9WmgoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9U2goZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fU9oKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBTaChmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gYWkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtZaChiKT92b2lkIDA6dChcIjIwMFwiKTtyZXR1cm4gVWgoYSxiLG51bGwsYyl9XG52YXIgYmk9e2NyZWF0ZVBvcnRhbDphaSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3QoXCIxODhcIik6dChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1uZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAkaChudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gJGgobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj90KFwiMzhcIik6dm9pZCAwO3JldHVybiAkaChhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtZaChhKT9cbnZvaWQgMDp0KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oT2goZnVuY3Rpb24oKXskaChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBhaS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6TmgsdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOlBoLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1c/dChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gcWgoYSxiKX1maW5hbGx5e1o9YyxLaCgxMDczNzQxODIzLCExKX19LHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1aO1o9ITA7dHJ5e3FoKGEpfWZpbmFsbHl7KFo9Yil8fFd8fEtoKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSmEsXG5LYSxMYSxDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscWEsUmEsZnVuY3Rpb24oYSl7emEoYSxRYSl9LEliLEpiLEpkLEVhXX0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe1loKGEpP3ZvaWQgMDp0KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgWGgoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTsoZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gVmUobih7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW5kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOklhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNi4zXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgZWk9e2RlZmF1bHQ6Yml9LGZpPWVpJiZiaXx8ZWk7bW9kdWxlLmV4cG9ydHM9ZmkuZGVmYXVsdHx8Zmk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD1udWxsLGY9ITEsaD0zLGs9LTEsbD0tMSxtPSExLG49ITE7ZnVuY3Rpb24gcCgpe2lmKCFtKXt2YXIgYT1kLmV4cGlyYXRpb25UaW1lO24/cSgpOm49ITA7cih0LGEpfX1cbmZ1bmN0aW9uIHUoKXt2YXIgYT1kLGI9ZC5uZXh0O2lmKGQ9PT1iKWQ9bnVsbDtlbHNle3ZhciBjPWQucHJldmlvdXM7ZD1jLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtjPWEuY2FsbGJhY2s7Yj1hLmV4cGlyYXRpb25UaW1lO2E9YS5wcmlvcml0eUxldmVsO3ZhciBlPWgsUT1sO2g9YTtsPWI7dHJ5e3ZhciBnPWMoKX1maW5hbGx5e2g9ZSxsPVF9aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpaWYoZz17Y2FsbGJhY2s6Zyxwcmlvcml0eUxldmVsOmEsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH0sbnVsbD09PWQpZD1nLm5leHQ9Zy5wcmV2aW91cz1nO2Vsc2V7Yz1udWxsO2E9ZDtkb3tpZihhLmV4cGlyYXRpb25UaW1lPj1iKXtjPWE7YnJlYWt9YT1hLm5leHR9d2hpbGUoYSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9ZyxwKCkpO2I9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1nO2cubmV4dD1jO2cucHJldmlvdXM9XG5ifX1mdW5jdGlvbiB2KCl7aWYoLTE9PT1rJiZudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl7bT0hMDt0cnl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKX1maW5hbGx5e209ITEsbnVsbCE9PWQ/cCgpOm49ITF9fX1mdW5jdGlvbiB0KGEpe209ITA7dmFyIGI9ZjtmPWE7dHJ5e2lmKGEpZm9yKDtudWxsIT09ZDspe3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoZC5leHBpcmF0aW9uVGltZTw9Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPD1jKX1lbHNlIGJyZWFrfWVsc2UgaWYobnVsbCE9PWQpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmIXcoKSl9fWZpbmFsbHl7bT0hMSxmPWIsbnVsbCE9PWQ/cCgpOm49ITEsdigpfX1cbnZhciB4PURhdGUseT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZT9jYW5jZWxBbmltYXRpb25GcmFtZTp2b2lkIDAsQyxEO2Z1bmN0aW9uIEUoYSl7Qz1BKGZ1bmN0aW9uKGIpe3ooRCk7YShiKX0pO0Q9eShmdW5jdGlvbigpe0IoQyk7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sMTAwKX1cbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBGPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIEYubm93KCl9fWVsc2UgZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKX07dmFyIHIscSx3O1xuaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5fc2NoZWRNb2NrKXt2YXIgRz13aW5kb3cuX3NjaGVkTW9jaztyPUdbMF07cT1HWzFdO3c9R1syXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe3ZhciBIPW51bGwsST0tMSxKPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9PUgpe3ZhciBjPUg7SD1udWxsO3RyeXtJPWIsYyhhKX1maW5hbGx5e0k9LTF9fX07cj1mdW5jdGlvbihhLGIpey0xIT09ST9zZXRUaW1lb3V0KHIsMCxhLGIpOihIPWEsc2V0VGltZW91dChKLGIsITAsYiksc2V0VGltZW91dChKLDEwNzM3NDE4MjMsITEsMTA3Mzc0MTgyMykpfTtxPWZ1bmN0aW9uKCl7SD1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuLTE9PT1JPzA6SX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PVQpe0w9ITE7YT1LO3ZhciBiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxlPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZT0hMDtlbHNle058fChOPSEwLEUoVSkpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGUpfWZpbmFsbHl7Tz0hMX19fX0sITEpO3ZhciBVPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFUpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShULFwiKlwiKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/d2luZG93LnBvc3RNZXNzYWdlKFQsXCIqXCIpOk58fChOPSEwLEUoVSkpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWgsZT1rO2g9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtoPWMsaz1lLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWMrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGgpe2Nhc2UgMTpiPWMrLTE7YnJlYWs7Y2FzZSAyOmI9YysyNTA7YnJlYWs7Y2FzZSA1OmI9YysxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWMrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1jKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6aCxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09ZClkPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7Yz1udWxsO3ZhciBlPWQ7ZG97aWYoZS5leHBpcmF0aW9uVGltZT5iKXtjPWU7YnJlYWt9ZT1lLm5leHR9d2hpbGUoZSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9YSxwKCkpO1xuYj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpZD1udWxsO2Vsc2V7YT09PWQmJihkPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1oO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWgsZT1rO2g9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2g9YyxrPWUsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gaH07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWYmJihudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEhhc2hSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblByb3ZpZGVyIH0gZnJvbSBcInJlYWN0L2NvbnRleHRzL2F1dGhlbnRpY2F0aW9uXCI7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSBcInJlYWN0L2NvbnRleHRzL3RoZW1lXCI7XG5pbXBvcnQgTGF5b3V0IGZyb20gXCIuL2xheW91dFwiO1xuXG5mdW5jdGlvbiBNYWluKCkge1xuICByZXR1cm4gKFxuICAgIDxIYXNoUm91dGVyPlxuICAgICAgPEF1dGhlbnRpY2F0aW9uUHJvdmlkZXI+XG4gICAgICAgIDxUaGVtZVByb3ZpZGVyPlxuICAgICAgICAgIDxMYXlvdXQgLz5cbiAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICAgPC9BdXRoZW50aWNhdGlvblByb3ZpZGVyPlxuICAgIDwvSGFzaFJvdXRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBDb250YWluZXIsIFJvdywgQ29sIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tIFwiLi9uYXZpZ2F0aW9uL25hdmlnYXRpb25cIjtcbmltcG9ydCBSb3V0ZXJPdXRsZXIgZnJvbSBcIi4vcm91dGVyX291dGxldFwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9mb290ZXIvZm9vdGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBMYXlvdXQgZXh0ZW5kcyBDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICA8TmF2aWdhdGlvbiAvPlxuXG4gICAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICAgIDxDb2wgeHM9ezJ9IC8+XG4gICAgICAgICAgICAgIDxDb2wgeHM9ezh9PlxuICAgICAgICAgICAgICAgIDxSb3V0ZXJPdXRsZXIgLz5cbiAgICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICAgIDxDb2wgeHM9ezJ9IC8+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICA8L0NvbnRhaW5lcj5cblxuICAgICAgICAgIDxGb290ZXIgLz5cbiAgICAgICAgICBcbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXRcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy51bmNvbnRyb2xsZWRQcm9wVHlwZXMgPSB1bmNvbnRyb2xsZWRQcm9wVHlwZXM7XG5leHBvcnRzLmlzUHJvcCA9IGlzUHJvcDtcbmV4cG9ydHMuZGVmYXVsdEtleSA9IGRlZmF1bHRLZXk7XG5leHBvcnRzLmNhbkFjY2VwdFJlZiA9IGNhbkFjY2VwdFJlZjtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbnZhcmlhbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gcmVhZE9ubHlQcm9wVHlwZShoYW5kbGVyLCBuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXByb3BzW2hhbmRsZXJdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJZb3UgaGF2ZSBwcm92aWRlZCBhIGBcIiArIHByb3BOYW1lICsgXCJgIHByb3AgdG8gYFwiICsgbmFtZSArIFwiYCBcIiArIChcIndpdGhvdXQgYW4gYFwiICsgaGFuZGxlciArIFwiYCBoYW5kbGVyIHByb3AuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIFwiKSArIChcIklmIHRoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYFwiICsgZGVmYXVsdEtleShwcm9wTmFtZSkgKyBcImAuIFwiKSArIChcIk90aGVyd2lzZSwgc2V0IGBcIiArIGhhbmRsZXIgKyBcImAuXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVuY29udHJvbGxlZFByb3BUeXBlcyhjb250cm9sbGVkVmFsdWVzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgcHJvcFR5cGVzID0ge307XG4gIE9iamVjdC5rZXlzKGNvbnRyb2xsZWRWYWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBhZGQgZGVmYXVsdCBwcm9wVHlwZXMgZm9yIGZvbGtzIHRoYXQgdXNlIHJ1bnRpbWUgY2hlY2tzXG4gICAgcHJvcFR5cGVzW2RlZmF1bHRLZXkocHJvcCldID0gbm9vcDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IGNvbnRyb2xsZWRWYWx1ZXNbcHJvcF07XG4gICAgICAhKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJyAmJiBoYW5kbGVyLnRyaW0oKS5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoZmFsc2UsICdVbmNvbnRyb2xsYWJsZSAtIFslc106IHRoZSBwcm9wIGAlc2AgbmVlZHMgYSB2YWxpZCBoYW5kbGVyIGtleSBuYW1lIGluIG9yZGVyIHRvIG1ha2UgaXQgdW5jb250cm9sbGFibGUnLCBkaXNwbGF5TmFtZSwgcHJvcCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcHJvcFR5cGVzW3Byb3BdID0gcmVhZE9ubHlQcm9wVHlwZShoYW5kbGVyLCBkaXNwbGF5TmFtZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHByb3BUeXBlcztcbn1cblxuZnVuY3Rpb24gaXNQcm9wKHByb3BzLCBwcm9wKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0S2V5KGtleSkge1xuICByZXR1cm4gJ2RlZmF1bHQnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbn1cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbkFjY2VwdFJlZihjb21wb25lbnQpIHtcbiAgcmV0dXJuICEhY29tcG9uZW50ICYmICh0eXBlb2YgY29tcG9uZW50ICE9PSAnZnVuY3Rpb24nIHx8IGNvbXBvbmVudC5wcm90b3R5cGUgJiYgY29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25UaW1lb3V0KHRyYW5zaXRpb25UeXBlKSB7XG4gIHZhciB0aW1lb3V0UHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZSArICdUaW1lb3V0JztcbiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlO1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpOyAvLyBJZiB0aGUgZHVyYXRpb24gaXNuJ3QgYSBudW1iZXJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzW3RpbWVvdXRQcm9wTmFtZV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyBtdXN0IGJlIGEgbnVtYmVyIChpbiBtaWxsaXNlY29uZHMpJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKTtcblxuZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdGltZW91dHNTaGFwZTtcblxudmFyIGNsYXNzTmFtZXNTaGFwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSk7XG5cbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIF9oeXBoZW5hdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGUuZGVmYXVsdCkoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZTtcbnZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9nZXRDb21wdXRlZFN0eWxlO1xuXG52YXIgX2NhbWVsaXplU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2NhbWVsaXplU3R5bGVcIikpO1xuXG52YXIgcnBvc2l0aW9uID0gL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvO1xudmFyIHJudW1ub25weCA9IC9eKFsrLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KSkoPyFweClbYS16JV0rJC9pO1xuXG5mdW5jdGlvbiBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSB7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gRWxlbWVudCBwYXNzZWQgdG8gYGdldENvbXB1dGVkU3R5bGUoKWAnKTtcbiAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuICdkZWZhdWx0VmlldycgaW4gZG9jID8gZG9jLmRlZmF1bHRWaWV3Lm9wZW5lciA/IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpIDogd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB7XG4gICAgLy9pZSA4IFwibWFnaWNcIiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzEuMTEtc3RhYmxlL3NyYy9jc3MvY3VyQ1NTLmpzI0w3MlxuICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUocHJvcCkge1xuICAgICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgICAgIHByb3AgPSAoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcCk7XG4gICAgICBpZiAocHJvcCA9PSAnZmxvYXQnKSBwcm9wID0gJ3N0eWxlRmxvYXQnO1xuICAgICAgdmFyIGN1cnJlbnQgPSBub2RlLmN1cnJlbnRTdHlsZVtwcm9wXSB8fCBudWxsO1xuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVtwcm9wXSkgY3VycmVudCA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocm51bW5vbnB4LnRlc3QoY3VycmVudCkgJiYgIXJwb3NpdGlvbi50ZXN0KHByb3ApKSB7XG4gICAgICAgIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgdmFyIGxlZnQgPSBzdHlsZS5sZWZ0O1xuICAgICAgICB2YXIgcnVuU3R5bGUgPSBub2RlLnJ1bnRpbWVTdHlsZTtcbiAgICAgICAgdmFyIHJzTGVmdCA9IHJ1blN0eWxlICYmIHJ1blN0eWxlLmxlZnQ7IC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblxuICAgICAgICBpZiAocnNMZWZ0KSBydW5TdHlsZS5sZWZ0ID0gbm9kZS5jdXJyZW50U3R5bGUubGVmdDtcbiAgICAgICAgc3R5bGUubGVmdCA9IHByb3AgPT09ICdmb250U2l6ZScgPyAnMWVtJyA6IGN1cnJlbnQ7XG4gICAgICAgIGN1cnJlbnQgPSBzdHlsZS5waXhlbExlZnQgKyAncHgnOyAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cbiAgICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSByc0xlZnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZVN0eWxlO1xuXG5mdW5jdGlvbiByZW1vdmVTdHlsZShub2RlLCBrZXkpIHtcbiAgcmV0dXJuICdyZW1vdmVQcm9wZXJ0eScgaW4gbm9kZS5zdHlsZSA/IG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KSA6IG5vZGUuc3R5bGUucmVtb3ZlQXR0cmlidXRlKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1RyYW5zZm9ybTtcbnZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5cbmZ1bmN0aW9uIGlzVHJhbnNmb3JtKHByb3BlcnR5KSB7XG4gIHJldHVybiAhIShwcm9wZXJ0eSAmJiBzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3QocHJvcGVydHkpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBtYXRjaGVzO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfcXVlcnlTZWxlY3RvckFsbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcXVlcnlTZWxlY3RvckFsbFwiKSk7XG5cbnZhciBtYXRjaGVzQ2FjaGU7XG5cbmZ1bmN0aW9uIG1hdGNoZXMobm9kZSwgc2VsZWN0b3IpIHtcbiAgaWYgKCFtYXRjaGVzQ2FjaGUgJiYgX2luRE9NLmRlZmF1bHQpIHtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIG5hdGl2ZU1hdGNoID0gYm9keS5tYXRjaGVzIHx8IGJvZHkubWF0Y2hlc1NlbGVjdG9yIHx8IGJvZHkud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGJvZHkubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGJvZHkubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgbWF0Y2hlc0NhY2hlID0gbmF0aXZlTWF0Y2ggPyBmdW5jdGlvbiAobm9kZSwgc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBuYXRpdmVNYXRjaC5jYWxsKG5vZGUsIHNlbGVjdG9yKTtcbiAgICB9IDogaWU4TWF0Y2hlc1NlbGVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXNDYWNoZSA/IG1hdGNoZXNDYWNoZShub2RlLCBzZWxlY3RvcikgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpZThNYXRjaGVzU2VsZWN0b3Iobm9kZSwgc2VsZWN0b3IpIHtcbiAgdmFyIG1hdGNoZXMgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkobm9kZS5kb2N1bWVudCB8fCBub2RlLm93bmVyRG9jdW1lbnQsIHNlbGVjdG9yKSxcbiAgICAgIGkgPSAwO1xuXG4gIHdoaWxlIChtYXRjaGVzW2ldICYmIG1hdGNoZXNbaV0gIT09IG5vZGUpIHtcbiAgICBpKys7XG4gIH1cblxuICByZXR1cm4gISFtYXRjaGVzW2ldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZ3VkID0gcmVxdWlyZSgnZ3VkJyk7XG5cbnZhciBfZ3VkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2d1ZCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xuXG4vLyBJbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbC5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgKDAsIF9ndWQyLmRlZmF1bHQpKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwOyAvLyBObyBjaGFuZ2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHMoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90ZW1wMiwgX3RoaXMyLCBfcmV0MjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnN1bWVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldDIgPSAoX3RlbXAyID0gKF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQyLmNhbGwuYXBwbHkoX0NvbXBvbmVudDIsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMyKSwgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH0sIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKSB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgX3RlbXAyKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMyLCBfcmV0Mik7XG4gICAgfVxuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVJlYWN0Q29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmlsdGVyRXZlbnRzO1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcXVlcnkvY29udGFpbnNcIikpO1xuXG52YXIgX3F1ZXJ5U2VsZWN0b3JBbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsXCIpKTtcblxuZnVuY3Rpb24gZmlsdGVyRXZlbnRzKHNlbGVjdG9yLCBoYW5kbGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaWx0ZXJIYW5kbGVyKGUpIHtcbiAgICB2YXIgdG9wID0gZS5jdXJyZW50VGFyZ2V0LFxuICAgICAgICB0YXJnZXQgPSBlLnRhcmdldCxcbiAgICAgICAgbWF0Y2hlcyA9ICgwLCBfcXVlcnlTZWxlY3RvckFsbC5kZWZhdWx0KSh0b3AsIHNlbGVjdG9yKTtcbiAgICBpZiAobWF0Y2hlcy5zb21lKGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuICgwLCBfY29udGFpbnMuZGVmYXVsdCkobWF0Y2gsIHRhcmdldCk7XG4gICAgfSkpIGhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhY3RpdmVFbGVtZW50O1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBhY3RpdmVFbGVtZW50KGRvYykge1xuICBpZiAoZG9jID09PSB2b2lkIDApIHtcbiAgICBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaWUgdGhyb3dzIGlmIG5vIGFjdGl2ZSBlbGVtZW50ICovXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O2Z1bmN0aW9uIHUoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHE9YS4kJHR5cGVvZjtzd2l0Y2gocSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiBxfX1jYXNlIGQ6cmV0dXJuIHF9fX1mdW5jdGlvbiB2KGEpe3JldHVybiB1KGEpPT09bX1leHBvcnRzLnR5cGVPZj11O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx1KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWV9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWd9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1kfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWZ9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2FkZENsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRDbGFzc1wiKSk7XG5cbmV4cG9ydHMuYWRkQ2xhc3MgPSBfYWRkQ2xhc3MuZGVmYXVsdDtcblxudmFyIF9yZW1vdmVDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVtb3ZlQ2xhc3NcIikpO1xuXG5leHBvcnRzLnJlbW92ZUNsYXNzID0gX3JlbW92ZUNsYXNzLmRlZmF1bHQ7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZXhwb3J0cy5oYXNDbGFzcyA9IF9oYXNDbGFzcy5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBhZGRDbGFzczogX2FkZENsYXNzLmRlZmF1bHQsXG4gIHJlbW92ZUNsYXNzOiBfcmVtb3ZlQ2xhc3MuZGVmYXVsdCxcbiAgaGFzQ2xhc3M6IF9oYXNDbGFzcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MuZGVmYXVsdCkoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJykgKyAnICcgKyBjbGFzc05hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVwbGFjZUNsYXNzTmFtZShvcmlnQ2xhc3MsIGNsYXNzVG9SZW1vdmUpIHtcbiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc1RvUmVtb3ZlICsgJyg/OlxcXFxzfCQpJywgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUsIGNsYXNzTmFtZSk7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT3ZlcmZsb3dpbmc7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9pc1dpbmRvd1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0JvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknO1xufVxuXG5mdW5jdGlvbiBib2R5SXNPdmVyZmxvd2luZyhub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobm9kZSk7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKGRvYyk7XG4gIHJldHVybiBkb2MuYm9keS5jbGllbnRXaWR0aCA8IHdpbi5pbm5lcldpZHRoO1xufVxuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdy5kZWZhdWx0KShjb250YWluZXIpO1xuICByZXR1cm4gd2luIHx8IGlzQm9keShjb250YWluZXIpID8gYm9keUlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSA6IGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0V2luZG93O1xuXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICByZXR1cm4gbm9kZSA9PT0gbm9kZS53aW5kb3cgPyBub2RlIDogbm9kZS5ub2RlVHlwZSA9PT0gOSA/IG5vZGUuZGVmYXVsdFZpZXcgfHwgbm9kZS5wYXJlbnRXaW5kb3cgOiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuYXJpYUhpZGRlbiA9IGFyaWFIaWRkZW47XG5leHBvcnRzLmhpZGVTaWJsaW5ncyA9IGhpZGVTaWJsaW5ncztcbmV4cG9ydHMuc2hvd1NpYmxpbmdzID0gc2hvd1NpYmxpbmdzO1xudmFyIEJMQUNLTElTVCA9IFsndGVtcGxhdGUnLCAnc2NyaXB0JywgJ3N0eWxlJ107XG5cbnZhciBpc0hpZGFibGUgPSBmdW5jdGlvbiBpc0hpZGFibGUoX3JlZikge1xuICB2YXIgbm9kZVR5cGUgPSBfcmVmLm5vZGVUeXBlLFxuICAgICAgdGFnTmFtZSA9IF9yZWYudGFnTmFtZTtcbiAgcmV0dXJuIG5vZGVUeXBlID09PSAxICYmIEJMQUNLTElTVC5pbmRleE9mKHRhZ05hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xufTtcblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24gc2libGluZ3MoY29udGFpbmVyLCBleGNsdWRlLCBjYikge1xuICBleGNsdWRlID0gW10uY29uY2F0KGV4Y2x1ZGUpO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChleGNsdWRlLmluZGV4T2Yobm9kZSkgPT09IC0xICYmIGlzSGlkYWJsZShub2RlKSkge1xuICAgICAgY2Iobm9kZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGFyaWFIaWRkZW4oc2hvdywgbm9kZSkge1xuICBpZiAoIW5vZGUpIHJldHVybjtcblxuICBpZiAoc2hvdykge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGlkZVNpYmxpbmdzKGNvbnRhaW5lciwgX3JlZjIpIHtcbiAgdmFyIHJvb3QgPSBfcmVmMi5yb290LFxuICAgICAgYmFja2Ryb3AgPSBfcmVmMi5iYWNrZHJvcDtcbiAgc2libGluZ3MoY29udGFpbmVyLCBbcm9vdCwgYmFja2Ryb3BdLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKHRydWUsIG5vZGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1NpYmxpbmdzKGNvbnRhaW5lciwgX3JlZjMpIHtcbiAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgYmFja2Ryb3AgPSBfcmVmMy5iYWNrZHJvcDtcbiAgc2libGluZ3MoY29udGFpbmVyLCBbcm9vdCwgYmFja2Ryb3BdLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKGZhbHNlLCBub2RlKTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWxsO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gYWxsKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsaWRhdG9ycyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbGlkYXRvcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxQcm9wVHlwZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgdmFsaWRhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGVycm9yID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGFsbFByb3BUeXBlcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmF2LCBOYXZiYXIsIEJ1dHRvbiB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCB7d2l0aEF1dGhlbnRpY2F0aW9ufSBmcm9tICdyZWFjdC9jb250ZXh0cy9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQge3dpdGhUaGVtZX0gZnJvbSAncmVhY3QvY29udGV4dHMvdGhlbWUnO1xuaW1wb3J0IFNlYXJjaEZvcm0gZnJvbSAnLi9zZWFyY2hfZm9ybSc7XG5cblxuY29uc3QgTmF2aWdhdGlvbiA9ICh7IGxvZ291dCwgdGhlbWUgfSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxOYXZiYXIgYmc9eyB0aGVtZSB9IHZhcmlhbnQ9eyB0aGVtZSB9PlxuICAgICAgICA8TmF2YmFyLkJyYW5kIGFzPXtMaW5rfSB0bz1cIi9cIj5OYXZiYXI8L05hdmJhci5CcmFuZD5cbiAgICAgICAgPE5hdiBjbGFzc05hbWU9XCJtci1hdXRvXCI+XG4gICAgICAgICAgPE5hdi5MaW5rIGFzPXtMaW5rfSB0bz1cIi9cIiA+SGVsbG88L05hdi5MaW5rPlxuICAgICAgICAgIDxOYXYuTGluayBhcz17TGlua30gdG89XCIvdG9kb1wiID5Ub2RvPC9OYXYuTGluaz5cbiAgICAgICAgICA8TmF2LkxpbmsgYXM9e0xpbmt9IHRvPVwiL21lc3NhZ2VzXCIgPk1lc3NhZ2VzPC9OYXYuTGluaz5cbiAgICAgICAgICA8TmF2LkxpbmsgYXM9e0xpbmt9IHRvPVwiL2xvZ2luXCIgPkxvZ2luPC9OYXYuTGluaz5cbiAgICAgICAgPC9OYXY+XG4gICAgICAgPFNlYXJjaEZvcm0gLz5cbiAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJvdXRsaW5lLXdhcm5pbmdcIiBvbkNsaWNrPXsgbG9nb3V0IH0+TG9nb3V0PC9CdXR0b24+XG4gICAgICA8L05hdmJhcj5cbiAgICApO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZSh3aXRoQXV0aGVudGljYXRpb24oTmF2aWdhdGlvbikpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBGb3JtIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybSc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuXG5jb25zdCBTZWFyY2hGb3JtID0gKHtcbiAgIGhpc3RvcnksIFxufSkgPT4ge1xuICAgIGxldCBzZWFyY2hJbnB1dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTZWFyY2goKXtcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvaGVsbG8vJHtzZWFyY2hJbnB1dC52YWx1ZX1gO1xuICAgICAgICBoaXN0b3J5LnB1c2gocGF0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm0gaW5saW5lIG9uU3VibWl0PXtoYW5kbGVTZWFyY2h9PlxuICAgICAgICAgIDxGb3JtQ29udHJvbCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoXCIgY2xhc3NOYW1lPVwibXItc20tMlwiIHJlZj17KGlucHV0KSA9PiB7c2VhcmNoSW5wdXQgPSBpbnB1dH0gfSAvPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cIm91dGxpbmUtaW5mb1wiPlNlYXJjaDwvQnV0dG9uPlxuICAgICAgICA8L0Zvcm0+XG4gICAgKTtcbn1cblxuY29uc3QgU2VhcmNoRm9ybVdpdGhSb3V0ZXIgPSB3aXRoUm91dGVyKFNlYXJjaEZvcm0pO1xuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRm9ybVdpdGhSb3V0ZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlV2l0aEJzUHJlZml4O1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jYW1lbGl6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvY2FtZWxpemVcIikpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vVGhlbWVQcm92aWRlclwiKTtcblxudmFyIHBhc2NhbENhc2UgPSBmdW5jdGlvbiBwYXNjYWxDYXNlKHN0cikge1xuICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyAoMCwgX2NhbWVsaXplLmRlZmF1bHQpKHN0cikuc2xpY2UoMSk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVXaXRoQnNQcmVmaXgocHJlZml4LCBfdGVtcCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDI7XG5cbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfcmVmJGRpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBwYXNjYWxDYXNlKHByZWZpeCkgOiBfcmVmJGRpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRDb21wb25lbnQgPSBfcmVmLkNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkQ29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9yZWYkQ29tcG9uZW50LFxuICAgICAgZGVmYXVsdFByb3BzID0gX3JlZi5kZWZhdWx0UHJvcHM7XG5cbiAgcmV0dXJuICgwLCBfVGhlbWVQcm92aWRlci5jcmVhdGVCb290c3RyYXBDb21wb25lbnQpKChfdGVtcDIgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShfY2xhc3MsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzKCkge1xuICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBfY2xhc3MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgICAgX3RoaXMkcHJvcHMkYXMgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgICBUYWcgPSBfdGhpcyRwcm9wcyRhcyA9PT0gdm9pZCAwID8gQ29tcG9uZW50IDogX3RoaXMkcHJvcHMkYXMsXG4gICAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcImFzXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRhZywgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZGVmYXVsdFByb3BzLCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX2NsYXNzO1xuICB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCksIF9jbGFzcy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lLCBfdGVtcDIpLCBwcmVmaXgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9Gb3JtQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRleHRcIikpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIgPSByZXF1aXJlKFwiLi9UaGVtZVByb3ZpZGVyXCIpO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5cbmZ1bmN0aW9uIEZvcm1Hcm91cChfcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGNvbnRyb2xJZCA9IF9yZWYuY29udHJvbElkLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZi5hcyxcbiAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImlubmVyUmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250cm9sSWRcIiwgXCJhc1wiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb3JtQ29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGNvbnRyb2xJZDogY29udHJvbElkXG4gICAgfVxuICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gIH0pLCBjaGlsZHJlbikpO1xufVxuXG5Gb3JtR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX1RoZW1lUHJvdmlkZXIuY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KShGb3JtR3JvdXAsICdmb3JtLWdyb3VwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIgPSByZXF1aXJlKFwiLi9UaGVtZVByb3ZpZGVyXCIpO1xuXG52YXIgX0Zvcm1Db250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ29udGV4dFwiKSk7XG5cbnZhciBfRmVlZGJhY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ZlZWRiYWNrXCIpKTtcblxudmFyIF9Gb3JtQ2hlY2tJbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNoZWNrSW5wdXRcIikpO1xuXG52YXIgX0Zvcm1DaGVja0xhYmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ2hlY2tMYWJlbFwiKSk7XG5cbnZhciBGb3JtQ2hlY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShGb3JtQ2hlY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvcm1DaGVjaygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNoZWNrLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGlubGluZSA9IF90aGlzJHByb3BzLmlubGluZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgaXNWYWxpZCA9IF90aGlzJHByb3BzLmlzVmFsaWQsXG4gICAgICAgIGlzSW52YWxpZCA9IF90aGlzJHByb3BzLmlzSW52YWxpZCxcbiAgICAgICAgZmVlZGJhY2sgPSBfdGhpcyRwcm9wcy5mZWVkYmFjayxcbiAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wcy5pbnB1dFJlZixcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICB0aXRsZSA9IF90aGlzJHByb3BzLnRpdGxlLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY3VzdG9tID0gX3RoaXMkcHJvcHMuY3VzdG9tLFxuICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImlkXCIsIFwiYnNQcmVmaXhcIiwgXCJpbmxpbmVcIiwgXCJkaXNhYmxlZFwiLCBcImlzVmFsaWRcIiwgXCJpc0ludmFsaWRcIiwgXCJmZWVkYmFja1wiLCBcImlucHV0UmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJ0aXRsZVwiLCBcInR5cGVcIiwgXCJsYWJlbFwiLCBcImNoaWxkcmVuXCIsIFwiY3VzdG9tXCJdKTtcbiAgICB2YXIgaGFzTGFiZWwgPSBsYWJlbCAhPSBudWxsICYmIGxhYmVsICE9PSBmYWxzZSAmJiAhY2hpbGRyZW47XG5cbiAgICB2YXIgaW5wdXQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb3JtQ2hlY2tJbnB1dC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICBpc1ZhbGlkOiBpc1ZhbGlkLFxuICAgICAgaXNJbnZhbGlkOiBpc0ludmFsaWQsXG4gICAgICBpc1N0YXRpYzogIWhhc0xhYmVsLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1Db250ZXh0LmRlZmF1bHQuVHJhbnNmb3JtLCB7XG4gICAgICBtYXBUb1ZhbHVlOiBmdW5jdGlvbiBtYXBUb1ZhbHVlKF9yZWYpIHtcbiAgICAgICAgdmFyIGNvbnRyb2xJZCA9IF9yZWYuY29udHJvbElkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRyb2xJZDogaWQgfHwgY29udHJvbElkLFxuICAgICAgICAgIGN1c3RvbTogY3VzdG9tXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsICFjdXN0b20gJiYgYnNQcmVmaXgsIGN1c3RvbSAmJiBcImN1c3RvbS1jb250cm9sIGN1c3RvbS1cIiArIHR5cGUsIGlubGluZSAmJiAoY3VzdG9tID8gJ2N1c3RvbS1jb250cm9sJyA6IGJzUHJlZml4KSArIFwiLWlubGluZVwiKVxuICAgIH0sIGNoaWxkcmVuIHx8IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIGlucHV0LCBoYXNMYWJlbCAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb3JtQ2hlY2tMYWJlbC5kZWZhdWx0LCB7XG4gICAgICB0aXRsZTogdGl0bGVcbiAgICB9LCBsYWJlbCksIChpc1ZhbGlkIHx8IGlzSW52YWxpZCkgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRmVlZGJhY2suZGVmYXVsdCwge1xuICAgICAgdHlwZTogaXNWYWxpZCA/ICd2YWxpZCcgOiAnaW52YWxpZCdcbiAgICB9LCBmZWVkYmFjaykpKSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1DaGVjaztcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRm9ybUNoZWNrLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ2NoZWNrYm94JyxcbiAgaW5saW5lOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBpc1ZhbGlkOiBmYWxzZSxcbiAgaXNJbnZhbGlkOiBmYWxzZSxcbiAgdGl0bGU6ICcnXG59O1xudmFyIERlY29yYXRlZEZvcm1DaGVjayA9ICgwLCBfVGhlbWVQcm92aWRlci5jcmVhdGVCb290c3RyYXBDb21wb25lbnQpKEZvcm1DaGVjaywge1xuICBmb3J3YXJkUmVmQXM6ICdpbnB1dFJlZicsXG4gIHByZWZpeDogJ2Zvcm0tY2hlY2snXG59KTtcbkRlY29yYXRlZEZvcm1DaGVjay5JbnB1dCA9IF9Gb3JtQ2hlY2tJbnB1dC5kZWZhdWx0O1xuRGVjb3JhdGVkRm9ybUNoZWNrLkxhYmVsID0gX0Zvcm1DaGVja0xhYmVsLmRlZmF1bHQ7XG52YXIgX2RlZmF1bHQgPSBEZWNvcmF0ZWRGb3JtQ2hlY2s7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIgPSByZXF1aXJlKFwiLi9UaGVtZVByb3ZpZGVyXCIpO1xuXG52YXIgX0Zvcm1Db250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ29udGV4dFwiKSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdjaGVja2JveCdcbn07XG5cbmZ1bmN0aW9uIEZvcm1DaGVja0lucHV0KF9yZWYpIHtcbiAgdmFyIGlkID0gX3JlZi5pZCxcbiAgICAgIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaXNWYWxpZCA9IF9yZWYuaXNWYWxpZCxcbiAgICAgIGlzSW52YWxpZCA9IF9yZWYuaXNJbnZhbGlkLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgaXNTdGF0aWMgPSBfcmVmLmlzU3RhdGljLFxuICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF9yZWYsIFtcImlkXCIsIFwiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJpc1ZhbGlkXCIsIFwiaXNJbnZhbGlkXCIsIFwiaW5uZXJSZWZcIiwgXCJpc1N0YXRpY1wiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb3JtQ29udGV4dC5kZWZhdWx0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgY29udHJvbElkID0gX3JlZjIuY29udHJvbElkLFxuICAgICAgICBjdXN0b20gPSBfcmVmMi5jdXN0b207XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiBpbm5lclJlZixcbiAgICAgIGlkOiBpZCB8fCBjb250cm9sSWQsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsICFjdXN0b20gJiYgYnNQcmVmaXgsIGN1c3RvbSAmJiAnY3VzdG9tLWNvbnRyb2wtaW5wdXQnLCBpc1ZhbGlkICYmICdpcy12YWxpZCcsIGlzSW52YWxpZCAmJiAnaXMtaW52YWxpZCcsIGlzU3RhdGljICYmICdwb3NpdGlvbi1zdGF0aWMnKVxuICAgIH0pKTtcbiAgfSk7XG59XG5cbkZvcm1DaGVja0lucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9UaGVtZVByb3ZpZGVyLmNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCkoRm9ybUNoZWNrSW5wdXQsICdmb3JtLWNoZWNrLWlucHV0Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBfRm9ybUNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250ZXh0XCIpKTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ2NoZWNrYm94J1xufTtcblxuZnVuY3Rpb24gRm9ybUNoZWNrTGFiZWwoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBodG1sRm9yID0gX3JlZi5odG1sRm9yLFxuICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiaW5uZXJSZWZcIiwgXCJodG1sRm9yXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1Db250ZXh0LmRlZmF1bHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBjb250cm9sSWQgPSBfcmVmMi5jb250cm9sSWQsXG4gICAgICAgIGN1c3RvbSA9IF9yZWYyLmN1c3RvbTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgaHRtbEZvcjogaHRtbEZvciB8fCBjb250cm9sSWQsXG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsICFjdXN0b20gJiYgYnNQcmVmaXgsIGN1c3RvbSAmJiAnY3VzdG9tLWNvbnRyb2wtbGFiZWwnKVxuICAgIH0pKTtcbiAgfSk7XG59XG5cbkZvcm1DaGVja0xhYmVsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9UaGVtZVByb3ZpZGVyLmNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCkoRm9ybUNoZWNrTGFiZWwsICdmb3JtLWNoZWNrLWxhYmVsJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX21hcENvbnRleHRUb1Byb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtY29udGV4dC10b29sYm94L2xpYi9tYXBDb250ZXh0VG9Qcm9wc1wiKSk7XG5cbnZhciBfQ29sID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2xcIikpO1xuXG52YXIgX0Zvcm1Db250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ29udGV4dFwiKSk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbHVtbjogZmFsc2UsXG4gIHNyT25seTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIEZvcm1MYWJlbChfcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjb2x1bW4gPSBfcmVmLmNvbHVtbixcbiAgICAgIHNyT25seSA9IF9yZWYuc3JPbmx5LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJjb2x1bW5cIiwgXCJzck9ubHlcIiwgXCJjbGFzc05hbWVcIiwgXCJpbm5lclJlZlwiXSk7XG4gIHZhciBjbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNyT25seSAmJiAnc3Itb25seScsIGNvbHVtbiAmJiAnY29sLWZvcm0tbGFiZWwnKTtcbiAgaWYgKGNvbHVtbikgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NvbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICBhczogXCJsYWJlbFwiXG4gIH0pKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IsIGpzeC1hMTF5L2xhYmVsLWhhcy1hc3NvY2lhdGVkLWNvbnRyb2xcblxuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufVxuXG5Gb3JtTGFiZWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgbWFwQ29udGV4dCA9IGZ1bmN0aW9uIG1hcENvbnRleHQoX3JlZjIsIF9yZWYzKSB7XG4gIHZhciBjb250cm9sSWQgPSBfcmVmMi5jb250cm9sSWQ7XG4gIHZhciBodG1sRm9yID0gX3JlZjMuaHRtbEZvcjtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbnRyb2xJZCA9PSBudWxsIHx8ICFodG1sRm9yLCAnYGNvbnRyb2xJZGAgaXMgaWdub3JlZCBvbiBgPEZvcm1MYWJlbD5gIHdoZW4gYGh0bWxGb3JgIGlzIHNwZWNpZmllZC4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHtcbiAgICBodG1sRm9yOiBodG1sRm9yIHx8IGNvbnRyb2xJZFxuICB9O1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9tYXBDb250ZXh0VG9Qcm9wcy5kZWZhdWx0KShfRm9ybUNvbnRleHQuZGVmYXVsdCwgbWFwQ29udGV4dCwgKDAsIF9UaGVtZVByb3ZpZGVyLmNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCkoRm9ybUxhYmVsLCAnZm9ybS1sYWJlbCcpKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBERVZJQ0VfU0laRVMgPSBbJ3hsJywgJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ107XG5cbnZhciBDb2wgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDb2wsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29sLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJhc1wiXSk7XG4gICAgdmFyIHNwYW5zID0gW107XG4gICAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgICBERVZJQ0VfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoYnJrUG9pbnQpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1ticmtQb2ludF07XG4gICAgICBkZWxldGUgcHJvcHNbYnJrUG9pbnRdO1xuICAgICAgdmFyIHNwYW4sIG9mZnNldCwgb3JkZXI7XG5cbiAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgX3Byb3BWYWx1ZSRzcGFuID0gcHJvcFZhbHVlLnNwYW47XG4gICAgICAgIHNwYW4gPSBfcHJvcFZhbHVlJHNwYW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcFZhbHVlJHNwYW47XG4gICAgICAgIG9mZnNldCA9IHByb3BWYWx1ZS5vZmZzZXQ7XG4gICAgICAgIG9yZGVyID0gcHJvcFZhbHVlLm9yZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BhbiA9IHByb3BWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZml4ID0gYnJrUG9pbnQgIT09ICd4cycgPyBcIi1cIiArIGJya1BvaW50IDogJyc7XG4gICAgICBpZiAoc3BhbiAhPSBudWxsKSBzcGFucy5wdXNoKHNwYW4gPT09IHRydWUgPyBcIlwiICsgYnNQcmVmaXggKyBpbmZpeCA6IFwiXCIgKyBic1ByZWZpeCArIGluZml4ICsgXCItXCIgKyBzcGFuKTtcbiAgICAgIGlmIChvcmRlciAhPSBudWxsKSBjbGFzc2VzLnB1c2goXCJvcmRlclwiICsgaW5maXggKyBcIi1cIiArIG9yZGVyKTtcbiAgICAgIGlmIChvZmZzZXQgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKFwib2Zmc2V0XCIgKyBpbmZpeCArIFwiLVwiICsgb2Zmc2V0KTtcbiAgICB9KTtcblxuICAgIGlmICghc3BhbnMubGVuZ3RoKSB7XG4gICAgICBzcGFucy5wdXNoKGJzUHJlZml4KTsgLy8gcGxhaW4gJ2NvbCdcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IF9jbGFzc25hbWVzLmRlZmF1bHQuYXBwbHkodm9pZCAwLCBbY2xhc3NOYW1lXS5jb25jYXQoc3BhbnMsIGNsYXNzZXMpKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ29sO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Db2wuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfVGhlbWVQcm92aWRlci5jcmVhdGVCb290c3RyYXBDb21wb25lbnQpKENvbCwgJ2NvbCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIgPSByZXF1aXJlKFwiLi9UaGVtZVByb3ZpZGVyXCIpO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ3NtYWxsJ1xufTtcblxuZnVuY3Rpb24gRm9ybVRleHQoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiaW5uZXJSZWZcIiwgXCJhc1wiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gIH0pKTtcbn1cblxuRm9ybVRleHQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX1RoZW1lUHJvdmlkZXIuY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KShGb3JtVGV4dCwgJ2Zvcm0tdGV4dCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2EnXG59O1xuXG5mdW5jdGlvbiBpc1RyaXZpYWxIcmVmKGhyZWYpIHtcbiAgcmV0dXJuICFocmVmIHx8IGhyZWYudHJpbSgpID09PSAnIyc7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgRHJvcGRvd25JdGVtcywgZXRjLlxuICovXG5cblxudmFyIFNhZmVBbmNob3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShTYWZlQW5jaG9yLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTYWZlQW5jaG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSk7XG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IF90aGlzLmhhbmRsZUtleURvd24uYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTYWZlQW5jaG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGhyZWYgPSBfdGhpcyRwcm9wcy5ocmVmLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljaztcblxuICAgIGlmIChkaXNhYmxlZCB8fCBpc1RyaXZpYWxIcmVmKGhyZWYpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMyLm9uS2V5RG93bixcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczIuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcImFzXCIsIFwiZGlzYWJsZWRcIiwgXCJvbktleURvd25cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgICBpZiAoaXNUcml2aWFsSHJlZihwcm9wcy5ocmVmKSkge1xuICAgICAgcHJvcHMucm9sZSA9IHByb3BzLnJvbGUgfHwgJ2J1dHRvbic7IC8vIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoZXJlIGlzIGEgaHJlZiBhdHRyaWJ1dGUgb24gdGhlIG5vZGVcbiAgICAgIC8vIG90aGVyd2lzZSwgdGhlIGN1cnNvciBpbmNvcnJlY3RseSBzdHlsZWQgKGV4Y2VwdCB3aXRoIHJvbGU9J2J1dHRvbicpXG5cbiAgICAgIHByb3BzLmhyZWYgPSBwcm9wcy5ocmVmIHx8ICcjJztcbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHByb3BzLnRhYkluZGV4ID0gLTE7XG4gICAgICBwcm9wc1snYXJpYS1kaXNhYmxlZCddID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5uZXJSZWYpIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICBvbktleURvd246ICgwLCBfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKHRoaXMuaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU2FmZUFuY2hvcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuU2FmZUFuY2hvci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBTYWZlQW5jaG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZiAhPSBudWxsO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgIH1cblxuICAgIGlmIChhY2MgPT09IG51bGwpIHJldHVybiBmO1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUm91dGUsIFJlZGlyZWN0LCB3aXRoUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgd2l0aEF1dGhlbnRpY2F0aW9uIH0gZnJvbSBcInJlYWN0L2NvbnRleHRzL2F1dGhlbnRpY2F0aW9uXCI7XG5pbXBvcnQgSGVsbG9Xb3JsZCBmcm9tIFwiLi9oZWxsb193b3JsZC9oZWxsb193b3JsZFwiO1xuaW1wb3J0IEhlbGxvRnJvbVBhcmFtcyBmcm9tIFwiLi9oZWxsb193b3JsZC9oZWxsb19mcm9tX3BhcmFtc1wiO1xuaW1wb3J0IFRvZG9BcHBDb250YWluZXIgZnJvbSBcIi4vdG9kb19hcHAvdG9kb19hcHBfY29udGFpbmVyXCI7XG5pbXBvcnQgTWVzc2FnZXNDb250YWluZXIgZnJvbSBcIi4vbWVzc2FnZXMvbWVzc2FnZXNfY29udGFpbmVyXCI7XG5pbXBvcnQgTWVzc2FnZUNvbnRhaW5lciBmcm9tIFwiLi9tZXNzYWdlL21lc3NhZ2VfY29udGFpbmVyXCI7XG5pbXBvcnQgTG9naW5Db250YWluZXIgZnJvbSBcIi4vbG9naW4vbG9naW5fY29udGFpbmVyXCI7XG5cbmZ1bmN0aW9uIFJvdXRlck91dGxldCh7IGlzQXV0aGVudGljYXRlZCwgbG9jYXRpb246IHsgcGF0aG5hbWUgfSB9KSB7XG4gIGNvbnN0IHJlZGlyZWN0VG9Mb2dpbiA9ICFpc0F1dGhlbnRpY2F0ZWQgJiYgcGF0aG5hbWUgIT09IFwiL2xvZ2luXCI7XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICB7IHJlZGlyZWN0VG9Mb2dpbiAmJiA8UmVkaXJlY3QgdG89XCIvbG9naW5cIiAvPiB9XG4gICAgICB7ICFyZWRpcmVjdFRvTG9naW4gJiYgXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiByZW5kZXI9eygpID0+IDxIZWxsb1dvcmxkIG5hbWU9XCJib2JcIiAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9oZWxsby86bmFtZVwiIGNvbXBvbmVudD17SGVsbG9Gcm9tUGFyYW1zfSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3RvZG9cIiBjb21wb25lbnQ9e1RvZG9BcHBDb250YWluZXJ9IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbWVzc2FnZXNcIiBjb21wb25lbnQ9e01lc3NhZ2VzQ29udGFpbmVyfSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL21lc3NhZ2UvOmlkXCIgY29tcG9uZW50PXtNZXNzYWdlQ29udGFpbmVyfSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ2luXCIgY29tcG9uZW50PXtMb2dpbkNvbnRhaW5lcn0gLz5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgIH1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKHdpdGhBdXRoZW50aWNhdGlvbihSb3V0ZXJPdXRsZXQpKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XG5cbmNsYXNzIEhlbGxvV29ybGQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFsZXJ0IHZhcmlhbnQ9J2luZm8nPlxuICAgICAgICBIZWxsbyB7IG5hbWUgfVxuICAgICAgPC9BbGVydD5cbiAgICApO1xuICB9XG59XG5cblxuXG5leHBvcnQgZGVmYXVsdCBIZWxsb1dvcmxkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcblxuY29uc3QgSGVsbG9Gcm9tUGFyYW1zID0gKHtcbiAgbWF0Y2g6IHtcbiAgICBwYXJhbXM6IHtcbiAgICAgIG5hbWVcbiAgICB9XG4gIH0sXG59KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxBbGVydCB2YXJpYW50PSdpbmZvJz5cbiAgICAgICAgSGVsbG8geyBuYW1lIH1cbiAgICAgIDwvQWxlcnQ+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlbGxvRnJvbVBhcmFtcztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFRvZG9BcHBDb21wb25lbnQgZnJvbSBcIi4vdG9kb19hcHBfY29tcG9uZW50XCI7XHJcblxyXG5jbGFzcyBUb2RvQXBwQ29udGFpbmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHsgaXRlbXM6IFtdLCB0ZXh0OiBcIlwiIH07XHJcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRleHQ6IGUudGFyZ2V0LnZhbHVlIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlU3VibWl0KGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IG5ld0l0ZW0gPSB7XHJcbiAgICAgIHRleHQ6IHRoaXMuc3RhdGUudGV4dCxcclxuICAgICAgaWQ6IERhdGUubm93KClcclxuICAgIH07XHJcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7XHJcbiAgICAgIGl0ZW1zOiBzdGF0ZS5pdGVtcy5jb25jYXQobmV3SXRlbSksXHJcbiAgICAgIHRleHQ6IFwiXCJcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxUb2RvQXBwQ29tcG9uZW50XHJcbiAgICAgICAgY3VycmVudFRleHQ9e3RoaXMuc3RhdGUudGV4dH1cclxuICAgICAgICBpdGVtcz17dGhpcy5zdGF0ZS5pdGVtc31cclxuICAgICAgICBoYW5kbGVTdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fVxyXG4gICAgICAgIGhhbmRsZUNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9kb0FwcENvbnRhaW5lcjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFRvZG9MaXN0IGZyb20gXCIuL3RvZG9fbGlzdFwiO1xuaW1wb3J0IFRvZG9Gb3JtIGZyb20gXCIuL3RvZG9fZm9ybVwiO1xuaW1wb3J0IHsgQ29udGFpbmVyLCBSb3csIENvbCB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcblxuY29uc3QgVG9kb0FwcENvbXBvbmVudCA9ICh7XG4gIGhhbmRsZUNoYW5nZSxcbiAgaGFuZGxlU3VibWl0LFxuICBjdXJyZW50VGV4dCxcbiAgaXRlbXNcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPGgzPlRPRE88L2gzPlxuICAgICAgPFJvdz5cbiAgICAgICAgPENvbCBsZz17Nn0geHM9ezEyfT5cbiAgICAgICAgICA8VG9kb0Zvcm1cbiAgICAgICAgICAgIGhhbmRsZVN1Ym1pdD17aGFuZGxlU3VibWl0fVxuICAgICAgICAgICAgaGFuZGxlQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBuZXh0UG9zaXRpb249e2l0ZW1zLmxlbmd0aCArIDF9XG4gICAgICAgICAgICBjdXJyZW50VGV4dD17Y3VycmVudFRleHR9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db2w+XG4gICAgICAgIDxDb2wgbGc9ezZ9IHhzPXsxMn0+XG4gICAgICAgICAgPFRvZG9MaXN0IGl0ZW1zPXtpdGVtc30gLz5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvZG9BcHBDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRvZG9JdGVtIGZyb20gJy4vdG9kb19pdGVtJztcbmltcG9ydCBMaXN0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9MaXN0R3JvdXAnO1xuXG5cblxuY29uc3QgVG9kb0xpc3QgPSAoe1xuICBpdGVtcyxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8TGlzdEdyb3VwPlxuICAgICAge2l0ZW1zLm1hcChpdGVtID0+IChcbiAgICAgICAgPFRvZG9JdGVtIGtleT17aXRlbS5pZH0gdGV4dD17aXRlbS50ZXh0fSAvPlxuICAgICAgKSl9XG4gICAgPC9MaXN0R3JvdXA+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvZG9MaXN0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMaXN0R3JvdXAgZnJvbSAncmVhY3QtYm9vdHN0cmFwL2xpYi9MaXN0R3JvdXAnO1xuXG5jb25zdCBUb2RvSXRlbSA9ICh7XG4gIHRleHQsXG59KSA9PiB7XG4gIHJldHVybiA8TGlzdEdyb3VwLkl0ZW0+XG4gICAge3RleHR9XG4gICAgPC9MaXN0R3JvdXAuSXRlbT47XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvZG9JdGVtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3F1ZXJ5U2VsZWN0b3JBbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsXCIpKTtcblxudmFyIF9tYXBDb250ZXh0VG9Qcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWNvbnRleHQtdG9vbGJveC9saWIvbWFwQ29udGV4dFRvUHJvcHNcIikpO1xuXG52YXIgX1NlbGVjdGFibGVDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU2VsZWN0YWJsZUNvbnRleHRcIikpO1xuXG52YXIgX05hdkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdkNvbnRleHRcIikpO1xuXG52YXIgX1RhYkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYkNvbnRleHRcIikpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIEFic3RyYWN0TmF2ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQWJzdHJhY3ROYXYsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFic3RyYWN0TmF2KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0ID0gZnVuY3Rpb24gKGtleSwgZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgICAgcGFyZW50T25TZWxlY3QgPSBfdGhpcyRwcm9wcy5wYXJlbnRPblNlbGVjdDtcbiAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgaWYgKG9uU2VsZWN0KSBvblNlbGVjdChrZXksIGV2ZW50KTtcbiAgICAgIGlmIChwYXJlbnRPblNlbGVjdCkgcGFyZW50T25TZWxlY3Qoa2V5LCBldmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvbktleURvd24gPSBfdGhpcy5wcm9wcy5vbktleURvd247XG4gICAgICBpZiAob25LZXlEb3duKSBvbktleURvd24oZXZlbnQpO1xuICAgICAgdmFyIG5leHRBY3RpdmVDaGlsZDtcblxuICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgbmV4dEFjdGl2ZUNoaWxkID0gX3RoaXMuZ2V0TmV4dEFjdGl2ZUNoaWxkKC0xKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICBuZXh0QWN0aXZlQ2hpbGQgPSBfdGhpcy5nZXROZXh0QWN0aXZlQ2hpbGQoMSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghbmV4dEFjdGl2ZUNoaWxkKSByZXR1cm47XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5oYW5kbGVTZWxlY3QobmV4dEFjdGl2ZUNoaWxkLmRhdGFzZXQucmJFdmVudEtleSwgZXZlbnQpO1xuXG4gICAgICBfdGhpcy5fbmVlZHNSZWZvY3VzID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYXR0YWNoUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubGlzdE5vZGUgPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbmF2Q29udGV4dDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQWJzdHJhY3ROYXYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYpIHtcbiAgICB2YXIgYWN0aXZlS2V5ID0gX3JlZi5hY3RpdmVLZXksXG4gICAgICAgIGdldENvbnRyb2xsZWRJZCA9IF9yZWYuZ2V0Q29udHJvbGxlZElkLFxuICAgICAgICBnZXRDb250cm9sbGVySWQgPSBfcmVmLmdldENvbnRyb2xsZXJJZCxcbiAgICAgICAgcm9sZSA9IF9yZWYucm9sZTtcbiAgICByZXR1cm4ge1xuICAgICAgbmF2Q29udGV4dDoge1xuICAgICAgICByb2xlOiByb2xlLFxuICAgICAgICAvLyB1c2VkIGJ5IE5hdkxpbmsgdG8gZGV0ZXJtaW5lIGl0J3Mgcm9sZVxuICAgICAgICBhY3RpdmVLZXk6ICgwLCBfU2VsZWN0YWJsZUNvbnRleHQubWFrZUV2ZW50S2V5KShhY3RpdmVLZXkpLFxuICAgICAgICBnZXRDb250cm9sbGVkSWQ6IGdldENvbnRyb2xsZWRJZCB8fCBub29wLFxuICAgICAgICBnZXRDb250cm9sbGVySWQ6IGdldENvbnRyb2xsZXJJZCB8fCBub29wXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgX3Byb3RvID0gQWJzdHJhY3ROYXYucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKCF0aGlzLl9uZWVkc1JlZm9jdXMgfHwgIXRoaXMubGlzdE5vZGUpIHJldHVybjtcbiAgICB2YXIgYWN0aXZlQ2hpbGQgPSB0aGlzLmxpc3ROb2RlLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJiLWV2ZW50LWtleV0uYWN0aXZlJyk7XG4gICAgaWYgKGFjdGl2ZUNoaWxkKSBhY3RpdmVDaGlsZC5mb2N1cygpO1xuICB9O1xuXG4gIF9wcm90by5nZXROZXh0QWN0aXZlQ2hpbGQgPSBmdW5jdGlvbiBnZXROZXh0QWN0aXZlQ2hpbGQob2Zmc2V0KSB7XG4gICAgaWYgKCF0aGlzLmxpc3ROb2RlKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgaXRlbXMgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkodGhpcy5saXN0Tm9kZSwgJ1tkYXRhLXJiLWV2ZW50LWtleV06bm90KC5kaXNhYmxlZCknKTtcbiAgICB2YXIgYWN0aXZlQ2hpbGQgPSB0aGlzLmxpc3ROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKTtcbiAgICB2YXIgaW5kZXggPSBpdGVtcy5pbmRleE9mKGFjdGl2ZUNoaWxkKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbmV4dEluZGV4ID0gaW5kZXggKyBvZmZzZXQ7XG4gICAgaWYgKG5leHRJbmRleCA+PSBpdGVtcy5sZW5ndGgpIG5leHRJbmRleCA9IDA7XG4gICAgaWYgKG5leHRJbmRleCA8IDApIG5leHRJbmRleCA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGl0ZW1zW25leHRJbmRleF07XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBfID0gX3RoaXMkcHJvcHMyLm9uU2VsZWN0LFxuICAgICAgICBfMCA9IF90aGlzJHByb3BzMi5wYXJlbnRPblNlbGVjdCxcbiAgICAgICAgXzEgPSBfdGhpcyRwcm9wczIuZ2V0Q29udHJvbGxlZElkLFxuICAgICAgICBfMiA9IF90aGlzJHByb3BzMi5nZXRDb250cm9sbGVySWQsXG4gICAgICAgIF8zID0gX3RoaXMkcHJvcHMyLmFjdGl2ZUtleSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgW1wiYXNcIiwgXCJvblNlbGVjdFwiLCBcInBhcmVudE9uU2VsZWN0XCIsIFwiZ2V0Q29udHJvbGxlZElkXCIsIFwiZ2V0Q29udHJvbGxlcklkXCIsIFwiYWN0aXZlS2V5XCJdKTtcblxuICAgIGlmIChwcm9wcy5yb2xlID09PSAndGFibGlzdCcpIHtcbiAgICAgIHByb3BzLm9uS2V5RG93biA9IHRoaXMuaGFuZGxlS2V5RG93bjtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2VsZWN0YWJsZUNvbnRleHQuZGVmYXVsdC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTmF2Q29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5uYXZDb250ZXh0XG4gICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgIHJlZjogdGhpcy5hdHRhY2hSZWZcbiAgICB9KSkpKTtcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3ROYXY7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkFic3RyYWN0TmF2LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICd1bCdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfbWFwQ29udGV4dFRvUHJvcHMuZGVmYXVsdCkoW19TZWxlY3RhYmxlQ29udGV4dC5kZWZhdWx0LCBfVGFiQ29udGV4dC5kZWZhdWx0XSwgZnVuY3Rpb24gKHBhcmVudE9uU2VsZWN0LCB0YWJDb250ZXh0LCBfcmVmMikge1xuICB2YXIgcm9sZSA9IF9yZWYyLnJvbGU7XG4gIGlmICghdGFiQ29udGV4dCkgcmV0dXJuIHtcbiAgICBwYXJlbnRPblNlbGVjdDogcGFyZW50T25TZWxlY3RcbiAgfTtcbiAgdmFyIGFjdGl2ZUtleSA9IHRhYkNvbnRleHQuYWN0aXZlS2V5LFxuICAgICAgZ2V0Q29udHJvbGxlcklkID0gdGFiQ29udGV4dC5nZXRDb250cm9sbGVySWQsXG4gICAgICBnZXRDb250cm9sbGVkSWQgPSB0YWJDb250ZXh0LmdldENvbnRyb2xsZWRJZDtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICBwYXJlbnRPblNlbGVjdDogcGFyZW50T25TZWxlY3QsXG4gICAgcm9sZTogcm9sZSB8fCAndGFibGlzdCcsXG4gICAgLy8gcGFzcyB0aGVzZSB0d28gdGhyb3VnaCB0byBhdm9pZCBoYXZpbmcgdG8gbGlzdGVuIHRvXG4gICAgLy8gYm90aCBUYWIgYW5kIE5hdiBjb250ZXh0cyBpbiBOYXZMaW5rXG4gICAgZ2V0Q29udHJvbGxlcklkOiBnZXRDb250cm9sbGVySWQsXG4gICAgZ2V0Q29udHJvbGxlZElkOiBnZXRDb250cm9sbGVkSWRcbiAgfTtcbn0sIEFic3RyYWN0TmF2KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIFRhYkNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgX2RlZmF1bHQgPSBUYWJDb250ZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfQWJzdHJhY3ROYXZJdGVtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BYnN0cmFjdE5hdkl0ZW1cIikpO1xuXG52YXIgX1NlbGVjdGFibGVDb250ZXh0ID0gcmVxdWlyZShcIi4vU2VsZWN0YWJsZUNvbnRleHRcIik7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL1RoZW1lUHJvdmlkZXJcIik7XG5cbnZhciBMaXN0R3JvdXBJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTGlzdEdyb3VwSXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdEdyb3VwSXRlbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkO1xuXG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwSXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczIuYnNQcmVmaXgsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzMi5hY3RpdmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMyLnZhcmlhbnQsXG4gICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzMi5hY3Rpb24sXG4gICAgICAgIGFzID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzMi5ldmVudEtleSxcbiAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgW1wiYnNQcmVmaXhcIiwgXCJhY3RpdmVcIiwgXCJkaXNhYmxlZFwiLCBcImNsYXNzTmFtZVwiLCBcInZhcmlhbnRcIiwgXCJhY3Rpb25cIiwgXCJhc1wiLCBcImV2ZW50S2V5XCJdKTtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQWJzdHJhY3ROYXZJdGVtLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICBldmVudEtleTogKDAsIF9TZWxlY3RhYmxlQ29udGV4dC5tYWtlRXZlbnRLZXkpKGV2ZW50S2V5LCBwcm9wcy5ocmVmKSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICxcbiAgICAgIGFzOiBhcyB8fCAoYWN0aW9uID8gcHJvcHMuaHJlZiA/ICdhJyA6ICdidXR0b24nIDogJ2RpdicpLFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGFjdGl2ZSAmJiAnYWN0aXZlJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgYWN0aW9uICYmIGJzUHJlZml4ICsgXCItYWN0aW9uXCIpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaXN0R3JvdXBJdGVtO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5MaXN0R3JvdXBJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFyaWFudDogbnVsbCxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX1RoZW1lUHJvdmlkZXIuY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KShMaXN0R3JvdXBJdGVtLCAnbGlzdC1ncm91cC1pdGVtJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX05hdkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdkNvbnRleHRcIikpO1xuXG52YXIgX1NlbGVjdGFibGVDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU2VsZWN0YWJsZUNvbnRleHRcIikpO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbnZhciBBYnN0cmFjdE5hdkl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShBYnN0cmFjdE5hdkl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFic3RyYWN0TmF2SXRlbSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQWJzdHJhY3ROYXZJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wcy50YWJJbmRleCxcbiAgICAgICAgZXZlbnRLZXkgPSBfdGhpcyRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwidGFiSW5kZXhcIiwgXCJldmVudEtleVwiLCBcIm9uU2VsZWN0XCIsIFwiYXNcIl0pO1xuICAgIHZhciBuYXZLZXkgPSAoMCwgX1NlbGVjdGFibGVDb250ZXh0Lm1ha2VFdmVudEtleSkoZXZlbnRLZXksIHByb3BzLmhyZWYpO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TZWxlY3RhYmxlQ29udGV4dC5kZWZhdWx0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAocGFyZW50T25TZWxlY3QpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9OYXZDb250ZXh0LmRlZmF1bHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChuYXZDb250ZXh0KSB7XG4gICAgICAgIHZhciBpc0FjdGl2ZSA9IGFjdGl2ZTtcblxuICAgICAgICBpZiAobmF2Q29udGV4dCkge1xuICAgICAgICAgIGlmICghcHJvcHMucm9sZSAmJiBuYXZDb250ZXh0LnJvbGUgPT09ICd0YWJsaXN0JykgcHJvcHMucm9sZSA9ICd0YWInO1xuICAgICAgICAgIHByb3BzWydkYXRhLXJiLWV2ZW50LWtleSddID0gbmF2S2V5O1xuICAgICAgICAgIHByb3BzLmlkID0gbmF2Q29udGV4dC5nZXRDb250cm9sbGVySWQobmF2S2V5KTtcbiAgICAgICAgICBwcm9wc1snYXJpYS1jb250cm9scyddID0gbmF2Q29udGV4dC5nZXRDb250cm9sbGVkSWQobmF2S2V5KTtcbiAgICAgICAgICBpc0FjdGl2ZSA9IGFjdGl2ZSA9PSBudWxsICYmIG5hdktleSAhPSBudWxsID8gbmF2Q29udGV4dC5hY3RpdmVLZXkgPT09IG5hdktleSA6IGFjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wcy5yb2xlID09PSAndGFiJykge1xuICAgICAgICAgIHByb3BzLnRhYkluZGV4ID0gaXNBY3RpdmUgPyB0YWJJbmRleCA6IC0xO1xuICAgICAgICAgIHByb3BzWydhcmlhLXNlbGVjdGVkJ10gPSBpc0FjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGlzQWN0aXZlICYmICdhY3RpdmUnKSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgIHZhciBvbkNsaWNrID0gX3RoaXMucHJvcHMub25DbGljaztcbiAgICAgICAgICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGUpO1xuICAgICAgICAgICAgaWYgKG5hdktleSA9PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgICBpZiAob25TZWxlY3QpIG9uU2VsZWN0KG5hdktleSwgZSk7XG4gICAgICAgICAgICBpZiAocGFyZW50T25TZWxlY3QpIHBhcmVudE9uU2VsZWN0KG5hdktleSwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3ROYXZJdGVtO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5BYnN0cmFjdE5hdkl0ZW0uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIF9kZWZhdWx0ID0gQWJzdHJhY3ROYXZJdGVtO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBGb3JtIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvRm9ybSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9saWIvQnV0dG9uJztcblxuY29uc3QgVG9kb0Zvcm0gPSAoe1xuICBoYW5kbGVTdWJtaXQsXG4gIGhhbmRsZUNoYW5nZSxcbiAgbmV4dFBvc2l0aW9uLFxuICBjdXJyZW50VGV4dFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxGb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9PlxuICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgIDxGb3JtLkxhYmVsPlRhc2s8L0Zvcm0uTGFiZWw+XG4gICAgICAgIDxGb3JtLkNvbnRyb2wgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkZlZWQgdGhlIGNhdFwiIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IHZhbHVlPXtjdXJyZW50VGV4dH0gLz5cbiAgICAgICAgPEZvcm0uVGV4dCBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgV2hhdCBuZWVkcyB0byBiZSBkb25lP1xuICAgICAgICA8L0Zvcm0uVGV4dD5cbiAgICAgIDwvRm9ybS5Hcm91cD5cblxuICAgICAgIDxCdXR0b24gdmFyaWFudD1cInByaW1hcnlcIiB0eXBlPVwic3VibWl0XCI+XG4gICAgICAgIEFkZCAje25leHRQb3NpdGlvbn1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvRm9ybT5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvZG9Gb3JtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgTWVzc2FnZXNDb21wb25lbnQgZnJvbSBcIi4vbWVzc2FnZXNfY29tcG9uZW50XCI7XHJcbmltcG9ydCBzZW5kQXBpUmVxdWVzdCBmcm9tIFwicmVhY3QvdXRpbHMvYXBpXCI7XHJcblxyXG5jbGFzcyBNZXNzYWdlc0NvbnRhaW5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7IG1lc3NhZ2VzOiBbXSB9O1xyXG5cclxuICAgIHRoaXMuZGVsZXRlTWVzc2FnZSA9IHRoaXMuZGVsZXRlTWVzc2FnZS5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcblxyXG4gIGZldGNoTWVzc2FnZXMoKXtcclxuICAgIHNlbmRBcGlSZXF1ZXN0KHsgdXJsOiBcIi9hcGkvbWVzc2FnZXNcIiB9KVxyXG4gICAgICAudGhlbigobWVzc2FnZXMpID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlcyxcclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBtZXNzYWdlczogW10sXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIGRlbGV0ZU1lc3NhZ2UobWVzc2FnZSl7XHJcbiAgICBjb25zdCB1cmwgPSBgL2FwaS9tZXNzYWdlcy8ke21lc3NhZ2UuX2lkfWBcclxuICAgIHNlbmRBcGlSZXF1ZXN0KHtcclxuICAgICAgICB1cmwsXHJcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigoX2lnbm9yZWQpID0+IHtcclxuICAgICAgICBjb25zdCB7bWVzc2FnZXN9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUluZGV4ID0gbWVzc2FnZXMuaW5kZXhPZihtZXNzYWdlKTtcclxuICAgICAgICBpZiAobWVzc2FnZUluZGV4ID4gLTEpIHtcclxuICAgICAgICAgIG1lc3NhZ2VzLnNwbGljZShtZXNzYWdlSW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlcyxcclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBtZXNzYWdlczogW10sXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XHJcbiAgICB0aGlzLmZldGNoTWVzc2FnZXMoKVxyXG4gIH1cclxuXHJcbiAgXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE1lc3NhZ2VzQ29tcG9uZW50XHJcbiAgICAgICAgbWVzc2FnZXM9e3RoaXMuc3RhdGUubWVzc2FnZXN9XHJcbiAgICAgICAgZGVsZXRlTWVzc2FnZT17dGhpcy5kZWxldGVNZXNzYWdlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VzQ29udGFpbmVyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7Q29udGFpbmVyLCBMaXN0R3JvdXB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XHJcbmltcG9ydCBNZXNzYWdlSXRlbSBmcm9tICcuL21lc3NhZ2VfaXRlbSc7XHJcblxyXG5cclxuY29uc3QgTWVzc2FnZXNDb21wb25lbnQgPSAoe1xyXG4gIG1lc3NhZ2VzLFxyXG4gIGRlbGV0ZU1lc3NhZ2UsXHJcbn0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPENvbnRhaW5lcj5cclxuICAgICAgPGgzPk1lc3NhZ2VzPC9oMz5cclxuICAgICAgPExpc3RHcm91cD5cclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXNzYWdlcy5tYXAoKCBtZXNzYWdlLCBpICk9PiAoXHJcbiAgICAgICAgICAgIDxMaXN0R3JvdXAuSXRlbSBrZXk9e2l9ID5cclxuICAgICAgICAgICAgICA8TWVzc2FnZUl0ZW0gbWVzc2FnZT17bWVzc2FnZX0gZGVsZXRlTWVzc2FnZT17ZGVsZXRlTWVzc2FnZX0gLz5cclxuICAgICAgICAgICAgPC9MaXN0R3JvdXAuSXRlbT5cclxuICAgICAgICAgICkpXHJcbiAgICAgICAgfVxyXG4gICAgICA8L0xpc3RHcm91cD5cclxuICAgIDwvQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlc0NvbXBvbmVudDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBSb3csIENvbCwgQnV0dG9uVG9vbGJhciwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5jb25zdCBNZXNzYWdlSXRlbSA9ICh7IG1lc3NhZ2UsIGRlbGV0ZU1lc3NhZ2UgfSkgPT4ge1xuICBjb25zdCBkZXRhaWxzUGF0aCA9IGAvbWVzc2FnZS8ke21lc3NhZ2UuX2lkfWA7XG5cbiAgcmV0dXJuIChcbiAgICA8Um93PlxuICAgICAgPENvbCB4cz17OH0+e21lc3NhZ2UuYm9keX08L0NvbD5cbiAgICAgIDxDb2wgeHM9ezR9PlxuICAgICAgICA8QnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJvdXRsaW5lLXByaW1hcnlcIj5cbiAgICAgICAgICAgIDxMaW5rIHRvPXtkZXRhaWxzUGF0aH0+RMOpdGFpbHM8L0xpbms+XG4gICAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJkYW5nZXJcIiBvbkNsaWNrPXsoKSA9PiBkZWxldGVNZXNzYWdlKG1lc3NhZ2UpfT5cbiAgICAgICAgICAgIERlbGV0ZVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICA8L0NvbD5cbiAgICA8L1Jvdz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VJdGVtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IE1lc3NhZ2VDb21wb25lbnQgZnJvbSBcIi4vbWVzc2FnZV9jb21wb25lbnRcIjtcbmltcG9ydCBzZW5kQXBpUmVxdWVzdCBmcm9tIFwicmVhY3QvdXRpbHMvYXBpXCI7XG5cbmNsYXNzIE1lc3NhZ2VDb250YWluZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBcbiAgICAgIGlkOiBwcm9wcy5tYXRjaC5wYXJhbXMuaWQsXG4gICAgICBtZXNzYWdlOiBudWxsLCBcbiAgICB9O1xuICB9XG5cblxuICBmZXRjaE1lc3NhZ2UoKXtcbiAgICBjb25zdCB1cmwgPSBgL2FwaS9tZXNzYWdlcy8ke3RoaXMuc3RhdGUuaWR9YDtcbiAgICBzZW5kQXBpUmVxdWVzdCh7IHVybCB9KVxuICAgICAgLnRoZW4oKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtZXNzYWdlOiBbXSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gIH1cblxuXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XG4gICAgc2V0VGltZW91dCggdGhpcy5mZXRjaE1lc3NhZ2UuYmluZCh0aGlzKSwgMjAwMCApO1xuICB9XG5cbiAgXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPE1lc3NhZ2VDb21wb25lbnRcbiAgICAgICAgbWVzc2FnZT17dGhpcy5zdGF0ZS5tZXNzYWdlfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VDb250YWluZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge0p1bWJvdHJvbn0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcbmltcG9ydCB7IENpcmNsZUxvYWRlciB9IGZyb20gXCJyZWFjdC1zcGlubmVyc1wiO1xuXG5cbmNvbnN0IE1lc3NhZ2VDb21wb25lbnQgPSAoe1xuICBtZXNzYWdlLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxKdW1ib3Ryb24+XG4gICAgICA8aDM+TWVzc2FnZXM8L2gzPlxuICAgICAgeyAhbWVzc2FnZSAmJlxuICAgICAgICA8Q2lyY2xlTG9hZGVyIFxuICAgICAgICAvPlxuICAgICAgfVxuICAgICAgeyBtZXNzYWdlICYmIFxuICAgICAgICA8cD5cbiAgICAgICAgICB7IG1lc3NhZ2UuYm9keSB9XG4gICAgICAgIDwvcD5cbiAgICAgIH1cbiAgICA8L0p1bWJvdHJvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VDb21wb25lbnQ7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydtb2R1bGUnLCAnLi9CYXJMb2FkZXInLCAnLi9CZWF0TG9hZGVyJywgJy4vQm91bmNlTG9hZGVyJywgJy4vQ2lyY2xlTG9hZGVyJywgJy4vQ2xpcExvYWRlcicsICcuL0NsaW1iaW5nQm94TG9hZGVyJywgJy4vRG90TG9hZGVyJywgJy4vRmFkZUxvYWRlcicsICcuL0dyaWRMb2FkZXInLCAnLi9IYXNoTG9hZGVyJywgJy4vTW9vbkxvYWRlcicsICcuL1BhY21hbkxvYWRlcicsICcuL1Byb3BhZ2F0ZUxvYWRlcicsICcuL1B1bHNlTG9hZGVyJywgJy4vUmluZ0xvYWRlcicsICcuL1Jpc2VMb2FkZXInLCAnLi9Sb3RhdGVMb2FkZXInLCAnLi9TY2FsZUxvYWRlcicsICcuL1N5bmNMb2FkZXInXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnLi9CYXJMb2FkZXInKSwgcmVxdWlyZSgnLi9CZWF0TG9hZGVyJyksIHJlcXVpcmUoJy4vQm91bmNlTG9hZGVyJyksIHJlcXVpcmUoJy4vQ2lyY2xlTG9hZGVyJyksIHJlcXVpcmUoJy4vQ2xpcExvYWRlcicpLCByZXF1aXJlKCcuL0NsaW1iaW5nQm94TG9hZGVyJyksIHJlcXVpcmUoJy4vRG90TG9hZGVyJyksIHJlcXVpcmUoJy4vRmFkZUxvYWRlcicpLCByZXF1aXJlKCcuL0dyaWRMb2FkZXInKSwgcmVxdWlyZSgnLi9IYXNoTG9hZGVyJyksIHJlcXVpcmUoJy4vTW9vbkxvYWRlcicpLCByZXF1aXJlKCcuL1BhY21hbkxvYWRlcicpLCByZXF1aXJlKCcuL1Byb3BhZ2F0ZUxvYWRlcicpLCByZXF1aXJlKCcuL1B1bHNlTG9hZGVyJyksIHJlcXVpcmUoJy4vUmluZ0xvYWRlcicpLCByZXF1aXJlKCcuL1Jpc2VMb2FkZXInKSwgcmVxdWlyZSgnLi9Sb3RhdGVMb2FkZXInKSwgcmVxdWlyZSgnLi9TY2FsZUxvYWRlcicpLCByZXF1aXJlKCcuL1N5bmNMb2FkZXInKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLkJhckxvYWRlciwgZ2xvYmFsLkJlYXRMb2FkZXIsIGdsb2JhbC5Cb3VuY2VMb2FkZXIsIGdsb2JhbC5DaXJjbGVMb2FkZXIsIGdsb2JhbC5DbGlwTG9hZGVyLCBnbG9iYWwuQ2xpbWJpbmdCb3hMb2FkZXIsIGdsb2JhbC5Eb3RMb2FkZXIsIGdsb2JhbC5GYWRlTG9hZGVyLCBnbG9iYWwuR3JpZExvYWRlciwgZ2xvYmFsLkhhc2hMb2FkZXIsIGdsb2JhbC5Nb29uTG9hZGVyLCBnbG9iYWwuUGFjbWFuTG9hZGVyLCBnbG9iYWwuUHJvcGFnYXRlTG9hZGVyLCBnbG9iYWwuUHVsc2VMb2FkZXIsIGdsb2JhbC5SaW5nTG9hZGVyLCBnbG9iYWwuUmlzZUxvYWRlciwgZ2xvYmFsLlJvdGF0ZUxvYWRlciwgZ2xvYmFsLlNjYWxlTG9hZGVyLCBnbG9iYWwuU3luY0xvYWRlcik7XG4gICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUsIF9CYXJMb2FkZXIsIF9CZWF0TG9hZGVyLCBfQm91bmNlTG9hZGVyLCBfQ2lyY2xlTG9hZGVyLCBfQ2xpcExvYWRlciwgX0NsaW1iaW5nQm94TG9hZGVyLCBfRG90TG9hZGVyLCBfRmFkZUxvYWRlciwgX0dyaWRMb2FkZXIsIF9IYXNoTG9hZGVyLCBfTW9vbkxvYWRlciwgX1BhY21hbkxvYWRlciwgX1Byb3BhZ2F0ZUxvYWRlciwgX1B1bHNlTG9hZGVyLCBfUmluZ0xvYWRlciwgX1Jpc2VMb2FkZXIsIF9Sb3RhdGVMb2FkZXIsIF9TY2FsZUxvYWRlciwgX1N5bmNMb2FkZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBfQmFyTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JhckxvYWRlcik7XG5cbiAgdmFyIF9CZWF0TG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JlYXRMb2FkZXIpO1xuXG4gIHZhciBfQm91bmNlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JvdW5jZUxvYWRlcik7XG5cbiAgdmFyIF9DaXJjbGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2lyY2xlTG9hZGVyKTtcblxuICB2YXIgX0NsaXBMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2xpcExvYWRlcik7XG5cbiAgdmFyIF9DbGltYmluZ0JveExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DbGltYmluZ0JveExvYWRlcik7XG5cbiAgdmFyIF9Eb3RMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRG90TG9hZGVyKTtcblxuICB2YXIgX0ZhZGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmFkZUxvYWRlcik7XG5cbiAgdmFyIF9HcmlkTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dyaWRMb2FkZXIpO1xuXG4gIHZhciBfSGFzaExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IYXNoTG9hZGVyKTtcblxuICB2YXIgX01vb25Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9vbkxvYWRlcik7XG5cbiAgdmFyIF9QYWNtYW5Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFjbWFuTG9hZGVyKTtcblxuICB2YXIgX1Byb3BhZ2F0ZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9wYWdhdGVMb2FkZXIpO1xuXG4gIHZhciBfUHVsc2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHVsc2VMb2FkZXIpO1xuXG4gIHZhciBfUmluZ0xvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SaW5nTG9hZGVyKTtcblxuICB2YXIgX1Jpc2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmlzZUxvYWRlcik7XG5cbiAgdmFyIF9Sb3RhdGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm90YXRlTG9hZGVyKTtcblxuICB2YXIgX1NjYWxlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NjYWxlTG9hZGVyKTtcblxuICB2YXIgX1N5bmNMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY0xvYWRlcik7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIEJhckxvYWRlcjogX0JhckxvYWRlcjIuZGVmYXVsdCxcbiAgICBCZWF0TG9hZGVyOiBfQmVhdExvYWRlcjIuZGVmYXVsdCxcbiAgICBCb3VuY2VMb2FkZXI6IF9Cb3VuY2VMb2FkZXIyLmRlZmF1bHQsXG4gICAgQ2lyY2xlTG9hZGVyOiBfQ2lyY2xlTG9hZGVyMi5kZWZhdWx0LFxuICAgIENsaXBMb2FkZXI6IF9DbGlwTG9hZGVyMi5kZWZhdWx0LFxuICAgIENsaW1iaW5nQm94TG9hZGVyOiBfQ2xpbWJpbmdCb3hMb2FkZXIyLmRlZmF1bHQsXG4gICAgRG90TG9hZGVyOiBfRG90TG9hZGVyMi5kZWZhdWx0LFxuICAgIEZhZGVMb2FkZXI6IF9GYWRlTG9hZGVyMi5kZWZhdWx0LFxuICAgIEdyaWRMb2FkZXI6IF9HcmlkTG9hZGVyMi5kZWZhdWx0LFxuICAgIEhhc2hMb2FkZXI6IF9IYXNoTG9hZGVyMi5kZWZhdWx0LFxuICAgIE1vb25Mb2FkZXI6IF9Nb29uTG9hZGVyMi5kZWZhdWx0LFxuICAgIFBhY21hbkxvYWRlcjogX1BhY21hbkxvYWRlcjIuZGVmYXVsdCxcbiAgICBQcm9wYWdhdGVMb2FkZXI6IF9Qcm9wYWdhdGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgUHVsc2VMb2FkZXI6IF9QdWxzZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBSaW5nTG9hZGVyOiBfUmluZ0xvYWRlcjIuZGVmYXVsdCxcbiAgICBSaXNlTG9hZGVyOiBfUmlzZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBSb3RhdGVMb2FkZXI6IF9Sb3RhdGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgU2NhbGVMb2FkZXI6IF9TY2FsZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBTeW5jTG9hZGVyOiBfU3luY0xvYWRlcjIuZGVmYXVsdFxuICB9O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJywgJy4vaGVscGVycy9pbmRleCddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpLCByZXF1aXJlKCcuL2hlbHBlcnMvaW5kZXgnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwub25seVVwZGF0ZUZvcktleXMsIGdsb2JhbC5pbmRleCk7XG4gICAgZ2xvYmFsLkJhckxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzLCBfaW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLkxvYWRlciA9IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgbG9uZyA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXtsZWZ0Oi0zNSU7cmlnaHQ6MTAwJX02MCV7bGVmdDoxMDAlO3JpZ2h0Oi05MCV9MTAwJXtsZWZ0OjEwMCU7cmlnaHQ6LTkwJX0nKTtcblxuICB2YXIgc2hvcnQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7bGVmdDotMjAwJTtyaWdodDoxMDAlfTYwJXtsZWZ0OjEwNyU7cmlnaHQ6LTglfTEwMCV7bGVmdDoxMDclO3JpZ2h0Oi04JX0nKTtcblxuICB2YXIgTG9hZGVyID0gZXhwb3J0cy5Mb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzLmhlaWdodCxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgICBoZWlnaHRVbml0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0VW5pdDtcblxuXG4gICAgICAgIHJldHVybiAoLyojX19QVVJFX18qLygwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OicsICcnICsgaGVpZ2h0ICsgaGVpZ2h0VW5pdCwgJztvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjonLCBjb2xvciwgJztiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7ZGlzcGxheTpibG9jaztib3JkZXItcmFkaXVzOjJweDt3aWxsLWNoYW5nZTpsZWZ0LHJpZ2h0O2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uOicsIGkgPT09IDEgPyBsb25nIDogc2hvcnQsICcgMi4xcyAnLCBpID09PSAyID8gJzEuMTVzJyA6ICcnLCAnICcsIGkgPT09IDEgPyAnY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpJyA6ICdjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpJywgJyBpbmZpbml0ZTt9JylcbiAgICAgICAgKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMyLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMyLmhlaWdodCxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMyLmNvbG9yLFxuICAgICAgICAgICAgaGVpZ2h0VW5pdCA9IF90aGlzJHByb3BzMi5oZWlnaHRVbml0LFxuICAgICAgICAgICAgd2lkdGhVbml0ID0gX3RoaXMkcHJvcHMyLndpZHRoVW5pdCxcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWU7XG5cblxuICAgICAgICB2YXIgd3JhcHBlciA9IC8qI19fUFVSRV9fKi8oMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsICcnICsgd2lkdGggKyB3aWR0aFVuaXQsICc7aGVpZ2h0OicsICcnICsgaGVpZ2h0ICsgaGVpZ2h0VW5pdCwgJztvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjonLCAoMCwgX2luZGV4LmNhbGN1bGF0ZVJnYmEpKGNvbG9yLCAwLjIpLCAnO2JhY2tncm91bmQtY2xpcDpwYWRkaW5nLWJveDt9Jyk7XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSA/IC8qI19fUFVSRV9fKi8oMCwgX2Vtb3Rpb24uY3NzKSh3cmFwcGVyLCAnOycsIGNsYXNzTmFtZSkgOiB3cmFwcGVyO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcblxuXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgd2lkdGhVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIGhlaWdodFVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICB3aWR0aDogMTAwLFxuICAgIHdpZHRoVW5pdDogJ3B4JyxcbiAgICBoZWlnaHQ6IDQsXG4gICAgaGVpZ2h0VW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICd3aWR0aCcsICdoZWlnaHQnLCAnaGVpZ2h0VW5pdCcsICd3aWR0aFVuaXQnLCAnY2xhc3NOYW1lJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfc2V0RGlzcGxheU5hbWUgPSByZXF1aXJlKCcuL3NldERpc3BsYXlOYW1lJyk7XG5cbnZhciBfc2V0RGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0RGlzcGxheU5hbWUpO1xuXG52YXIgX3dyYXBEaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vd3JhcERpc3BsYXlOYW1lJyk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBEaXNwbGF5TmFtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzaG91bGRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRVcGRhdGUodGVzdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9ICgwLCBfcmVhY3QuY3JlYXRlRmFjdG9yeSkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgU2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFNob3VsZFVwZGF0ZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFNob3VsZFVwZGF0ZSgpIHtcbiAgICAgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU2hvdWxkVXBkYXRlKTtcbiAgICAgICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgU2hvdWxkVXBkYXRlLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiB0ZXN0KHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBTaG91bGRVcGRhdGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2hvdWxkVXBkYXRlO1xuICAgIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuICgwLCBfc2V0RGlzcGxheU5hbWUyLmRlZmF1bHQpKCgwLCBfd3JhcERpc3BsYXlOYW1lMi5kZWZhdWx0KShCYXNlQ29tcG9uZW50LCAnc2hvdWxkVXBkYXRlJykpKFNob3VsZFVwZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzaG91bGRVcGRhdGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgc2V0U3RhdGljID0gZnVuY3Rpb24gc2V0U3RhdGljKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICBCYXNlQ29tcG9uZW50W2tleV0gPSB2YWx1ZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgcmV0dXJuIEJhc2VDb21wb25lbnQ7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzZXRTdGF0aWM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICBpZiAoIUNvbXBvbmVudCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0RGlzcGxheU5hbWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2ZianMvbGliL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIHBpY2sgPSBmdW5jdGlvbiBwaWNrKG9iaiwga2V5cykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHBpY2s7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLm9ubHlVcGRhdGVGb3JLZXlzKTtcbiAgICBnbG9iYWwuQmVhdExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgYmVhdCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCc1MCV7dHJhbnNmb3JtOnNjYWxlKDAuNzUpO29wYWNpdHk6MC4yfTEwMCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzLnNpemVVbml0LFxuICAgICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMubWFyZ2luO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7ZGlzcGxheTppbmxpbmUtYmxvY2s7YmFja2dyb3VuZC1jb2xvcjonLCBjb2xvciwgJzt3aWR0aDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7bWFyZ2luOicsIG1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uOicsIGJlYXQsICcgMC43cyAnLCBpICUgMiA/ICcwcycgOiAnMC4zNXMnLCAnIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IF90aGlzLnByb3BzLmNsYXNzTmFtZTtcblxuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgfHwgJyc7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBsb2FkaW5nID0gdGhpcy5wcm9wcy5sb2FkaW5nO1xuXG5cbiAgICAgICAgcmV0dXJuIGxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzaXplVW5pdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgc2l6ZVVuaXQ6ICdweCcsXG4gICAgbWFyZ2luOiAnMnB4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbicsICdzaXplVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLkJvdW5jZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgYm91bmNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAlLDEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfTUwJXt0cmFuc2Zvcm06c2NhbGUoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzLnNpemVVbml0O1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2JhY2tncm91bmQtY29sb3I6JywgY29sb3IsICc7Ym9yZGVyLXJhZGl1czoxMDAlO29wYWNpdHk6MC42O3RvcDowO2xlZnQ6MDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uOicsIGJvdW5jZSwgJyAyLjFzICcsIGkgPT09IDEgPyAnMXMnIDogJzBzJywgJyBpbmZpbml0ZSBlYXNlLWluLW91dDt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMyLnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzMi5zaXplVW5pdCxcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWU7XG5cblxuICAgICAgICB2YXIgd3JhcHBlciA9ICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7aGVpZ2h0OicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO30nKTtcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lID8gKDAsIF9lbW90aW9uLmNzcykod3JhcHBlciwgJzsnLCBjbGFzc05hbWUpIDogd3JhcHBlcjtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgc2l6ZVVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MCxcbiAgICBzaXplVW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ3NpemVVbml0JywgJ2NsYXNzTmFtZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLm9ubHlVcGRhdGVGb3JLZXlzKTtcbiAgICBnbG9iYWwuQ2lyY2xlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfb25seVVwZGF0ZUZvcktleXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgdmFyIF9vbmx5VXBkYXRlRm9yS2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5VXBkYXRlRm9yS2V5cyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBjaXJjbGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wcy5jb2xvcixcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQ7XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgJycgKyBzaXplICogKDEgLSBpIC8gMTApICsgc2l6ZVVuaXQsICc7d2lkdGg6JywgJycgKyBzaXplICogKDEgLSBpIC8gMTApICsgc2l6ZVVuaXQsICc7Ym9yZGVyOjFweCBzb2xpZCAnLCBjb2xvciwgJztib3JkZXItcmFkaXVzOjEwMCU7dHJhbnNpdGlvbjoycztib3JkZXItYm90dG9tOm5vbmU7Ym9yZGVyLXJpZ2h0Om5vbmU7dG9wOicsIGkgKiAwLjcgKiAyLjUsICclO2xlZnQ6JywgaSAqIDAuMzUgKiAyLjUsICclO2FuaW1hdGlvbi1maWxsLW1vZGU6XFwnXFwnO2FuaW1hdGlvbjonLCBjaXJjbGUsICcgMXMgJywgaSAqIDAuMiwgJ3MgaW5maW5pdGUgbGluZWFyO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczIuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMyLnNpemVVbml0LFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZTtcblxuXG4gICAgICAgIHZhciB3cmFwcGVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7fScpO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgPyAoMCwgX2Vtb3Rpb24uY3NzKSh3cmFwcGVyLCAnOycsIGNsYXNzTmFtZSkgOiB3cmFwcGVyO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcblxuXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDApIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg0KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzaXplVW5pdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDUwLFxuICAgIHNpemVVbml0OiAncHgnLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9vbmx5VXBkYXRlRm9yS2V5czIuZGVmYXVsdCkoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnc2l6ZVVuaXQnLCAnY2xhc3NOYW1lJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwub25seVVwZGF0ZUZvcktleXMpO1xuICAgIGdsb2JhbC5DbGlwTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfb25seVVwZGF0ZUZvcktleXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgdmFyIF9vbmx5VXBkYXRlRm9yS2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5VXBkYXRlRm9yS2V5cyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIFRoaXMgcmV0dXJucyBhbiBhbmltYXRpb25cbiAgdmFyIGNsaXAgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKSBzY2FsZSgxKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpIHNjYWxlKDAuOCl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZykgc2NhbGUoMSl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgdmFyIHN0eWxlID0gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7d2lkdGg6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7aGVpZ2h0OicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2JvcmRlci1yYWRpdXM6MTAwJTtib3JkZXI6MnB4IHNvbGlkO2JvcmRlci1jb2xvcjonLCBjb2xvciwgJztib3JkZXItYm90dG9tLWNvbG9yOnRyYW5zcGFyZW50O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2FuaW1hdGlvbjonLCBjbGlwLCAnIDAuNzVzIDBzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgPyAoMCwgX2Vtb3Rpb24uY3NzKShzdHlsZSwgJzsnLCBjbGFzc05hbWUpIDogc3R5bGU7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBsb2FkaW5nID0gdGhpcy5wcm9wcy5sb2FkaW5nO1xuXG5cbiAgICAgICAgcmV0dXJuIGxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoKSB9KSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgc2l6ZVVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAzNSxcbiAgICBzaXplVW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ3NpemVVbml0JywgJ2NsYXNzTmFtZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLm9ubHlVcGRhdGVGb3JLZXlzKTtcbiAgICBnbG9iYWwuQ2xpbWJpbmdCb3hMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9vbmx5VXBkYXRlRm9yS2V5cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICB2YXIgX29ubHlVcGRhdGVGb3JLZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlVcGRhdGVGb3JLZXlzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGNsaW1iaW5nQm94ID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwtMWVtKSByb3RhdGUoLTQ1ZGVnKX01JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTFlbSkgcm90YXRlKC01MGRlZyl9MjAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMWVtLC0yZW0pIHJvdGF0ZSg0N2RlZyl9MjUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMWVtLC0yZW0pIHJvdGF0ZSg0NWRlZyl9MzAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMWVtLC0yZW0pIHJvdGF0ZSg0MGRlZyl9NDUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMmVtLC0zZW0pIHJvdGF0ZSgxMzdkZWcpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDJlbSwtM2VtKSByb3RhdGUoMTM1ZGVnKX01NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyZW0sLTNlbSkgcm90YXRlKDEzMGRlZyl9NzAle3RyYW5zZm9ybTp0cmFuc2xhdGUoM2VtLC00ZW0pIHJvdGF0ZSgyMTdkZWcpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDNlbSwtNGVtKSByb3RhdGUoMjIwZGVnKX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwtMWVtKSByb3RhdGUoLTIyNWRlZyl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gX3RoaXMucHJvcHMuY29sb3I7XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7Ym90dG9tOi0wLjFlbTtoZWlnaHQ6MWVtO3dpZHRoOjFlbTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6MTUlO2JvcmRlcjowLjI1ZW0gc29saWQgJywgY29sb3IsICc7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtNDVkZWcpO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246JywgY2xpbWJpbmdCb3gsICcgMi41cyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjc5LDAsLjQ3LC45Nyk7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQ7XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2xlZnQ6NTAlO21hcmdpbi10b3A6LTIuN2VtO21hcmdpbi1sZWZ0Oi0yLjdlbTt3aWR0aDo1LjRlbTtoZWlnaHQ6NS40ZW07Zm9udC1zaXplOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO30nKTtcbiAgICAgIH0sIF90aGlzLmhpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb2xvciA9IF90aGlzLnByb3BzLmNvbG9yO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6Ny4xZW07aGVpZ2h0OjcuMWVtO3RvcDoxLjdlbTtsZWZ0OjEuN2VtO2JvcmRlci1sZWZ0OjAuMjVlbSBzb2xpZCAnLCBjb2xvciwgJzt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt9Jyk7XG4gICAgICB9LCBfdGhpcy5jb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWU7XG5cblxuICAgICAgICB2YXIgY29udGFpbmVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo3LjFlbTtoZWlnaHQ6Ny4xZW07fScpO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgPyAoMCwgX2Vtb3Rpb24uY3NzKShjb250YWluZXIsICc7JywgY2xhc3NOYW1lKSA6IGNvbnRhaW5lcjtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLmNvbnRhaW5lcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKCkgfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuaGlsbCgpIH0pXG4gICAgICAgICAgKVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzaXplVW5pdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIHNpemVVbml0OiAncHgnLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9vbmx5VXBkYXRlRm9yS2V5czIuZGVmYXVsdCkoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnc2l6ZVVuaXQnLCAnY2xhc3NOYW1lJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwub25seVVwZGF0ZUZvcktleXMpO1xuICAgIGdsb2JhbC5Eb3RMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9vbmx5VXBkYXRlRm9yS2V5cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICB2YXIgX29ubHlVcGRhdGVGb3JLZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlVcGRhdGVGb3JLZXlzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHJvdGF0ZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcxMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX0nKTtcblxuICB2YXIgYm91bmNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAlLDEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfTUwJXt0cmFuc2Zvcm06c2NhbGUoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7dG9wOicsIGkgJSAyID8gJzAnIDogJ2F1dG8nLCAnO2JvdHRvbTonLCBpICUgMiA/ICdhdXRvJyA6ICcwJywgJztoZWlnaHQ6JywgJycgKyBzaXplIC8gMiArIHNpemVVbml0LCAnO3dpZHRoOicsICcnICsgc2l6ZSAvIDIgKyBzaXplVW5pdCwgJztiYWNrZ3JvdW5kLWNvbG9yOicsIGNvbG9yLCAnO2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbjonLCBib3VuY2UsICcgMnMgJywgaSA9PT0gMiA/ICctMXMnIDogJzBzJywgJyBpbmZpbml0ZSBsaW5lYXI7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMi5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wczIuc2l6ZVVuaXQsXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgdmFyIHdyYXBwZXIgPSAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJzthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbjonLCByb3RhdGUsICcgMnMgMHMgaW5maW5pdGUgbGluZWFyO30nKTtcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lID8gKDAsIF9lbW90aW9uLmNzcykod3JhcHBlciwgJzsnLCBjbGFzc05hbWUpIDogd3JhcHBlcjtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgc2l6ZVVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MCxcbiAgICBzaXplVW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ3NpemVVbml0JywgJ2NsYXNzTmFtZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLm9ubHlVcGRhdGVGb3JLZXlzKTtcbiAgICBnbG9iYWwuRmFkZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgZmFkZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCc1MCV7b3BhY2l0eTowLjN9MTAwJXtvcGFjaXR5OjF9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wcy53aWR0aCxcbiAgICAgICAgICAgIG1hcmdpbiA9IF90aGlzJHByb3BzLm1hcmdpbixcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgICByYWRpdXMgPSBfdGhpcyRwcm9wcy5yYWRpdXMsXG4gICAgICAgICAgICB3aWR0aFVuaXQgPSBfdGhpcyRwcm9wcy53aWR0aFVuaXQsXG4gICAgICAgICAgICBoZWlnaHRVbml0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0VW5pdCxcbiAgICAgICAgICAgIHJhZGl1c1VuaXQgPSBfdGhpcyRwcm9wcy5yYWRpdXNVbml0O1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6JywgJycgKyB3aWR0aCArIHdpZHRoVW5pdCwgJztoZWlnaHQ6JywgJycgKyBoZWlnaHQgKyBoZWlnaHRVbml0LCAnO21hcmdpbjonLCBtYXJnaW4sICc7YmFja2dyb3VuZC1jb2xvcjonLCBjb2xvciwgJztib3JkZXItcmFkaXVzOicsICcnICsgcmFkaXVzICsgcmFkaXVzVW5pdCwgJzt0cmFuc2l0aW9uOjJzO2FuaW1hdGlvbi1maWxsLW1vZGU6XFwnYm90aFxcJzthbmltYXRpb246JywgZmFkZSwgJyAxLjJzICcsIGkgKiAwLjEyLCAncyBpbmZpbml0ZSBlYXNlLWluLW91dDt9Jyk7XG4gICAgICB9LCBfdGhpcy5yYWRpdXMgPSAyMCwgX3RoaXMucXVhcnRlciA9IF90aGlzLnJhZGl1cyAvIDIgKyBfdGhpcy5yYWRpdXMgLyA1LjUsIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWU7XG5cblxuICAgICAgICB2YXIgd3JhcHBlciA9ICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7Zm9udC1zaXplOjA7dG9wOicsIF90aGlzLnJhZGl1cywgJ3B4O2xlZnQ6JywgX3RoaXMucmFkaXVzLCAncHg7d2lkdGg6JywgX3RoaXMucmFkaXVzICogMywgJ3B4O2hlaWdodDonLCBfdGhpcy5yYWRpdXMgKiAzLCAncHg7fScpO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgPyAoMCwgX2Vtb3Rpb24uY3NzKSh3cmFwcGVyLCAnOycsIGNsYXNzTmFtZSkgOiB3cmFwcGVyO1xuICAgICAgfSwgX3RoaXMuYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKF90aGlzLnN0eWxlKDEpLCAnO3RvcDonLCBfdGhpcy5yYWRpdXMsICdweDtsZWZ0OjA7Jyk7XG4gICAgICB9LCBfdGhpcy5iID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoX3RoaXMuc3R5bGUoMiksICc7dG9wOicsIF90aGlzLnF1YXJ0ZXIsICdweDtsZWZ0OicsIF90aGlzLnF1YXJ0ZXIsICdweDt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7Jyk7XG4gICAgICB9LCBfdGhpcy5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoX3RoaXMuc3R5bGUoMyksICc7dG9wOjA7bGVmdDonLCBfdGhpcy5yYWRpdXMsICdweDt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKShfdGhpcy5zdHlsZSg0KSwgJzt0b3A6JywgLV90aGlzLnF1YXJ0ZXIsICdweDtsZWZ0OicsIF90aGlzLnF1YXJ0ZXIsICdweDt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKShfdGhpcy5zdHlsZSg1KSwgJzt0b3A6JywgLV90aGlzLnJhZGl1cywgJ3B4O2xlZnQ6MDsnKTtcbiAgICAgIH0sIF90aGlzLmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKShfdGhpcy5zdHlsZSg2KSwgJzt0b3A6JywgLV90aGlzLnF1YXJ0ZXIsICdweDtsZWZ0OicsIC1fdGhpcy5xdWFydGVyLCAncHg7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKF90aGlzLnN0eWxlKDcpLCAnO3RvcDowO2xlZnQ6JywgLV90aGlzLnJhZGl1cywgJ3B4O3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKF90aGlzLnN0eWxlKDgpLCAnO3RvcDonLCBfdGhpcy5xdWFydGVyLCAncHg7bGVmdDonLCAtX3RoaXMucXVhcnRlciwgJ3B4O3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcblxuXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmEoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYigpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5jKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmQoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuZSgpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5mKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmcoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuaCgpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGhlaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgcmFkaXVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBoZWlnaHRVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICB3aWR0aFVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHJhZGl1c1VuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBoZWlnaHQ6IDE1LFxuICAgIHdpZHRoOiA1LFxuICAgIG1hcmdpbjogJzJweCcsXG4gICAgcmFkaXVzOiAyLFxuICAgIHdpZHRoVW5pdDogJ3B4JyxcbiAgICBoZWlnaHRVbml0OiAncHgnLFxuICAgIHJhZGl1c1VuaXQ6ICdweCcsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX29ubHlVcGRhdGVGb3JLZXlzMi5kZWZhdWx0KShbJ2xvYWRpbmcnLCAnY29sb3InLCAnaGVpZ2h0JywgJ3dpZHRoJywgJ21hcmdpbicsICdyYWRpdXMnLCAnd2lkdGhVbml0JywgJ2hlaWdodFVuaXQnLCAncmFkaXVzVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLkdyaWRMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9vbmx5VXBkYXRlRm9yS2V5cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICB2YXIgX29ubHlVcGRhdGVGb3JLZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlVcGRhdGVGb3JLZXlzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGdyaWQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnNjYWxlKDEpfTUwJXt0cmFuc2Zvcm06c2NhbGUoMC41KTtvcGFjaXR5OjAuN30xMDAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9Jyk7XG5cbiAgdmFyIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbSh0b3ApIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIHRvcDtcbiAgfTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKHJhbmQpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzLnNpemVVbml0LFxuICAgICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMubWFyZ2luO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7ZGlzcGxheTppbmxpbmUtYmxvY2s7YmFja2dyb3VuZC1jb2xvcjonLCBjb2xvciwgJzt3aWR0aDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7bWFyZ2luOicsIG1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uLWZpbGwtbW9kZTpcXCdib3RoXFwnO2FuaW1hdGlvbjonLCBncmlkLCAnICcsIHJhbmQgLyAxMDAgKyAwLjYsICdzICcsIHJhbmQgLyAxMDAgLSAwLjIsICdzIGluZmluaXRlIGVhc2U7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMi5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wczIuc2l6ZVVuaXQsXG4gICAgICAgICAgICBtYXJnaW4gPSBfdGhpcyRwcm9wczIubWFyZ2luLFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZTtcblxuXG4gICAgICAgIHZhciB3cmFwcGVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDonLCAnJyArIChwYXJzZUZsb2F0KHNpemUpICogMyArIHBhcnNlRmxvYXQobWFyZ2luKSAqIDYpICsgc2l6ZVVuaXQsICc7Zm9udC1zaXplOjA7fScpO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgPyAoMCwgX2Vtb3Rpb24uY3NzKSh3cmFwcGVyLCAnOycsIGNsYXNzTmFtZSkgOiB3cmFwcGVyO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcblxuXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplVW5pdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIG1hcmdpbjogJzJweCcsXG4gICAgc2l6ZVVuaXQ6ICdweCcsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX29ubHlVcGRhdGVGb3JLZXlzMi5kZWZhdWx0KShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nLCAnc2l6ZVVuaXQnLCAnY2xhc3NOYW1lJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnLCAnLi9oZWxwZXJzL2luZGV4J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJyksIHJlcXVpcmUoJy4vaGVscGVycy9pbmRleCcpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cywgZ2xvYmFsLmluZGV4KTtcbiAgICBnbG9iYWwuSGFzaExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzLCBfaW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgdmFyIF9vbmx5VXBkYXRlRm9yS2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5VXBkYXRlRm9yS2V5cyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMudGhpY2tuZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2l6ZSA9IF90aGlzLnByb3BzLnNpemU7XG5cblxuICAgICAgICByZXR1cm4gc2l6ZSAvIDU7XG4gICAgICB9LCBfdGhpcy5sYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaXplID0gX3RoaXMucHJvcHMuc2l6ZTtcblxuXG4gICAgICAgIHJldHVybiAoc2l6ZSAtIF90aGlzLnRoaWNrbmVzcygpKSAvIDI7XG4gICAgICB9LCBfdGhpcy5vZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5sYXQoKSAtIF90aGlzLnRoaWNrbmVzcygpO1xuICAgICAgfSwgX3RoaXMuY29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb2xvciA9IF90aGlzLnByb3BzLmNvbG9yO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXguY2FsY3VsYXRlUmdiYSkoY29sb3IsIDAuNzUpO1xuICAgICAgfSwgX3RoaXMuYmVmb3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wcy5zaXplVW5pdDtcblxuXG4gICAgICAgIHZhciBjb2xvciA9IF90aGlzLmNvbG9yKCk7XG4gICAgICAgIHZhciBsYXQgPSBfdGhpcy5sYXQoKTtcbiAgICAgICAgdmFyIHRoaWNrbmVzcyA9IF90aGlzLnRoaWNrbmVzcygpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMub2Zmc2V0KCk7XG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt3aWR0aDonLCB0aGlja25lc3MsICdweDtib3gtc2hhZG93OicsIGxhdCwgJ3B4ICcsIC1vZmZzZXQsICdweCAnLCBjb2xvciwgJywnLCAtbGF0LCAncHggJywgb2Zmc2V0LCAncHggJywgY29sb3IsICd9MzUle3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2JveC1zaGFkb3c6MCAnLCAtb2Zmc2V0LCAncHggJywgY29sb3IsICcsMCAnLCBvZmZzZXQsICdweCAnLCBjb2xvciwgJ303MCV7d2lkdGg6JywgdGhpY2tuZXNzLCAncHg7Ym94LXNoYWRvdzonLCAtbGF0LCAncHggJywgLW9mZnNldCwgJ3B4ICcsIGNvbG9yLCAnLCcsIGxhdCwgJ3B4ICcsIG9mZnNldCwgJ3B4ICcsIGNvbG9yLCAnfTEwMCV7Ym94LXNoYWRvdzonLCBsYXQsICdweCAnLCAtb2Zmc2V0LCAncHggJywgY29sb3IsICcsJywgLWxhdCwgJ3B4ICcsIG9mZnNldCwgJ3B4ICcsIGNvbG9yLCAnfScpO1xuICAgICAgfSwgX3RoaXMuYWZ0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczIuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMyLnNpemVVbml0O1xuXG5cbiAgICAgICAgdmFyIGNvbG9yID0gX3RoaXMuY29sb3IoKTtcbiAgICAgICAgdmFyIGxhdCA9IF90aGlzLmxhdCgpO1xuICAgICAgICB2YXIgdGhpY2tuZXNzID0gX3RoaXMudGhpY2tuZXNzKCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSBfdGhpcy5vZmZzZXQoKTtcblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle2hlaWdodDonLCB0aGlja25lc3MsICdweDtib3gtc2hhZG93OicsIG9mZnNldCwgJ3B4ICcsIGxhdCwgJ3B4ICcsIGNvbG9yLCAnLCcsIC1vZmZzZXQsICdweCAnLCAtbGF0LCAncHggJywgY29sb3IsICd9MzUle2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztib3gtc2hhZG93OicsIG9mZnNldCwgJ3B4IDAgJywgY29sb3IsICcsJywgLW9mZnNldCwgJ3B4IDAgJywgY29sb3IsICd9NzAle2hlaWdodDonLCB0aGlja25lc3MsICdweDtib3gtc2hhZG93OicsIG9mZnNldCwgJ3B4ICcsIC1sYXQsICdweCAnLCBjb2xvciwgJywnLCAtb2Zmc2V0LCAncHggJywgbGF0LCAncHggJywgY29sb3IsICd9MTAwJXtib3gtc2hhZG93OicsIG9mZnNldCwgJ3B4ICcsIGxhdCwgJ3B4ICcsIGNvbG9yLCAnLCcsIC1vZmZzZXQsICdweCAnLCAtbGF0LCAncHggJywgY29sb3IsICd9Jyk7XG4gICAgICB9LCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMzLnNpemVVbml0O1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXCdcXCc7dG9wOjUwJTtsZWZ0OjUwJTtkaXNwbGF5OmJsb2NrO3dpZHRoOicsICcnICsgc2l6ZSAvIDUgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplIC8gNSArIHNpemVVbml0LCAnO2JvcmRlci1yYWRpdXM6JywgJycgKyBzaXplIC8gMTAgKyBzaXplVW5pdCwgJzt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7YW5pbWF0aW9uLWZpbGwtbW9kZTpub25lO2FuaW1hdGlvbjonLCBpID09PSAxID8gX3RoaXMuYmVmb3JlKCkgOiBfdGhpcy5hZnRlcigpLCAnIDJzIGluZmluaXRlO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczQuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHM0LnNpemVVbml0LFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZTtcblxuXG4gICAgICAgIHZhciB3cmFwcGVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7dHJhbnNmb3JtOnJvdGF0ZSgxNjVkZWcpO30nKTtcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lID8gKDAsIF9lbW90aW9uLmNzcykod3JhcHBlciwgJzsnLCBjbGFzc05hbWUpIDogd3JhcHBlcjtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZVVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgc2l6ZTogNTAsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplVW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ3NpemVVbml0JywgJ2NsYXNzTmFtZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLm9ubHlVcGRhdGVGb3JLZXlzKTtcbiAgICBnbG9iYWwuTW9vbkxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgbW9vbiA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcxMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm1vb25TaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2l6ZSA9IF90aGlzLnByb3BzLnNpemU7XG5cblxuICAgICAgICByZXR1cm4gc2l6ZSAvIDc7XG4gICAgICB9LCBfdGhpcy5iYWxsU3R5bGUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICAgICAgICB2YXIgc2l6ZVVuaXQgPSBfdGhpcy5wcm9wcy5zaXplVW5pdDtcblxuXG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztib3JkZXItcmFkaXVzOjEwMCU7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQ7XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCAnJyArIChzaXplICsgX3RoaXMubW9vblNpemUoKSAqIDIpICsgc2l6ZVVuaXQsICc7aGVpZ2h0OicsICcnICsgKHNpemUgKyBfdGhpcy5tb29uU2l6ZSgpICogMikgKyBzaXplVW5pdCwgJzthbmltYXRpb246JywgbW9vbiwgJyAwLjZzIDBzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO30nKTtcbiAgICAgIH0sIF90aGlzLmJhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMyLmNvbG9yLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMi5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wczIuc2l6ZVVuaXQ7XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoX3RoaXMuYmFsbFN0eWxlKF90aGlzLm1vb25TaXplKCkpLCAnO2JhY2tncm91bmQtY29sb3I6JywgY29sb3IsICc7b3BhY2l0eTowLjg7cG9zaXRpb246YWJzb2x1dGU7dG9wOicsICcnICsgKHNpemUgLyAyIC0gX3RoaXMubW9vblNpemUoKSAvIDIpICsgc2l6ZVVuaXQsICc7YW5pbWF0aW9uOicsIG1vb24sICcgMC42cyAwcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczsnKTtcbiAgICAgIH0sIF90aGlzLmNpcmNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMy5zaXplLFxuICAgICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wczMuY29sb3IsXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczMuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgdmFyIHdyYXBwZXIgPSAoMCwgX2Vtb3Rpb24uY3NzKShfdGhpcy5iYWxsU3R5bGUoc2l6ZSksICc7Ym9yZGVyOicsIF90aGlzLm1vb25TaXplKCksICdweCBzb2xpZCAnLCBjb2xvciwgJztvcGFjaXR5OjAuMTsnKTtcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lID8gKDAsIF9lbW90aW9uLmNzcykod3JhcHBlciwgJzsnLCBjbGFzc05hbWUpIDogd3JhcHBlcjtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmNpcmNsZSgpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHNpemVVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjAsXG4gICAgc2l6ZVVuaXQ6ICdweCcsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX29ubHlVcGRhdGVGb3JLZXlzMi5kZWZhdWx0KShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdzaXplVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLlBhY21hbkxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICAvLyBUaGlzIHJldHVybnMgYW4gYW5pbWF0aW9uXG4gIHZhciBwYWNtYW4gPSBbKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoLTQ0ZGVnKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoNDRkZWcpfScpXTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmJhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzLnNpemVVbml0O1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCc3NSV7b3BhY2l0eTowLjd9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKCcsICcnICsgLTQgKiBzaXplICsgc2l6ZVVuaXQsICcsJywgJycgKyAtc2l6ZSAvIDQgKyBzaXplVW5pdCwgJyl9Jyk7XG4gICAgICB9LCBfdGhpcy5iYWxsU3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzMi5jb2xvcixcbiAgICAgICAgICAgIG1hcmdpbiA9IF90aGlzJHByb3BzMi5tYXJnaW4sXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMyLnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzMi5zaXplVW5pdDtcblxuXG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOicsICcnICsgc2l6ZSAvIDMgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplIC8gMyArIHNpemVVbml0LCAnO2JhY2tncm91bmQtY29sb3I6JywgY29sb3IsICc7bWFyZ2luOicsIG1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLCcsICcnICsgLXNpemUgLyA0ICsgc2l6ZVVuaXQsICcpO3Bvc2l0aW9uOmFic29sdXRlO3RvcDonLCBzaXplLCAncHg7bGVmdDonLCAnJyArIHNpemUgKiA0ICsgc2l6ZVVuaXQsICc7YW5pbWF0aW9uOicsIF90aGlzLmJhbGwoKSwgJyAxcyAnLCBpICogMC4yNSwgJ3MgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGhpcy5zMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMy5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wczMuc2l6ZVVuaXQ7XG5cblxuICAgICAgICByZXR1cm4gJycgKyBzaXplICsgc2l6ZVVuaXQgKyAnIHNvbGlkIHRyYW5zcGFyZW50JztcbiAgICAgIH0sIF90aGlzLnMyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHM0LnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzNC5zaXplVW5pdCxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHM0LmNvbG9yO1xuXG5cbiAgICAgICAgcmV0dXJuICcnICsgc2l6ZSArIHNpemVVbml0ICsgJyBzb2xpZCAnICsgY29sb3I7XG4gICAgICB9LCBfdGhpcy5wYWNtYW5TdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczUuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHM1LnNpemVVbml0O1xuXG5cbiAgICAgICAgdmFyIHMxID0gX3RoaXMuczEoKTtcbiAgICAgICAgdmFyIHMyID0gX3RoaXMuczIoKTtcblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDowO2hlaWdodDowO2JvcmRlci1yaWdodDonLCBzMSwgJztib3JkZXItdG9wOicsIGkgPT09IDAgPyBzMSA6IHMyLCAnO2JvcmRlci1sZWZ0OicsIHMyLCAnO2JvcmRlci1ib3R0b206JywgaSA9PT0gMCA/IHMyIDogczEsICc7Ym9yZGVyLXJhZGl1czonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztwb3NpdGlvbjphYnNvbHV0ZTthbmltYXRpb246JywgcGFjbWFuW2ldLCAnIDAuOHMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczYuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHM2LnNpemVVbml0LFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM2LmNsYXNzTmFtZTtcblxuXG4gICAgICAgIHZhciB3cmFwcGVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MDtoZWlnaHQ6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7d2lkdGg6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7fScpO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUgPyAoMCwgX2Vtb3Rpb24uY3NzKSh3cmFwcGVyLCAnOycsIGNsYXNzTmFtZSkgOiB3cmFwcGVyO1xuICAgICAgfSwgX3RoaXMucGFjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucGFjbWFuU3R5bGUoMCk7XG4gICAgICB9LCBfdGhpcy5tYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wYWNtYW5TdHlsZSgxKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5wYWMoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMubWFuKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmJhbGxTdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYmFsbFN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsU3R5bGUoNCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmJhbGxTdHlsZSg1KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemVVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMjUsXG4gICAgbWFyZ2luOiAnMnB4JyxcbiAgICBzaXplVW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbicsICdzaXplVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLlByb3BhZ2F0ZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICAvLyAxLjUgNC41IDcuNVxuICB2YXIgZGlzdGFuY2UgPSBbMSwgMywgNV07XG5cbiAgdmFyIHByb3BhZ2F0ZSA9IFsoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzJdLCAncmVtKSBzY2FsZSgwLjUpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyksICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyksICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVsyXSwgJ3JlbSkgc2NhbGUoMC41KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyldO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wcy5zaXplVW5pdCxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3I7XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtmb250LXNpemU6JywgJycgKyBzaXplIC8gMyArIHNpemVVbml0LCAnO3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztiYWNrZ3JvdW5kOicsIGNvbG9yLCAnO2JvcmRlci1yYWRpdXM6NTAlO2FuaW1hdGlvbjonLCBwcm9wYWdhdGVbaV0sICcgMS41cyAgaW5maW5pdGU7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gX3RoaXMucHJvcHMuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgdmFyIHdyYXBwZXIgPSAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO30nKTtcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lID8gKDAsIF9lbW90aW9uLmNzcykod3JhcHBlciwgJzsnLCBjbGFzc05hbWUpIDogd3JhcHBlcjtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgwKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDUpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemVVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIHNpemU6IDE1LFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZVVuaXQ6ICdweCcsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX29ubHlVcGRhdGVGb3JLZXlzMi5kZWZhdWx0KShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdzaXplVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLlB1bHNlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfb25seVVwZGF0ZUZvcktleXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgdmFyIF9vbmx5VXBkYXRlRm9yS2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5VXBkYXRlRm9yS2V5cyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIFRoaXMgcmV0dXJucyBhbiBhbmltYXRpb25cbiAgdmFyIHB1bHNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9NDUle3RyYW5zZm9ybTpzY2FsZSgwLjEpO29wYWNpdHk6MC43fTgwJXt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQsXG4gICAgICAgICAgICBtYXJnaW4gPSBfdGhpcyRwcm9wcy5tYXJnaW47XG5cblxuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kLWNvbG9yOicsIGNvbG9yLCAnO3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJzttYXJnaW46JywgbWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTtkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246JywgcHVsc2UsICcgMC43NXMgJywgaSAqIDAuMTIsICdzIGluZmluaXRlIGN1YmljLWJlemllciguMiwuNjgsLjE4LDEuMDgpO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gX3RoaXMucHJvcHMuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSB8fCAnJztcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZVVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNSxcbiAgICBtYXJnaW46ICcycHgnLFxuICAgIHNpemVVbml0OiAncHgnLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9vbmx5VXBkYXRlRm9yS2V5czIuZGVmYXVsdCkoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJywgJ3NpemVVbml0JywgJ2NsYXNzTmFtZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlL29ubHlVcGRhdGVGb3JLZXlzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLm9ubHlVcGRhdGVGb3JLZXlzKTtcbiAgICBnbG9iYWwuUmluZ0xvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgcmlnaHQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMTgwZGVnKSByb3RhdGVZKDM2MGRlZykgcm90YXRlWigzNjBkZWcpfScpO1xuXG4gIHZhciBsZWZ0ID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGVYKDBkZWcpIHJvdGF0ZVkoMGRlZykgcm90YXRlWigwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGVYKDM2MGRlZykgcm90YXRlWSgxODBkZWcpIHJvdGF0ZVooMzYwZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgIHNpemVVbml0ID0gX3RoaXMkcHJvcHMuc2l6ZVVuaXQsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztib3JkZXI6JywgJycgKyBzaXplIC8gMTAgKyBzaXplVW5pdCwgJyBzb2xpZCAnLCBjb2xvciwgJztvcGFjaXR5OjAuNDtib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkcztwZXJzcGVjdGl2ZTo4MDBweDthbmltYXRpb246JywgaSA9PT0gMSA/IHJpZ2h0IDogbGVmdCwgJyAycyAwcyBpbmZpbml0ZSBsaW5lYXI7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMi5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wczIuc2l6ZVVuaXQsXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgdmFyIHdyYXBwZXIgPSAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO2hlaWdodDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztwb3NpdGlvbjpyZWxhdGl2ZTt9Jyk7XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSA/ICgwLCBfZW1vdGlvbi5jc3MpKHdyYXBwZXIsICc7JywgY2xhc3NOYW1lKSA6IHdyYXBwZXI7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBsb2FkaW5nID0gdGhpcy5wcm9wcy5sb2FkaW5nO1xuXG5cbiAgICAgICAgcmV0dXJuIGxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHNpemVVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjAsXG4gICAgc2l6ZVVuaXQ6ICdweCcsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX29ubHlVcGRhdGVGb3JLZXlzMi5kZWZhdWx0KShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdzaXplVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLlJpc2VMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9vbmx5VXBkYXRlRm9yS2V5cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICB2YXIgX29ubHlVcGRhdGVGb3JLZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ubHlVcGRhdGVGb3JLZXlzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHJpc2VBbW91bnQgPSAzMDtcblxuICB2YXIgZXZlbiA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGUoMS4xKX0yNSV7dHJhbnNsYXRlWSgtJywgcmlzZUFtb3VudCwgJ3B4KX01MCV7dHJhbnNmb3JtOnNjYWxlKDAuNCl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVZKCcsIHJpc2VBbW91bnQsICdweCl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKSBzY2FsZSgxLjApfScpO1xuXG4gIHZhciBvZGQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnNjYWxlKDAuNCl9MjUle3RyYW5zbGF0ZVkoJywgcmlzZUFtb3VudCwgJ3B4KX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMSl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVZKCcsIC1yaXNlQW1vdW50LCAncHgpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgc2NhbGUoMC43NSl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wcy5jb2xvcixcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wcy5zaXplVW5pdCxcbiAgICAgICAgICAgIG1hcmdpbiA9IF90aGlzJHByb3BzLm1hcmdpbjtcblxuXG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2JhY2tncm91bmQtY29sb3I6JywgY29sb3IsICc7d2lkdGg6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7aGVpZ2h0OicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO21hcmdpbjonLCAnJyArIG1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIGkgJSAyID09PSAwID8gZXZlbiA6IG9kZCwgJyAxcyAwcyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjE1LC40NiwuOSwuNik7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWU7XG5cblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lIHx8ICcnO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcblxuXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDQpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg1KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemVVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4JyxcbiAgICBzaXplVW5pdDogJ3B4JyxcbiAgICBjbGFzc05hbWU6ICcnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfb25seVVwZGF0ZUZvcktleXMyLmRlZmF1bHQpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbicsICdzaXplVW5pdCcsICdjbGFzc05hbWUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZS9vbmx5VXBkYXRlRm9yS2V5cycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5vbmx5VXBkYXRlRm9yS2V5cyk7XG4gICAgZ2xvYmFsLlJvdGF0ZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgcm90YXRlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7b3BhY2l0eTowLjg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDonLCBpICUgMiA/IC0yOCA6IDI1LCAncHg7fScpO1xuICAgICAgfSwgX3RoaXMuYmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgICBzaXplVW5pdCA9IF90aGlzJHByb3BzLnNpemVVbml0LFxuICAgICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMubWFyZ2luO1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBjb2xvciwgJzt3aWR0aDonLCAnJyArIHNpemUgKyBzaXplVW5pdCwgJztoZWlnaHQ6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7bWFyZ2luOicsIG1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IF90aGlzLnByb3BzLmNsYXNzTmFtZTtcblxuXG4gICAgICAgIHZhciB3cmFwcGVyID0gKDAsIF9lbW90aW9uLmNzcykoX3RoaXMuYmFsbCgpLCAnO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246Jywgcm90YXRlLCAnIDFzIDBzIGluZmluaXRlIGN1YmljLWJlemllciguNywtLjEzLC4yMiwuODYpOycpO1xuICAgICAgICByZXR1cm4gY2xhc3NOYW1lID8gKDAsIF9lbW90aW9uLmNzcykod3JhcHBlciwgJzsnLCBjbGFzc05hbWUpIDogd3JhcHBlcjtcbiAgICAgIH0sIF90aGlzLmxvbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKShfdGhpcy5iYWxsKCksICc7JywgX3RoaXMuc3R5bGUoMSksICc7Jyk7XG4gICAgICB9LCBfdGhpcy5zaG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKF90aGlzLmJhbGwoKSwgJzsnLCBfdGhpcy5zdHlsZSgyKSwgJzsnKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5sb25nKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnNob3J0KCkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplVW5pdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIG1hcmdpbjogJzJweCcsXG4gICAgc2l6ZVVuaXQ6ICdweCcsXG4gICAgY2xhc3NOYW1lOiAnJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX29ubHlVcGRhdGVGb3JLZXlzMi5kZWZhdWx0KShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nLCAnY2xhc3NOYW1lJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwub25seVVwZGF0ZUZvcktleXMpO1xuICAgIGdsb2JhbC5TY2FsZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX29ubHlVcGRhdGVGb3JLZXlzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIHZhciBfb25seVVwZGF0ZUZvcktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb25seVVwZGF0ZUZvcktleXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgc2NhbGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnNjYWxleSgxLjApfTUwJXt0cmFuc2Zvcm06c2NhbGV5KDAuNCl9MTAwJXt0cmFuc2Zvcm06c2NhbGV5KDEuMCl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wcy5jb2xvcixcbiAgICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wcy5oZWlnaHQsXG4gICAgICAgICAgICBtYXJnaW4gPSBfdGhpcyRwcm9wcy5tYXJnaW4sXG4gICAgICAgICAgICByYWRpdXMgPSBfdGhpcyRwcm9wcy5yYWRpdXMsXG4gICAgICAgICAgICB3aWR0aFVuaXQgPSBfdGhpcyRwcm9wcy53aWR0aFVuaXQsXG4gICAgICAgICAgICBoZWlnaHRVbml0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0VW5pdCxcbiAgICAgICAgICAgIHJhZGl1c1VuaXQgPSBfdGhpcyRwcm9wcy5yYWRpdXNVbml0O1xuXG5cbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBjb2xvciwgJzt3aWR0aDonLCAnJyArIHdpZHRoICsgd2lkdGhVbml0LCAnO2hlaWdodDonLCAnJyArIGhlaWdodCArIGhlaWdodFVuaXQsICc7bWFyZ2luOicsIG1hcmdpbiwgJztib3JkZXItcmFkaXVzOicsICcnICsgcmFkaXVzICsgcmFkaXVzVW5pdCwgJztkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246Jywgc2NhbGUsICcgMXMgJywgaSAqIDAuMSwgJ3MgaW5maW5pdGUgY3ViaWMtYmV6aWVyKC4yLC42OCwuMTgsMS4wOCk7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWU7XG5cblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lIHx8ICcnO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgbG9hZGluZyA9IHRoaXMucHJvcHMubG9hZGluZztcblxuXG4gICAgICAgIHJldHVybiBsb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDQpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg1KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHJhZGl1czogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgaGVpZ2h0VW5pdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgd2lkdGhVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICByYWRpdXNVbml0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgaGVpZ2h0OiAzNSxcbiAgICB3aWR0aDogNCxcbiAgICBtYXJnaW46ICcycHgnLFxuICAgIHJhZGl1czogMixcbiAgICBoZWlnaHRVbml0OiAncHgnLFxuICAgIHdpZHRoVW5pdDogJ3B4JyxcbiAgICByYWRpdXNVbml0OiAncHgnLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9vbmx5VXBkYXRlRm9yS2V5czIuZGVmYXVsdCkoWydsb2FkaW5nJywgJ2NvbG9yJywgJ2hlaWdodCcsICd3aWR0aCcsICdtYXJnaW4nLCAncmFkaXVzJywgJ2hlaWdodFVuaXQnLCAnd2lkdGhVbml0JywgJ3JhZGl1c1VuaXQnLCAnY2xhc3NOYW1lJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2Uvb25seVVwZGF0ZUZvcktleXMnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwub25seVVwZGF0ZUZvcktleXMpO1xuICAgIGdsb2JhbC5TeW5jTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfb25seVVwZGF0ZUZvcktleXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgdmFyIF9vbmx5VXBkYXRlRm9yS2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbmx5VXBkYXRlRm9yS2V5cyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBzeW5jID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzMzJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX02NiV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wcy5jb2xvcixcbiAgICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICAgICAgc2l6ZVVuaXQgPSBfdGhpcyRwcm9wcy5zaXplVW5pdCxcbiAgICAgICAgICAgIG1hcmdpbiA9IF90aGlzJHByb3BzLm1hcmdpbjtcblxuXG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2JhY2tncm91bmQtY29sb3I6JywgY29sb3IsICc7d2lkdGg6JywgJycgKyBzaXplICsgc2l6ZVVuaXQsICc7aGVpZ2h0OicsICcnICsgc2l6ZSArIHNpemVVbml0LCAnO21hcmdpbjonLCBtYXJnaW4sICc7Ym9yZGVyLXJhZGl1czoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2FuaW1hdGlvbjonLCBzeW5jLCAnIDAuNnMgJywgaSAqIDAuMDcsICdzIGluZmluaXRlIGVhc2UtaW4tb3V0O2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gX3RoaXMucHJvcHMuY2xhc3NOYW1lO1xuXG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSB8fCAnJztcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLnByb3BzLmxvYWRpbmc7XG5cblxuICAgICAgICByZXR1cm4gbG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZVVuaXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNSxcbiAgICBtYXJnaW46ICcycHgnLFxuICAgIHNpemVVbml0OiAncHgnLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9vbmx5VXBkYXRlRm9yS2V5czIuZGVmYXVsdCkoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJywgJ3NpemVVbml0JywgJ2NsYXNzTmFtZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCB7d2l0aEF1dGhlbnRpY2F0aW9ufSBmcm9tICdyZWFjdC9jb250ZXh0cy9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgTG9naW5Db21wb25lbnQgZnJvbSAnLi9sb2dpbl9jb21wb25lbnQnO1xuXG5cbmNsYXNzIExvZ2luQ29udGFpbmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZW1haWw6IFwiXCIsXG4gICAgICAgICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmF1dGhlbnRpY2F0ZSA9IHRoaXMuYXV0aGVudGljYXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25GaWVsZENoYW5nZSA9IHRoaXMub25GaWVsZENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIG9uRmllbGRDaGFuZ2UoZXZlbnQpe1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIFtldmVudC50YXJnZXQubmFtZV06IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBhdXRoZW50aWNhdGUoZSl7XG4gICAgICAgIGNvbnN0IHsgbG9naW4gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxvZ2luKHtlbWFpbCwgcGFzc3dvcmR9KTtcbiAgICB9XG5cblxuICAgIHJlbmRlcigpe1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgand0LFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRlZCA9ICEhand0O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICB7IGF1dGhlbnRpY2F0ZWQgJiYgPFJlZGlyZWN0IHRvPVwiL21lc3NhZ2VzXCIgLz59XG4gICAgICAgICAgICB7ICFhdXRoZW50aWNhdGVkICYmXG4gICAgICAgICAgICAgICAgPExvZ2luQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsPXtlbWFpbH1cbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU9e3RoaXMuYXV0aGVudGljYXRlfVxuICAgICAgICAgICAgICAgICAgICBvbkZpZWxkQ2hhbmdlPXt0aGlzLm9uRmllbGRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIClcbiAgICB9XG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCB3aXRoQXV0aGVudGljYXRpb24oTG9naW5Db250YWluZXIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBcbiAgICBDb250YWluZXIsIFxuICAgIFJvdywgXG4gICAgQ29sLCBcbiAgICBGb3JtLCBcbiAgICBCdXR0b24sIFxufSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuXG5cbmNvbnN0IExvZ2luQ29tcG9uZW50ID0gKHtcbiAgICBlbWFpbCxcbiAgICBwYXNzd29yZCxcblxuICAgIGF1dGhlbnRpY2F0ZSxcbiAgICBvbkZpZWxkQ2hhbmdlLFxufSkgPT4ge1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8Q29sIHhzPXt7c3BhbjogOCwgb2Zmc2V0OiAyfX0gc3R5bGU9e3ttYXJnaW5Ub3A6IFwiMjAwcHhcIn19PlxuICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXthdXRoZW50aWNhdGV9PlxuICAgICAgICAgICAgPEZvcm0uR3JvdXAgYXM9e1Jvd30gY29udHJvbElkPVwiZm9ybUhvcml6b250YWxFbWFpbFwiPlxuICAgICAgICAgICAgICAgIDxGb3JtLkxhYmVsIGNvbHVtbiBzbT17Mn0+XG4gICAgICAgICAgICAgICAgRW1haWxcbiAgICAgICAgICAgICAgICA8L0Zvcm0uTGFiZWw+XG4gICAgICAgICAgICAgICAgPENvbCBzbT17MTB9PlxuICAgICAgICAgICAgICAgIDxGb3JtLkNvbnRyb2wgbmFtZT1cImVtYWlsXCIgdHlwZT1cImVtYWlsXCIgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIHZhbHVlPXtlbWFpbH0gb25DaGFuZ2U9e29uRmllbGRDaGFuZ2V9Lz5cbiAgICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cblxuICAgICAgICAgICAgPEZvcm0uR3JvdXAgYXM9e1Jvd30gY29udHJvbElkPVwiZm9ybUhvcml6b250YWxQYXNzd29yZFwiPlxuICAgICAgICAgICAgICAgIDxGb3JtLkxhYmVsIGNvbHVtbiBzbT17Mn0+XG4gICAgICAgICAgICAgICAgUGFzc3dvcmRcbiAgICAgICAgICAgICAgICA8L0Zvcm0uTGFiZWw+XG4gICAgICAgICAgICAgICAgPENvbCBzbT17MTB9PlxuICAgICAgICAgICAgICAgIDxGb3JtLkNvbnRyb2wgbmFtZT1cInBhc3N3b3JkXCIgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiIHZhbHVlPXtwYXNzd29yZH0gb25DaGFuZ2U9e29uRmllbGRDaGFuZ2V9Lz5cbiAgICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cblxuICAgICAgICAgICAgPEZvcm0uR3JvdXAgYXM9e1Jvd30+XG4gICAgICAgICAgICAgICAgPENvbCBzbT17eyBzcGFuOiAxMCwgb2Zmc2V0OiAyIH19PlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiPlNpZ24gaW48L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgICA8L0NvbD5cbiAgICAgICAgPC9Sb3c+XG4gICAgICA8L0NvbnRhaW5lcj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW5Db21wb25lbnQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IHsgTmF2YmFyLCBOYXYsIEJ1dHRvbiB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcclxuaW1wb3J0IHsgd2l0aEF1dGhlbnRpY2F0aW9uIH0gZnJvbSBcInJlYWN0L2NvbnRleHRzL2F1dGhlbnRpY2F0aW9uXCI7XHJcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gXCJyZWFjdC9jb250ZXh0cy90aGVtZVwiO1xyXG5cclxuY29uc3QgTmF2aWdhdGlvbiA9ICh7IGp3dCwgdGhlbWUsIHRvZ2dsZVRoZW1lIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPE5hdmJhciBiZz17dGhlbWV9IHZhcmlhbnQ9e3RoZW1lfSBmaXhlZD1cImJvdHRvbVwiPlxyXG4gICAgICA8TmF2IGNsYXNzTmFtZT1cIm1yLWF1dG9cIj5cclxuICAgICAgICA8TmF2YmFyLkJyYW5kPkN1cnJlbnQgSldUIDoge2p3dH0gPC9OYXZiYXIuQnJhbmQ+XHJcbiAgICAgIDwvTmF2PlxyXG4gICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJvdXRsaW5lLWluZm9cIiBpZD1cImJ1dHRvblRoZW1lXCIgb25DbGljaz17dG9nZ2xlVGhlbWV9PlxyXG4gICAgICAgIENoYW5nZSBUaGVtZVxyXG4gICAgICA8L0J1dHRvbj5cclxuICAgIDwvTmF2YmFyPlxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCBOYXZpZ2F0aW9uV2l0aEF1dGhlbnRpY2F0aW9uID0gd2l0aEF1dGhlbnRpY2F0aW9uKE5hdmlnYXRpb24pO1xyXG5jb25zdCBOYXZpZ2F0aW9uV2l0aEF1dGhlbnRpY2F0aW9uQW5kVGhlbWUgPSB3aXRoVGhlbWUoXHJcbiAgTmF2aWdhdGlvbldpdGhBdXRoZW50aWNhdGlvblxyXG4pO1xyXG5leHBvcnQgZGVmYXVsdCBOYXZpZ2F0aW9uV2l0aEF1dGhlbnRpY2F0aW9uQW5kVGhlbWU7XHJcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9vdHN0cmFwLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9vdHN0cmFwLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib290c3RyYXAuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHBsaWNhdGlvbi5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcGxpY2F0aW9uLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcGxpY2F0aW9uLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9